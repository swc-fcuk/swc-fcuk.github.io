/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 86);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(7);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMProperty = __webpack_require__(19);
var ReactDOMComponentFlags = __webpack_require__(60);

var invariant = __webpack_require__(1);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = __webpack_require__(135);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(15);

var ReactCurrentOwner = __webpack_require__(12);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty)
  // Strip regex characters so we can use it for regex
  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  // Remove hasOwnProperty from the template to make it generic
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

module.exports = ReactComponentTreeHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(58);
var PooledClass = __webpack_require__(13);
var ReactFeatureFlags = __webpack_require__(140);
var ReactReconciler = __webpack_require__(22);
var Transaction = __webpack_require__(26);

var invariant = __webpack_require__(1);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(13);

var emptyFunction = __webpack_require__(7);
var warning = __webpack_require__(2);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      // eslint-disable-line valid-typeof
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // eslint-disable-line valid-typeof
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }

});

SyntheticEvent.Interface = EventInterface;

if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(12);

var warning = __webpack_require__(2);
var canDefineProperty = __webpack_require__(50);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(78);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = React;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = __webpack_require__(31);
var setInnerHTML = __webpack_require__(45);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(40);
var setTextContent = __webpack_require__(75);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var EventPluginRegistry = __webpack_require__(32);
var EventPluginUtils = __webpack_require__(33);
var ReactErrorUtils = __webpack_require__(38);

var accumulateInto = __webpack_require__(70);
var forEachAccumulated = __webpack_require__(71);
var invariant = __webpack_require__(1);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(20);
var EventPluginUtils = __webpack_require__(33);

var accumulateInto = __webpack_require__(70);
var forEachAccumulated = __webpack_require__(71);
var warning = __webpack_require__(2);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactRef = __webpack_require__(150);
var ReactInstrumentation = __webpack_require__(8);

var warning = __webpack_require__(2);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
  ) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }

};

module.exports = ReactReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

var getEventTarget = __webpack_require__(43);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactChildren = __webpack_require__(181);
var ReactComponent = __webpack_require__(47);
var ReactPureComponent = __webpack_require__(185);
var ReactClass = __webpack_require__(182);
var ReactDOMFactories = __webpack_require__(183);
var ReactElement = __webpack_require__(14);
var ReactPropTypes = __webpack_require__(184);
var ReactVersion = __webpack_require__(186);

var onlyChild = __webpack_require__(188);
var warning = __webpack_require__(2);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(79);
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (process.env.NODE_ENV !== 'production') {
  var warned = false;
  __spread = function () {
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,
  PureComponent: ReactPureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

module.exports = React;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(23);
var ViewportMetrics = __webpack_require__(69);

var getEventModifierState = __webpack_require__(42);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html


/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = WinJS;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMLazyTree = __webpack_require__(18);
var Danger = __webpack_require__(116);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(8);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(40);
var setInnerHTML = __webpack_require__(45);
var setTextContent = __webpack_require__(75);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: { toIndex: update.toIndex, content: update.content.toString() }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }

};

module.exports = EventPluginRegistry;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactErrorUtils = __webpack_require__(38);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(24);
var ReactPropTypesSecret = __webpack_require__(66);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: React.PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventPluginRegistry = __webpack_require__(32);
var ReactEventEmitterMixin = __webpack_require__(138);
var ViewportMetrics = __webpack_require__(69);

var getVendorPrefixedEventName = __webpack_require__(176);
var isEventSupported = __webpack_require__(44);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }

});

module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      // $FlowFixMe https://github.com/facebook/flow/issues/2336
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */



/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var DOMNamespaces = __webpack_require__(31);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = __webpack_require__(40);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var emptyFunction = __webpack_require__(7);
var warning = __webpack_require__(2);

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(15);

var ReactNoopUpdateQueue = __webpack_require__(48);

var canDefineProperty = __webpack_require__(50);
var emptyObject = __webpack_require__(17);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

﻿var React = __webpack_require__(16);
var ReactDOM = __webpack_require__(53);
var ReactDOMServer = __webpack_require__(178);
var WinJS = __webpack_require__(28);

//
// Implementation Overview
//
// react-winjs is organized around the concept of prop handlers. A prop handler describes
// how a react-winjs prop affects the underlying WinJS control. Prop handlers come from 3 sources:
//   1. Handwritten common to all controls. These are defined in a variable called
//      *defaultPropHandlers*. These are prop handlers which appear on every react-winjs component.
//   2. WinJS's d.ts file. Most of the prop handlers for each react-winjs component are
//      automatically generated from WinJS's d.ts file. Information from the d.ts file is stored in
//      a variable called *RawControlApis*. *RawControlApis* is generated by running the d.ts file
//      through this tool: https://github.com/winjs/winjs-control-apis
//   3. Handwritten control-specific. These are defined in a variable called *ControlApis*. When
//      a react-winjs component has a prop that needs to be defined manually, this is where it
//      should be defined. There are a number of types of builtin prop handlers defined in the
//      *PropHandlers* variable which can be used here.
//
// When react-winjs builds the list of prop handlers for a component, it gathers them from the above
// list of sources. If multiple sources define a prop handler with the same name, the one from the
// source which appears closest to the bottom of the list above wins.
//
// There's a particular category of WinJS controls that host content that proved to be particularly
// challenging to wrap as React components. More specifically, the controls in this category:
//   - host content
//   - move the hosted content around in the DOM
//   - store the hosted content in a Binding.List
//
// Controls that fall into this category of hosting content include:
//   - AppBar/ToolBar
//   - Hub
//   - Pivot
//
// And the controls that get hosted include (these are the ones that end up being created
// through WinJSChildComponent, described below):
//   - AppBarCommand
//   - HubSection
//   - PivotItem
//
// What made this challenging to solve is that there are some features that aren't achievable in
// a straight forward way through the React APIs. To solve this, you want to be able to:
//   - Render a React component *onto* an existing element. ReactDOM.render can only render *into* an
//     existing element. For example, when creating a HubSection you want to be able to control
//     attributes of the win-hub-section element such as its *class* and *style*. With ReactDOM.render,
//     you'd only be able to render into the win-hub-section element so the React component wouldn't
//     be able to control any attributes of the win-hub-section element.
//   - Hold onto a rendered component and inspect its *type* and *key* prop later. This information
//     comes in handy when diffing an array of components from a previous render pass with an array
//     of components for the current render pass. The diff information is used to mutate a
//     Binding.List to get it into the desired state.
//
// The WinJSChildComponent class provides a convenient API for solving both of these problems. When the
// constructor receives a component, it creates the element (e.g. win-hub-section) that the component
// is rendered *onto*. The owning control (e.g. WinJS.UI.Hub) is free to manage that element and move
// it around the DOM. WinJSChildComponent provides the following APIs:
//   - update: Updates the element based on the component description that is passed in.
//   - dispose: Disposes the react-winjs component and its associated WinJS control.
//   - key: Returns the React key associated with the component.
//   - type: Returns the React type associated with the component.
//

// Generated from https://github.com/winjs/winjs-control-apis
var RawControlApis = {
    AppBar: {
        closedDisplayMode: {
            type: "enum",
            values: [
                "compact",
                "full",
                "minimal",
                "none"
            ]
        },
        data: {
            name: "WinJS.Binding.List",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.ICommand",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onAfterClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        opened: {
            type: "boolean"
        },
        placement: {
            type: "enum",
            values: [
                "bottom",
                "top"
            ]
        }
    },
    AppBarCommand: {
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        extraClass: {
            type: "string"
        },
        firstElementFocus: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        flyout: {
            name: "WinJS.UI.Flyout",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        icon: {
            type: "string"
        },
        id: {
            type: "string"
        },
        label: {
            type: "string"
        },
        lastElementFocus: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onClick: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        priority: {
            type: "number"
        },
        section: {
            type: "string"
        },
        selected: {
            type: "boolean"
        },
        tooltip: {
            type: "string"
        },
        type: {
            type: "string"
        }
    },
    AutoSuggestBox: {
        chooseSuggestionOnEnter: {
            type: "boolean"
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onQueryChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onQuerySubmitted: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onResultSuggestionChosen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSuggestionsRequested: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        placeholderText: {
            type: "string"
        },
        queryText: {
            type: "string"
        },
        searchHistoryContext: {
            type: "string"
        },
        searchHistoryDisabled: {
            type: "boolean"
        }
    },
    BackButton: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        }
    },
    CellSpanningLayout: {
        groupHeaderPosition: {
            type: "enum",
            values: [
                "left",
                "top"
            ]
        },
        groupInfo: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        itemInfo: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        maximumRowsOrColumns: {
            type: "number"
        },
        numberOfItemsPerItemsBlock: {
            type: "any"
        },
        orientation: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        }
    },
    Command: {
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        extraClass: {
            type: "string"
        },
        firstElementFocus: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        flyout: {
            name: "WinJS.UI.Flyout",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        icon: {
            type: "string"
        },
        id: {
            type: "string"
        },
        label: {
            type: "string"
        },
        lastElementFocus: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onClick: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        priority: {
            type: "number"
        },
        section: {
            type: "string"
        },
        selected: {
            type: "boolean"
        },
        tooltip: {
            type: "string"
        },
        type: {
            type: "string"
        }
    },
    ContentDialog: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        onAfterHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        primaryCommandDisabled: {
            type: "boolean"
        },
        primaryCommandText: {
            type: "string"
        },
        secondaryCommandDisabled: {
            type: "boolean"
        },
        secondaryCommandText: {
            type: "string"
        },
        title: {
            type: "string"
        }
    },
    DatePicker: {
        calendar: {
            type: "string"
        },
        current: {
            name: "Date",
            type: "reference",
            typeArguments: []
        },
        datePattern: {
            type: "string"
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        maxYear: {
            type: "number"
        },
        minYear: {
            type: "number"
        },
        monthPattern: {
            type: "string"
        },
        onChange: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        yearPattern: {
            type: "string"
        }
    },
    FlipView: {
        currentPage: {
            type: "number"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        itemDataSource: {
            name: "WinJS.UI.IListDataSource",
            type: "reference",
            typeArguments: [
                {
                    name: "T",
                    type: "type-param"
                }
            ]
        },
        itemSpacing: {
            type: "number"
        },
        itemTemplate: {
            type: "any"
        },
        onDataSourceCountChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onPageCompleted: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onPageSelected: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onPageVisibilityChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        orientation: {
            type: "string"
        }
    },
    Flyout: {
        alignment: {
            type: "string"
        },
        anchor: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        onAfterHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        placement: {
            type: "string"
        }
    },
    GridLayout: {
        backdropColor: {
            type: "string"
        },
        disableBackdrop: {
            type: "boolean"
        },
        groupHeaderPosition: {
            type: "enum",
            values: [
                "left",
                "top"
            ]
        },
        groupInfo: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        itemInfo: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        maxRows: {
            type: "number"
        },
        maximumRowsOrColumns: {
            type: "number"
        },
        numberOfItemsPerItemsBlock: {
            type: "any"
        },
        orientation: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        }
    },
    Hub: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        headerTemplate: {
            type: "any"
        },
        indexOfFirstVisible: {
            type: "number"
        },
        indexOfLastVisible: {
            type: "number"
        },
        loadingState: {
            type: "enum",
            values: [
                "complete",
                "loading"
            ]
        },
        onContentAnimating: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onHeaderInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onLoadingStateChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        orientation: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        },
        scrollPosition: {
            type: "number"
        },
        sectionOnScreen: {
            type: "number"
        },
        sections: {
            name: "WinJS.Binding.List",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.HubSection",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        zoomableView: {
            name: "WinJS.UI.IZoomableView",
            type: "reference",
            typeArguments: [
                {
                    type: "any"
                }
            ]
        }
    },
    HubSection: {
        contentElement: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        header: {
            type: "string"
        },
        isHeaderStatic: {
            type: "boolean"
        }
    },
    ItemContainer: {
        draggable: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSelectionChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSelectionChanging: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        selected: {
            type: "boolean"
        },
        selectionDisabled: {
            type: "boolean"
        },
        swipeBehavior: {
            type: "enum",
            values: [
                "none",
                "select"
            ]
        },
        swipeOrientation: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        },
        tapBehavior: {
            type: "enum",
            values: [
                "directSelect",
                "invokeOnly",
                "none",
                "toggleSelect"
            ]
        }
    },
    ListLayout: {
        backdropColor: {
            type: "string"
        },
        disableBackdrop: {
            type: "boolean"
        },
        groupHeaderPosition: {
            type: "enum",
            values: [
                "left",
                "top"
            ]
        },
        numberOfItemsPerItemsBlock: {
            type: "any"
        },
        orientation: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        }
    },
    ListView: {
        automaticallyLoadPages: {
            type: "boolean"
        },
        currentItem: {
            name: "WinJS.UI.IListViewItem",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        footer: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        groupDataSource: {
            name: "WinJS.UI.IListDataSource",
            type: "reference",
            typeArguments: [
                {
                    name: "T",
                    type: "type-param"
                }
            ]
        },
        groupHeaderTapBehavior: {
            type: "enum",
            values: [
                "invoke",
                "none"
            ]
        },
        groupHeaderTemplate: {
            type: "any"
        },
        header: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        indexOfFirstVisible: {
            type: "number"
        },
        indexOfLastVisible: {
            type: "number"
        },
        itemDataSource: {
            name: "WinJS.UI.IListDataSource",
            type: "reference",
            typeArguments: [
                {
                    name: "T",
                    type: "type-param"
                }
            ]
        },
        itemTemplate: {
            type: "any"
        },
        itemsDraggable: {
            type: "boolean"
        },
        itemsReorderable: {
            type: "boolean"
        },
        layout: {
            name: "WinJS.UI.ILayout2",
            type: "reference",
            typeArguments: []
        },
        loadingBehavior: {
            type: "string"
        },
        loadingState: {
            type: "string"
        },
        maxDeferredItemCleanup: {
            type: "number"
        },
        maxLeadingPages: {
            type: "number"
        },
        maxTrailingPages: {
            type: "number"
        },
        onAccessibilityAnnotationComplete: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onContentAnimating: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onFooterVisibilityChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onGroupHeaderInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onHeaderVisibilityChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragBetween: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragDrop: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragEnd: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragEnter: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragLeave: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragStart: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onKeyboardNavigating: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onLoadingStateChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSelectionChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSelectionChanging: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        pagesToLoad: {
            type: "number"
        },
        pagesToLoadThreshold: {
            type: "number"
        },
        scrollPosition: {
            type: "number"
        },
        selection: {
            name: "WinJS.UI.ISelection",
            type: "reference",
            typeArguments: [
                {
                    name: "T",
                    type: "type-param"
                }
            ]
        },
        selectionMode: {
            type: "enum",
            values: [
                "multi",
                "none",
                "single"
            ]
        },
        swipeBehavior: {
            type: "enum",
            values: [
                "none",
                "select"
            ]
        },
        tapBehavior: {
            type: "enum",
            values: [
                "directSelect",
                "invokeOnly",
                "none",
                "toggleSelect"
            ]
        },
        zoomableView: {
            name: "WinJS.UI.IZoomableView",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.ListView",
                    type: "reference",
                    typeArguments: [
                        {
                            name: "T",
                            type: "type-param"
                        }
                    ]
                }
            ]
        }
    },
    Menu: {
        alignment: {
            type: "string"
        },
        anchor: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        commands: {
            name: "Array",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.MenuCommand",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        onAfterHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        placement: {
            type: "string"
        }
    },
    MenuCommand: {
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        extraClass: {
            type: "string"
        },
        flyout: {
            name: "WinJS.UI.Flyout",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        id: {
            type: "string"
        },
        label: {
            type: "string"
        },
        onClick: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        selected: {
            type: "boolean"
        },
        type: {
            type: "string"
        }
    },
    NavBar: {
        closedDisplayMode: {
            type: "string"
        },
        commands: {
            name: "WinJS.UI.AppBarCommand",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        onAfterClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onChildrenProcessed: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        opened: {
            type: "boolean"
        },
        placement: {
            type: "string"
        }
    },
    NavBarCommand: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        icon: {
            type: "string"
        },
        label: {
            type: "string"
        },
        location: {
            type: "any"
        },
        onInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        splitButton: {
            type: "boolean"
        },
        splitOpened: {
            type: "boolean"
        },
        state: {
            type: "any"
        },
        tooltip: {
            type: "string"
        }
    },
    NavBarContainer: {
        currentIndex: {
            type: "number"
        },
        data: {
            name: "WinJS.Binding.List",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.NavBarCommand",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        fixedSize: {
            type: "boolean"
        },
        layout: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        },
        maxRows: {
            type: "number"
        },
        onInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSplitToggle: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        template: {
            name: "WinJS.Binding.Template",
            type: "reference",
            typeArguments: []
        }
    },
    Pivot: {
        customLeftHeader: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        customRightHeader: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        items: {
            name: "WinJS.Binding.List",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.PivotItem",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        locked: {
            type: "boolean"
        },
        onItemAnimationEnd: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemAnimationStart: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSelectionChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        selectedIndex: {
            type: "number"
        },
        selectedItem: {
            name: "WinJS.UI.PivotItem",
            type: "reference",
            typeArguments: []
        },
        title: {
            type: "string"
        }
    },
    PivotItem: {
        contentElement: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        header: {
            type: "string"
        }
    },
    Rating: {
        averageRating: {
            type: "number"
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        enableClear: {
            type: "boolean"
        },
        maxRating: {
            type: "number"
        },
        onCancel: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onChange: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onPreviewChange: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        tooltipStrings: {
            name: "Array",
            type: "reference",
            typeArguments: [
                {
                    type: "string"
                }
            ]
        },
        userRating: {
            type: "number"
        }
    },
    SearchBox: {
        chooseSuggestionOnEnter: {
            type: "boolean"
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        focusOnKeyboardInput: {
            type: "boolean"
        },
        onQueryChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onQuerySubmitted: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onResultSuggestionChosen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSuggestionsRequested: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        placeholderText: {
            type: "string"
        },
        queryText: {
            type: "string"
        },
        searchHistoryContext: {
            type: "string"
        },
        searchHistoryDisabled: {
            type: "boolean"
        }
    },
    SemanticZoom: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        enableButton: {
            type: "boolean"
        },
        locked: {
            type: "boolean"
        },
        onZoomChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        zoomFactor: {
            type: "number"
        },
        zoomedOut: {
            type: "boolean"
        }
    },
    SplitView: {
        closedDisplayMode: {
            type: "enum",
            values: [
                "inline",
                "none"
            ]
        },
        contentElement: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onAfterClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        openedDisplayMode: {
            type: "enum",
            values: [
                "inline",
                "overlay"
            ]
        },
        paneElement: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        paneOpened: {
            type: "boolean"
        },
        panePlacement: {
            type: "enum",
            values: [
                "bottom",
                "left",
                "right",
                "top"
            ]
        }
    },
    SplitViewCommand: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        icon: {
            type: "string"
        },
        label: {
            type: "string"
        },
        onInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        tooltip: {
            type: "string"
        }
    },
    SplitViewPaneToggle: {
        element: {
            name: "HTMLButtonElement",
            type: "reference",
            typeArguments: []
        },
        onInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        splitView: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        }
    },
    TimePicker: {
        clock: {
            type: "string"
        },
        current: {
            name: "Date",
            type: "reference",
            typeArguments: []
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        hourPattern: {
            type: "string"
        },
        minuteIncrement: {
            type: "number"
        },
        minutePattern: {
            type: "string"
        },
        onChange: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        periodPattern: {
            type: "string"
        }
    },
    ToggleSwitch: {
        checked: {
            type: "boolean"
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        labelOff: {
            type: "string"
        },
        labelOn: {
            type: "string"
        },
        onChange: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        title: {
            type: "string"
        }
    },
    ToolBar: {
        closedDisplayMode: {
            type: "enum",
            values: [
                "compact",
                "full"
            ]
        },
        data: {
            name: "WinJS.Binding.List",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.ICommand",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onAfterClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        opened: {
            type: "boolean"
        }
    },
    Tooltip: {
        contentElement: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        extraClass: {
            type: "string"
        },
        infotip: {
            type: "boolean"
        },
        innerHTML: {
            type: "string"
        },
        onBeforeClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onClosed: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onOpened: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        placement: {
            type: "string"
        }
    }
};

var setImmediate;
var clearImmediate;
if (window.setImmediate && window.clearImmediate) {
    setImmediate = window.setImmediate;
    clearImmediate = window.clearImmediate;
} else {
    setImmediate = function (callback) {
        return setTimeout(callback, 0);
    };
    clearImmediate = window.clearTimeout;
}

function isEvent(propName) {
    return propName[0] === "o" && propName[1] === "n";
}

function mapObject(obj, callback) {
    var result = {};
    Object.keys(obj).forEach(function (key) {
        var value = callback(key, obj[key]);
        if (value !== undefined) {
            result[key] = value;
        }
    });
    return result;
}

function cloneObject(obj) {
    var result = {};
    for (var k in obj) { result[k] = obj[k]; }
    return result;
}

function merge(/* objs */) {
    var result = {};
    for (var i = 0, len = arguments.length; i < len; i++) {
        var obj = arguments[i];
        if (obj) {
            for (var k in obj) { result[k] = obj[k]; }
        }
    }
    return result;
}

function endsWith(s, suffix) {
    return s.length >= suffix.length && s.substr(-suffix.length) === suffix;
}

function arraysShallowEqual(a, b) {
    if (a === b) {
        return true;
    } else if (a.length !== b.length) {
        return false;
    } else {
        for (var i = 0, len = a.length; i < len; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
}

function nestedSet(obj, path, value) {
    var parts = path.split(".");
    var allButLast = parts.slice(0, parts.length - 1);
    var last = parts[parts.length - 1];
    var finalObj = allButLast.reduce(function (current, key) {
        return current[key];
    }, obj);
    finalObj[last] = value;
}

function deparent(element) {
    var parent = element.parentNode;
    parent && parent.removeChild(element);
}

function fireEvent(element, eventName) {
    var eventObject = document.createEvent("CustomEvent");
    eventObject.initCustomEvent(
        eventName,
        true,  // bubbles
        false, // cancelable
        null   // detail
    );
    element.dispatchEvent(eventObject);
}

function makeClassSet(className) {
    var classSet = {};
    className && className.split(" ").forEach(function (aClass) {
        if (aClass) {
            classSet[aClass] = true;
        }
    });
    return classSet;
}

function getIn(object, path) {
    var parts = path.split(".");
    return parts.reduce(function (current, name) {
        return current && current[name];
    }, object);
}

// Given a type from RawControlApis returns a React propType.
function typeToPropType(typeInfo) {
    if (typeInfo.type === "string") {
        return React.PropTypes.string;
    } else if (typeInfo.type === "boolean") {
        return React.PropTypes.bool;
    } else if (typeInfo.type === "number") {
        return React.PropTypes.number;
    } else if (typeInfo.type === "enum") {
        return React.PropTypes.oneOf(typeInfo.values);
    } else if (typeInfo.type === "any") {
        return React.PropTypes.any;
    } else if (typeInfo.type === "reference") {
        if (typeInfo.name === "Function") {
            return React.PropTypes.func;
        } else if (typeInfo.name === "Array") {
            var itemPropType = typeToPropType(typeInfo.typeArguments[0]);
            return itemPropType ? React.PropTypes.arrayOf(itemPropType) : React.PropTypes.array;
        } else if (getIn(window, typeInfo.name)) {
            var instance = getIn(window, typeInfo.name);
            return React.PropTypes.instanceOf(instance);
        }
    } else {
        console.warn("react-winjs typeToPropType: unable to find propType for type: " + JSON.stringify(typeInfo, null, 2));
    }
}

// TODO: Revisit all of this diffing stuff:
//   - Make it more efficient
//   - It's currently hard to understand because it makes aggressive
//     assumptions (e.g. each item has a key and each item has a winControl)
//   - Is it correct?
//   - Should we just sync an array with a binding list instead of computing
//     edits based on 2 arrays and then applying them to a binding list?
function buildIndex(array) {
    var index = {};
    array.forEach(function (item, i) {
        index[item.key] = i;
    });
    return index;
}
function indexOfKey(array, key) {
    for (var i = 0; i < array.length; i++) {
        if (array[i].key === key) {
            return i;
        }
    }
    return -1;
}
function diffArraysByKey(old, latest) {
    old = old.slice(0);
    var oldIndex = buildIndex(old);
    var latestIndex = buildIndex(latest);
    var edits = [];

    // Handle removals
    for (var i = old.length - 1; i >= 0; i--) {
        var item = old[i];
        if (!latestIndex.hasOwnProperty(item.key)) {
            edits.push({ type: "delete", index: i });
            old.splice(i, 1);
        }
    }

    // Handle insertions and moves
    for (var i = 0; i < latest.length; i++) {
        var item = latest[i];
        if (!oldIndex.hasOwnProperty(item.key)) {
            // Insertion
            edits.push({ type: "insert", index: i, value: item });
            old.splice(i, 0, item);
        } else if (old[i].key !== item.key) {
            // Move
            //edits.push({ type: "move", from: oldIndex[item.key], to: i });
            //old.splice(oldIndex[item.key], 1);

            var fromIndex = indexOfKey(old, item.key);
            edits.push({ type: "move", from: fromIndex, to: i });
            old.splice(fromIndex, 1);
            old.splice(i, 0, item);
        }
    }

    return edits;
}
function applyEditsToBindingList(list, edits) {
    edits.forEach(function (edit) {
        if (edit.type === "delete") {
            list.splice(edit.index, 1);
        } else if (edit.type === "insert") {
            list.splice(edit.index, 0, edit.value.winControl);
        } else if (edit.type === "move") {
            list.move(edit.from, edit.to);
        } else {
            throw "Unsupported edit type: " + edit.type;
        }
    }, this);
}

// interface IWinJSComponent {
//     winControl
//     element
//     data
//     displayName
// }

// interface IWinJSChildComponent extends IWinJSComponent {
//     key
//     type
// }

// Returns a WinJSChildComponent for each component in *children*. Reuses
// WinJSChildComponents from *childComponentsMap* when possible. Disposes members of
// *childComponentsMap* if they are no longer needed.
function processChildren(componentDisplayName, children, childComponentsMap) {
    var newChildComponents = [];
    var newChildComponentsMap = {};

    // A component's *key* represents its identity. If a component in *children* and a
    // component in *childComponentsMap* have the same *key*, then they are assumed to
    // represent the same component.

    React.Children.forEach(children, function (component) {
        if (component) {
            if (component.ref) {
                console.warn(
                    "ref prop (" + component.ref + ") will not work on " +
                    component.type.displayName + " component because it is inside " +
                    "of a " + componentDisplayName + " component"
                );
            }

            if (component.key === null) {
                console.error(
                    component.type.displayName + " component requires a key " +
                    "when inside of a " + componentDisplayName + " component"
                );
            } else {
                var winjsChildComponent = childComponentsMap[component.key];
                if (winjsChildComponent) {
                    if (winjsChildComponent.type === component.type) {
                        winjsChildComponent.update(component);
                    } else {
                        // If a component's *type* has changed then the component must be
                        // recreated from scratch rather than updated. The reason is that
                        // the tagName of the underlying DOM element may have changed. The
                        // only way to change the tagName of the underlying DOM element is
                        // to instantiate a new react-winjs component.
                        winjsChildComponent.dispose();
                        winjsChildComponent = new WinJSChildComponent(component);
                    }
                } else {
                    winjsChildComponent = new WinJSChildComponent(component);
                }
                newChildComponents.push(winjsChildComponent);
                newChildComponentsMap[component.key] = winjsChildComponent;
            }
        }
    });

    Object.keys(childComponentsMap).forEach(function (key) {
        if (!newChildComponentsMap.hasOwnProperty(key)) {
            childComponentsMap[key].dispose();
        }
    });

    return {
        childComponents: newChildComponents,
        childComponentsMap: newChildComponentsMap
    };
}

function prefixedProperty(prefix, property) {
    return prefix + property[0].toUpperCase() + property.substr(1);
}

var isUnitlessProperty = {
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    widows: true,
    zIndex: true,
    zoom: true
};
var vendorPrefixes = ["Moz", "ms", "Webkit"];
Object.keys(isUnitlessProperty).forEach(function (property) {
    vendorPrefixes.forEach(function (prefix) {
        isUnitlessProperty[prefixedProperty(prefix, property)] = true;
    });
});

// Converts the value of a CSS attribute to a string. When certain attributes
// (e.g. width, height) are specified as numbers, this means adding "px" to the
// end of the string value.
function resolveStyleValue(cssProperty, value) {
    if (typeof value === "number") {
        return isUnitlessProperty[cssProperty] || value === 0 ?
            ("" + value) :
            (value + "px");
    } else {
        return value ? ("" + value) : "";
    }
}

var PropHandlers = {
    // Maps to a property on the winControl.
    property: function (propType) {
        return {
            propType: propType,
            preCtorInit: function property_preCtorInit(element, options, data, displayName, propName, value) {
                options[propName] = value;
            },
            update: function property_update(winjsComponent, propName, oldValue, newValue) {
                if (oldValue !== newValue) {
                    winjsComponent.winControl[propName] = newValue;
                }
            }
        };
    },

    // Maps to a property on the winControl which involves setting focus. Such properties
    // are set outside of componentWillReceiveProps to prevent React from undoing the
    // focus move.
    focusProperty: function (propType) {
        return {
            propType: propType,
            preCtorInit: function focusProperty_preCtorInit(element, options, data, displayName, propName, value) {
                options[propName] = value;
            },
            update: function focusProperty_update(winjsComponent, propName, oldValue, newValue) {
                if (oldValue !== newValue) {
                    var asyncToken = winjsComponent.data[propName];
                    asyncToken && clearImmediate(asyncToken);
                    asyncToken = setImmediate(function () {
                        winjsComponent.data[propName] = null;
                        winjsComponent.winControl[propName] = newValue;
                    });
                }
            },
            dispose: function focusProperty_dispose(winjsComponent, propName) {
                var asyncToken = winjsComponent.data[propName];
                asyncToken && clearImmediate(asyncToken);
            }
        };
    },

    // Maps to a property on the winControl's element.
    domProperty: function (propType) {
        return {
            propType: propType,
            preCtorInit: function domProperty_preCtorInit(element, options, data, displayName, propName, value) {
                element[propName] = value;
            },
            update: function domProperty_update(winjsComponent, propName, oldValue, newValue) {
                if (oldValue !== newValue) {
                    winjsComponent.element[propName] = newValue;
                }
            }
        };
    },

    // Maps to an attribute on the winControl's element.
    domAttribute: function (propType) {
        return {
            propType: propType,
            update: function domAttribute_update(winjsComponent, propName, oldValue, newValue) {
                if (oldValue !== newValue) {
                    if (newValue !== null && newValue !== undefined) {
                        winjsComponent.element.setAttribute(propName, "" + newValue);
                    } else {
                        winjsComponent.element.removeAttribute(propName);
                    }
                }
            }
        };
    },

    // Maps to an event on the winControl.
    event: {
        propType: React.PropTypes.func,
        // Can't set options in preCtorInit for events. The problem is WinJS control options
        // use a different code path to hook up events than the event property setters.
        // Consequently, setting an event property will not automatically unhook the event
        // listener that was specified in the options during initialization. To avoid this
        // problem, always go thru the event property setters.
        update: function event_update(winjsComponent, propName, oldValue, newValue) {
            if (oldValue !== newValue) {
                winjsComponent.winControl[propName.toLowerCase()] = newValue;
            }
        }
    },

    // Maps to an event on the winControl's element.
    domEvent: {
        propType: React.PropTypes.func,
        preCtorInit: function domEvent_preCtorInit(element, options, data, displayName, propName, value) {
            element[propName.toLowerCase()] = value;
        },
        update: function domEvent_update(winjsComponent, propName, oldValue, newValue) {
            if (oldValue !== newValue) {
                winjsComponent.element[propName.toLowerCase()] = newValue;
            }
        }
    },

    //  Enable the addition and removal of CSS classes on the root of the winControl
    //  but don't clobber whatever CSS classes the underlying control may have added
    //  (e.g. don't clobber win-listview).
    winControlClassName: {
        propType: React.PropTypes.string,
        preCtorInit: function winControlClassName_preCtorInit(element, options, data, displayName, propName, value) {
            if (value) {
                element.className = value;
            }
            data[propName] = makeClassSet(value);
        },
        update: function winControlClassName_update(winjsComponent, propName, oldValue, newValue) {
            if (oldValue !== newValue) {
                var oldClassSet = winjsComponent.data[propName] || {};
                var newClassSet = makeClassSet(newValue);
                var elementClassList = winjsComponent.winControl.element.classList;
                for (var className in oldClassSet) {
                    if (!newClassSet[className]) {
                        elementClassList.remove(className);
                    }
                }
                for (var className in newClassSet) {
                    if (!oldClassSet[className]) {
                        elementClassList.add(className);
                    }
                }
                winjsComponent.data[propName] = newClassSet;
            }
        }
    },

    //  Enable the addition and removal of inline styles on the root of the winControl
    //  but don't clobber whatever inline styles the underlying control may have added.
    winControlStyle: {
        propType: React.PropTypes.object,
        preCtorInit: function winControlStyle_preCtorInit(element, options, data, displayName, propName, value) {
            var elementStyle = element.style;
            value = value || {};
            for (var cssProperty in value) {
                elementStyle[cssProperty] = resolveStyleValue(cssProperty, value[cssProperty]);
            }
        },
        update: function winControlStyle_update(winjsComponent, propName, oldValue, newValue) {
            if (oldValue !== newValue) {
                oldValue = oldValue || {};
                newValue = newValue || {};
                if(winjsComponent.winControl && winjsComponent.winControl.element) {
                    var elementStyle = winjsComponent.winControl.element.style;
                    for (var cssProperty in oldValue) {
                        if (!newValue.hasOwnProperty(cssProperty)) {
                            elementStyle[cssProperty] = "";
                        }
                    }
                    for (var cssProperty in newValue) {
                        if (oldValue[cssProperty] !== newValue[cssProperty]) {
                            elementStyle[cssProperty] = resolveStyleValue(cssProperty, newValue[cssProperty]);
                        }
                    }
                }
            }
        }
    },

    // Emits a warning to the console whenever prop gets used.
    warn: function PropHandlers_warn(warnMessage) {
        return {
            // Don't need preCtorInit because this prop handler doesn't have any side
            // effects on the WinJS control. update also runs during initialization so
            // update is just as good as preCtorInit for our use case.
            update: function warn_update(winjsComponent, propName, oldValue, newValue) {
                console.warn(winjsComponent.displayName + ": " + warnMessage);
            }
        };
    },

    // Creates a DOM element and mounts a React component on it. Gives this DOM
    // element to the *winControlProperty* property of the winControl.
    propertyWithMount: function PropHandlers_propertyWithMount(winControlProperty) {
        return {
            propType: React.PropTypes.element,
            preCtorInit: function propertyWithMount_preCtorInit(element, options, data, displayName, propName, value) {
                if (value) {
                    data[propName] = document.createElement("div");
                    ReactDOM.render(value, data[propName]);
                    options[winControlProperty] = data[propName];
                }
            },
            update: function propertyWithMount_update(winjsComponent, propName, oldValue, newValue) {
                var winControl = winjsComponent.winControl;
                var element = winjsComponent.data[propName];
                if (newValue) {
                    if (!element) {
                        element = document.createElement("div");
                        winjsComponent.data[propName] = element;
                    }
                    ReactDOM.render(newValue, element);
                    if (winControl[winControlProperty] !== element) {
                        winControl[winControlProperty] = element;
                    }
                } else if (oldValue) {
                    element && ReactDOM.unmountComponentAtNode(element);
                    winControl[winControlProperty] = null;
                }
            },
            dispose: function propertyWithMount_dispose(winjsComponent, propName) {
                var element = winjsComponent.data[propName];
                element && ReactDOM.unmountComponentAtNode(element);
            }
        };
    },


    // Mounts a React component on whatever element gets returned by getMountPoint.
    mountTo: function PropHandlers_mountTo(getMountPoint) {
        return {
            propType: React.PropTypes.element,
            // Can't use preCtorInit because the mount point may not exist until the
            // constructor has run.
            update: function mountTo_update(winjsComponent, propName, oldValue, newValue) {
                var data = winjsComponent.data[propName] || {};
                var version = (data.version || 0) + 1;
                winjsComponent.data[propName] = {
                    // *mountComponent* may run asynchronously and we may queue it multiple
                    // times before it runs. *version* allows us to ensure only the latest
                    // version runs and the others are no ops.
                    version: version,
                    // *element* is the element to which we last mounted the component.
                    element: data.element
                };

                var mountComponent = function () {
                    if (version === winjsComponent.data[propName].version) {
                        var oldElement = winjsComponent.data[propName].element;

                        if (newValue) {
                            var newElement = getMountPoint(winjsComponent);
                            if (oldElement && oldElement !== newElement) {
                                ReactDOM.unmountComponentAtNode(oldElement);
                            }

                            ReactDOM.render(newValue, newElement);
                            winjsComponent.data[propName].element = newElement;
                        } else if (oldValue) {
                            oldElement && ReactDOM.unmountComponentAtNode(oldElement);
                            winjsComponent.data[propName].element = null;
                        }
                    }
                };

                // *isDeclarativeControlContainer* is a hook some WinJS controls provide
                // (e.g. HubSection, PivotItem) to ensure that processing runs on the
                // control only when the control is ready for it. This enables lazy loading
                // of HubSections/PivotItems (e.g. load off screen items asynchronously in
                // batches). Additionally, doing processing thru this hook guarantees that
                // the processing won't run until the control is in the DOM.
                var winControl = winjsComponent.winControl;
                var queueProcessing = winControl.constructor.isDeclarativeControlContainer;
                if (queueProcessing && typeof queueProcessing === "function") {
                    queueProcessing(winControl, mountComponent);
                } else {
                    mountComponent();
                }
            },
            dispose: function mountTo_dispose(winjsComponent, propName) {
                var data = winjsComponent.data[propName] || {};
                var element = data.element;
                element && ReactDOM.unmountComponentAtNode(element);
            }
        };
    },

    // Uses the Binding.List's editing APIs to make it match the children prop. Does this to
    // the Binding.List stored in the winControl's property called bindingListName.
    syncChildrenWithBindingList: function PropHandlers_syncChildrenWithBindingList(bindingListName) {
        return {
            preCtorInit: function syncChildrenWithBindingList_preCtorInit(element, options, data, displayName, propName, value) {
                var latest = processChildren(displayName, value, {});
                data[propName] = {
                    winjsChildComponents: latest.childComponents,
                    winjsChildComponentsMap: latest.childComponentsMap
                };

                options[bindingListName] = new WinJS.Binding.List(
                    latest.childComponents.map(function (winjsChildComponent) {
                        return winjsChildComponent.winControl;
                    })
                );
            },
            update: function syncChildrenWithBindingList_update(winjsComponent, propName, oldValue, newValue) {
                var data = winjsComponent.data[propName] || {};
                var oldChildComponents = data.winjsChildComponents || [];
                var oldChildComponentsMap = data.winjsChildComponentsMap || {};
                var latest = processChildren(winjsComponent.displayName, newValue, oldChildComponentsMap);

                var bindingList = winjsComponent.winControl[bindingListName];
                if (bindingList) {
                    applyEditsToBindingList(
                        bindingList,
                        diffArraysByKey(oldChildComponents, latest.childComponents)
                    );
                } else {
                    winjsComponent.winControl[bindingListName] = new WinJS.Binding.List(latest.childComponents.map(function (winjsChildComponent) {
                        return winjsChildComponent.winControl;
                    }));
                }

                winjsComponent.data[propName] = {
                    winjsChildComponents: latest.childComponents,
                    winjsChildComponentsMap: latest.childComponentsMap
                };
            },
            dispose: function syncChildrenWithBindingList_dispose(winjsComponent, propName) {
                var data = winjsComponent.data[propName] || {};
                var childComponents = data.winjsChildComponents || [];
                childComponents.forEach(function (winjsChildComponent) {
                    winjsChildComponent.dispose();
                });
            }
        }
    }
};

function defineControl(options) {
    // Required
    var winjsControl = options.winjsControl;

    // Optional
    var winControlOptions = options.winControlOptions || {};
    var preCtorInit = options.preCtorInit || function () { };
    var propHandlers = options.propHandlers || {};
    var render = options.render || function (component) {
        return React.DOM.div();
    };
    var displayName = options.displayName;

    function initWinJSComponent(winjsComponent, element, props) {
        winjsComponent.data = {};
        winjsComponent.displayName = displayName;
        winjsComponent.element = element;

        // Give propHandlers that implement preCtorInit the opportunity to run before
        // instantiating the winControl.
        var options = cloneObject(winControlOptions);
        preCtorInit(element, options, winjsComponent.data, displayName);
        Object.keys(props).forEach(function (propName) {
            var handler = propHandlers[propName];
            if (handler && handler.preCtorInit) {
                handler.preCtorInit(element, options, winjsComponent.data, displayName, propName, props[propName]);
            }
        });
        winjsComponent.winControl = new winjsControl(element, options);

        // Process propHandlers that don't implement preCtorInit.
        Object.keys(props).forEach(function (propName) {
            var handler = propHandlers[propName];
            if (handler && !handler.preCtorInit) {
                handler.update(winjsComponent, propName, undefined, props[propName]);
            }
        });
    }

    function updateWinJSComponent(winjsComponent, prevProps, nextProps) {
        // Handle props that were added or changed
        Object.keys(nextProps).forEach(function (propName) {
            var handler = propHandlers[propName];
            if (handler) {
                handler.update(winjsComponent, propName, prevProps[propName], nextProps[propName]);
            }
        });

        // Handle props that were removed
        Object.keys(prevProps).forEach(function (propName) {
            if (!nextProps.hasOwnProperty(propName)) {
                var handler = propHandlers[propName];
                if (handler) {
                    handler.update(winjsComponent, propName, prevProps[propName], undefined);
                }
            }
        });
    }

    function disposeWinJSComponent(winjsComponent) {
        winjsComponent.winControl.dispose && winjsComponent.winControl.dispose();
        Object.keys(propHandlers).forEach(function (propName) {
            var handler = propHandlers[propName];
            handler.dispose && handler.dispose(winjsComponent, propName);
        })
    }

    return React.createClass({
        displayName: displayName,
        statics: {
            initWinJSComponent: initWinJSComponent,
            updateWinJSComponent: updateWinJSComponent,
            disposeWinJSComponent: disposeWinJSComponent
        },
        propTypes: mapObject(propHandlers, function (propName, propHandler) {
            return propHandler.propType;
        }),
        shouldComponentUpdate: function () {
            return false;
        },
        // If choosing to implement componentWillMount, be aware that componentWillMount
        // will run when WinJSChildComponent renders the component to a string via
        // renderRootlessComponent.
        componentDidMount: function () {
            initWinJSComponent(this, ReactDOM.findDOMNode(this), this.props);
        },
        componentWillUnmount: function () {
            disposeWinJSComponent(this);
        },
        componentWillReceiveProps: function (nextProps) {
            updateWinJSComponent(this, this.props, nextProps);
        },
        render: function() {
            return render(this);
        }
    });
}

var hostEl = document.createElement("div");
function renderRootlessComponent(component) {
    var html = ReactDOMServer.renderToStaticMarkup(component);
    hostEl.innerHTML = html;
    var element = hostEl.firstElementChild;
    hostEl.removeChild(element);
    return element;
}

// TODO: Is there a better way to solve this problem that WinJSChildComponent solves?
// TODO: Because we're not going thru React's lifecycle, we're missing out on
// validation of propTypes.
// TODO: ref doesn't work on WinJSChildComponents. The reason is that during updates, we
// don't call ReactDOM.render. Because of this, refs would go stale and only reflect the
// state of the component after its first render. Consequently, we clone the component
// during its first render so it never shows up in refs. This should make it clearer
// that refs don't work than generating stale refs.
function WinJSChildComponent(component) { // implements IWinJSChildComponent
    // Clone the component so a ref isn't generated.
    var clonedComponent = React.cloneElement(component, { ref: null });
    var element = renderRootlessComponent(clonedComponent);
    component.type.initWinJSComponent(this, element, component.props);
    this.key = component.key;
    this.type = component.type;
    this._props = component.props;
    this._disposeWinJSComponent = component.type.disposeWinJSComponent;
};
WinJSChildComponent.prototype.update = function (component) {
    component.type.updateWinJSComponent(this, this._props, component.props);
    this._props = component.props;
};
WinJSChildComponent.prototype.dispose = function () {
    this._disposeWinJSComponent(this);
};


// Prop handlers that are common to every WinJS control.
var defaultPropHandlers = {
    className: PropHandlers.winControlClassName,
    style: PropHandlers.winControlStyle,

    // TODO: Instead of special casing these, support DOM attributes
    // more generically.
    id: PropHandlers.domProperty(React.PropTypes.string),
    "aria-controls": PropHandlers.domAttribute(React.PropTypes.any),
    "aria-expanded": PropHandlers.domAttribute(React.PropTypes.any)
};

// Control-specific prop handlers derived from RawControlApis
var DefaultControlPropHandlers = (function processRawApis() {
    var keepProperty = function keepProperty(propertyName) {
        return !endsWith(propertyName.toLowerCase(), "element");
    };

    return mapObject(RawControlApis, function (controlName, controlApis) {
        var propHandlers = {};
        Object.keys(controlApis).forEach(function (propName) {
            if (isEvent(propName)) {
                propHandlers[propName] = PropHandlers.event;
            } else if (keepProperty(propName)) {
                var typeInfo = controlApis[propName];
                var propType = typeToPropType(typeInfo);
                propHandlers[propName] = PropHandlers.property(propType);
            }
        });
        return propHandlers;
    });
})();

// Each entry in controlApis has the same format as the argument to defineControl except
// updateWithDefaults automatically provides:
//   - winjsControl
//   - displayName
//   - propHandlers
// and updateWithDefaults implements an extra option:
//   - underlyingControlName
// By default, winjsControl, displayName, and propHanders are inferred from the entry's key
// in controlApis. If underlyingControlName is provided, they will instead be inferred from
// that name.
function updateWithDefaults(controlApis) {
    Object.keys(controlApis).forEach(function (controlName) {
        var spec = controlApis[controlName];
        var winjsControlName = spec.underlyingControlName || controlName;
        spec.winjsControl = spec.winjsControl || WinJS.UI[winjsControlName];
        spec.displayName = spec.displayName || winjsControlName;
        spec.propHandlers = merge(
            defaultPropHandlers, // Common to all WinJS controls
            DefaultControlPropHandlers[winjsControlName], // Control-specific derived from RawControlApis
            spec.propHandlers // Control-specific handwritten
        );
    });
    return controlApis;
}

var typeWarnPropHandler = PropHandlers.warn("Invalid prop 'type'. Instead, the command type is" +
    " determined by the component: Button, Toggle, Separator, ContentCommand, FlyoutCommand.");
var CommandSpecs = {
    Button: {
        underlyingControlName: "AppBarCommand",
        winControlOptions: { type: "button" },
        render: function (component) {
            return React.DOM.button();
        },
        propHandlers: {
            type: typeWarnPropHandler,
        }
    },
    Toggle: {
        underlyingControlName: "AppBarCommand",
        winControlOptions: { type: "toggle" },
        render: function (component) {
            return React.DOM.button();
        },
        propHandlers: {
            type: typeWarnPropHandler
        }
    },
    Separator: {
        underlyingControlName: "AppBarCommand",
        winControlOptions: { type: "separator" },
        render: function (component) {
            return React.DOM.hr();
        },
        propHandlers: {
            type: typeWarnPropHandler
        }
    },
    ContentCommand: {
        underlyingControlName: "AppBarCommand",
        winControlOptions: { type: "content" },
        propHandlers: {
            type: typeWarnPropHandler,
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.element;
            })
        }
    },
    FlyoutCommand: {
        underlyingControlName: "AppBarCommand",
        winControlOptions: { type: "flyout" },
        render: function (component) {
            return React.DOM.button();
        },
        propHandlers: {
            type: typeWarnPropHandler,
            flyoutComponent: {
                propType: React.PropTypes.element,
                update: function FlyoutCommand_flyoutComponent_update(winjsComponent, propName, oldValue, newValue) {
                    var data = winjsComponent.data[propName];
                    if (!data) {
                        var flyoutHost = document.createElement("div");
                        flyoutHost.className = "win-react-flyout-host";
                        document.body.appendChild(flyoutHost);
                        winjsComponent.data[propName] = data = {
                            flyoutHost: flyoutHost,
                            flyoutComponent: null
                        };
                    }
                    var oldWinControl = data.flyoutComponent && data.flyoutComponent.winControl;
                    var instance = ReactDOM.render(newValue, data.flyoutHost);
                    if (oldWinControl !== instance.winControl) {
                        winjsComponent.winControl.flyout = instance.winControl;
                    }
                    winjsComponent.data[propName].flyoutComponent = instance;
                },
                dispose: function FlyoutCommand_flyoutComponent_dispose(winjsComponent, propName) {
                    var data = winjsComponent.data[propName];
                    if (data && data.flyoutHost) {
                        ReactDOM.unmountComponentAtNode(data.flyoutHost);
                        deparent(data.flyoutHost);
                    }
                }
            }
        }
    }
};

var ControlApis = updateWithDefaults({
    AppBar: {
        propHandlers: {
            opened: PropHandlers.focusProperty(React.PropTypes.bool),
            children: PropHandlers.syncChildrenWithBindingList("data")
        }
    },
    "AppBar.Button": CommandSpecs.Button,
    "AppBar.Toggle": CommandSpecs.Toggle,
    "AppBar.Separator": CommandSpecs.Separator,
    "AppBar.ContentCommand": CommandSpecs.ContentCommand,
    "AppBar.FlyoutCommand": CommandSpecs.FlyoutCommand,
    AutoSuggestBox: {},
    BackButton: {
        preCtorInit: function (element, options, data, displayName) {
            element.addEventListener("click", function (eventObject) {
                // Prevent React from seeing the "click" event to workaround this React
                // bug: https://github.com/facebook/react/issues/3790
                eventObject.stopPropagation();
            });
        },
        render: function (component) {
            return React.DOM.button();
        }
    },
    // CellSpanningLayout: Not a component so just use off of WinJS.UI?
    ContentDialog: {
        propHandlers: {
            hidden: PropHandlers.focusProperty(React.PropTypes.bool),
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.element.querySelector(".win-contentdialog-content");
            })
        }
    },
    DatePicker: {},
    FlipView: {},
    Flyout: {
        // The WinJS Flyout control doesn't come with a good mount point.
        // App content and control content are siblings in Flyout.element.
        // Consequently, if React rendered to Flyout.element, it would destroy
        // some of Flyout's elements. To fix this, we give Flyout a div
        // (className="win-react-flyout-mount-point") which will contain only
        // app content. The React component renders into this div so it doesn't
        // destroy any control content.
        render: function (component) {
            return React.DOM.div(null, React.DOM.div({ className: "win-react-flyout-mount-point" }));
        },
        propHandlers: {
            hidden: PropHandlers.focusProperty(React.PropTypes.bool),
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.element.querySelector(".win-react-flyout-mount-point");
            })
        }
    },
    // GridLayout: Not a component so just use off of WinJS.UI?
    Hub: {
        propHandlers: {
            children: PropHandlers.syncChildrenWithBindingList("sections")
        }
    },
    "Hub.Section": {
        underlyingControlName: "HubSection",
        propHandlers: {
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.contentElement;
            })
        }
    },
    ItemContainer: {
        propHandlers: {
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.element.querySelector(".win-item");
            })
        }
    },
    // ListLayout: Not a component so just use off of WinJS.UI?
    ListView: {
        propHandlers: {
            currentItem: PropHandlers.focusProperty(React.PropTypes.any),
            headerComponent: PropHandlers.propertyWithMount("header"),
            footerComponent: PropHandlers.propertyWithMount("footer"),
        }
    },
    // TODO: Keyboarding doesn't work in Menu probably because MenuCommands are not direct
    // children of the Menu.
    Menu: {
        propHandlers: {
            hidden: PropHandlers.focusProperty(React.PropTypes.bool),
            children: {
                // children propHandler looks like this rather than using mountTo on
                // winControl.element because this enables props.children to have
                // multiple components whereas the other technique restricts it to one.
                update: function (winjsComponent, propName, oldValue, newValue) {
                    // TODO: dispose
                    ReactDOM.render(React.DOM.div(null, newValue), winjsComponent.winControl.element);
                }
            }
        }
    },
    "Menu.Button": merge(CommandSpecs.Button, {
        underlyingControlName: "MenuCommand"
    }),
    "Menu.Toggle": merge(CommandSpecs.Toggle, {
        underlyingControlName: "MenuCommand"
    }),
    "Menu.Separator": merge(CommandSpecs.Separator, {
        underlyingControlName: "MenuCommand"
    }),
    "Menu.FlyoutCommand": merge(CommandSpecs.FlyoutCommand, {
        underlyingControlName: "MenuCommand"
    }),
    Pivot: {
        propHandlers: {
            children: PropHandlers.syncChildrenWithBindingList("items"),
            customLeftHeaderComponent: PropHandlers.propertyWithMount("customLeftHeader"),
            customRightHeaderComponent: PropHandlers.propertyWithMount("customRightHeader")
        }
    },
    "Pivot.Item": {
        underlyingControlName: "PivotItem",
        propHandlers: {
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.contentElement;
            })
        }
    },
    Rating: {},
    SemanticZoom: {
        propHandlers: {
            zoomedInComponent: {
                propType: React.PropTypes.element,
                preCtorInit: function zoomedInComponent_preCtorInit(element, options, data, displayName, propName, value) {
                    var child = new WinJSChildComponent(value);
                    // Zoomed in component should be the first child.
                    element.insertBefore(child.winControl.element, element.firstElementChild);
                    data[propName] = child;
                },
                update: function zoomedInComponent_update(winjsComponent, propName, oldValue, newValue) {
                    var child = winjsComponent.data[propName];
                    if (child.type === newValue.type) {
                        child.update(newValue);
                    } else {
                        console.warn("SemanticZoom: zoomedInComponent's component type can't change");
                    }
                },
                dispose: function zoomedInComponent_dispose(winjsComponent, propName) {
                    var child = winjsComponent.data[propName];
                    child && child.dispose();
                }
            },
            zoomedOutComponent: {
                propType: React.PropTypes.element,
                preCtorInit: function zoomedOutComponent_preCtorInit(element, options, data, displayName, propName, value) {
                    var child = new WinJSChildComponent(value);
                    // Zoomed out component should be the second child.
                    element.appendChild(child.winControl.element);
                    data[propName] = child;
                },
                update: function zoomedOutComponent_update(winjsComponent, propName, oldValue, newValue) {
                    var child = winjsComponent.data[propName];
                    if (child.type === newValue.type) {
                        child.update(newValue);
                    } else {
                        console.warn("SemanticZoom: zoomedOutComponent's component type can't change");
                    }
                },
                dispose: function zoomedOutComponent_dispose(winjsComponent, propName) {
                    var child = winjsComponent.data[propName];
                    child && child.dispose();
                }
            }
        }
    },
    SplitView: {
        propHandlers: {
            paneOpened: PropHandlers.focusProperty(React.PropTypes.bool),
            paneComponent: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.paneElement;
            }),
            contentComponent: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.contentElement;
            })
        }
    },
    "SplitView.Command": {
        underlyingControlName: "SplitViewCommand",
    },
    SplitViewPaneToggle: {
        render: function (component) {
            return React.DOM.button();
        },
        propHandlers: {
            // paneOpened provides a React-friendly interface for making the SplitViewPaneToggle accessible.
            // When paneOpened is specified, is not undefined, and is not null, it:
            //  - Sets SplitViewPaneToggle's aria-expanded attribute to match paneOpened
            //  - Fires SplitViewPaneToggle's "invoked" event when aria-expanded is mutated
            paneOpened: {
                propType: React.PropTypes.bool,
                update: function paneOpened_update(winjsComponent, propName, oldValue, newValue) {
                    var data = winjsComponent.data[propName];
                    if (!data) {
                        data = {
                            // WinJS.UI.SplitViewPaneToggle depends on WinJS.Utilities._MutationObserver so it
                            // is safe to use it here.
                            ariaExpandedMutationObserver: new WinJS.Utilities._MutationObserver(function () {
                                var element = winjsComponent.element;
                                var ariaExpanded = (element.getAttribute("aria-expanded") === "true");
                                if (ariaExpanded !== winjsComponent.data[propName].value) {
                                    fireEvent(element, "invoked"); // Fire WinJS.UI.SplitViewPaneToggle's invoked event
                                }
                            }),
                            observing: false,
                            value: newValue
                        };
                        winjsComponent.data[propName] = data;
                    }

                    if (oldValue !== newValue) {
                        if (newValue !== null && newValue !== undefined) {
                            winjsComponent.element.setAttribute("aria-expanded", newValue ? "true" : "false");
                            if (!data.observing) {
                                data.observing = true;
                                data.ariaExpandedMutationObserver.observe(winjsComponent.element, {
                                    attributes: true,
                                    attributeFilter: ["aria-expanded"]
                                });
                            }
                        } else {
                            winjsComponent.element.removeAttribute("aria-expanded");
                            if (data.observing) {
                                data.observing = false;
                                data.ariaExpandedMutationObserver.disconnect();
                            }
                        }
                    }

                    data.value = newValue;
                },
                dispose: function paneOpened_dispose(winjsComponent, propName) {
                    var data = winjsComponent.data[propName];
                    if (data && data.observing) {
                        data.ariaExpandedMutationObserver.disconnect();
                    }
                }
            }
        }
    },
    TimePicker: {},
    ToggleSwitch: {},
    ToolBar: {
        propHandlers: {
            opened: PropHandlers.focusProperty(React.PropTypes.bool),
            children: PropHandlers.syncChildrenWithBindingList("data")
        }
    },
    "ToolBar.Button": CommandSpecs.Button,
    "ToolBar.Toggle": CommandSpecs.Toggle,
    "ToolBar.Separator": CommandSpecs.Separator,
    "ToolBar.ContentCommand": CommandSpecs.ContentCommand,
    "ToolBar.FlyoutCommand": CommandSpecs.FlyoutCommand,
    Tooltip: {
        propHandlers: {
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.element;
            }),
            contentComponent: PropHandlers.propertyWithMount("contentElement")
        }
    }
});

//
// Publish
//

var ReactWinJS = {};

// Controls
//

// Sort to ensure that controls come before their subcontrols
// (e.g. AppBar comes before AppBar.Toggle).
Object.keys(ControlApis).sort().forEach(function (controlName) {
    nestedSet(ReactWinJS, controlName, defineControl(ControlApis[controlName]));
});

// Utilites
//

// Given a function that returns a React component,
// returns an item renderer function that can be used
// with WinJS controls. Useful for describing FlipView
// and ListView item templates as React components.
ReactWinJS.reactRenderer = function reactRenderer(componentFunction) {
    var componentFunctionBound;
    var renderItem = function renderItem(item) {
        var element = document.createElement("div");
        element.className = "win-react-renderer-host";
        ReactDOM.render(componentFunctionBound(item), element);
        WinJS.Utilities.markDisposable(element, function () {
            ReactDOM.unmountComponentAtNode(element);
        });
        return element;
    };

    return function itemRenderer(itemOrItemPromise) {
        if (!componentFunctionBound) {
            componentFunctionBound = componentFunction.bind(this);
        }

        return WinJS.Promise.is(itemOrItemPromise) ?
            itemOrItemPromise.then(renderItem) :
            renderItem(itemOrItemPromise);
    }
};


// Low-level utilities for wrapping custom WinJS-style controls
//

ReactWinJS.defineControl = defineControl;
ReactWinJS.PropHandlers = PropHandlers;
ReactWinJS.defaultPropHandlers = defaultPropHandlers;

module.exports = ReactWinJS;


/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = ReactDOM;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(7);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || global.document;
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(190)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridColumn: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = __webpack_require__(13);

var invariant = __webpack_require__(1);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(19);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(8);

var quoteAttributeValueForBrowser = __webpack_require__(177);
var warning = __webpack_require__(2);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }

};

module.exports = DOMPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(35);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactUpdates = __webpack_require__(10);
var Transaction = __webpack_require__(26);

var emptyFunction = __webpack_require__(7);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMSelection = __webpack_require__(130);

var containsNode = __webpack_require__(89);
var focusNode = __webpack_require__(55);
var getActiveElement = __webpack_require__(56);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(13);
var Transaction = __webpack_require__(26);
var ReactInstrumentation = __webpack_require__(8);
var ReactServerUpdateQueue = __webpack_require__(153);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(12);
var ReactInstanceMap = __webpack_require__(39);
var ReactInstrumentation = __webpack_require__(8);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }

};

module.exports = ReactUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var ReactCompositeComponent = __webpack_require__(123);
var ReactEmptyComponent = __webpack_require__(63);
var ReactHostComponent = __webpack_require__(64);

var getNextDebugID = __webpack_require__(174);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};
_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var escapeTextContentForBrowser = __webpack_require__(27);
var setInnerHTML = __webpack_require__(45);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(12);
var REACT_ELEMENT_TYPE = __webpack_require__(137);

var getIteratorFn = __webpack_require__(173);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(34);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var ReactCurrentOwner = __webpack_require__(12);
var ReactComponentTreeHook = __webpack_require__(9);
var ReactElement = __webpack_require__(14);

var checkReactTypeSpec = __webpack_require__(187);

var canDefineProperty = __webpack_require__(50);
var getIteratorFn = __webpack_require__(51);
var warning = __webpack_require__(2);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
        info += getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
//TODO: encoding was UTF-16 LE --> changed to UTF-8 without BOM
var squad = __webpack_require__(103);
var nextPersonId = 0;
var firstNames = [];
var lastNames = [];
var loremIpsum = [];
var statuses = [];
var posterWidth = 400;
var posterHeight = 400;
var _canvas;
function makePoster(color) {
    if (!_canvas) {
        _canvas = document.createElement("canvas");
        _canvas.width = posterWidth;
        _canvas.height = posterHeight;
    }
    var ctxt = _canvas.getContext("2d");
    ctxt.fillStyle = color;
    ctxt.fillRect(0, 0, posterWidth, posterHeight);
    return _canvas.toDataURL();
}
var posterColors = [
    [68, 34, 87], [100, 66, 119], [132, 98, 151],
    [164, 162, 165], [196, 194, 197], [228, 226, 229],
    [220, 77, 6], [252, 109, 38], [255, 141, 70]
];
var posters = posterColors.map(function (color) {
    return makePoster("rgb(" + color.join(", ") + ")");
});
function randomInt(first, last) {
    return Math.round(Math.random() * (last - first)) + first;
}
function randomElement(array) {
    return array[randomInt(0, array.length - 1)];
}
function genArray(minLength, maxLength, genElement) {
    var len = randomInt(minLength, maxLength);
    var result = new Array(len);
    for (var i = 0; i < len; i++) {
        result[i] = genElement();
    }
    return result;
}
function genName() {
    return randomElement(firstNames) + " " + randomElement(lastNames);
}
function genPhoneNumber() {
    return "555-0" + randomInt(100, 199);
}
function genPerson() {
    return {
        id: nextPersonId++,
        name: genName(),
        status: randomElement(statuses),
        score: randomElement([2, 3, 4, 5, 6, 7, 8, 9]),
        picture: randomElement(posters),
        mobilePhone: genPhoneNumber(),
        workPhone: genPhoneNumber()
    };
}
var personCount = 50;
var people = genArray(personCount, personCount, genPerson);
people = [];
var person;
squad.members.forEach(function (element) {
    person = {
        attacks: element.attacksWon,
        defenses: element.defensesWon,
        planetary: element.hasPlanetaryCommand,
        hq: element.hqLevel,
        officer: element.isOfficer,
        ownner: element.isOwner,
        joinDate: element.joinDate,
        login: element.lastLoginTime,
        updated: element.lastUpdated,
        name: element.name,
        planet: element.planet,
        id: element.playerId,
        rank: element.rank,
        reputationInvested: element.reputationInvested,
        score: element.score,
        tournamentRating: element.tournamentRating,
        tournamentScores: element.tournamentScores,
        troopsDonated: element.troopsDonated,
        troopsReceived: element.troopsReceived,
        warParty: element.warParty,
        xp: element.xp,
        picture: randomElement(posters)
    };
    people.push(person);
});
//var memberDetails: Array<Object>
var memberDetails = [];
memberDetails.push(__webpack_require__(192)("./" + squad.members[0].playerId + '@1490386192.json'));
memberDetails.push(__webpack_require__(101));
memberDetails.push(__webpack_require__(105));
var members = [];
var member;
memberDetails.forEach(function (element) {
    member = {
        timeZoneOffset: element.playerModel.timeZoneOffset,
        scalars: element.scalars,
        troops: element.playerModel.upgrades.troop
    };
    members.push(member);
    console.log(member);
});
console.log({
    people: people,
    members: members
});
console.log({
    people: people
});
module.exports = {
    people: people,
    members: members
};


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(16);
var urlToContent = {
    new: "What's New",
    groups: "Some other view",
    settings: "Settings"
};
var OtherPage = React.createClass({
    propTypes: {
        location: React.PropTypes.array.isRequired
    },
    render: function () {
        var title = urlToContent[this.props.location] || "Other";
        return React.createElement("h2", { className: "win-h2", style: { marginLeft: "10px" } }, title);
    }
});
module.exports = OtherPage;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WinJS = __webpack_require__(28);
var React = __webpack_require__(16);
var ProfilePicture_1 = __webpack_require__(85);
var ReactWinJS = __webpack_require__(52);
function calc100PercentMinus(n) {
    return n === 0 ?
        "100%" :
        "calc(100% - " + (n + "px") + ")";
}
var PeoplePage = React.createClass({
    handleToggleSelectionMode: function () {
        this.setState({
            selectionMode: !this.state.selectionMode
        });
        this.props.onNavigate(["people"]);
        this.refs.listView.winControl.selection.clear();
    },
    handleSelectionChanged: function (eventObject) {
        var listView = eventObject.currentTarget.winControl;
        var indices = listView.selection.getIndices();
        // Post to avoid navigating while in the middle of the event handler
        setTimeout(function () {
            this.setState({ selectedPeople: indices });
            this.props.onNavigate(indices.length === 1 && !this.state.selectionMode ? ["people", indices[0]] : ["people"]);
        }.bind(this), 0);
    },
    //handleDelete() {
    //    var people = this.props.people;
    //    var indices = this.state.selectedPeople;
    //    indices.sort();
    //    indices.reverse();
    //    indices.forEach(function (i: number) {
    //        people.splice(i, 1);
    //    });
    //    this.setState({
    //        selectedPeople: [],
    //        selectionMode: false
    //    });
    //    this.props.onPeopleChanged(people);
    //},
    handleContentAnimating: function (eventObject) {
        //// Disable ListView's entrance animation
        //if (eventObject.detail.type === "entrance") {
        //    eventObject.preventDefault();
        //}
    },
    personRenderer: ReactWinJS.reactRenderer(function (person) {
        return (React.createElement("div", null,
            React.createElement(ProfilePicture_1.default, { backgroundUrl: person.data.picture, size: 34 }),
            React.createElement("span", { className: "name" }, person.data.name),
            React.createElement("br", null),
            React.createElement("span", { className: "HQ" },
                "HQ: ",
                person.data.hq,
                " "),
            React.createElement("span", { className: "Rank" },
                "Rank: ",
                person.data.rank,
                " "),
            React.createElement("span", { className: "XP" },
                "XP: ",
                person.data.xp,
                " "),
            React.createElement("span", { className: "Score" },
                "Score: ",
                person.data.score),
            React.createElement("br", null),
            React.createElement("span", { className: "Attacks" },
                "Attacks: ",
                person.data.attacks,
                " "),
            React.createElement("span", { className: "Defenses" },
                "Defenses: ",
                person.data.defenses),
            React.createElement("br", null),
            React.createElement("span", { className: "reputationInvested" },
                "reputation invested: ",
                person.data.reputationInvested),
            React.createElement("br", null)));
    }),
    //groupHeaderRenderer: ReactWinJS.reactRenderer(function(item: any) {
    //    return (
    //        <div>{item.data.title}</div>
    //    );
    //}),
    renderPeoplePane: function (peoplePaneWidth) {
        return (React.createElement("div", { className: "peopleSearchPane", style: { height: "100%", width: peoplePaneWidth, display: "inline-block", verticalAlign: "top" } },
            React.createElement(ReactWinJS.ListView, { ref: "listView", className: "peopleListView win-selectionstylefilled", style: { height: "calc(100% - 48px)" }, itemDataSource: this.props.people.dataSource, itemTemplate: this.personRenderer, 
                //groupDataSource={this.props.people.groups.dataSource}
                //groupHeaderTemplate={this.groupHeaderRenderer}
                layout: this.state.layout, selectionMode: this.state.selectionMode ? "multi" : "single", tapBehavior: this.state.selectionMode ? "toggleSelect" : "directSelect", onSelectionChanged: this.handleSelectionChanged, onContentAnimating: this.handleContentAnimating })));
    },
    renderProfilePane: function (selectedIndex, peoplePaneWidth) {
        if (selectedIndex === null) {
            return (React.createElement("div", { className: "profilePane", style: { height: "100%", width: calc100PercentMinus(peoplePaneWidth), display: "inline-block", verticalAlign: "top" } },
                React.createElement("div", { style: { display: "flex", height: "100%", justifyContent: "center", alignItems: "center", flexDirection: "column" } },
                    React.createElement("h1", { className: "win-h1", style: { color: "grey" } }, "No Selection"))));
        }
        else {
            var selectedPerson = this.props.people.getAt(selectedIndex);
            return (React.createElement("div", { className: "profilePane", style: { height: "100%", width: calc100PercentMinus(peoplePaneWidth), display: "inline-block", verticalAlign: "top" } },
                React.createElement("div", { className: "profileHeader" },
                    React.createElement("div", { className: "name" }, selectedPerson.name),
                    React.createElement("div", { className: "personInfo" },
                        React.createElement(ProfilePicture_1.default, { backgroundUrl: selectedPerson.picture, size: 100 }),
                        React.createElement("div", { className: "profileStatus" },
                            React.createElement("span", { className: "message" },
                                selectedPerson.score,
                                " "),
                            React.createElement("span", { className: "login" },
                                "login: ",
                                selectedPerson.updated),
                            React.createElement("span", { className: "updated" },
                                "updated: ",
                                selectedPerson.login),
                            React.createElement("span", { className: "timeZoneOffset" }, "timeZoneOffset: ")))),
                React.createElement("div", { className: "separator" }),
                React.createElement("div", { className: "profileContent" },
                    React.createElement("ul", null,
                        React.createElement("li", null,
                            React.createElement("span", { className: "messageIcon" }),
                            "Message"),
                        React.createElement("li", null,
                            React.createElement("span", { className: "emailIcon" }),
                            "Email work"),
                        React.createElement("li", null,
                            React.createElement("span", { className: "mapIcon" }),
                            "Map home")))));
        }
    },
    propTypes: {
        mode: React.PropTypes.oneOf(["small", "medium", "large"]).isRequired,
        people: React.PropTypes.object.isRequired,
        //members: React.PropTypes.object.isRequired,
        location: React.PropTypes.array.isRequired,
        onNavigate: React.PropTypes.func.isRequired,
        onPeopleChanged: React.PropTypes.func.isRequired
    },
    getInitialState: function () {
        return {
            layout: { type: WinJS.UI.ListLayout },
            selectedPeople: [],
            selectionMode: false
        };
    },
    render: function () {
        var selectedIndex = this.props.location.length >= 2 ? this.props.location[1] : null;
        if (this.props.mode === "small") {
            if (selectedIndex === null) {
                return this.renderPeoplePane("100%");
            }
            else {
                return this.renderProfilePane(selectedIndex, 0);
            }
        }
        else {
            var peoplePaneWidth = 320;
            return (React.createElement("div", { style: { height: "100%" } },
                this.renderPeoplePane(peoplePaneWidth),
                this.renderProfilePane(selectedIndex, peoplePaneWidth)));
        }
    }
});
module.exports = PeoplePage;


/***/ }),
/* 84 */,
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(16);
var ProfilePicture = (function (_super) {
    __extends(ProfilePicture, _super);
    function ProfilePicture() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProfilePicture.prototype.render = function () {
        var size = this.props.size;
        var cssUrl = "url(" + this.props.backgroundUrl + ")";
        return (React.createElement("div", { className: "profilePicture", style: {
                backgroundImage: cssUrl,
                width: size,
                height: size,
                WebkitBorderRadius: size,
                MozBorderRadius: size,
                borderRadius: size,
                backgroundSize: "cover",
                display: "inline-block"
            } },
            React.createElement("img", { src: "assets/img/profile.png", height: size, width: size })));
    };
    return ProfilePicture;
}(React.Component));
exports.default = ProfilePicture;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WinJS = __webpack_require__(28);
var React = __webpack_require__(16);
var ReactDOM = __webpack_require__(53);
//import * as ReactWinJS from 'react-winjs';
var ReactWinJS = __webpack_require__(52);
//import PeoplePage from './PeoplePage';
var PeoplePage = __webpack_require__(83);
var OtherPage = __webpack_require__(82);
//import * as Data from './FakeData'
//var Data = require('./FakeData.ts');
var Data = __webpack_require__(81);
var splitViewId = "rootSplitView";
var splitViewConfigs = {
    small: {
        closedDisplayMode: "none",
        openedDisplayMode: "overlay"
    },
    medium: {
        closedDisplayMode: "inline",
        openedDisplayMode: "overlay"
    },
    large: {
        closedDisplayMode: "inline",
        openedDisplayMode: "inline"
    }
};
function merge() {
    var k;
    var result = {};
    for (var i = 0, len = arguments.length; i < len; i++) {
        var obj = arguments[i];
        if (obj) {
            for (k in obj) {
                result[k] = obj[k];
            }
        }
    }
    return result;
}
function getMode() {
    return (window.innerWidth >= 1366 ? "large" :
        window.innerWidth >= 800 ? "medium" :
            "small");
}
var App = React.createClass({
    getSplitViewConfig: function () {
        return splitViewConfigs[this.state.mode];
    },
    handlePeopleChanged: function (newPeople) {
        this.setState({
            people: newPeople
        });
    },
    handleNavigation: function (newLocation) {
        this.setState({
            location: newLocation
        });
    },
    handleBack: function () {
        var location = this.state.location;
        location.pop();
        this.handleNavigation(location);
    },
    handleResize: function () {
        var prevMode = this.state.mode;
        var nextMode = getMode();
        if (prevMode !== nextMode) {
            this.setState({ mode: nextMode });
        }
    },
    handleCommandInvoked: function (newLocation) {
        this.setState({
            location: newLocation,
            paneOpened: this.getSplitViewConfig().openedDisplayMode === "overlay" ? false : this.state.paneOpened
        });
    },
    handleTogglePane: function () {
        this.setState({ paneOpened: !this.state.paneOpened });
    },
    handleAfterClose: function () {
        this.setState({ paneOpened: false });
    },
    getInitialState: function () {
        var mode = getMode();
        var groupKey = function (data) {
            return data.name[0].toUpperCase();
        };
        var groupData = function (data) {
            return { title: groupKey(data) };
        };
        var sorter = function (a, b) {
            if (a.name < b.name) {
                return -1;
            }
            else if (a.name > b.name) {
                return 1;
            }
            else {
                return 0;
            }
        };
        var data = new WinJS.Binding.List(Data.people)
            .createSorted(sorter)
            .createGrouped(groupKey, groupData);
        return {
            people: data,
            mode: mode,
            location: ["people"]
        };
    },
    componentWillMount: function () {
        window.addEventListener("resize", this.handleResize);
    },
    componentWillUnmount: function () {
        window.removeEventListener("resize", this.handleResize);
    },
    renderPeoplePage: function () {
        return (React.createElement(PeoplePage, { mode: this.state.mode, people: this.state.people, location: this.state.location, onNavigate: this.handleNavigation, onPeopleChanged: this.handlePeopleChanged }));
    },
    renderOtherPage: function () {
        return React.createElement(OtherPage, { location: this.state.location });
    },
    renderContent: function () {
        if (this.state.location.length === 0 || this.state.location[0] === "people") {
            return this.renderPeoplePage();
        }
        else {
            return this.renderOtherPage();
        }
    },
    // TODO: Fix Me!
    renderBackButton: function () {
        var canGoBack = this.state.location.length > 1;
        var shouldShowBackButton = canGoBack && this.state.mode === "small";
        return shouldShowBackButton ?
            React.createElement("button", { style: { display: "inline-block" }, className: "win-backbutton", onClick: this.handleBack }) :
            null;
    },
    render: function () {
        var paneComponent = (React.createElement("div", null,
            React.createElement(ReactWinJS.SplitView.Command, { label: "People", icon: "contact", onInvoked: this.handleCommandInvoked.bind(null, ["people"]) }),
            React.createElement(ReactWinJS.SplitView.Command, { label: "What's New", icon: "comment", onInvoked: this.handleCommandInvoked.bind(null, ["new"]) }),
            React.createElement(ReactWinJS.SplitView.Command
            /* TODO: same as the text? */
            , { 
                /* TODO: same as the text? */
                label: "Some other view.", icon: "people", onInvoked: this.handleCommandInvoked.bind(null, ["groups"]) }),
            React.createElement(ReactWinJS.SplitView.Command, { style: { position: "absolute", bottom: 0, width: "100%" }, label: "Settings", icon: "settings", onInvoked: this.handleCommandInvoked.bind(null, ["settings"]) })));
        var contentComponent = this.renderContent();
        return (React.createElement("div", { style: { height: "100%" } },
            React.createElement("div", { style: { height: 48, backgroundColor: "rgba(1, 121, 216, 0.3)" }, className: "win-ui-dark" },
                React.createElement(ReactWinJS.SplitViewPaneToggle, { "aria-controls": splitViewId, style: { display: 'inline-block' }, paneOpened: this.state.paneOpened, onInvoked: this.handleTogglePane }),
                this.renderBackButton(),
                React.createElement("h4", { className: "win-h4", style: { display: "inline-block", marginLeft: 5 } }, "fcuk")),
            React.createElement(ReactWinJS.SplitView, { id: splitViewId, style: { height: "calc(100% - 48px)" }, paneComponent: paneComponent, contentComponent: contentComponent, onAfterClose: this.handleAfterClose, paneOpened: this.state.paneOpened })));
    }
});
ReactDOM.render(React.createElement(App, null), document.getElementById("app"));


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(87);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = __webpack_require__(97);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = __webpack_require__(1);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(6);

var createArrayFromMixed = __webpack_require__(90);
var getMarkupWrap = __webpack_require__(92);
var invariant = __webpack_require__(1);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(6);

var invariant = __webpack_require__(1);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(94);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = __webpack_require__(96);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(6);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = __webpack_require__(99);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 101 */
/***/ (function(module, exports) {

module.exports = {
	"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
	"playerModel": {
		"guildInfo": {
			"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
			"guildName": "fcuk",
			"icon": "SquadSymbols_11",
			"joinDate": 1487765772,
			"playerHasOutstandingJoinRequest": false
		},
		"upgrades": {
			"troop": {
				"Dark": 5,
				"Storm": 5,
				"EmpireSpeeder": 5,
				"ATST": 5,
				"Scout": 4,
				"2MTank": 5,
				"HeroATST": 5,
				"HeroATMP": 5,
				"Dewback": 5,
				"ATMP": 4,
				"HeroCrimsonGuard": 5,
				"Technician": 5
			},
			"specialAttack": {
				"AtmosMig": 1
			},
			"building": {},
			"equipment": {}
		},
		"prizes": {
			"troop": {
				"Dewback": 1,
				"Scout": 60,
				"ATMP": 22,
				"HeroATST": 23,
				"Shock": 51,
				"2MTank": 18,
				"SecurityDroid": 68,
				"EmpireSpeeder": 37,
				"ATAT": 17,
				"HeroCrimsonGuard": 12,
				"HeroATMP": 12,
				"HeroATAT": 14,
				"EmpireHovertankSample": 7,
				"KubazInvader": 3,
				"Technician": 6,
				"EmpireTognath": 3,
				"HeavyStorm": 12,
				"ProbeDroid": 7
			},
			"specialAttack": {
				"AtmosMig": 50,
				"TieBomber": 2,
				"TieDefender": 1,
				"TieInterceptor": 3,
				"TieFighter": 1
			},
			"resources": {},
			"crates": {
				"available": {},
				"inProgress": {},
				"next": 353,
				"nextDailyCrateTime": 1490414400,
				"nextHolonetTime": 1488271928
			}
		},
		"donatedTroops": {
			"troopMercenaryEmpireGamorreanWarrior2": {
				"779a335e-7216-11e6-8b58-06033c004f77": 2
			},
			"troopHeavyStorm7": {
				"3076de44-a12f-11e6-85c9-060a32004f8c": 1
			}
		},
		"buildingsUnderConstruction": [],
		"map": {
			"next": 280,
			"planet": "planet1",
			"buildings": [
				{
					"key": "bld_8",
					"x": 14,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_70",
					"x": 17,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_7",
					"x": 13,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_6",
					"x": 12,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_5",
					"x": 11,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_106",
					"x": 7,
					"z": 19,
					"uid": "empireCreditGenerator4",
					"lastCollectTime": 1490380540,
					"currentStorage": 0
				},
				{
					"key": "bld_20",
					"x": 15,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_64",
					"x": 17,
					"z": 7,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_4",
					"x": 10,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_63",
					"x": 17,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_3",
					"x": 9,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_2",
					"x": 8,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_62",
					"x": 7,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_61",
					"x": 17,
					"z": 15,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_68",
					"x": 17,
					"z": 9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_24",
					"x": 19,
					"z": 13,
					"uid": "empireCreditGenerator4",
					"lastCollectTime": 1490380543,
					"currentStorage": 0
				},
				{
					"key": "bld_67",
					"x": 16,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_66",
					"x": 17,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_65",
					"x": 17,
					"z": 16,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_78",
					"x": 19,
					"z": 19,
					"uid": "empireCreditStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_91",
					"x": 7,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_90",
					"x": 8,
					"z": 6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_86",
					"x": 17,
					"z": 12,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_85",
					"x": 17,
					"z": 13,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_84",
					"x": 17,
					"z": 14,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_88",
					"x": 17,
					"z": 10,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_87",
					"x": 17,
					"z": 11,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_60",
					"x": 15,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_17",
					"x": 9,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_16",
					"x": 10,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_15",
					"x": 11,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_14",
					"x": 12,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_58",
					"x": 19,
					"z": 10,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490380544,
					"currentStorage": 0
				},
				{
					"key": "bld_19",
					"x": 13,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_18",
					"x": 14,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_13",
					"x": 16,
					"z": 6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_82",
					"x": 10,
					"z": 15,
					"uid": "empireMortar4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_81",
					"x": 12,
					"z": 8,
					"uid": "empireMortar4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_23",
					"x": 13,
					"z": 19,
					"uid": "empireCreditStorage4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_76",
					"x": 1,
					"z": 19,
					"uid": "empireCreditGenerator4",
					"lastCollectTime": 1490380539,
					"currentStorage": 0
				},
				{
					"key": "bld_79",
					"x": 16,
					"z": 19,
					"uid": "empireMaterialsStorage4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_107",
					"x": 4,
					"z": 19,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490380539,
					"currentStorage": 0
				},
				{
					"key": "bld_54",
					"x": 19,
					"z": 16,
					"uid": "empireMaterialsStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_53",
					"x": 10,
					"z": 19,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490380541,
					"currentStorage": 0
				},
				{
					"key": "bld_110",
					"x": 12,
					"z": 15,
					"uid": "empireRocketTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_52",
					"x": 10,
					"z": 8,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_55",
					"x": 6,
					"z": 8,
					"uid": "empireSquadBuilding4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_73",
					"x": 14,
					"z": 8,
					"uid": "empireRocketTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_124",
					"x": 15,
					"z": 10,
					"uid": "empireShieldGenerator4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_112",
					"x": 8,
					"z": 12,
					"uid": "empireShieldGenerator4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_118",
					"x": 6,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_117",
					"x": 5,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_119",
					"x": 4,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_122",
					"x": 6,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_116",
					"x": 5,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_115",
					"x": 4,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_22",
					"x": 6,
					"z": 15,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_111",
					"x": 6,
					"z": 12,
					"uid": "empireRocketTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_121",
					"x": 4,
					"z": 16,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_120",
					"x": 4,
					"z": 15,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_9",
					"x": 4,
					"z": 7,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_114",
					"x": 4,
					"z": 14,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_113",
					"x": 4,
					"z": 13,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_83",
					"x": 4,
					"z": 11,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_12",
					"x": 4,
					"z": 10,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_89",
					"x": 4,
					"z": 9,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_10",
					"x": 4,
					"z": 12,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_21",
					"x": 4,
					"z": 8,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_80",
					"x": 16,
					"z": 8,
					"uid": "empireTrapStrikeGeneric4",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_72",
					"x": 15,
					"z": 14,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_108",
					"x": 15,
					"z": 16,
					"uid": "empireTrapStrikeGeneric4",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_123",
					"x": -2,
					"z": 19,
					"uid": "empireScoutTower1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_25",
					"x": 13,
					"z": -1,
					"uid": "empireStarport4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_71",
					"x": 7,
					"z": -1,
					"uid": "empireStarport4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_59",
					"x": 2,
					"z": 1,
					"uid": "empireFactory4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_69",
					"x": 0,
					"z": 6,
					"uid": "empireBarracks5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_56",
					"x": 0,
					"z": 9,
					"uid": "empireBarracks4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_93",
					"x": -2,
					"z": 2,
					"uid": "empireOffenseLab5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_109",
					"x": 0,
					"z": 12,
					"uid": "empireBarracks4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_127",
					"x": -1,
					"z": 15,
					"uid": "empireTacticalCommand4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_1",
					"x": 10,
					"z": 10,
					"uid": "empireHQ5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_254",
					"x": -5,
					"z": 16,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490380537,
					"currentStorage": 0
				},
				{
					"key": "bld_253",
					"x": -4,
					"z": 12,
					"uid": "empireCreditGenerator5",
					"lastCollectTime": 1490380536,
					"currentStorage": 0
				},
				{
					"key": "bld_247",
					"x": -21,
					"z": -21,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_240",
					"x": -19,
					"z": -19,
					"uid": "empireRocketTurret1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_245",
					"x": -19,
					"z": -21,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_242",
					"x": -17,
					"z": -21,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_246",
					"x": -21,
					"z": -19,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_241",
					"x": -21,
					"z": -17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_250",
					"x": -19,
					"z": -17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_249",
					"x": -17,
					"z": -17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_243",
					"x": -17,
					"z": -19,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_248",
					"x": -18,
					"z": -17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_244",
					"x": -17,
					"z": -18,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_92",
					"x": -17,
					"z": -20,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_11",
					"x": -20,
					"z": -17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_26",
					"x": 20,
					"z": -21,
					"uid": "empireDroidHut1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_275",
					"x": -1,
					"z": -17,
					"uid": "junkSmall1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_277",
					"x": -15,
					"z": 17,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 2
				},
				{
					"key": "bld_77",
					"x": 19,
					"z": 2,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490380546,
					"currentStorage": 0
				},
				{
					"key": "bld_57",
					"x": 19,
					"z": 6,
					"uid": "empireCreditGenerator5",
					"lastCollectTime": 1490380545,
					"currentStorage": 0
				}
			]
		},
		"inventory": {
			"storage": {
				"credits": {
					"amount": 19858,
					"capacity": 225000,
					"scale": 1
				},
				"materials": {
					"amount": 14854,
					"capacity": 225000,
					"scale": 1
				},
				"contraband": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				},
				"reputation": {
					"amount": 1,
					"capacity": 14,
					"scale": 1
				},
				"crystals": {
					"amount": 424,
					"capacity": -1,
					"scale": 1
				},
				"droids": {
					"amount": 2,
					"capacity": 5,
					"scale": 1
				},
				"xp": {
					"amount": 749,
					"capacity": -1,
					"scale": 1
				},
				"troop": {
					"amount": 0,
					"capacity": 20,
					"scale": 1
				},
				"hero": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				},
				"champion": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				}
			},
			"capacity": -1,
			"subStorage": {
				"troop": {
					"storage": {
						"troopEmpireSpeeder5": {
							"amount": 3,
							"capacity": -1,
							"scale": 6
						},
						"troopTechnician5": {
							"amount": 2,
							"capacity": -1,
							"scale": 4
						}
					},
					"capacity": 52,
					"subStorage": {}
				},
				"specialAttack": {
					"storage": {},
					"capacity": 0,
					"subStorage": {}
				},
				"hero": {
					"storage": {
						"troopHeroCrimsonGuard5": {
							"amount": 1,
							"capacity": 1,
							"scale": 1
						},
						"troopHeroATMP5": {
							"amount": 1,
							"capacity": 1,
							"scale": 1
						}
					},
					"capacity": 2,
					"subStorage": {}
				},
				"champion": {
					"storage": {},
					"capacity": 0,
					"subStorage": {}
				}
			}
		},
		"faction": "empire",
		"currentQuest": "",
		"protectedUntil": 1490402045,
		"protectionFrom": 1490358845,
		"protectionCooldownUntil": {},
		"battleLogs": [
			{
				"battleId": "b37576de-07c9-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "ff0aa6ba-fa7e-11e6-9158-06cb44004f79",
					"name": "pasz",
					"faction": "rebel",
					"guildId": "e6290edb-70fb-11e4-b32e-06dc8c004fbd",
					"guildName": "Ramblahz",
					"attackRating": 381,
					"attackRatingDelta": 5,
					"defenseRating": 12,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 156,
					"defenseRatingDelta": -5,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489394992,
				"looted": {
					"credits": 11267,
					"materials": 12576
				},
				"earned": {
					"credits": 11267,
					"materials": 12576
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 21414,
					"materials": 23902
				},
				"troopsExpended": {
					"troopHeroChewbacca4": 1,
					"troopBantha4": 5,
					"troopWookie4": 3,
					"specialAttackZ951": 1,
					"specialAttackAWing1": 1,
					"troopPathfinder5": 4,
					"troopAAT14": 2
				},
				"attackerGuildTroopsExpended": {
					"troopWookie4": 2,
					"troopSoldier4": 2
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 53,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 18,
				"defenderPotentialMedalGain": 12,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "203a3bca-0807-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "a233bc79-8a34-11e5-8743-063864004f75",
					"name": "Obi Two",
					"faction": "rebel",
					"guildId": "766c920d-5aa1-11e6-b06d-06dc8c004fbd",
					"guildName": "CollateralDamage",
					"attackRating": 3816,
					"attackRatingDelta": -23,
					"defenseRating": -707,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 184,
					"defenseRatingDelta": 28,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489421597,
				"looted": {},
				"earned": {},
				"maxLootable": {
					"contraband": 0,
					"credits": 21199,
					"materials": 23902
				},
				"troopsExpended": {
					"troopVanguard1": 1
				},
				"attackerGuildTroopsExpended": null,
				"defenderGuildTroopsExpended": null,
				"baseDamagePercent": 0,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "0",
				"server": true,
				"attackerEquipment": [
					"eqpRebelWallHealth7",
					"eqpRebelHQHealth7",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretDamage4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "f9c638e9-0807-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "898c5bcc-9553-11e6-a21c-06033c004f77",
					"name": "Эдуард",
					"faction": "rebel",
					"guildId": "4bc498fe-1c77-11e6-b5c3-06dc8c004fbd",
					"guildName": "GTOrebels",
					"attackRating": 2739,
					"attackRatingDelta": 6,
					"defenseRating": -648,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 178,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489421693,
				"looted": {
					"credits": 20199,
					"materials": 22902
				},
				"earned": {
					"contraband": 0,
					"credits": 21199,
					"materials": 23902
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 21199,
					"materials": 23902
				},
				"troopsExpended": {
					"troopSoldier6": 24,
					"troopJuggernaut6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 92,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 19,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth6",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretDamage3"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "64308117-086c-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "5affe0b0-edde-11e6-9e25-06033c004f77",
					"name": "resquiel",
					"faction": "rebel",
					"guildId": "6b6c443a-5f62-11e6-b250-06e6ee004fbc",
					"guildName": "SHOCK_WAVE",
					"attackRating": 4101,
					"attackRatingDelta": 6,
					"defenseRating": -212,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 172,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489464867,
				"looted": {
					"materials": 17842,
					"credits": 15200
				},
				"earned": {
					"contraband": 0,
					"materials": 18842,
					"credits": 16200
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 20400,
					"materials": 23042
				},
				"troopsExpended": {
					"troopAAT16": 3,
					"troopSoldier6": 44,
					"troopHeavyRebel5": 1,
					"troopMercenaryRebelGamorreanWarrior1": 1,
					"specialAttackXWing6": 1,
					"troopHeroLeia5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 92,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 25,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth2",
					"eqpRebelContrabandGeneratorHealth3",
					"eqpRebelMaterialsGeneratorHealth1",
					"eqpRebelHQHealth3",
					"eqpRebelCreditGeneratorHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "50795ca7-08d0-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "1fe88ac7-a837-11e6-8dfd-061c98004f78",
					"name": "TACX",
					"faction": "rebel",
					"guildId": "28873c9d-ac9a-11e4-a9a2-06e6ee004fbc",
					"guildName": "RebelThorns",
					"attackRating": 2499,
					"attackRatingDelta": 10,
					"defenseRating": -111,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 162,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489507734,
				"looted": {
					"materials": 21354,
					"credits": 18760
				},
				"earned": {
					"contraband": 0,
					"materials": 22354,
					"credits": 19760
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19760,
					"materials": 22354
				},
				"troopsExpended": {
					"troopSoldier6": 20,
					"troopMedic6": 2,
					"troopBantha6": 4
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 19,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage2",
					"eqpRebelMortarTurretDamage2",
					"eqpRebelWallHealth5",
					"eqpRebelSandSoldier2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "53602098-0958-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "d5cc4ee7-e231-11e6-81e1-06dc8c004fbd",
					"name": "Léna",
					"faction": "rebel",
					"guildId": "d6f3b631-739b-11e6-859a-069da4004f8b",
					"guildName": "Power-Hungry",
					"attackRating": 324,
					"attackRatingDelta": -11,
					"defenseRating": -166,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 175,
					"defenseRatingDelta": 13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489566157,
				"looted": {
					"credits": 6648,
					"materials": 7200
				},
				"earned": {
					"credits": 6648,
					"materials": 7200
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19248,
					"materials": 21802
				},
				"troopsExpended": {
					"troopJuggernaut5": 1,
					"troopAAT15": 2,
					"troopIthorianInfiltrator5": 1,
					"troopDesertSkiff5": 1,
					"troopRebelSpeeder5": 1,
					"troopWookie5": 2,
					"troopMedic5": 1,
					"troopKubazInvader5": 1,
					"specialAttackHWK2902": 1,
					"specialAttackBWing2": 1,
					"troopHeroLeia5": 1,
					"specialAttackXWing5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 47,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 18,
				"defenderPotentialMedalGain": 13,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelCreditGeneratorHealth1",
					"eqpRebelMaterialsGeneratorHealth1",
					"eqpRebelContrabandGeneratorHealth1",
					"eqpRebelHQHealth2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "0d9b4bf2-0959-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "3b810174-a651-11e5-b5e8-06e084004f92",
					"name": "skywall",
					"faction": "rebel",
					"guildId": "c9e057f7-a3e1-11e5-9c9b-06dc8c004fbd",
					"guildName": "RUSSIANBEAR",
					"attackRating": 2441,
					"attackRatingDelta": 10,
					"defenseRating": -736,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 165,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489566509,
				"looted": {
					"credits": 15191,
					"materials": 17280
				},
				"earned": {
					"contraband": 0,
					"credits": 500,
					"materials": 18280
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 16191,
					"materials": 18280
				},
				"troopsExpended": {
					"troopSoldier6": 13,
					"troopHeavyRebel6": 1,
					"troopMarksman6": 2,
					"troopMedic5": 2,
					"troopT2BTank4": 1,
					"troopHeroChewbacca4": 1,
					"troopJuggernaut5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 13,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelContrabandGeneratorHealth1",
					"eqpRebelMaterialsGeneratorHealth2",
					"eqpRebelCreditGeneratorHealth2",
					"eqpRebelHQHealth3",
					"eqpRebelWallHealth2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "91dcef07-09dc-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "d34ebf88-a222-11e6-bcbb-061c98004f78",
					"name": "GOKU",
					"faction": "rebel",
					"guildId": "37a8a38d-ba10-11e5-8219-063864004f75",
					"guildName": "ITALIANIS",
					"attackRating": 1365,
					"attackRatingDelta": -12,
					"defenseRating": -761,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 179,
					"defenseRatingDelta": 14,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489622923,
				"looted": {
					"credits": 2315,
					"materials": 2436
				},
				"earned": {
					"credits": 2315,
					"materials": 2436
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 10324,
					"materials": 16930
				},
				"troopsExpended": {
					"troopSoldier5": 20,
					"troopWookie5": 1,
					"troopHeavyRebel5": 1,
					"troopHeroR2D25": 1,
					"troopRebelSpeeder5": 3,
					"troopAAT15": 2,
					"troopJuggernaut5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopStorm6": 1
				},
				"baseDamagePercent": 35,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 16,
				"defenderPotentialMedalGain": 14,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth5",
					"eqpRebelBurstTurretDamage1",
					"eqpRebelRapidFireTurretHealth2",
					"eqpRebelContrabandGeneratorHealth5"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "d8f80fa9-09dc-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "556106bb-38eb-11e5-a37a-06e6ee004fbc",
					"name": "compozer",
					"faction": "rebel",
					"guildId": "8cf7f386-2f14-11e6-9fc8-060a32004f8c",
					"guildName": "The_Resistance",
					"attackRating": 40101,
					"attackRatingDelta": 10,
					"defenseRating": 575,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 169,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489623069,
				"looted": {
					"credits": 8308,
					"materials": 14821
				},
				"earned": {
					"contraband": 0,
					"credits": 9308,
					"materials": 15821
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 9308,
					"materials": 15821
				},
				"troopsExpended": {
					"troopSoldier9": 19,
					"troopRebelSpeeder9": 1,
					"troopHeroChewbacca9": 1,
					"troopMercenaryRebelTwilekIncinerator5": 1,
					"troopRebelJetpackTrooper10": 3
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopSniper7": 2,
					"troopStorm6": 1
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 43,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelWallHealth7",
					"eqpRebelHQHealth7",
					"eqpRebelCreditGeneratorHealth5",
					"eqpRebelMaterialsGeneratorHealth5",
					"eqpRebelSandSoldier2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "9fbd8552-0a62-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "4c6c3388-dc51-11e6-b64c-06a77e004fbb",
					"name": "ED1",
					"faction": "rebel",
					"guildId": "d0db2376-b404-11e6-bec8-06c66a004f76",
					"guildName": "SquadChuckNorris",
					"attackRating": 14559,
					"attackRatingDelta": 10,
					"defenseRating": -502,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 159,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489680546,
				"looted": {
					"materials": 23860,
					"credits": 16616
				},
				"earned": {
					"contraband": 0,
					"materials": 0,
					"credits": 17616
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17616,
					"materials": 24860
				},
				"troopsExpended": {
					"troopSoldier6": 16,
					"troopHeroChewbacca6": 1,
					"troopDesertSkiff6": 1,
					"troopHeavyRebel6": 6,
					"troopMedic5": 4
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage1",
					"eqpRebelHQHealth4",
					"eqpRebelMaterialsGeneratorHealth3",
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelWallHealth4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "fbfea76a-0ae8-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "966aa35a-ac20-11e5-8219-063864004f75",
					"name": "huff",
					"faction": "rebel",
					"guildId": "fce9e6a4-4fb9-11e6-b957-06cb44004f79",
					"guildName": "FIRESTORMERS",
					"attackRating": 560,
					"attackRatingDelta": 18,
					"defenseRating": -314,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 141,
					"defenseRatingDelta": -18,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489738258,
				"looted": {
					"materials": 22808,
					"credits": 16532
				},
				"earned": {
					"contraband": 0,
					"materials": 23808,
					"credits": 17532
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17532,
					"materials": 23808
				},
				"troopsExpended": {
					"troopJuggernaut6": 2,
					"troopHeavyRebel5": 3,
					"troopHeroChewbacca6": 1,
					"troopWookie5": 2,
					"troopSoldier5": 14
				},
				"attackerGuildTroopsExpended": {
					"troopRebelSpeeder8": 1,
					"troopAAT17": 1,
					"troopSoldier5": 2
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 18,
				"defenderPotentialMedalGain": 14,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMaterialsGeneratorHealth3",
					"eqpRebelWallHealth3",
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelHQHealth4",
					"eqpRebelContrabandGeneratorHealth3"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "dd17ecb2-0b6e-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "607941c8-ac4c-11e6-b0d5-06e6ee004fbc",
					"name": "killer",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 8649,
					"attackRatingDelta": 10,
					"defenseRating": -2085,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 131,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489795742,
				"looted": {
					"materials": 21966,
					"credits": 16466
				},
				"earned": {
					"contraband": 0,
					"materials": 22966,
					"credits": 17466
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17466,
					"materials": 22966
				},
				"troopsExpended": {
					"troopVanguard1": 14,
					"troopSoldier1": 24
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 28,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth1",
					"eqpRebelMaterialsGeneratorHealth1",
					"eqpRebelSandSoldier1",
					"eqpRebelRapidFireTurretDamage1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "f62d5115-0bf4-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "d25602b6-41e0-11e5-9d4a-06e6ee004fbc",
					"name": "zylo4u",
					"faction": "rebel",
					"guildId": "a31f4508-4b49-11e6-97a2-06e6ee004fbc",
					"guildName": "Deutsch_Reverse",
					"attackRating": 13472,
					"attackRatingDelta": -32,
					"defenseRating": 1437,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 169,
					"defenseRatingDelta": 38,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489853293,
				"looted": {},
				"earned": {},
				"maxLootable": {
					"contraband": 0,
					"credits": 17413,
					"materials": 22294
				},
				"troopsExpended": {
					"troopATTE9": 2,
					"troopBantha8": 8,
					"troopChampionRebelHeavyDroideka2": 1,
					"troopHeroLeia8": 1,
					"specialAttackZ958": 1
				},
				"attackerGuildTroopsExpended": null,
				"defenderGuildTroopsExpended": null,
				"baseDamagePercent": 0,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 38,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "0",
				"server": true,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelHQHealth7",
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelSandSoldier2",
					"eqpRebelWallHealth9",
					"eqpRebelMortarTurretDamage4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "1a070524-0bf5-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "70aed17b-dc2e-11e6-ba45-06033c004f77",
					"name": "juank",
					"faction": "rebel",
					"guildId": "853185af-9cce-11e6-acc5-06a77e004fbb",
					"guildName": "CAT_ATTACK",
					"attackRating": 488,
					"attackRatingDelta": -11,
					"defenseRating": -16,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 182,
					"defenseRatingDelta": 13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489853453,
				"looted": {
					"credits": 4200,
					"materials": 4200
				},
				"earned": {
					"credits": 4200,
					"materials": 4200
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17413,
					"materials": 22294
				},
				"troopsExpended": {
					"troopWookie5": 3,
					"troopHeroChewbacca4": 1,
					"troopRebelSpeeder4": 2,
					"troopT2BTank4": 2,
					"troopSoldier5": 12,
					"troopMedic4": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 37,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 18,
				"defenderPotentialMedalGain": 13,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "823edc3a-0bf5-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "5c5f6f20-e735-11e6-81e1-06dc8c004fbd",
					"name": "Asasinn",
					"faction": "rebel",
					"guildId": "cc159135-a554-11e6-91a8-06dc8c004fbd",
					"guildName": "CAZAIMPERIO",
					"attackRating": 3803,
					"attackRatingDelta": 10,
					"defenseRating": 350,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 172,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489853592,
				"looted": {
					"materials": 19197,
					"credits": 14316
				},
				"earned": {
					"contraband": 0,
					"materials": 20197,
					"credits": 15316
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 15316,
					"materials": 20197
				},
				"troopsExpended": {
					"troopVanguard5": 1,
					"troopHeroChewbacca6": 1,
					"troopWookie6": 5,
					"troopMedic5": 2,
					"troopJuggernaut5": 1,
					"troopRebelTognath1": 1,
					"troopMarksman5": 1,
					"troopSoldier5": 11
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 25,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelCreditGeneratorHealth1",
					"eqpRebelContrabandGeneratorHealth1",
					"eqpRebelMaterialsGeneratorHealth1",
					"eqpRebelHQHealth2",
					"eqpRebelWallHealth2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "33dcab99-0c7b-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "a2161066-002e-11e7-9191-06dc8c004fbd",
					"name": "Dimkash",
					"faction": "rebel",
					"guildId": "d78dc476-e5e2-11e5-af82-06e6ee004fbc",
					"guildName": "Na_Vi",
					"attackRating": 262,
					"attackRatingDelta": -10,
					"defenseRating": 123,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 184,
					"defenseRatingDelta": 12,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489910942,
				"looted": {},
				"earned": {},
				"maxLootable": {
					"contraband": 0,
					"credits": 22354,
					"materials": 20442
				},
				"troopsExpended": {
					"troopBantha4": 9,
					"troopAAT14": 3,
					"troopHeroChewbacca5": 1,
					"troopSoldier4": 5
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 4,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 18,
				"defenderPotentialMedalGain": 12,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "54d0a51d-0c7b-11e7-b7db-06a77e004fbb",
				"attacker": {
					"playerId": "a0c9694a-c454-11e6-86de-06cb44004f79",
					"name": "Maitre Guigui",
					"faction": "rebel",
					"guildId": "91c3fda6-ff08-11e5-927b-06c66a004f76",
					"guildName": "FrenchRebel",
					"attackRating": 5796,
					"attackRatingDelta": -24,
					"defenseRating": -698,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 213,
					"defenseRatingDelta": 29,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489911004,
				"looted": {
					"materials": 11400,
					"credits": 11505
				},
				"earned": {
					"materials": 11400,
					"credits": 11505
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 22354,
					"materials": 20442
				},
				"troopsExpended": {
					"troopSoldier5": 19,
					"troopJuggernaut5": 1,
					"troopHeavyRebel5": 2,
					"troopMedic5": 2,
					"troopHeroHanSolo5": 1,
					"troopPathfinder5": 6
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 1
				},
				"baseDamagePercent": 27,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 28,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth4",
					"eqpRebelBurstTurretHealth1",
					"eqpRebelWallHealth4",
					"eqpRebelRapidFireTurretHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "8ef0dd42-0c7b-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "b025bc7d-f4c0-11e6-8841-060a32004f8c",
					"name": "amperesun",
					"faction": "rebel",
					"guildId": "046036a6-46e8-11e6-8fd6-06cb44004f79",
					"guildName": "rebel-avengers",
					"attackRating": 2235,
					"attackRatingDelta": -16,
					"defenseRating": 173,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 232,
					"defenseRatingDelta": 19,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489911124,
				"looted": {
					"credits": 2496,
					"materials": 7728
				},
				"earned": {
					"credits": 2496,
					"materials": 7728
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17012,
					"materials": 14762
				},
				"troopsExpended": {
					"troopJuggernaut5": 1,
					"troopHeroChewbacca5": 1,
					"troopMedic5": 2,
					"troopWookie5": 9,
					"troopPathfinder5": 2,
					"troopSoldier5": 3,
					"specialAttackXWing5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 21,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 19,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "05a92b05-0c7c-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "a42948da-223c-11e6-9ca4-06e6ee004fbc",
					"name": "FlyingSimpson",
					"faction": "rebel",
					"guildId": "858b8241-b1a9-11e5-beef-06033c004f77",
					"guildName": "German-Rebells-E",
					"attackRating": 16599,
					"attackRatingDelta": 10,
					"defenseRating": -1904,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 222,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489911370,
				"looted": {
					"materials": 10033,
					"credits": 14891
				},
				"earned": {
					"contraband": 0,
					"materials": 11033,
					"credits": 15891
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 15891,
					"materials": 11033
				},
				"troopsExpended": {
					"troopHeavyRebel8": 3,
					"troopMedic8": 1,
					"troopChampionRebelDroideka7": 1,
					"troopAAT18": 2,
					"troopHeroLukeSkywalker6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 1,
					"troopHeavyStorm7": 1
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelHQHealth7",
					"eqpRebelWallHealth8",
					"eqpRebelSandSoldier2",
					"eqpRebelBurstTurretDamage3"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "55721edb-0d01-11e7-9fcf-06033c004f77",
				"attacker": {
					"playerId": "036b72db-5ed0-11e5-99f8-06e6ee004fbc",
					"name": "JOHN MAX",
					"faction": "rebel",
					"guildId": "aaf70f4a-d8e0-11e5-89ca-069da4004f8b",
					"guildName": "Praetorian_Guard",
					"attackRating": 16797,
					"attackRatingDelta": 10,
					"defenseRating": -5086,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 212,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489968581,
				"looted": {
					"credits": 20115,
					"materials": 19272
				},
				"earned": {
					"contraband": 0,
					"credits": 21115,
					"materials": 20272
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 21115,
					"materials": 20272
				},
				"troopsExpended": {
					"troopJuggernaut7": 1,
					"troopHeroHanSolo8": 1,
					"troopMedic8": 3,
					"troopAAT18": 1,
					"troopMarksman8": 2,
					"troopHeavyRebel8": 3,
					"troopMercenaryRebelGamorreanWarrior1": 1,
					"troopSoldier8": 13,
					"specialAttackBWing6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth8",
					"eqpRebelRapidFireTurretHealth6",
					"eqpRebelHQHealth8",
					"eqpRebelSandSoldier2",
					"eqpRebelCreditGeneratorHealth6"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "4c5515e9-0d87-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "35b1cd9f-f847-11e6-a79f-063864004f75",
					"name": "androidtappy2.0",
					"faction": "rebel",
					"guildId": "e040a6a0-5e40-11e6-931e-063864004f75",
					"guildName": "NewOldBoldRebels",
					"attackRating": 2739,
					"attackRatingDelta": 3,
					"defenseRating": 183,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 209,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490026144,
				"looted": {
					"credits": 18162,
					"materials": 10444
				},
				"earned": {
					"credits": 18162,
					"materials": 2809
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 20332,
					"materials": 20138
				},
				"troopsExpended": {
					"troopSoldier5": 45
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 50,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 22,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "5c792f09-0dca-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "7df57cd9-5220-11e6-af35-061c98004f78",
					"name": "Franco",
					"faction": "rebel",
					"guildId": "f7550118-30ac-11e6-aa76-06e6ee004fbc",
					"guildName": "RedForce5",
					"attackRating": 7616,
					"attackRatingDelta": 10,
					"defenseRating": -2034,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 199,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490054985,
				"looted": {
					"materials": 19030,
					"credits": 18705
				},
				"earned": {
					"contraband": 0,
					"materials": 20030,
					"credits": 19705
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19705,
					"materials": 20030
				},
				"troopsExpended": {
					"troopSoldier8": 8,
					"troopMedic7": 3,
					"troopJuggernaut8": 2,
					"troopMercenaryRebelTwilekIncinerator1": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelSandSoldier1",
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelHQHealth6",
					"eqpRebelBurstTurretDamage2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "81b8967f-0e50-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "088b1cdc-a98f-11e5-99f7-06cb44004f79",
					"name": "karlo",
					"faction": "rebel",
					"guildId": "eb561122-3111-11e6-8121-069da4004f8b",
					"guildName": "Peterpro",
					"attackRating": 11404,
					"attackRatingDelta": 3,
					"defenseRating": -4876,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 196,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490112539,
				"looted": {
					"credits": 3353,
					"materials": 4165
				},
				"earned": {
					"contraband": 0,
					"credits": 3613,
					"materials": 4425
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 4353,
					"materials": 5332
				},
				"troopsExpended": {
					"troopSoldier8": 30,
					"troopJuggernaut8": 1,
					"troopMarksman8": 1,
					"troopMercenaryRebelGamorreanWarrior3": 1,
					"troopHeroHanSolo7": 1,
					"specialAttackXWing8": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 69,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMortarTurretHealth3",
					"eqpRebelRapidFireTurretHealth3",
					"eqpRebelWallHealth6",
					"eqpRebelRapidFireTurretDamage2",
					"eqpRebelMortarTurretDamage3"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "81fe5773-0e93-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "5d5153ff-182b-11e6-9a6f-060a32004f8c",
					"name": "Paul Muadib",
					"faction": "rebel",
					"guildId": "cc57d57e-b569-11e5-92aa-06a77e004fbb",
					"guildName": "Sweden_Alliance",
					"attackRating": 4775,
					"attackRatingDelta": 3,
					"defenseRating": -484,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 193,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490141359,
				"looted": {
					"credits": 17462,
					"materials": 21990
				},
				"earned": {
					"contraband": 0,
					"credits": 17562,
					"materials": 13337
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 18462,
					"materials": 22990
				},
				"troopsExpended": {
					"troopMercenaryRebelTwilekIncinerator3": 1,
					"troopMedic8": 1,
					"troopRebelJetpackTrooper8": 2,
					"troopMercenaryRebelGamorreanWarrior3": 1,
					"troopJuggernaut7": 1,
					"troopSoldier8": 4,
					"troopVanguard8": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 2
				},
				"baseDamagePercent": 64,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 30,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelMortarTurretDamage5",
					"eqpRebelWallHealth8",
					"eqpRebelSandSoldier2",
					"eqpRebelCreditGeneratorHealth6"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "55c1b6e9-0ed9-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "669e38b3-d6a2-11e6-97e5-06cb44004f79",
					"name": "Mossified4",
					"faction": "rebel",
					"guildId": "6c3825b2-33cd-11e6-bc42-06033c004f77",
					"guildName": "Bulgariawariors",
					"attackRating": 1637,
					"attackRatingDelta": -12,
					"defenseRating": -333,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 207,
					"defenseRatingDelta": 14,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490171342,
				"looted": {
					"credits": 114
				},
				"earned": {
					"credits": 114
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 13453,
					"materials": 14671
				},
				"troopsExpended": {
					"troopT2BTank4": 5,
					"troopHeavyRebel4": 4,
					"troopMedic4": 2,
					"troopWookie4": 3,
					"troopSoldier4": 4
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireStormDeath7": 2,
					"troopStorm7": 1,
					"troopShock3": 1,
					"troopShock7": 2,
					"troopTechnician7": 1
				},
				"baseDamagePercent": 41,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 14,
				"defenderPotentialMedalGain": 14,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMaterialsGeneratorHealth3",
					"eqpRebelHQHealth4",
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelWallHealth4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "01cc6083-0eda-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "b2b051e9-fc6a-11e4-8ba4-06a77e004fbb",
					"name": "del rouki",
					"faction": "rebel",
					"guildId": "7f513e01-61df-11e5-a98d-06c66a004f76",
					"guildName": "ALIANZA_MEXICO",
					"attackRating": 5035,
					"attackRatingDelta": 6,
					"defenseRating": -1401,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 201,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490171645,
				"looted": {
					"materials": 13092,
					"credits": 12239
				},
				"earned": {
					"contraband": 0,
					"materials": 14092,
					"credits": 13239
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 13643,
					"materials": 14887
				},
				"troopsExpended": {
					"troopMarksman7": 1,
					"troopMedic6": 2,
					"troopHeavyRebel7": 3,
					"troopHeroChewbacca5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 50,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth6",
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelWallHealth7"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "e6770c09-0f3e-11e7-a842-06a77e004fbb",
				"attacker": {
					"playerId": "690c37a1-75a5-11e5-9097-06cb44004f79",
					"name": "reddog",
					"faction": "rebel",
					"guildId": "a79cc967-d532-11e6-93f1-06a77e004fbb",
					"guildName": "the.mojo.revolt",
					"attackRating": 62151,
					"attackRatingDelta": 10,
					"defenseRating": -7748,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 191,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490214975,
				"looted": {
					"materials": 27176,
					"credits": 25392
				},
				"earned": {
					"contraband": 0,
					"materials": 28176,
					"credits": 26392
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 26392,
					"materials": 28176
				},
				"troopsExpended": {
					"troopChampionRebelDroideka10": 1,
					"troopSoldier9": 11,
					"troopHeavyRebel9": 2,
					"troopMedic9": 5,
					"troopHeroHanSolo8": 1,
					"troopT2BTank9": 1,
					"troopDesertSkiff9": 1,
					"troopVanguard9": 2,
					"troopMarksman9": 1,
					"troopRebelSpeeder9": 1,
					"troopRebelJetpackTrooper9": 1,
					"troopHailfire8": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopStorm7": 2,
					"troopSniper7": 2
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 21,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelRapidFireTurretHealth6",
					"eqpRebelWallHealth8",
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelSandSoldier2",
					"eqpRebelCreditGeneratorHealth6",
					"eqpRebelMaterialsGeneratorHealth6"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "0f57419d-0fc5-11e7-bad8-061c98004f78",
				"attacker": {
					"playerId": "c10cc81c-fe39-11e6-953a-06033c004f77",
					"name": "jungyouchan",
					"faction": "rebel",
					"guildId": "ceafc77e-42bc-11e6-a5a8-06a77e004fbb",
					"guildName": "Galactic.Wolves",
					"attackRating": 5680,
					"attackRatingDelta": 3,
					"defenseRating": -41,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 188,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490272565,
				"looted": {
					"materials": 7776,
					"credits": 9185
				},
				"earned": {
					"contraband": 0,
					"materials": 8266,
					"credits": 9675
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17849,
					"materials": 15646
				},
				"troopsExpended": {
					"troopHeroChewbacca5": 1,
					"troopMedic5": 1,
					"troopSoldier5": 16,
					"troopRebelSpeeder5": 2,
					"troopT2BTank5": 1
				},
				"attackerGuildTroopsExpended": {
					"troopRebelSpeeder7": 1,
					"troopMedic7": 1,
					"troopSoldier8": 2
				},
				"defenderGuildTroopsExpended": {
					"troopDark5": 1,
					"troopMercenaryEmpireGamorreanWarrior2": 2
				},
				"baseDamagePercent": 59,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 28,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "1065f6f8-1008-11e7-84ee-06a77e004fbb",
				"attacker": {
					"playerId": "a1457956-ccc0-11e5-a6b6-06e6ee004fbc",
					"name": "xyucropbl",
					"faction": "rebel",
					"guildId": "a6b8dfa8-9573-11e6-b072-06c66a004f76",
					"guildName": "NEW.%5b00ffff%5dJEDI",
					"attackRating": 8253,
					"attackRatingDelta": 10,
					"defenseRating": -1053,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 178,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490301315,
				"looted": {
					"materials": 16129,
					"credits": 10580
				},
				"earned": {
					"contraband": 0,
					"materials": 17129,
					"credits": 11580
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 11580,
					"materials": 17129
				},
				"troopsExpended": {
					"troopSoldier8": 37,
					"troopJuggernaut8": 1,
					"troopHeroRebelJohhar2": 1,
					"troopChampionRebelDroideka5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopDark6": 4
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelBurstTurretDamage3",
					"eqpRebelMortarTurretDamage6",
					"eqpRebelRapidFireTurretDamage6",
					"eqpRebelSandSoldier2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "301963a5-108e-11e7-ab17-06cb44004f79",
				"attacker": {
					"playerId": "8f27c985-60c2-11e6-8f08-069da4004f8b",
					"name": "Obi Wan",
					"faction": "rebel",
					"guildId": "46dbe111-890e-11e4-be23-06e6ee004fbc",
					"guildName": "Nordwind",
					"attackRating": 6066,
					"attackRatingDelta": 6,
					"defenseRating": -1278,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 172,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490358947,
				"looted": {
					"materials": 22944,
					"credits": 15634
				},
				"earned": {
					"contraband": 0,
					"materials": 23944,
					"credits": 16634
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 16634,
					"materials": 23944
				},
				"troopsExpended": {
					"troopHeroHanSolo7": 1,
					"troopJuggernaut7": 1,
					"troopHailfire3": 1,
					"troopSoldier7": 24
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 76,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelRapidFireTurretDamage3",
					"eqpRebelMortarTurretHealth3",
					"eqpRebelHQHealth6",
					"eqpRebelWallHealth6"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			}
		],
		"campaigns": {
			"cmp_fue": {
				"uid": "cmp_fue",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"sw_hth_outposts": {
				"uid": "sw_hth_outposts",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_0_hb_e": {
				"uid": "cmp_0_hb_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_1_utts_e": {
				"uid": "cmp_1_utts_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_2_tsw_e": {
				"uid": "cmp_2_tsw_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_3_tjg_e": {
				"uid": "cmp_3_tjg_e",
				"timeZone": 0,
				"completed": true,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_4_sotm_e": {
				"uid": "cmp_4_sotm_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_5_tih_e": {
				"uid": "cmp_5_tih_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_7_bs_e": {
				"uid": "cmp_7_bs_e",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			}
		},
		"missions": {
			"fue_defendBaseMission_00": {
				"uid": "fue_defendBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5c616fee-b0b4-11e6-913a-06cb44004f79",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHalfBuildings",
					"RetainHQ",
					"AvoidCompleteLoss"
				],
				"grindMissionRetries": 0
			},
			"fue_impIntroBaseMission_00": {
				"uid": "fue_impIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "98098007-b0b4-11e6-913a-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"fue_rebIntroBaseMission_00": {
				"uid": "fue_rebIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d8a6555b-b0b4-11e6-913a-06cb44004f79",
				"lootRemaining": {
					"credits": 1062,
					"materials": 1000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"sw_hth_outpost_s_1": {
				"uid": "sw_hth_outpost_s_1",
				"campaignUid": "sw_hth_outposts",
				"status": "Default",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_1": {
				"uid": "camp_1_utts_e_1",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5e82425d-b0b6-11e6-92e0-06c66a004f76",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2": {
				"uid": "camp_1_utts_e_2",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "b20eab06-b0ba-11e6-9fa7-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2a": {
				"uid": "camp_1_utts_e_2a",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "e22cebc3-bdaf-11e6-a741-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_3": {
				"uid": "camp_1_utts_e_3",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_Wall_T1_25"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_4": {
				"uid": "camp_1_utts_e_4",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "86b50871-be24-11e6-b9bb-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_5": {
				"uid": "camp_1_utts_e_5",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT2EmpStarport"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_6": {
				"uid": "camp_1_utts_e_6",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "6217e567-bf0a-11e6-bdec-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_7": {
				"uid": "camp_1_utts_e_7",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2EmpCreGen"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_9": {
				"uid": "camp_1_utts_e_9",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "7158ddb3-bfd4-11e6-bdec-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_10": {
				"uid": "camp_1_utts_e_10",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own4Turrets"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_1": {
				"uid": "camp_2_tsw_e_1",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "fbbfcb19-bff2-11e6-a25b-060a32004f8c",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_2": {
				"uid": "camp_2_tsw_e_2",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T1EmpFactory"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_3": {
				"uid": "camp_2_tsw_e_3",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "fa57e0cb-bff3-11e6-a25b-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_4": {
				"uid": "camp_2_tsw_e_4",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpCredGen"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_5": {
				"uid": "camp_2_tsw_e_5",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "8efbefc3-c079-11e6-949d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_1": {
				"uid": "camp_3_tjg_e_1",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "d32aec1e-c079-11e6-949d-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_2": {
				"uid": "camp_3_tjg_e_2",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpBarracks"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_3": {
				"uid": "camp_3_tjg_e_3",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "417ab13a-c0d7-11e6-a741-06cb44004f79",
				"lootRemaining": {
					"credits": 500,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_4": {
				"uid": "camp_3_tjg_e_4",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "949adcbf-c322-11e6-b27f-06dc8c004fbd",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_5": {
				"uid": "camp_3_tjg_e_5",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T2EmpMatStor"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_6": {
				"uid": "camp_3_tjg_e_6",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "4235e347-c3ba-11e6-b51d-061c98004f78",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_7": {
				"uid": "camp_3_tjg_e_7",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpRFTurrets"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_8": {
				"uid": "camp_3_tjg_e_8",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d496599a-c3c7-11e6-b400-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_9": {
				"uid": "camp_3_tjg_e_9",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT3EmpHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_10": {
				"uid": "camp_3_tjg_e_10",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "56146023-c3c8-11e6-b400-060a32004f8c",
				"lootRemaining": {
					"credits": 375,
					"materials": 375,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"Kill_TuskenHero_t1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_1": {
				"uid": "camp_4_sotm_e_1",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMortar_T1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_2": {
				"uid": "camp_4_sotm_e_2",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireBarracks_T3_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_3": {
				"uid": "camp_4_sotm_e_3",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "7d44c9b0-c3f6-11e6-aaf5-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_4": {
				"uid": "camp_4_sotm_e_4",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f97eb360-c3f6-11e6-aaf5-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_5": {
				"uid": "camp_4_sotm_e_5",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9cb3a101-c459-11e6-aaf5-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_6": {
				"uid": "camp_4_sotm_e_6",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "301fd86c-c4ef-11e6-88cb-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_7": {
				"uid": "camp_4_sotm_e_7",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_turret_t1_6"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_8": {
				"uid": "camp_4_sotm_e_8",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_wall_t1_40"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_9": {
				"uid": "camp_4_sotm_e_9",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_10": {
				"uid": "camp_4_sotm_e_10",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_starport_t2_2"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_11": {
				"uid": "camp_4_sotm_e_11",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "4393ecd2-c542-11e6-86de-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_12": {
				"uid": "camp_4_sotm_e_12",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "be12678a-d9af-11e6-8f8c-06c66a004f76",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_13": {
				"uid": "camp_4_sotm_e_13",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "cfe03daa-db68-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_14": {
				"uid": "camp_4_sotm_e_14",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1cf7a709-db69-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_1": {
				"uid": "camp_5_tih_e_1",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMaterialsGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_2": {
				"uid": "camp_5_tih_e_2",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireOffenseLab_t1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_3": {
				"uid": "camp_5_tih_e_3",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5007b19c-ddb1-11e6-994c-06dc8c004fbd",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_4": {
				"uid": "camp_5_tih_e_4",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_12_t3_walls"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_5": {
				"uid": "camp_5_tih_e_5",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c2f00335-ddbf-11e6-95c1-063864004f75",
				"lootRemaining": {
					"credits": 1000,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_6": {
				"uid": "camp_5_tih_e_6",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "24d1fe51-ddc0-11e6-95c1-063864004f75",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_7": {
				"uid": "camp_5_tih_e_7",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireCreditGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_8": {
				"uid": "camp_5_tih_e_8",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "754e5bb8-e2e0-11e6-9b37-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_1": {
				"uid": "chapter_7_bs_e_1",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "13cc8230-e63a-11e6-a0d9-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_2": {
				"uid": "chapter_7_bs_e_2",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "8b8b6893-e645-11e6-a05d-06a77e004fbb",
				"lootRemaining": {
					"credits": 2100,
					"materials": 2100,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_3": {
				"uid": "chapter_7_bs_e_3",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "465dab7f-e978-11e6-9e25-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_4": {
				"uid": "chapter_7_bs_e_4",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireHQ_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_5": {
				"uid": "chapter_7_bs_e_5",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "0d20d972-e979-11e6-9e25-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_6": {
				"uid": "chapter_7_bs_e_6",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_7": {
				"uid": "chapter_7_bs_e_7",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "4fce3f2e-e979-11e6-9e25-06033c004f77",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_8": {
				"uid": "chapter_7_bs_e_8",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 1,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2cd4501a-f635-11e6-a83b-061c98004f78",
				"lootRemaining": {
					"credits": 2400,
					"materials": 2400,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_9": {
				"uid": "chapter_7_bs_e_9",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 1,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d22615e6-f3da-11e6-aa87-06a77e004fbb",
				"lootRemaining": {
					"credits": 2600,
					"materials": 2600,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Destroy_rebelTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_10": {
				"uid": "chapter_7_bs_e_10",
				"campaignUid": "cmp_7_bs_e",
				"status": "Active",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": "fd245fc9-0e3e-11e7-9789-06dc8c004fbd",
				"lootRemaining": {
					"credits": 2900,
					"materials": 2900,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			}
		},
		"tournaments": {
			"conflict_forestOps_tat_01": {
				"uid": "conflict_forestOps_tat_01",
				"rating": 0,
				"collected": true,
				"percentile": 0,
				"tier": "tournament_tier_1",
				"redeemedRewards": [
					"lc_conf_crystal_tier1"
				],
				"attacksWon": 0,
				"attacksLost": 1,
				"defensesWon": 3,
				"defensesLost": 9,
				"donatedTroops": 115
			}
		},
		"isFueInProgress": false,
		"DamagedBuildings": {
			"bld_124": 100,
			"bld_54": 100,
			"bld_84": 100,
			"bld_72": 100,
			"bld_112": 100,
			"bld_78": 100,
			"bld_108": 100,
			"bld_24": 100,
			"bld_254": 100,
			"bld_26": 100,
			"bld_79": 100,
			"bld_61": 100,
			"bld_66": 100,
			"bld_58": 100,
			"bld_65": 100,
			"bld_67": 100,
			"bld_23": 100,
			"bld_123": 100,
			"bld_253": 100,
			"bld_110": 100,
			"bld_60": 100,
			"bld_53": 100,
			"bld_127": 100,
			"bld_82": 100,
			"bld_8": 100,
			"bld_106": 100,
			"bld_109": 100,
			"bld_1": 100,
			"bld_25": 100,
			"bld_73": 100,
			"bld_76": 100,
			"bld_85": 100,
			"bld_57": 100,
			"bld_56": 100,
			"bld_77": 100,
			"bld_107": 100,
			"bld_70": 0,
			"bld_7": 80,
			"bld_6": 51,
			"bld_5": 13,
			"bld_20": 13,
			"bld_64": 0,
			"bld_4": 17,
			"bld_63": 0,
			"bld_3": 0,
			"bld_2": 0,
			"bld_62": 0,
			"bld_68": 0,
			"bld_91": 0,
			"bld_90": 0,
			"bld_86": 0,
			"bld_88": 0,
			"bld_87": 0,
			"bld_17": 0,
			"bld_16": 0,
			"bld_15": 0,
			"bld_14": 13,
			"bld_19": 13,
			"bld_18": 17,
			"bld_13": 17,
			"bld_81": 47,
			"bld_52": 0,
			"bld_55": 0,
			"bld_118": 0,
			"bld_117": 0,
			"bld_119": 0,
			"bld_122": 0,
			"bld_116": 0,
			"bld_115": 19,
			"bld_22": 0,
			"bld_111": 0,
			"bld_121": 0,
			"bld_120": 0,
			"bld_9": 0,
			"bld_114": 0,
			"bld_113": 0,
			"bld_83": 0,
			"bld_12": 0,
			"bld_89": 0,
			"bld_10": 0,
			"bld_21": 0,
			"bld_80": 51,
			"bld_71": 39,
			"bld_59": 0,
			"bld_69": 29,
			"bld_93": 0,
			"bld_247": 0,
			"bld_240": 0,
			"bld_245": 0,
			"bld_242": 0,
			"bld_246": 0,
			"bld_241": 0,
			"bld_250": 0,
			"bld_249": 0,
			"bld_243": 0,
			"bld_248": 0,
			"bld_244": 0,
			"bld_92": 0,
			"bld_11": 0
		},
		"deviceInfo": {},
		"timeZoneOffset": 2,
		"contracts": [
			{
				"uid": "rockSmall1",
				"endTime": 1490380576,
				"contractType": "Clear",
				"buildingId": "bld_277",
				"perkIds": []
			},
			{
				"uid": "junkSmall1",
				"endTime": 1490380578,
				"contractType": "Clear",
				"buildingId": "bld_275",
				"perkIds": []
			},
			{
				"uid": "troopATST5",
				"endTime": 1490380726,
				"contractType": "Troop",
				"buildingId": "bld_59",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder5",
				"endTime": 1490380801,
				"contractType": "Troop",
				"buildingId": "bld_59",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder5",
				"endTime": 1490380876,
				"contractType": "Troop",
				"buildingId": "bld_59",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder5",
				"endTime": 1490380951,
				"contractType": "Troop",
				"buildingId": "bld_59",
				"perkIds": []
			},
			{
				"uid": "troopATMP5",
				"endTime": 1490451268,
				"contractType": "Research",
				"buildingId": "bld_93",
				"perkIds": []
			}
		],
		"frozenBuildings": [],
		"isConnectedAccount": true,
		"pvpTargetServedTime": 1490358851,
		"intros": [],
		"lastMission": "chapter_7_bs_e_10",
		"isRateIncentivized": false,
		"lastPaymentTime": null,
		"lastWarParticipationTime": 1490166102,
		"identitySwitchTimes": {},
		"openOffer": null,
		"unlockedPlanets": [],
		"relocationStarCount": -1,
		"holonetRewards": [
			"reward_securityDroid_e_ltr",
			"reward_atmosMig_e_ltr",
			"reward_desBiome_e_ltr",
			"reward_forBiome_e_ltr"
		],
		"playerObjectives": {
			"planet1": {
				"groupId": "obj_tatooine_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_train_herocrimsonguard_easy_e",
						"hq": 5,
						"count": 1,
						"target": 1,
						"state": "rewarded"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 5,
						"count": 15,
						"target": 15,
						"state": "rewarded"
					},
					{
						"uid": "obj_deploy_atat_hard_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					}
				]
			},
			"planet8": {
				"groupId": "obj_forestOps_yavin_23",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_heroatmp_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_forestOps_destroy_type_turret_hard_e",
						"hq": 5,
						"count": 0,
						"target": 10,
						"state": "active"
					}
				]
			},
			"planet23": {
				"groupId": "obj_tfa_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_destroy_creditstorage_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_destroy_materialsstorage_hard_e",
						"hq": 5,
						"count": 0,
						"target": 2,
						"state": "active"
					}
				]
			},
			"planet21": {
				"groupId": "obj_hoth_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_heroatst_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_destroy_mortar_hard_e",
						"hq": 5,
						"count": 0,
						"target": 3,
						"state": "active"
					}
				]
			},
			"planet3": {
				"groupId": "obj_dandoran_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_heroatst_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_destroy_burstturret_hard_e",
						"hq": 5,
						"count": 0,
						"target": 3,
						"state": "active"
					}
				]
			},
			"planet6": {
				"groupId": "obj_erkit_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_destroy_starport_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_train_atst_hard_e",
						"hq": 5,
						"count": 0,
						"target": 3,
						"state": "active"
					}
				]
			}
		},
		"lastObjectiveCheckTime": 1490380402,
		"raids": {
			"planet1": {
				"planetId": "planet1",
				"raidId": "raid_Tatooine1",
				"raidPoolId": "raidpool_desBiome_hq5_e",
				"raidMissionId": "raid_desBiome_e_hq5_1",
				"retried": false,
				"startTime": 1490418000,
				"endTime": null,
				"lastRaidStars": 3,
				"lastRaidId": "raid_Tatooine2",
				"lastRaidPoolId": "raidpool_desBiome_hq5_e",
				"lastRaidMissionId": "raid_desBiome_e_hq5_3",
				"nextRaidStartTime": 1490461200
			}
		},
		"perksInfo": {
			"perks": {
				"activatedPerks": [
					{
						"perkId": "perk_CBar_CFac5",
						"startTime": 1488907867,
						"endTime": 1488951067
					},
					{
						"perkId": "perk_GCrd_GCon4",
						"startTime": 1488907895,
						"endTime": 1488951095
					},
					{
						"perkId": "perk_CBar_CCan6",
						"startTime": 1488907910,
						"endTime": 1488951110
					}
				],
				"cooldowns": {
					"CBar_CFac": 1489008667,
					"GCrd_GCon": 1489008695,
					"CBar_CCan": 1489008710
				},
				"hasActivatedFirstPerk": true
			}
		},
		"armoryInfo": {
			"firstCratePurchased": false
		},
		"activeArmory": {
			"equipment": [],
			"capacity": null
		},
		"shards": {
			"shrd_troopShock": 29,
			"shrd_specialAttackAtmosMig": 9
		},
		"troopDonationProgress": {
			"donationCount": 10,
			"lastTrackedDonationTime": 1490380457,
			"repDonationCooldownEndTime": 1490425200
		},
		"purchasedCrates": []
	},
	"scalars": {
		"attacksLost": 26,
		"attacksWon": 251,
		"defensesLost": 234,
		"defensesWon": 121,
		"attacksStarted": 278,
		"attacksCompleted": 277,
		"attackRating": 1590,
		"defenseRating": 172,
		"xp": 0,
		"NF1219": 1
	},
	"name": "Jaqueline"
};

/***/ }),
/* 102 */,
/* 103 */
/***/ (function(module, exports) {

module.exports = {
	"name": "fcuk",
	"icon": "SquadSymbols_11",
	"description": "https%3a%2f%2fswc-fcuk.github.io%2f",
	"membershipRestrictions": {
		"openEnrollment": true,
		"maxSize": 30,
		"minScoreAtEnrollment": 0,
		"faction": "empire"
	},
	"members": [
		{
			"name": "2tee2",
			"isOwner": true,
			"isOfficer": true,
			"joinDate": 1477748463,
			"troopsDonated": 5251,
			"troopsReceived": 5511,
			"rank": 1,
			"hqLevel": 8,
			"reputationInvested": 260,
			"xp": 1630,
			"score": 5742,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 1410,
			"defensesWon": 154,
			"planet": "planet6",
			"lastLoginTime": 1490379594,
			"lastUpdated": 1490383768,
			"hasPlanetaryCommand": true,
			"playerId": "779a335e-7216-11e6-8b58-06033c004f77"
		},
		{
			"name": "Jaqueline",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1487765772,
			"troopsDonated": 567,
			"troopsReceived": 224,
			"rank": 2,
			"hqLevel": 5,
			"reputationInvested": 55,
			"xp": 749,
			"score": 1762,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 251,
			"defensesWon": 121,
			"planet": "planet1",
			"lastLoginTime": 1490378997,
			"lastUpdated": 1490379004,
			"hasPlanetaryCommand": false,
			"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79"
		},
		{
			"name": "Ramsses",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1484181522,
			"troopsDonated": 536,
			"troopsReceived": 252,
			"rank": 3,
			"hqLevel": 7,
			"reputationInvested": 95,
			"xp": 1222,
			"score": 835,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 234,
			"defensesWon": 28,
			"planet": "planet1",
			"lastLoginTime": 1490326903,
			"lastUpdated": 1490366675,
			"hasPlanetaryCommand": true,
			"playerId": "ccfd90b3-d858-11e6-8705-061c98004f78"
		},
		{
			"name": "BkeII",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1484179531,
			"troopsDonated": 350,
			"troopsReceived": 366,
			"rank": 4,
			"hqLevel": 5,
			"reputationInvested": 48,
			"xp": 876,
			"score": 832,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 259,
			"defensesWon": 21,
			"planet": "planet1",
			"lastLoginTime": 1490041346,
			"lastUpdated": 1490330806,
			"hasPlanetaryCommand": false,
			"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb"
		},
		{
			"name": "ннн",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1488735598,
			"troopsDonated": 226,
			"troopsReceived": 299,
			"rank": 5,
			"hqLevel": 4,
			"reputationInvested": 21,
			"xp": 685,
			"score": 661,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 179,
			"defensesWon": 4,
			"planet": "planet1",
			"lastLoginTime": 1490382363,
			"lastUpdated": 1490382369,
			"hasPlanetaryCommand": false,
			"playerId": "7db8fdb4-01c5-11e7-9191-06dc8c004fbd"
		},
		{
			"name": "scar78",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1481302386,
			"troopsDonated": 1105,
			"troopsReceived": 1385,
			"rank": 6,
			"hqLevel": 6,
			"reputationInvested": 171,
			"xp": 1242,
			"score": 467,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 264,
			"defensesWon": 35,
			"planet": "planet3",
			"lastLoginTime": 1490274511,
			"lastUpdated": 1490344869,
			"hasPlanetaryCommand": true,
			"playerId": "0476b083-bbc4-11e6-8233-061c98004f78"
		},
		{
			"name": "lordroger",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1489027536,
			"troopsDonated": 8,
			"troopsReceived": 14,
			"rank": 7,
			"hqLevel": 4,
			"reputationInvested": 0,
			"xp": 575,
			"score": 455,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 87,
			"defensesWon": 4,
			"planet": "planet1",
			"lastLoginTime": 1490219116,
			"lastUpdated": 1490348712,
			"hasPlanetaryCommand": false,
			"playerId": "c0da9a0c-0353-11e7-850d-06cb44004f79"
		},
		{
			"name": "ROMAN",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490177010,
			"troopsDonated": 0,
			"troopsReceived": 0,
			"rank": 8,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 376,
			"score": 369,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 47,
			"defensesWon": 2,
			"planet": "planet1",
			"lastLoginTime": 1490176277,
			"lastUpdated": 1490383667,
			"hasPlanetaryCommand": false,
			"playerId": "4c92ebab-088c-11e7-9fcf-06033c004f77"
		},
		{
			"name": "whitebuffalo",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490172111,
			"troopsDonated": 37,
			"troopsReceived": 30,
			"rank": 9,
			"hqLevel": 3,
			"reputationInvested": 2,
			"xp": 417,
			"score": 303,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 55,
			"defensesWon": 2,
			"planet": "planet1",
			"lastLoginTime": 1490383298,
			"lastUpdated": 1490384224,
			"hasPlanetaryCommand": false,
			"playerId": "ba27b37e-0eb6-11e7-9236-063864004f75"
		},
		{
			"name": "Dragan",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1488810156,
			"troopsDonated": 39,
			"troopsReceived": 33,
			"rank": 10,
			"hqLevel": 3,
			"reputationInvested": 11,
			"xp": 208,
			"score": 267,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 34,
			"defensesWon": 1,
			"planet": "planet1",
			"lastLoginTime": 1490386133,
			"lastUpdated": 1490386138,
			"hasPlanetaryCommand": false,
			"playerId": "089eb96b-026d-11e7-953a-06033c004f77"
		},
		{
			"name": "JuanMa",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1487894432,
			"troopsDonated": 110,
			"troopsReceived": 223,
			"rank": 11,
			"hqLevel": 5,
			"reputationInvested": 29,
			"xp": 712,
			"score": 200,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 118,
			"defensesWon": 2,
			"planet": "planet1",
			"lastLoginTime": 1489886686,
			"lastUpdated": 1490360967,
			"hasPlanetaryCommand": false,
			"playerId": "4b379b97-f56b-11e6-91d6-06e6ee004fbc"
		},
		{
			"name": "yuuto",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490252443,
			"troopsDonated": 9,
			"troopsReceived": 5,
			"rank": 12,
			"hqLevel": 7,
			"reputationInvested": 0,
			"xp": 1511,
			"score": 185,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 890,
			"defensesWon": 126,
			"planet": "planet3",
			"lastLoginTime": 1490323487,
			"lastUpdated": 1490369170,
			"hasPlanetaryCommand": true,
			"playerId": "53efb8da-4105-11e6-ac60-063864004f75"
		},
		{
			"name": "123456789",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1489881925,
			"troopsDonated": 23,
			"troopsReceived": 14,
			"rank": 13,
			"hqLevel": 3,
			"reputationInvested": 1,
			"xp": 315,
			"score": 184,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 15,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490273251,
			"lastUpdated": 1490273253,
			"hasPlanetaryCommand": false,
			"playerId": "51f2aa75-0c34-11e7-b7db-06a77e004fbb"
		},
		{
			"name": "STALKER",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490181004,
			"troopsDonated": 23,
			"troopsReceived": 5,
			"rank": 13,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 352,
			"score": 184,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 14,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490360128,
			"lastUpdated": 1490360132,
			"hasPlanetaryCommand": false,
			"playerId": "9254dd74-0eee-11e7-9902-06cb44004f79"
		},
		{
			"name": "manoel",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490181076,
			"troopsDonated": 0,
			"troopsReceived": 5,
			"rank": 15,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 181,
			"score": 137,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 13,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490225237,
			"lastUpdated": 1490225755,
			"hasPlanetaryCommand": false,
			"playerId": "d04907da-9a5a-11e6-81bb-06e6ee004fbc"
		},
		{
			"name": "bbbb",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490170874,
			"troopsDonated": 8,
			"troopsReceived": 0,
			"rank": 16,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 380,
			"score": 136,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 6,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490378131,
			"lastUpdated": 1490384750,
			"hasPlanetaryCommand": false,
			"playerId": "55b1e6ee-0d4b-11e7-999d-069da4004f8b"
		},
		{
			"name": "Quasar",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1481208966,
			"troopsDonated": 1053,
			"troopsReceived": 1335,
			"rank": 17,
			"hqLevel": 7,
			"reputationInvested": 152,
			"xp": 1479,
			"score": 111,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 4,
			"defensesWon": 65,
			"planet": "planet1",
			"lastLoginTime": 1490380765,
			"lastUpdated": 1490380768,
			"hasPlanetaryCommand": true,
			"playerId": "3076de44-a12f-11e6-85c9-060a32004f8c"
		},
		{
			"name": "david",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490180053,
			"troopsDonated": 0,
			"troopsReceived": 0,
			"rank": 18,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 304,
			"score": 107,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {},
			"attacksWon": 1,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490180925,
			"lastUpdated": 1490181184,
			"hasPlanetaryCommand": false,
			"playerId": "2f2feb37-07d4-11e7-8d08-061c98004f78"
		},
		{
			"name": "Collinex",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490172247,
			"troopsDonated": 0,
			"troopsReceived": 1,
			"rank": 19,
			"hqLevel": 2,
			"reputationInvested": 0,
			"xp": 148,
			"score": 100,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 0,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490259566,
			"lastUpdated": 1490259569,
			"hasPlanetaryCommand": false,
			"playerId": "f1857edf-0ed5-11e7-aaca-06c66a004f76"
		},
		{
			"name": "poh vj",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490172828,
			"troopsDonated": 0,
			"troopsReceived": 0,
			"rank": 19,
			"hqLevel": 2,
			"reputationInvested": 0,
			"xp": 148,
			"score": 100,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 0,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490243373,
			"lastUpdated": 1490243381,
			"hasPlanetaryCommand": false,
			"playerId": "1ee3fd9a-0eca-11e7-b35e-06e6ee004fbc"
		},
		{
			"name": "rose",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490180248,
			"troopsDonated": 12,
			"troopsReceived": 18,
			"rank": 19,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 432,
			"score": 100,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 10,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490374647,
			"lastUpdated": 1490374652,
			"hasPlanetaryCommand": false,
			"playerId": "cbe8ed43-05c7-11e7-ba0b-060a32004f8c"
		},
		{
			"name": "kalyani",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490180785,
			"troopsDonated": 0,
			"troopsReceived": 0,
			"rank": 19,
			"hqLevel": 2,
			"reputationInvested": 0,
			"xp": 177,
			"score": 100,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 0,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490265853,
			"lastUpdated": 1490265861,
			"hasPlanetaryCommand": false,
			"playerId": "e4508bcc-0edb-11e7-aaca-06c66a004f76"
		},
		{
			"name": "Apollo Creed",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1480872669,
			"troopsDonated": 323,
			"troopsReceived": 506,
			"rank": 23,
			"hqLevel": 5,
			"reputationInvested": 46,
			"xp": 928,
			"score": 99,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 157,
			"defensesWon": 48,
			"planet": "planet3",
			"lastLoginTime": 1488750159,
			"lastUpdated": 1490355254,
			"hasPlanetaryCommand": true,
			"playerId": "02adde88-b3cf-11e6-af61-06e6ee004fbc"
		},
		{
			"name": "Adi",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490171564,
			"troopsDonated": 0,
			"troopsReceived": 0,
			"rank": 24,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 201,
			"score": 97,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 2,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490261952,
			"lastUpdated": 1490384490,
			"hasPlanetaryCommand": false,
			"playerId": "06c434a2-0e4a-11e7-999d-069da4004f8b"
		},
		{
			"name": "Desigur",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1488213753,
			"troopsDonated": 65,
			"troopsReceived": 112,
			"rank": 25,
			"hqLevel": 5,
			"reputationInvested": 14,
			"xp": 814,
			"score": 96,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 30,
			"defensesWon": 9,
			"planet": "planet1",
			"lastLoginTime": 1490351261,
			"lastUpdated": 1490363446,
			"hasPlanetaryCommand": true,
			"playerId": "7cec7cfc-fc08-11e6-8147-063864004f75"
		},
		{
			"name": "geb",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1489676474,
			"troopsDonated": 1,
			"troopsReceived": 1,
			"rank": 26,
			"hqLevel": 4,
			"reputationInvested": 0,
			"xp": 448,
			"score": 76,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 7,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490229219,
			"lastUpdated": 1490366134,
			"hasPlanetaryCommand": false,
			"playerId": "2627da40-086e-11e7-b35e-06e6ee004fbc"
		},
		{
			"name": "Darth Goof",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1481302375,
			"troopsDonated": 373,
			"troopsReceived": 589,
			"rank": 27,
			"hqLevel": 5,
			"reputationInvested": 101,
			"xp": 884,
			"score": 5,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 95,
			"defensesWon": 33,
			"planet": "planet1",
			"lastLoginTime": 1488409328,
			"lastUpdated": 1490376877,
			"hasPlanetaryCommand": false,
			"playerId": "6b56da58-bcc2-11e6-8e5c-06cb44004f79"
		},
		{
			"name": "Snowy",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1486204110,
			"troopsDonated": 708,
			"troopsReceived": 306,
			"rank": 28,
			"hqLevel": 6,
			"reputationInvested": 81,
			"xp": 1078,
			"score": 1,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 35,
			"defensesWon": 14,
			"planet": "planet1",
			"lastLoginTime": 1489362185,
			"lastUpdated": 1490369662,
			"hasPlanetaryCommand": false,
			"playerId": "a11bec70-ea6f-11e6-95f2-060a32004f8c"
		},
		{
			"name": "Lófütyi",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1486489859,
			"troopsDonated": 229,
			"troopsReceived": 422,
			"rank": 28,
			"hqLevel": 6,
			"reputationInvested": 72,
			"xp": 1160,
			"score": 1,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 53,
			"defensesWon": 11,
			"planet": "planet1",
			"lastLoginTime": 1489860531,
			"lastUpdated": 1490384944,
			"hasPlanetaryCommand": true,
			"playerId": "1ebf2fe5-d76a-11e6-8f8c-06c66a004f76"
		},
		{
			"name": "Darth Enego",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1487007906,
			"troopsDonated": 185,
			"troopsReceived": 233,
			"rank": 28,
			"hqLevel": 6,
			"reputationInvested": 63,
			"xp": 1059,
			"score": 1,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": {
				"planet23": 0,
				"planet8": 0
			},
			"attacksWon": 188,
			"defensesWon": 4,
			"planet": "planet1",
			"lastLoginTime": 1490302250,
			"lastUpdated": 1490358799,
			"hasPlanetaryCommand": true,
			"playerId": "72ed2610-da97-11e6-b64c-06a77e004fbb"
		}
	],
	"created": 1477748463,
	"highestRankAchieved": 1109,
	"activeMemberCount": 27,
	"squadWarReadyCount": 27,
	"currentWarId": null,
	"warSignUpTime": null,
	"warRating": null,
	"isSameFactionWarAllowed": true,
	"score": 13713,
	"rank": 1109,
	"id": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
	"memberCount": 30,
	"warHistory": [
		{
			"warId": "4f47daba-bb22-11e6-aca8-06e6ee004fbc",
			"endDate": 1481139469,
			"score": 15,
			"opponentScore": 0,
			"opponentGuildId": "83e84e84-103c-11e5-ab56-06a77e004fbb",
			"opponentName": "rebelsalience",
			"opponentIcon": "SquadSymbols_15"
		},
		{
			"warId": "2eb528fe-bd26-11e6-99eb-06a77e004fbb",
			"endDate": 1481361037,
			"score": 14,
			"opponentScore": 14,
			"opponentGuildId": "50b8bd5f-b0cc-11e6-8402-069da4004f8b",
			"opponentName": "Phoenix-Legion",
			"opponentIcon": "SquadSymbols_05"
		},
		{
			"warId": "8f0478f4-bff0-11e6-aa77-063864004f75",
			"endDate": 1481667856,
			"score": 15,
			"opponentScore": 12,
			"opponentGuildId": "8ac62757-a126-11e6-bf37-063864004f75",
			"opponentName": "X.Streme-Elite",
			"opponentIcon": "SquadSymbols_01"
		},
		{
			"warId": "2e451145-c2e0-11e6-9ed2-06cb44004f79",
			"endDate": 1481990674,
			"score": 15,
			"opponentScore": 5,
			"opponentGuildId": "e9e9a0ca-b650-11e6-8f5b-06dc8c004fbd",
			"opponentName": "RebelsEnforcers",
			"opponentIcon": "SquadSymbols_09"
		},
		{
			"warId": "a01d751c-c807-11e6-b400-060a32004f8c",
			"endDate": 1482557372,
			"score": 15,
			"opponentScore": 12,
			"opponentGuildId": "c9e057f7-a3e1-11e5-9c9b-06dc8c004fbd",
			"opponentName": "RUSSIANBEAR",
			"opponentIcon": "SquadSymbols_15"
		},
		{
			"warId": "bc423047-dcbe-11e6-8705-061c98004f78",
			"endDate": 1484835040,
			"score": 37,
			"opponentScore": 30,
			"opponentGuildId": "4114ffe0-a382-11e6-a225-069da4004f8b",
			"opponentName": "italianstellar",
			"opponentIcon": "SquadSymbols_16"
		},
		{
			"warId": "18dd6e62-df63-11e6-a0d9-061c98004f78",
			"endDate": 1485125535,
			"score": 45,
			"opponentScore": 2,
			"opponentGuildId": "90baf836-f36b-11e4-96f7-06dc8c004fbd",
			"opponentName": "chewbacca",
			"opponentIcon": "SquadSymbols_06"
		},
		{
			"warId": "f4e4d190-e890-11e6-9b37-06cb44004f79",
			"endDate": 1486134803,
			"score": 43,
			"opponentScore": 21,
			"opponentGuildId": "37a8a38d-ba10-11e5-8219-063864004f75",
			"opponentName": "ITALIANIS",
			"opponentIcon": "SquadSymbols_05"
		},
		{
			"warId": "b09a245e-eae9-11e6-8d5b-063864004f75",
			"endDate": 1486392805,
			"score": 45,
			"opponentScore": 15,
			"opponentGuildId": "20bad61e-b65c-11e5-99f7-06cb44004f79",
			"opponentName": "the.last.jedi",
			"opponentIcon": "SquadSymbols_15"
		},
		{
			"warId": "fd4c036f-f2ad-11e6-a79f-063864004f75",
			"endDate": 1487246773,
			"score": 44,
			"opponentScore": 11,
			"opponentGuildId": "a54c476b-466c-11e5-adae-06e6ee004fbc",
			"opponentName": "India",
			"opponentIcon": "SquadSymbols_02"
		},
		{
			"warId": "45fd456a-f56f-11e6-89b5-06cb44004f79",
			"endDate": 1487556207,
			"score": 45,
			"opponentScore": 26,
			"opponentGuildId": "939e4c19-6305-11e6-9059-06c66a004f76",
			"opponentName": "DroidekaSchinder",
			"opponentIcon": "SquadSymbols_15"
		},
		{
			"warId": "e3b52b59-f936-11e6-922c-06dc8c004fbd",
			"endDate": 1487965298,
			"score": 44,
			"opponentScore": 24,
			"opponentGuildId": "28d852b8-4aaa-11e6-adb8-06dc8c004fbd",
			"opponentName": "RebelsUnionS",
			"opponentIcon": "SquadSymbols_01"
		},
		{
			"warId": "55d464a8-febf-11e6-b985-06a77e004fbb",
			"endDate": 1488573640,
			"score": 43,
			"opponentScore": 37,
			"opponentGuildId": "bd0823b8-b643-11e6-8233-061c98004f78",
			"opponentName": "ThaiSmile",
			"opponentIcon": "SquadSymbols_02"
		},
		{
			"warId": "c9b13fcc-02a7-11e7-822d-06c66a004f76",
			"endDate": 1489003329,
			"score": 45,
			"opponentScore": 10,
			"opponentGuildId": "28d852b8-4aaa-11e6-adb8-06dc8c004fbd",
			"opponentName": "RebelsUnionS",
			"opponentIcon": "SquadSymbols_01"
		},
		{
			"warId": "f10eb347-0cf6-11e7-b7db-06a77e004fbb",
			"endDate": 1490136836,
			"score": 44,
			"opponentScore": 19,
			"opponentGuildId": "4de67ac0-4807-11e6-9377-060a32004f8c",
			"opponentName": "portugaldea%c3%a7o",
			"opponentIcon": "SquadSymbols_05"
		}
	],
	"level": 28,
	"totalRepInvested": 1778,
	"perks": {
		"available": {
			"CBar_CFac": "perk_CBar_CFac6",
			"DntAmt_DntT": "perk_DntAmt_DntT5",
			"GCon_DntT": "perk_GCon_DntT5",
			"GCon_TDrd": "perk_GCon_TDrd4",
			"CHro_GAll": "perk_CHro_GAll4",
			"GCrd_GCon": "perk_GCrd_GCon4",
			"CCan_TDrd": "perk_CCan_TDrd5",
			"TDrd": "perk_TDrd4",
			"CBar_CCan": "perk_CBar_CCan6",
			"CFac_CCan": "perk_CFac_CCan4",
			"GAll_GCon": "perk_GAll_GCon4",
			"GCrd_DntT": "perk_GCrd_DntT2"
		},
		"inProgress": {
			"perk_CFac_CCan5": 3,
			"perk_GCon_TDrd5": 25
		}
	},
	"lastPerkNotif": 1490243436
};

/***/ }),
/* 104 */
/***/ (function(module, exports) {

module.exports = {
	"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
	"playerModel": {
		"guildInfo": {
			"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
			"guildName": "fcuk",
			"icon": "",
			"joinDate": 1477748463,
			"playerHasOutstandingJoinRequest": false
		},
		"upgrades": {
			"troop": {
				"Storm": 7,
				"Dark": 6,
				"ATST": 7,
				"2MTank": 6,
				"Scout": 6,
				"EmpireSpeeder": 7,
				"HeroATST": 6,
				"HeroATMP": 7,
				"Dewback": 6,
				"HeroCrimsonGuard": 7,
				"ATMP": 6,
				"Technician": 7,
				"ATAT": 7,
				"HeroATAT": 7,
				"HeavyStorm": 7,
				"ProbeDroid": 7,
				"Shock": 3,
				"MHC": 7,
				"ChampionEmpireDroideka": 5,
				"Sniper": 7,
				"EmpireGamorreanWarrior": 2
			},
			"specialAttack": {
				"TieInterceptor": 6,
				"TieFighter": 6,
				"TieBomber": 6,
				"TieDefender": 7,
				"AtmosMig": 2
			},
			"building": {},
			"equipment": {
				"eqpEmpireHQHealth": 7,
				"eqpEmpireMortarTurretDamage": 6,
				"eqpEmpireRapidFireTurretDamage": 6,
				"eqpEmpireWallHealth": 7,
				"eqpEmpireMortarTurretHealth": 6,
				"eqpEmpireRapidFireTurretHealth": 6,
				"eqpEmpirePentagonTrooper": 3,
				"eqpEmpireMaterialsGeneratorHealth": 4,
				"eqpEmpireCreditGeneratorHealth": 7,
				"eqpEmpireContrabandGeneratorHealth": 4,
				"eqpEmpirePentagonHeavyTrooper": 3,
				"eqpEmpireBurstTurretDamage": 3,
				"eqpEmpireBurstTurretHealth": 3,
				"eqpEmpireCargoGreatDane": 1,
				"eqpEmpireSandtrooper": 2,
				"eqpEmpireArcticATMP": 1,
				"eqpEmpireSnowtrooper": 1
			}
		},
		"prizes": {
			"troop": {
				"KubazInvader": 93,
				"promoRancorEmpire": 6,
				"EmpireStormDeath": 111,
				"EmpireHeavyStormDeath": 96,
				"EmpireScoutDeath": 219,
				"EmpireGamorreanWarrior": 10,
				"EmpireSpeeder": 56,
				"ProbeDroid": 44,
				"HeavyStorm": 97,
				"Sniper": 49,
				"HeroATST": 25,
				"HeroATAT": 14,
				"Technician": 41,
				"SecurityDroid": 41,
				"Shock": 36,
				"HeroATMP": 9,
				"ATAT": 17,
				"HeroCrimsonGuard": 12,
				"ATDP": 18,
				"HeroDarthVader": 10,
				"EmpireTwilekIncinerator": 25,
				"EmpireJumptrooper": 19,
				"MHC": 16,
				"EmpireHovertankSample": 3,
				"KraytDragon": 4,
				"EmpireJohhar": 6,
				"EmpireTognath": 3
			},
			"specialAttack": {
				"TieInterceptor": 9,
				"TieFighter": 6,
				"TieDefender": 4,
				"TieBomber": 3,
				"VT49": 1,
				"TieAdvanced": 1,
				"ImperialDropship": 1
			},
			"resources": {},
			"crates": {
				"available": {},
				"inProgress": {},
				"next": 659,
				"nextDailyCrateTime": 1490414400,
				"nextHolonetTime": 1488270626
			}
		},
		"donatedTroops": {},
		"buildingsUnderConstruction": [
			"bld_121"
		],
		"map": {
			"next": 487,
			"planet": "planet6",
			"buildings": [
				{
					"key": "bld_148",
					"x": 10,
					"z": 2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_143",
					"x": 3,
					"z": -1,
					"uid": "empireTrapStrikeAOE6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_156",
					"x": -5,
					"z": -6,
					"uid": "empireBurstTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_91",
					"x": -10,
					"z": -1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_202",
					"x": -7,
					"z": -8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_201",
					"x": -7,
					"z": -5,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_215",
					"x": 3,
					"z": -6,
					"uid": "empireRapidFireTurret7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_17",
					"x": 5,
					"z": -8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_19",
					"x": 5,
					"z": -7,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_211",
					"x": 7,
					"z": 3,
					"uid": "empireTrapStrikeGeneric6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_18",
					"x": 5,
					"z": -6,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_13",
					"x": 5,
					"z": -5,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_71",
					"x": -10,
					"z": 3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_107",
					"x": -9,
					"z": -1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_104",
					"x": 10,
					"z": 3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_108",
					"x": 10,
					"z": 1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_69",
					"x": 10,
					"z": 0,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_102",
					"x": -7,
					"z": -6,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_61",
					"x": -11,
					"z": -1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_67",
					"x": -4,
					"z": 7,
					"uid": "empireBurstTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_66",
					"x": -1,
					"z": 8,
					"uid": "empireRocketTurret7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_80",
					"x": -11,
					"z": 0,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_114",
					"x": -11,
					"z": 1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_79",
					"x": -7,
					"z": -7,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_78",
					"x": -11,
					"z": 2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_76",
					"x": -7,
					"z": 0,
					"uid": "empireCreditStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_122",
					"x": 3,
					"z": 1,
					"uid": "empireShieldGenerator7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_60",
					"x": -11,
					"z": 3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_210",
					"x": 3,
					"z": 5,
					"uid": "empireTrapStrikeGeneric7",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_55",
					"x": -2,
					"z": 4,
					"uid": "empireSquadBuilding7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_117",
					"x": -4,
					"z": 1,
					"uid": "empireShieldGenerator7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_216",
					"x": -9,
					"z": 1,
					"uid": "empireMortar6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_157",
					"x": 5,
					"z": 3,
					"uid": "empireBurstTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_88",
					"x": -3,
					"z": 13,
					"uid": "empireStarport7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_144",
					"x": -4,
					"z": -1,
					"uid": "empireTrapStrikeAOE6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_53",
					"x": -10,
					"z": -9,
					"uid": "empireMaterialsGenerator7",
					"lastCollectTime": 1490383764,
					"currentStorage": 540
				},
				{
					"key": "bld_52",
					"x": 3,
					"z": 7,
					"uid": "empireRapidFireTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_22",
					"x": -6,
					"z": 3,
					"uid": "empireRapidFireTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_115",
					"x": -8,
					"z": 3,
					"uid": "empireTrapStrikeGeneric6",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_120",
					"x": -10,
					"z": -13,
					"uid": "empireCreditGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 494
				},
				{
					"key": "bld_444",
					"x": 7,
					"z": 17,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 2
				},
				{
					"key": "bld_459",
					"x": -4,
					"z": 19,
					"uid": "junkMedium1",
					"lastCollectTime": null,
					"currentStorage": 3
				},
				{
					"key": "bld_465",
					"x": 5,
					"z": 17,
					"uid": "junkMedium1",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_466",
					"x": -5,
					"z": 16,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 2
				},
				{
					"key": "bld_476",
					"x": 15,
					"z": -6,
					"uid": "junkLarge1",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_479",
					"x": 2,
					"z": 20,
					"uid": "junkSmall1",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_482",
					"x": 15,
					"z": -4,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 2
				},
				{
					"key": "bld_483",
					"x": -13,
					"z": 18,
					"uid": "junkLarge1",
					"lastCollectTime": null,
					"currentStorage": 2
				},
				{
					"key": "bld_333",
					"x": -2,
					"z": -5,
					"uid": "empirePlatformDroideka5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_212",
					"x": -1,
					"z": -9,
					"uid": "empireShieldGenerator7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_116",
					"x": 3,
					"z": -3,
					"uid": "empireRocketTurret7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_446",
					"x": 1,
					"z": -9,
					"uid": "empireMaterialsStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_312",
					"x": 6,
					"z": -6,
					"uid": "empireTrapStrikeAOE6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_323",
					"x": -10,
					"z": -21,
					"uid": "empireContrabandCantina2",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_74",
					"x": -6,
					"z": -21,
					"uid": "empireCreditGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 494
				},
				{
					"key": "bld_159",
					"x": 13,
					"z": -2,
					"uid": "empireNavigationCenter4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_311",
					"x": 14,
					"z": 12,
					"uid": "empireBarracks7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_101",
					"x": 13,
					"z": 2,
					"uid": "empireScoutTower1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_26",
					"x": 20,
					"z": -21,
					"uid": "empireDroidHut1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_214",
					"x": -16,
					"z": 0,
					"uid": "empireArmory3",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_65",
					"x": 12,
					"z": -6,
					"uid": "empireMaterialsGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 479
				},
				{
					"key": "bld_94",
					"x": -7,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_208",
					"x": -5,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_207",
					"x": -6,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_152",
					"x": 6,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_103",
					"x": 3,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_5",
					"x": 4,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_3",
					"x": 5,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_56",
					"x": -7,
					"z": 13,
					"uid": "empireBarracks6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_72",
					"x": 4,
					"z": 13,
					"uid": "empireBarracks6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_111",
					"x": -5,
					"z": -3,
					"uid": "empireRocketTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_16",
					"x": -6,
					"z": -8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_7",
					"x": -6,
					"z": -12,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_90",
					"x": -6,
					"z": -9,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_12",
					"x": -6,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_11",
					"x": -6,
					"z": -11,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_10",
					"x": -6,
					"z": -10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_14",
					"x": 4,
					"z": -8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_58",
					"x": 4,
					"z": -9,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_151",
					"x": 4,
					"z": -10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_6",
					"x": 4,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_203",
					"x": 4,
					"z": -12,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_57",
					"x": 4,
					"z": -11,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_310",
					"x": -1,
					"z": -11,
					"uid": "empireRapidFireTurret7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_15",
					"x": -1,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_322",
					"x": 2,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_321",
					"x": 0,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_320",
					"x": 3,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_316",
					"x": -2,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_315",
					"x": -5,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_314",
					"x": -3,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_313",
					"x": -4,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_319",
					"x": 1,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_146",
					"x": -1,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_145",
					"x": -2,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_20",
					"x": 0,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_206",
					"x": 1,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_204",
					"x": -3,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_205",
					"x": -7,
					"z": -4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_150",
					"x": -7,
					"z": -3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_154",
					"x": 5,
					"z": -4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_81",
					"x": 5,
					"z": -3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_153",
					"x": -8,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_318",
					"x": 7,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_147",
					"x": 10,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_2",
					"x": 9,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_68",
					"x": 8,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_9",
					"x": 10,
					"z": -1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_84",
					"x": 8,
					"z": -1,
					"uid": "empireTrapStrikeGeneric6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_217",
					"x": 8,
					"z": -6,
					"uid": "empireCreditGenerator7",
					"lastCollectTime": 1490383764,
					"currentStorage": 554
				},
				{
					"key": "bld_54",
					"x": -11,
					"z": -5,
					"uid": "empireMaterialsStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_106",
					"x": -7,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_89",
					"x": 5,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_82",
					"x": 6,
					"z": -21,
					"uid": "empireOffenseLab7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_64",
					"x": 7,
					"z": -13,
					"uid": "empireCreditGenerator7",
					"lastCollectTime": 1490383764,
					"currentStorage": 554
				},
				{
					"key": "bld_73",
					"x": -10,
					"z": -17,
					"uid": "empireMaterialsGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 480
				},
				{
					"key": "bld_328",
					"x": -6,
					"z": -17,
					"uid": "empireContrabandGenerator3",
					"lastCollectTime": 1490383764,
					"currentStorage": 31
				},
				{
					"key": "bld_445",
					"x": -2,
					"z": -17,
					"uid": "empireCreditStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_480",
					"x": 2,
					"z": -17,
					"uid": "empireContrabandGenerator1",
					"lastCollectTime": 1490383764,
					"currentStorage": 19
				},
				{
					"key": "bld_142",
					"x": 6,
					"z": -17,
					"uid": "empireMaterialsGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 693
				},
				{
					"key": "bld_218",
					"x": -2,
					"z": -21,
					"uid": "empireMaterialsGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 479
				},
				{
					"key": "bld_141",
					"x": 2,
					"z": -21,
					"uid": "empireCreditGenerator7",
					"lastCollectTime": 1490383764,
					"currentStorage": 1021
				},
				{
					"key": "bld_23",
					"x": -4,
					"z": -9,
					"uid": "empireCreditStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_77",
					"x": 7,
					"z": -9,
					"uid": "empireMaterialsStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_24",
					"x": 11,
					"z": -10,
					"uid": "empireCreditGenerator7",
					"lastCollectTime": 1490383764,
					"currentStorage": 554
				},
				{
					"key": "bld_229",
					"x": 5,
					"z": 0,
					"uid": "empireContrabandStorage3",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_200",
					"x": -9,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_309",
					"x": -4,
					"z": -11,
					"uid": "empireMortar7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_83",
					"x": 2,
					"z": -11,
					"uid": "empireMortar6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_75",
					"x": 8,
					"z": 1,
					"uid": "empireMortar7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_317",
					"x": 6,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_1",
					"x": -2,
					"z": -1,
					"uid": "empireHQ8",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_92",
					"x": -10,
					"z": 4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_109",
					"x": -7,
					"z": 9,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_70",
					"x": -7,
					"z": 7,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_105",
					"x": -7,
					"z": 8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_8",
					"x": -7,
					"z": 6,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_93",
					"x": 6,
					"z": 9,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_209",
					"x": 6,
					"z": 8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_149",
					"x": 6,
					"z": 7,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_21",
					"x": 6,
					"z": 6,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_25",
					"x": -18,
					"z": 5,
					"uid": "empireStarport7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_453",
					"x": -7,
					"z": 5,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_455",
					"x": 7,
					"z": 5,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_456",
					"x": 6,
					"z": 5,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_449",
					"x": -4,
					"z": 10,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_447",
					"x": 2,
					"z": 10,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_4",
					"x": 9,
					"z": 3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_62",
					"x": 9,
					"z": 4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_110",
					"x": 8,
					"z": 4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_450",
					"x": 7,
					"z": 4,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_63",
					"x": 8,
					"z": 12,
					"uid": "empireFactory7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_113",
					"x": -11,
					"z": 7,
					"uid": "empireTacticalCommand7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_158",
					"x": 8,
					"z": 7,
					"uid": "empireFleetCommand7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_213",
					"x": 13,
					"z": 5,
					"uid": "empireStarport7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_59",
					"x": -9,
					"z": 4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_451",
					"x": -8,
					"z": 4,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_452",
					"x": -8,
					"z": 5,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_121",
					"x": -15,
					"z": -4,
					"uid": "empireMaterialsGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 0
				},
				{
					"key": "bld_155",
					"x": -13,
					"z": 12,
					"uid": "empireFactory7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_123",
					"x": -17,
					"z": 12,
					"uid": "empireBarracks7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_484",
					"x": -21,
					"z": -8,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_485",
					"x": 3,
					"z": 18,
					"uid": "junkMedium1",
					"lastCollectTime": null,
					"currentStorage": 3
				},
				{
					"key": "bld_448",
					"x": -13,
					"z": -8,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_454",
					"x": -13,
					"z": -12,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_486",
					"x": 11,
					"z": 19,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 2
				}
			]
		},
		"inventory": {
			"storage": {
				"credits": {
					"amount": 75546,
					"capacity": 1500000,
					"scale": 1
				},
				"materials": {
					"amount": 35437,
					"capacity": 1500000,
					"scale": 1
				},
				"contraband": {
					"amount": 5553,
					"capacity": 50000,
					"scale": 1
				},
				"reputation": {
					"amount": 0,
					"capacity": 18,
					"scale": 1
				},
				"crystals": {
					"amount": 47,
					"capacity": -1,
					"scale": 1
				},
				"droids": {
					"amount": 4,
					"capacity": 5,
					"scale": 1
				},
				"xp": {
					"amount": 1630,
					"capacity": -1,
					"scale": 1
				},
				"troop": {
					"amount": 0,
					"capacity": 20,
					"scale": 1
				},
				"hero": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				},
				"champion": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				}
			},
			"capacity": -1,
			"subStorage": {
				"troop": {
					"storage": {
						"troopMercenaryEmpireGamorreanWarrior2": {
							"amount": 3,
							"capacity": -1,
							"scale": 6
						},
						"troopATAT7": {
							"amount": 2,
							"capacity": -1,
							"scale": 30
						},
						"troopTechnician7": {
							"amount": 3,
							"capacity": -1,
							"scale": 4
						},
						"troopEmpireSpeeder7": {
							"amount": 1,
							"capacity": -1,
							"scale": 6
						}
					},
					"capacity": 96,
					"subStorage": {}
				},
				"specialAttack": {
					"storage": {
						"specialAttackTieBomber6": {
							"amount": 1,
							"capacity": -1,
							"scale": 3
						},
						"specialAttackTieDefender7": {
							"amount": 1,
							"capacity": -1,
							"scale": 4
						}
					},
					"capacity": 27,
					"subStorage": {}
				},
				"hero": {
					"storage": {
						"troopHeroATAT7": {
							"amount": 1,
							"capacity": 1,
							"scale": 1
						}
					},
					"capacity": 3,
					"subStorage": {}
				},
				"champion": {
					"storage": {
						"troopChampionEmpireDroideka5": {
							"amount": 0,
							"capacity": 0,
							"scale": 1
						}
					},
					"capacity": 1,
					"subStorage": {}
				}
			}
		},
		"faction": "empire",
		"currentQuest": "",
		"protectedUntil": 1490426378,
		"protectionFrom": 1490383178,
		"protectionCooldownUntil": {},
		"battleLogs": [
			{
				"battleId": "dd436072-0985-11e7-9fcf-06033c004f77",
				"attacker": {
					"playerId": "f6d2cbf9-7588-11e5-8b68-061c98004f78",
					"name": "taka",
					"faction": "rebel",
					"guildId": "0e4c8ec1-099a-11e5-8ba4-06a77e004fbb",
					"guildName": "JAPAN-JEDI",
					"attackRating": 8363,
					"attackRatingDelta": -27,
					"defenseRating": -822,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -39,
					"defenseRatingDelta": 32,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489585781,
				"looted": {
					"contraband": 592,
					"materials": 32580,
					"credits": 32969
				},
				"earned": {
					"contraband": 592,
					"materials": 32580,
					"credits": 32969
				},
				"maxLootable": {
					"contraband": 732,
					"credits": 61047,
					"materials": 43308
				},
				"troopsExpended": {
					"troopSoldier8": 4,
					"troopHeavyRebel9": 11,
					"troopMedic9": 4,
					"troopJuggernaut8": 1,
					"troopHeroLukeSkywalker8": 1,
					"specialAttackXWing8": 2,
					"troopChampionRebelHeavyDroideka1": 1,
					"troopChampionRebelDroideka4": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 44,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 32,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelHQHealth6",
					"eqpRebelWallHealth7",
					"eqpRebelSandSoldier1",
					"eqpRebelRapidFireTurretDamage4"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet1"
			},
			{
				"battleId": "53c31198-0986-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "70f511b2-52e7-11e5-bf3f-06e6ee004fbc",
					"name": "Schattentöter",
					"faction": "rebel",
					"guildId": "462f5d23-6c2f-11e5-8b68-061c98004f78",
					"guildName": "light-saber",
					"attackRating": 20691,
					"attackRatingDelta": 4,
					"defenseRating": -6983,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -43,
					"defenseRatingDelta": -4,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489585950,
				"looted": {
					"contraband": 140,
					"credits": 35876,
					"materials": 21228
				},
				"earned": {
					"contraband": 140,
					"credits": 35876,
					"materials": 21228
				},
				"maxLootable": {
					"contraband": 673,
					"credits": 45247,
					"materials": 27452
				},
				"troopsExpended": {
					"troopHeavyRebel9": 9,
					"troopMedic9": 9,
					"troopSoldier9": 12,
					"troopHeroChewbacca8": 1,
					"specialAttackXWing8": 3
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 56,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelMortarTurretDamage5",
					"eqpRebelHQHealth7",
					"eqpRebelMortarTurretHealth5",
					"eqpRebelWallHealth7",
					"eqpRebelMaterialsGeneratorHealth6"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet1"
			},
			{
				"battleId": "50af7e6d-09d2-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "024152de-484b-11e4-8f8b-06dc8c004fbd",
					"name": "Striker",
					"faction": "rebel",
					"guildId": "48677c4a-af89-11e5-92aa-06a77e004fbb",
					"guildName": "JediTempleBlue",
					"attackRating": 73720,
					"attackRatingDelta": 13,
					"defenseRating": 9520,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -56,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489618553,
				"looted": {
					"contraband": 626,
					"credits": 38855,
					"materials": 18979
				},
				"earned": {
					"contraband": 626,
					"credits": 39855,
					"materials": 19979
				},
				"maxLootable": {
					"contraband": 626,
					"credits": 39855,
					"materials": 19979
				},
				"troopsExpended": {
					"troopVanguard7": 2,
					"troopSoldier10": 53,
					"troopMedic10": 4,
					"troopHailfire10": 3,
					"troopATTE9": 1,
					"troopHeroRebelJohhar10": 1,
					"troopChampionRebelDroideka22": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4,
					"troopDark6": 1
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 24,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelMortarTurretHealth5",
					"eqpRebelWallHealth8",
					"eqpRebelMortarTurretDamage5",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelCreditGeneratorHealth5"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "a87e047d-0a58-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "c2dc33d6-c444-11e6-86de-06cb44004f79",
					"name": "[000000]AKUMA",
					"faction": "rebel",
					"guildId": "741229f6-e24f-11e6-a05d-06a77e004fbb",
					"guildName": "%5b000005%5dBAKUFU",
					"attackRating": 17230,
					"attackRatingDelta": 13,
					"defenseRating": 354,
					"defenseRatingDelta": 0,
					"tournamentRating": 8982,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -69,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489676270,
				"looted": {
					"contraband": 691,
					"credits": 75908,
					"materials": 52451
				},
				"earned": {
					"contraband": 189,
					"credits": 76908,
					"materials": 53451
				},
				"maxLootable": {
					"contraband": 691,
					"credits": 76908,
					"materials": 53451
				},
				"troopsExpended": {
					"troopIthorianInfiltrator1": 2,
					"troopVanguard5": 2,
					"troopSoldier8": 41,
					"troopMedic8": 4,
					"troopHeroLeia8": 1,
					"troopMercenaryRebelTwilekIncinerator1": 2
				},
				"attackerGuildTroopsExpended": {
					"troopHeavyRebel8": 4,
					"troopMedic8": 2,
					"troopSoldier8": 1
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth6",
					"eqpRebelHQHealth5",
					"eqpRebelCreditGeneratorHealth5",
					"eqpRebelSandSoldier4",
					"eqpRebelHeavySandSoldier2"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "c659c98d-0ade-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "bd8644bf-9f19-11e5-b1d5-06dc8c004fbd",
					"name": "That Guy",
					"faction": "rebel",
					"guildId": "f55622f5-96c3-11e5-b05b-06c66a004f76",
					"guildName": "obw.elite",
					"attackRating": 84910,
					"attackRatingDelta": 13,
					"defenseRating": -157,
					"defenseRatingDelta": 0,
					"tournamentRating": 15460,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -82,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489733833,
				"looted": {
					"contraband": 636,
					"materials": 50159,
					"credits": 70487
				},
				"earned": {
					"contraband": 636,
					"materials": 51159,
					"credits": 71487
				},
				"maxLootable": {
					"contraband": 636,
					"credits": 71487,
					"materials": 51159
				},
				"troopsExpended": {
					"troopVanguard4": 1,
					"troopBantha8": 2,
					"troopHeavyRebel10": 12,
					"troopMedic10": 4,
					"troopHeroLukeSkywalker10": 1,
					"troopSoldier10": 11,
					"troopChampionRebelHeavyDroideka15": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 24,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth10",
					"eqpRebelCreditGeneratorHealth10",
					"eqpRebelHeavySandSoldier6",
					"eqpRebelSandSoldier8",
					"eqpRebelMaterialsGeneratorHealth10",
					"eqpRebelRapidFireTurretHealth10"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "e1a43650-0b64-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "fab8f1a9-8ba4-11e5-9152-06e6ee004fbc",
					"name": "patrik-s",
					"faction": "rebel",
					"guildId": "3d2ed0ce-b05e-11e4-a3ca-06e6ee004fbc",
					"guildName": "Russian_League",
					"attackRating": 66487,
					"attackRatingDelta": 13,
					"defenseRating": 48250,
					"defenseRatingDelta": 0,
					"tournamentRating": 26862,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -95,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489791447,
				"looted": {
					"contraband": 532,
					"materials": 11462,
					"credits": 15545
				},
				"earned": {
					"contraband": 532,
					"materials": 12462,
					"credits": 16545
				},
				"maxLootable": {
					"contraband": 532,
					"credits": 16545,
					"materials": 12462
				},
				"troopsExpended": {
					"troopSoldier10": 23,
					"troopVanguard10": 1,
					"troopHeavyRebel10": 8,
					"troopMedic10": 3,
					"troopHeroLukeSkywalker10": 1,
					"troopChampionRebelHeavyDroideka13": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopDark6": 4,
					"troopDewback6": 4
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 24,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth8",
					"eqpRebelWallHealth10",
					"eqpRebelHeavySandSoldier9",
					"eqpRebelMortarTurretHealth8",
					"eqpRebelMortarTurretDamage8",
					"eqpRebelRapidFireTurretDamage8",
					"eqpRebelSandSoldier10"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "fe4b9b8f-0bea-11e7-b7db-06a77e004fbb",
				"attacker": {
					"playerId": "63d69914-be2e-11e6-b16d-06c66a004f76",
					"name": "Империи пиздец",
					"faction": "rebel",
					"guildId": "c9e057f7-a3e1-11e5-9c9b-06dc8c004fbd",
					"guildName": "RUSSIANBEAR",
					"attackRating": 5884,
					"attackRatingDelta": 13,
					"defenseRating": -159,
					"defenseRatingDelta": 0,
					"tournamentRating": 115,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -108,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489849207,
				"looted": {
					"contraband": 635,
					"credits": 80864,
					"materials": 53876
				},
				"earned": {
					"contraband": 635,
					"credits": 81864,
					"materials": 54876
				},
				"maxLootable": {
					"contraband": 635,
					"credits": 81864,
					"materials": 54876
				},
				"troopsExpended": {
					"troopVanguard1": 1,
					"troopHeavyRebel8": 5,
					"troopMedic7": 3,
					"troopSoldier7": 38,
					"troopATAP6": 1,
					"troopHeroLeia6": 1,
					"troopHailfire7": 1,
					"specialAttackXWing6": 6,
					"troopChampionRebelDroideka4": 1
				},
				"attackerGuildTroopsExpended": {
					"troopHeavyRebel8": 2,
					"troopHailfire7": 2,
					"troopSoldier7": 4
				},
				"defenderGuildTroopsExpended": {
					"troopScout6": 1,
					"troopDark6": 3,
					"troopStorm7": 1,
					"troopStorm6": 4,
					"troopATST7": 1
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 16,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth6",
					"eqpRebelHQHealth6",
					"eqpRebelSandSoldier2",
					"eqpRebelBurstTurretHealth3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "19a4ade7-0c71-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "0bf3dd5d-40ce-11e5-b2bd-06a77e004fbb",
					"name": "aoshima",
					"faction": "rebel",
					"guildId": "4b52143f-5bb0-11e5-a0cc-063864004f75",
					"guildName": "WPS(%e6%b9%be%e5%b2%b8%e8%ad%a6%e5%af%9f%e7%bd%b2)",
					"attackRating": 72070,
					"attackRatingDelta": 13,
					"defenseRating": -1978,
					"defenseRatingDelta": 0,
					"tournamentRating": 10905,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -121,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489906683,
				"looted": {
					"contraband": 598,
					"materials": 25070,
					"credits": 69491
				},
				"earned": {
					"contraband": 598,
					"materials": 26070,
					"credits": 70491
				},
				"maxLootable": {
					"contraband": 598,
					"credits": 70491,
					"materials": 26070
				},
				"troopsExpended": {
					"troopMercenaryRebelGamorreanWarrior2": 1,
					"troopRebelJetpackTrooper10": 12,
					"troopHailfire9": 1,
					"troopSoldier9": 3,
					"troopJuggernaut10": 1,
					"troopHeroChewbacca10": 1,
					"specialAttackXWing10": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4,
					"troopHeavyStorm7": 1
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 22,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth8",
					"eqpRebelHQHealth8",
					"eqpRebelMortarTurretHealth6",
					"eqpRebelBurstTurretDamage3",
					"eqpRebelRapidFireTurretHealth6",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretDamage5"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "35ce2fed-0cf7-11e7-b7db-06a77e004fbb",
				"attacker": {
					"playerId": "f8870a2c-6850-11e5-9097-06cb44004f79",
					"name": "min",
					"faction": "rebel",
					"guildId": "614154f8-9f5b-11e5-bb9f-06e6ee004fbc",
					"guildName": "German.Fun.Hope",
					"attackRating": 35791,
					"attackRatingDelta": 8,
					"defenseRating": -2062,
					"defenseRatingDelta": 0,
					"tournamentRating": 2067,
					"tournamentRatingDelta": 240
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -129,
					"defenseRatingDelta": -8,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489964303,
				"looted": {
					"contraband": 567,
					"materials": 8964,
					"credits": 10983
				},
				"earned": {
					"contraband": 567,
					"materials": 9964,
					"credits": 11983
				},
				"maxLootable": {
					"contraband": 591,
					"credits": 16037,
					"materials": 13849
				},
				"troopsExpended": {
					"troopBantha8": 3,
					"troopSoldier9": 41,
					"troopVanguard7": 2,
					"troopJuggernaut9": 1,
					"troopMedic9": 4,
					"troopHeroLukeSkywalker9": 1,
					"troopMercenaryRebelRider5": 1,
					"troopVanguard8": 1,
					"troopIthorianInfiltrator8": 1,
					"troopPathfinder8": 1,
					"troopChampionRebelHeavyDroideka7": 1,
					"specialAttackBWing9": 4,
					"troopChampionRebelDroideka12": 1
				},
				"attackerGuildTroopsExpended": {
					"troopRebelJetpackTrooper10": 4,
					"troopSoldier10": 1
				},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 2,
					"troopTechnician7": 1,
					"troopMercenaryEmpireGamorreanWarrior2": 1,
					"troopDark6": 1,
					"troopStorm7": 2
				},
				"baseDamagePercent": 84,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 40,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth8",
					"eqpRebelBurstTurretDamage3",
					"eqpRebelWallHealth8",
					"eqpRebelMortarTurretDamage4",
					"eqpRebelCreditGeneratorHealth6",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "4b09b91a-0d5c-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "9fe349df-8f70-11e5-8743-063864004f75",
					"name": "Eaeldred",
					"faction": "rebel",
					"guildId": "0a94b8e3-f63f-11e6-89b5-06cb44004f79",
					"guildName": "RedShirtRebels",
					"attackRating": 6015,
					"attackRatingDelta": 6,
					"defenseRating": -1340,
					"defenseRatingDelta": 0,
					"tournamentRating": 315,
					"tournamentRatingDelta": 52
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -135,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490007744,
				"looted": {
					"contraband": 64,
					"materials": 42291,
					"credits": 51128
				},
				"earned": {
					"contraband": 64,
					"materials": 42291,
					"credits": 51128
				},
				"maxLootable": {
					"contraband": 643,
					"credits": 52773,
					"materials": 43359
				},
				"troopsExpended": {
					"troopSoldier8": 32,
					"troopMedic8": 8,
					"troopHeavyRebel8": 2,
					"specialAttackBWing8": 7,
					"troopHeroChewbacca8": 1,
					"troopRebelSpeeder8": 4
				},
				"attackerGuildTroopsExpended": {
					"troopHeavyRebel8": 2,
					"troopT2BTank7": 1,
					"troopSoldier8": 3,
					"troopMarksman9": 1
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 76,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 20,
				"defenderPotentialMedalGain": 16,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelWallHealth7",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelSandSoldier2",
					"eqpRebelMortarTurretHealth5",
					"eqpRebelHQHealth7"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "8d91473d-0d5c-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "ceb70c44-e311-11e5-9b2c-061c98004f78",
					"name": "pelusio",
					"faction": "rebel",
					"guildId": "53e0e6bf-b5a4-11e5-961b-06c66a004f76",
					"guildName": "BRASIL-DOS-JEDIS",
					"attackRating": 56277,
					"attackRatingDelta": 13,
					"defenseRating": -1417,
					"defenseRatingDelta": 0,
					"tournamentRating": 5600,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -148,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490007789,
				"looted": {
					"contraband": 636,
					"materials": 21601,
					"credits": 26908
				},
				"earned": {
					"contraband": 636,
					"materials": 22601,
					"credits": 27908
				},
				"maxLootable": {
					"contraband": 636,
					"credits": 27908,
					"materials": 22601
				},
				"troopsExpended": {
					"troopVanguard8": 3,
					"troopHeavyRebel10": 2,
					"troopMedic9": 6,
					"troopSoldier9": 15,
					"troopHeroHanSolo10": 1,
					"troopRebelJetpackTrooper8": 4,
					"troopHailfire10": 4
				},
				"attackerGuildTroopsExpended": {
					"troopRebelJetpackTrooper10": 4,
					"troopHailfire10": 1,
					"troopHeavyRebel10": 1
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 43,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelBurstTurretHealth3",
					"eqpRebelMortarTurretDamage4",
					"eqpRebelRapidFireTurretDamage3",
					"eqpRebelRapidFireTurretHealth3",
					"eqpRebelBurstTurretDamage3",
					"eqpRebelContrabandGeneratorHealth3",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "f5170ede-0e24-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "18237300-cd21-11e6-8cd4-06dc8c004fbd",
					"name": "Diyark",
					"faction": "rebel",
					"guildId": "388c67bd-b16f-11e5-beef-06033c004f77",
					"guildName": "Espa%c3%b1oles-3",
					"attackRating": 12117,
					"attackRatingDelta": -26,
					"defenseRating": -3265,
					"defenseRatingDelta": 0,
					"tournamentRating": 1088,
					"tournamentRatingDelta": -200
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -117,
					"defenseRatingDelta": 31,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490093846,
				"looted": {
					"materials": 45834,
					"credits": 44615
				},
				"earned": {
					"materials": 45834,
					"credits": 44615
				},
				"maxLootable": {
					"contraband": 711,
					"credits": 57185,
					"materials": 47201
				},
				"troopsExpended": {
					"troopAAT16": 4,
					"troopHeavyRebel7": 5,
					"troopMedic7": 4,
					"troopSoldier7": 17
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 42,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage2",
					"eqpRebelWallHealth5",
					"eqpRebelSandSoldier3",
					"eqpRebelMortarTurretDamage2"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "2ec153ba-0e25-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "bbd362ad-a854-11e5-8530-060350004f90",
					"name": "badgirl",
					"faction": "rebel",
					"guildId": "7e03346a-752f-11e5-9097-06cb44004f79",
					"guildName": "hurtinem",
					"attackRating": 15133,
					"attackRatingDelta": 4,
					"defenseRating": -1354,
					"defenseRatingDelta": 0,
					"tournamentRating": 678,
					"tournamentRatingDelta": 40
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -121,
					"defenseRatingDelta": -4,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490093991,
				"looted": {
					"contraband": 140,
					"credits": 27528,
					"materials": 19191
				},
				"earned": {
					"contraband": 140,
					"credits": 27528,
					"materials": 19191
				},
				"maxLootable": {
					"contraband": 588,
					"credits": 29754,
					"materials": 20191
				},
				"troopsExpended": {
					"troopSoldier7": 1,
					"troopRebelJetpackTrooper8": 2,
					"troopHailfire9": 3,
					"troopJuggernaut9": 1,
					"troopHeroLukeSkywalker7": 1,
					"troopMedic8": 3,
					"troopMarksman8": 3,
					"troopHeavyRebel8": 1,
					"specialAttackXWing8": 7,
					"troopChampionRebelHeavyDroideka3": 1,
					"troopChampionRebelDroideka9": 1
				},
				"attackerGuildTroopsExpended": {
					"troopJuggernaut10": 1,
					"troopMarksman10": 2
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 53,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth9",
					"eqpRebelHQHealth9",
					"eqpRebelSandSoldier2",
					"eqpRebelMortarTurretDamage6",
					"eqpRebelRapidFireTurretDamage6"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "04f608e3-0e68-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "9f768b54-f0f4-11e4-9fd2-06e6ee004fbc",
					"name": "rebel 10",
					"faction": "rebel",
					"guildId": "ae09b8d3-0348-11e6-9b28-06dc8c004fbd",
					"guildName": "Delta7",
					"attackRating": 41292,
					"attackRatingDelta": 4,
					"defenseRating": -1711,
					"defenseRatingDelta": 0,
					"tournamentRating": 6210,
					"tournamentRatingDelta": 40
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -125,
					"defenseRatingDelta": -4,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490122692,
				"looted": {
					"contraband": 481,
					"credits": 2104,
					"materials": 7471
				},
				"earned": {
					"contraband": 481,
					"credits": 2474,
					"materials": 7841
				},
				"maxLootable": {
					"contraband": 489,
					"credits": 5564,
					"materials": 10546
				},
				"troopsExpended": {
					"troopVanguard9": 1,
					"troopMedic9": 5,
					"troopSoldier9": 6,
					"troopHeavyRebel9": 5,
					"troopATAP9": 3,
					"specialAttackZ959": 1,
					"troopMercenaryRebelGamorreanWarrior5": 1,
					"troopWookie9": 1,
					"troopHeroLukeSkywalker8": 1,
					"troopMercenaryRebelTwilekIncinerator5": 2,
					"troopChampionRebelDroideka12": 1,
					"troopChampionRebelHeavyDroideka6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4,
					"troopTechnician7": 1
				},
				"baseDamagePercent": 56,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 40,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth8",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelWallHealth9",
					"eqpRebelHeavySandSoldier1",
					"eqpRebelSandSoldier3",
					"eqpRebelRapidFireTurretHealth6"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "14a36b36-0eab-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "db2fee30-64f7-11e6-a77a-06c66a004f76",
					"name": "Mack",
					"faction": "rebel",
					"guildId": "fa698ae7-533d-11e6-89ec-069da4004f8b",
					"guildName": "brasil-br-wars",
					"attackRating": 4611,
					"attackRatingDelta": 14,
					"defenseRating": -581,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -139,
					"defenseRatingDelta": -14,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490151538,
				"looted": {
					"contraband": 22,
					"materials": 9040,
					"credits": 5987
				},
				"earned": {
					"contraband": 22,
					"materials": 10040,
					"credits": 6987
				},
				"maxLootable": {
					"contraband": 484,
					"credits": 10303,
					"materials": 23117
				},
				"troopsExpended": {
					"troopDesertSkiff7": 1,
					"troopVanguard1": 4,
					"specialAttackYWing6": 1,
					"troopSoldier7": 77,
					"troopHeroChewbacca7": 1
				},
				"attackerGuildTroopsExpended": {
					"troopJuggernaut8": 1,
					"troopHeavyRebel9": 2,
					"troopSoldier9": 1,
					"troopSoldier7": 1
				},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 2,
					"troopDewback6": 5,
					"troopStorm7": 1
				},
				"baseDamagePercent": 68,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 23,
				"defenderPotentialMedalGain": 16,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelSandSoldier2",
					"eqpRebelBurstTurretDamage3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "0200fbfd-0ece-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5853,
					"attackRatingDelta": -13,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "057817ce-8d08-11e6-8102-061c98004f78",
					"name": "Shady",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 12109,
					"attackRatingDelta": 0,
					"defenseRating": -2325,
					"defenseRatingDelta": 16,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490166433,
				"looted": {},
				"earned": {},
				"maxLootable": {
					"contraband": 2960,
					"credits": 438788,
					"materials": 205883
				},
				"troopsExpended": {
					"troopHeroATMP7": 1,
					"troopEmpireHeavyStormDeath7": 3,
					"troopHeavyStorm7": 2,
					"troopSniper7": 2
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 6,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 30,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [
					"eqpRebelWallHealth8",
					"eqpRebelHQHealth7",
					"eqpRebelMortarTurretHealth5",
					"eqpRebelMaterialsGeneratorHealth5",
					"eqpRebelSandSoldier2",
					"eqpRebelCreditGeneratorHealth5",
					"eqpRebelContrabandGeneratorHealth5"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "5d66164c-0ecf-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5840,
					"attackRatingDelta": -13,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "041ed939-8e6c-11e4-8f1f-06dc8c004fbd",
					"name": "frankyklf",
					"faction": "rebel",
					"guildId": "eb561122-3111-11e6-8121-069da4004f8b",
					"guildName": "Peterpro",
					"attackRating": 7114,
					"attackRatingDelta": 0,
					"defenseRating": 636,
					"defenseRatingDelta": 16,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490167045,
				"looted": {
					"materials": 41482,
					"credits": 5783
				},
				"earned": {
					"contraband": 0,
					"materials": 41582,
					"credits": 5883
				},
				"maxLootable": {
					"contraband": 4793,
					"credits": 204533,
					"materials": 204475
				},
				"troopsExpended": {
					"troopATAT7": 1,
					"troopHeroATAT7": 1,
					"troopTechnician7": 4,
					"troopMHC7": 2,
					"troopMercenaryEmpireGamorreanWarrior2": 4
				},
				"attackerGuildTroopsExpended": {
					"troopStorm7": 4,
					"troopDewback6": 4,
					"troopDark6": 3
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 25,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 27,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [
					"eqpRebelRapidFireTurretDamage3",
					"eqpRebelMortarTurretDamage3",
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelBurstTurretDamage2",
					"eqpRebelSandSoldier1"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "e5627cbb-0ed1-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5852,
					"attackRatingDelta": 12,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "4c248d43-3f8d-11e4-93a1-06a77e004fbb",
					"name": "Zacaaron",
					"faction": "rebel",
					"guildId": "010d24b8-57f5-11e4-b32e-06dc8c004fbd",
					"guildName": "Malaysia.Rebels",
					"attackRating": 383,
					"attackRatingDelta": 0,
					"defenseRating": -382,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490168155,
				"looted": {
					"contraband": 0,
					"credits": 87072,
					"materials": 82458
				},
				"earned": {
					"contraband": 0,
					"credits": 88072,
					"materials": 83458
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 88072,
					"materials": 83458
				},
				"troopsExpended": {
					"specialAttackTieBomber6": 2,
					"troopShock3": 1,
					"troopStorm7": 1,
					"troopMercenaryEmpireGamorreanWarrior2": 2,
					"troopHeroATAT7": 1,
					"troopTechnician7": 4,
					"troopMHC7": 4,
					"troopHeavyStorm7": 4,
					"specialAttackTieDefender7": 5,
					"troopChampionEmpireDroideka5": 1
				},
				"attackerGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 12,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [],
				"planetId": "planet6"
			},
			{
				"battleId": "8e47750d-0ed5-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5863,
					"attackRatingDelta": 11,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "e82e8c62-be29-11e6-8d5b-069da4004f8b",
					"name": "General Fastio",
					"faction": "rebel",
					"guildId": "4b52143f-5bb0-11e5-a0cc-063864004f75",
					"guildName": "WPS(%e6%b9%be%e5%b2%b8%e8%ad%a6%e5%af%9f%e7%bd%b2)",
					"attackRating": 694,
					"attackRatingDelta": 0,
					"defenseRating": -657,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490169716,
				"looted": {
					"credits": 21342,
					"materials": 21218
				},
				"earned": {
					"contraband": 0,
					"credits": 22342,
					"materials": 22218
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 22342,
					"materials": 22218
				},
				"troopsExpended": {
					"troopHeavyStorm7": 4,
					"troopHeroCrimsonGuard6": 1,
					"troopTechnician7": 5,
					"troopEmpireSpeeder7": 2,
					"troopMHC7": 4
				},
				"attackerGuildTroopsExpended": {
					"troopHeavyStorm7": 1,
					"troopEmpireSpeeder7": 4
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [],
				"planetId": "planet6"
			},
			{
				"battleId": "98a340c9-0ed8-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5869,
					"attackRatingDelta": 6,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "c63c0e9a-92b1-11e6-be50-060a32004f8c",
					"name": "Mars 5",
					"faction": "rebel",
					"guildId": "519ed4f6-a98b-11e5-9ddb-060a32004f8c",
					"guildName": "DerAufstand",
					"attackRating": 11007,
					"attackRatingDelta": 0,
					"defenseRating": -4731,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490171064,
				"looted": {
					"contraband": 52,
					"materials": 88339,
					"credits": 35919
				},
				"earned": {
					"contraband": 52,
					"materials": 88589,
					"credits": 36169
				},
				"maxLootable": {
					"contraband": 1189,
					"credits": 141326,
					"materials": 253950
				},
				"troopsExpended": {
					"troopTechnician7": 8,
					"troopHeroATAT7": 1,
					"troopMHC7": 4,
					"troopStorm7": 4,
					"troopEmpireSpeeder7": 2,
					"troopChampionEmpireDroideka5": 1,
					"specialAttackTieDefender7": 2,
					"specialAttackTieBomber6": 1
				},
				"attackerGuildTroopsExpended": {
					"troopDewback6": 1,
					"troopDark6": 2,
					"troopStorm7": 1,
					"troopEmpireSpeeder7": 2,
					"troopTechnician7": 1
				},
				"defenderGuildTroopsExpended": {
					"troopSoldier9": 4,
					"troopWookie6": 4,
					"troopSoldier8": 4
				},
				"baseDamagePercent": 57,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 19,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelWallHealth8",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelBurstTurretHealth5",
					"eqpRebelMortarTurretHealth6"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "b487453d-0edb-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5876,
					"attackRatingDelta": 7,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "7111f662-087f-11e6-9814-061c98004f78",
					"name": "tank",
					"faction": "rebel",
					"guildId": "b72747c6-f868-11e5-a115-061c98004f78",
					"guildName": "HELIX1.0",
					"attackRating": 433,
					"attackRatingDelta": 0,
					"defenseRating": -432,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490172405,
				"looted": {
					"contraband": 0,
					"materials": 53120,
					"credits": 41070
				},
				"earned": {
					"contraband": 0,
					"materials": 54120,
					"credits": 42070
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 57540,
					"materials": 54120
				},
				"troopsExpended": {
					"troopHeroATAT7": 1,
					"troopTechnician7": 4,
					"troopATAT7": 2,
					"troopHeavyStorm7": 5
				},
				"attackerGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 92,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 12,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelRapidFireTurretDamage1",
					"eqpRebelWallHealth3",
					"eqpRebelHQHealth4"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "84700878-0edf-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 7,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "85d0c4d1-2f8b-11e6-8acf-06a77e004fbb",
					"name": "leo",
					"faction": "rebel",
					"guildId": "2f55f7f7-5164-11e4-93fb-06e6ee004fbc",
					"guildName": "rebellsupersqaud",
					"attackRating": 552,
					"attackRatingDelta": 0,
					"defenseRating": -551,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490174024,
				"looted": {
					"contraband": 285,
					"credits": 16058,
					"materials": 29213
				},
				"earned": {
					"contraband": 285,
					"credits": 17058,
					"materials": 30213
				},
				"maxLootable": {
					"contraband": 285,
					"credits": 17058,
					"materials": 30213
				},
				"troopsExpended": {
					"troopATAT7": 2,
					"troopTechnician7": 4,
					"troopHeroATAT7": 1,
					"troopMercenaryEmpireGamorreanWarrior2": 3,
					"troopStorm7": 2
				},
				"attackerGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 98,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 12,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelContrabandGeneratorHealth2",
					"eqpRebelHQHealth4",
					"eqpRebelWallHealth4"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "1f8c126b-0ef1-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "1ec44237-75ce-11e6-9f0c-06a77e004fbb",
					"name": "tmys",
					"faction": "rebel",
					"guildId": "b8043491-8b17-11e5-8743-063864004f75",
					"guildName": "TEMPLAR-JEDIs",
					"attackRating": 19170,
					"attackRatingDelta": 8,
					"defenseRating": -1077,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -147,
					"defenseRatingDelta": -8,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490181578,
				"looted": {
					"contraband": 547,
					"materials": 11562,
					"credits": 6618
				},
				"earned": {
					"contraband": 547,
					"materials": 12562,
					"credits": 7618
				},
				"maxLootable": {
					"contraband": 547,
					"credits": 7952,
					"materials": 18698
				},
				"troopsExpended": {
					"troopSoldier7": 12,
					"troopMedic7": 4,
					"specialAttackFangFighter5": 1,
					"troopHeavyRebel7": 6,
					"troopBigMouthAlien1": 1,
					"troopVanguard6": 2,
					"troopAAT17": 1,
					"troopMercenaryRebelGamorreanWarrior1": 1,
					"troopATAP7": 1,
					"specialAttackBWing7": 4,
					"troopATRT3": 1
				},
				"attackerGuildTroopsExpended": {
					"troopHailfire7": 1
				},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 3,
					"troopScout6": 4,
					"troopTechnician7": 1
				},
				"baseDamagePercent": 87,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHeavySandSoldier2",
					"eqpRebelHovertank1",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "0951f753-0f56-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "bdf22bf9-bf58-11e5-950e-06a77e004fbb",
					"name": "Giuke Skyrunner",
					"faction": "rebel",
					"guildId": "441e7d38-9291-11e5-999b-06cb44004f79",
					"guildName": "%5b0000FF%5dITALIANI",
					"attackRating": 37043,
					"attackRatingDelta": 4,
					"defenseRating": -2452,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -151,
					"defenseRatingDelta": -4,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490224917,
				"looted": {
					"contraband": 628,
					"credits": 46035,
					"materials": 48229
				},
				"earned": {
					"contraband": 628,
					"credits": 46035,
					"materials": 48229
				},
				"maxLootable": {
					"contraband": 628,
					"credits": 53466,
					"materials": 49229
				},
				"troopsExpended": {
					"troopRebelSpeeder8": 19,
					"troopHeroLukeSkywalker8": 1,
					"troopMedic9": 2,
					"specialAttackZ9510": 3,
					"troopSoldier9": 15,
					"specialAttackBWing7": 2
				},
				"attackerGuildTroopsExpended": {
					"troopJuggernaut10": 1,
					"troopHailfire10": 2,
					"troopVanguard10": 1,
					"troopSoldier9": 3
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 72,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 40,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMortarTurretDamage7",
					"eqpRebelMortarTurretHealth7",
					"eqpRebelRapidFireTurretDamage6",
					"eqpRebelRapidFireTurretHealth6",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "9ec6058c-0f99-11e7-a8ec-069da4004f8b",
				"attacker": {
					"playerId": "3fc94f01-5fa8-11e5-b7e2-06c66a004f76",
					"name": "totocaca",
					"faction": "rebel",
					"guildId": "1c17475d-f5ed-11e5-a546-06c66a004f76",
					"guildName": "FRance",
					"attackRating": 34228,
					"attackRatingDelta": 8,
					"defenseRating": -3187,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -159,
					"defenseRatingDelta": -8,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490253955,
				"looted": {
					"contraband": 533,
					"materials": 39886,
					"credits": 36503
				},
				"earned": {
					"contraband": 533,
					"materials": 40886,
					"credits": 37503
				},
				"maxLootable": {
					"contraband": 533,
					"credits": 37503,
					"materials": 40886
				},
				"troopsExpended": {
					"troopVanguard6": 1,
					"troopSoldier9": 11,
					"troopMedic9": 5,
					"troopHeavyRebel9": 3,
					"troopJuggernaut9": 1,
					"troopHeroHanSolo8": 1,
					"troopHailfire9": 3,
					"troopDesertSkiff9": 1,
					"specialAttackFangFighter1": 1,
					"troopChampionRebelHeavyDroideka5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 3,
					"troopScout6": 2,
					"troopTechnician7": 1,
					"troopDark6": 1
				},
				"baseDamagePercent": 86,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 40,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth8",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelHQHealth7",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelMortarTurretDamage5"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "0fbf1469-0ffe-11e7-84ee-06a77e004fbb",
				"attacker": {
					"playerId": "43233014-f117-11e6-a844-06dc8c004fbd",
					"name": "Paladin",
					"faction": "rebel",
					"guildId": "ea37ef0c-6326-11e6-81b6-063864004f75",
					"guildName": "ROGUE1",
					"attackRating": 1105,
					"attackRatingDelta": -12,
					"defenseRating": -24,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -145,
					"defenseRatingDelta": 14,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490297108,
				"looted": {
					"contraband": 17,
					"materials": 22412,
					"credits": 29308
				},
				"earned": {
					"contraband": 17,
					"materials": 22412,
					"credits": 29308
				},
				"maxLootable": {
					"contraband": 817,
					"credits": 61356,
					"materials": 61338
				},
				"troopsExpended": {
					"troopJuggernaut5": 1,
					"troopSoldier6": 47,
					"troopHeroChewbacca5": 1,
					"troopMedic5": 3
				},
				"attackerGuildTroopsExpended": {
					"troopHeavyRebel6": 2,
					"troopSoldier6": 10
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 40,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 26,
				"defenderPotentialMedalGain": 14,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelCreditGeneratorHealth1",
					"eqpRebelContrabandGeneratorHealth1",
					"eqpRebelHQHealth2"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "81c3773d-0ffe-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "09d86f9f-bacd-11e6-8cf8-06a77e004fbb",
					"name": "kda",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 3804,
					"attackRatingDelta": 14,
					"defenseRating": -525,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -159,
					"defenseRatingDelta": -14,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490297269,
				"looted": {
					"contraband": 159,
					"materials": 631,
					"credits": 13828
				},
				"earned": {
					"contraband": 159,
					"materials": 1631,
					"credits": 14828
				},
				"maxLootable": {
					"contraband": 651,
					"credits": 43532,
					"materials": 45168
				},
				"troopsExpended": {
					"troopSoldier6": 44,
					"troopMedic6": 6,
					"troopMercenaryRebelGamorreanWarrior1": 3,
					"specialAttackZ955": 1,
					"troopHeroLeia6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopDark6": 4,
					"troopStorm7": 6,
					"troopEmpireSpeeder7": 1
				},
				"baseDamagePercent": 52,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 23,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth5",
					"eqpRebelBurstTurretHealth2",
					"eqpRebelHQHealth5",
					"eqpRebelMaterialsGeneratorHealth5",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "dbed286e-1075-11e7-a8ec-069da4004f8b",
				"attacker": {
					"playerId": "c63c0e9a-92b1-11e6-be50-060a32004f8c",
					"name": "Mars 5",
					"faction": "rebel",
					"guildId": "519ed4f6-a98b-11e5-9ddb-060a32004f8c",
					"guildName": "DerAufstand",
					"attackRating": 11300,
					"attackRatingDelta": 8,
					"defenseRating": -4787,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -167,
					"defenseRatingDelta": -8,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490348539,
				"looted": {
					"credits": 1177,
					"materials": 21568
				},
				"earned": {
					"contraband": 0,
					"credits": 2177,
					"materials": 22568
				},
				"maxLootable": {
					"contraband": 717,
					"credits": 53331,
					"materials": 73304
				},
				"troopsExpended": {
					"troopT2BTank8": 1,
					"troopATTE7": 1,
					"troopRebelJetpackTrooper7": 5,
					"troopMedic7": 3,
					"troopHeavyRebel8": 3,
					"specialAttackXWing5": 5,
					"troopHeroLeia8": 1,
					"troopSoldier8": 4
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopStorm7": 3,
					"troopEmpireSpeeder7": 1,
					"troopDewback6": 3,
					"troopATST7": 1
				},
				"baseDamagePercent": 51,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 22,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelHeavySandSoldier1",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "f309954d-10c6-11e7-ba69-06c66a004f76",
				"attacker": {
					"playerId": "6925ee7f-e4ac-11e6-96c8-069da4004f8b",
					"name": "Eyetguy",
					"faction": "rebel",
					"guildId": "a357a078-79d2-11e5-8846-06e6ee004fbc",
					"guildName": "obwbootcamp",
					"attackRating": 13516,
					"attackRatingDelta": -28,
					"defenseRating": -249,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -133,
					"defenseRatingDelta": 34,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490383381,
				"looted": {
					"contraband": 11,
					"materials": 9925,
					"credits": 18073
				},
				"earned": {
					"contraband": 11,
					"materials": 9925,
					"credits": 18073
				},
				"maxLootable": {
					"contraband": 634,
					"credits": 27080,
					"materials": 14635
				},
				"troopsExpended": {
					"troopSoldier7": 56,
					"troopMedic7": 8,
					"troopHeroLeia7": 1,
					"troopChampionRebelDroideka4": 1,
					"specialAttackBWing7": 1,
					"specialAttackBWing6": 1,
					"specialAttackYWing7": 2,
					"specialAttackXWing5": 1
				},
				"attackerGuildTroopsExpended": {
					"troopATAP6": 1,
					"troopHeavyRebel8": 2,
					"troopMedic8": 1,
					"troopSoldier7": 3
				},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 3
				},
				"baseDamagePercent": 48,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth6",
					"eqpRebelHQHealth6",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "db73b919-10c7-11e7-ba69-06c66a004f76",
				"attacker": {
					"playerId": "4796e497-517a-11e6-8e4c-06cb44004f79",
					"name": "brunhilde",
					"faction": "rebel",
					"guildId": "858b8241-b1a9-11e5-beef-06033c004f77",
					"guildName": "German-Rebells-E",
					"attackRating": 38507,
					"attackRatingDelta": 8,
					"defenseRating": -2064,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -141,
					"defenseRatingDelta": -8,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490383764,
				"looted": {
					"contraband": 635,
					"materials": 11207,
					"credits": 22102
				},
				"earned": {
					"contraband": 635,
					"materials": 12207,
					"credits": 23102
				},
				"maxLootable": {
					"contraband": 635,
					"credits": 23102,
					"materials": 12207
				},
				"troopsExpended": {
					"troopSoldier8": 8,
					"troopHeavyRebel8": 4,
					"troopMedic8": 2,
					"troopVanguard4": 1,
					"troopMercenaryRebelGamorreanWarrior4": 1,
					"troopHeroChewbacca8": 1,
					"troopJuggernaut8": 2,
					"troopHailfire8": 2
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopATST7": 1
				},
				"baseDamagePercent": 99,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 40,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelWallHealth7",
					"eqpRebelHeavySandSoldier2",
					"eqpRebelSandSoldier4",
					"eqpRebelMortarTurretDamage7"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			}
		],
		"campaigns": {
			"cmp_fue": {
				"uid": "cmp_fue",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"sw_hth_outposts": {
				"uid": "sw_hth_outposts",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_0_hb_e": {
				"uid": "cmp_0_hb_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_1_utts_e": {
				"uid": "cmp_1_utts_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_2_tsw_e": {
				"uid": "cmp_2_tsw_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_3_tjg_e": {
				"uid": "cmp_3_tjg_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_4_sotm_e": {
				"uid": "cmp_4_sotm_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_5_tih_e": {
				"uid": "cmp_5_tih_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_7_bs_e": {
				"uid": "cmp_7_bs_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_8_tat_e": {
				"uid": "cmp_8_tat_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_9_sas_e": {
				"uid": "cmp_9_sas_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_10_bgh_e": {
				"uid": "cmp_10_bgh_e",
				"timeZone": 0,
				"completed": true,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_11_tbft_e": {
				"uid": "cmp_11_tbft_e",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			}
		},
		"missions": {
			"fue_defendBaseMission_00": {
				"uid": "fue_defendBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9f71c8a5-7216-11e6-8b58-06033c004f77",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHalfBuildings",
					"RetainHQ",
					"AvoidCompleteLoss"
				],
				"grindMissionRetries": 0
			},
			"fue_impIntroBaseMission_00": {
				"uid": "fue_impIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "ee6285f1-7216-11e6-8b58-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"fue_rebIntroBaseMission_00": {
				"uid": "fue_rebIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "17d1d35d-7217-11e6-8b58-06033c004f77",
				"lootRemaining": {
					"credits": 1058,
					"materials": 1000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"sw_hth_outpost_s_1": {
				"uid": "sw_hth_outpost_s_1",
				"campaignUid": "sw_hth_outposts",
				"status": "Default",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_1": {
				"uid": "camp_1_utts_e_1",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "25638767-7218-11e6-b931-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2": {
				"uid": "camp_1_utts_e_2",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "717a060b-7219-11e6-b931-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2a": {
				"uid": "camp_1_utts_e_2a",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c196a477-721a-11e6-8919-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_3": {
				"uid": "camp_1_utts_e_3",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_Wall_T1_25"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_4": {
				"uid": "camp_1_utts_e_4",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "84ee5059-721c-11e6-8919-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_5": {
				"uid": "camp_1_utts_e_5",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT2EmpStarport"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_6": {
				"uid": "camp_1_utts_e_6",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "3b78217a-721f-11e6-9673-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_7": {
				"uid": "camp_1_utts_e_7",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2EmpCreGen"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_9": {
				"uid": "camp_1_utts_e_9",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "819b41bc-7229-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_10": {
				"uid": "camp_1_utts_e_10",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own4Turrets"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_1": {
				"uid": "camp_2_tsw_e_1",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "23f0ea48-722b-11e6-a33a-060a32004f8c",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_2": {
				"uid": "camp_2_tsw_e_2",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T1EmpFactory"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_3": {
				"uid": "camp_2_tsw_e_3",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "ee94d3fd-722b-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_4": {
				"uid": "camp_2_tsw_e_4",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpCredGen"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_5": {
				"uid": "camp_2_tsw_e_5",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "a5af08d9-723a-11e6-91c9-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_1": {
				"uid": "camp_3_tjg_e_1",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "f4831648-723a-11e6-91c9-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_2": {
				"uid": "camp_3_tjg_e_2",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpBarracks"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_3": {
				"uid": "camp_3_tjg_e_3",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "41569505-7242-11e6-8919-069da4004f8b",
				"lootRemaining": {
					"credits": 500,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_4": {
				"uid": "camp_3_tjg_e_4",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "b9431d4a-7242-11e6-8919-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_5": {
				"uid": "camp_3_tjg_e_5",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T2EmpMatStor"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_6": {
				"uid": "camp_3_tjg_e_6",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "9a4ad6b4-7243-11e6-8919-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_7": {
				"uid": "camp_3_tjg_e_7",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpRFTurrets"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_8": {
				"uid": "camp_3_tjg_e_8",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2c6e2e03-72c9-11e6-859a-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_9": {
				"uid": "camp_3_tjg_e_9",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT3EmpHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_10": {
				"uid": "camp_3_tjg_e_10",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "327c3e05-7336-11e6-95d9-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"Kill_TuskenHero_t1_1",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_1": {
				"uid": "camp_4_sotm_e_1",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMortar_T1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_2": {
				"uid": "camp_4_sotm_e_2",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireBarracks_T3_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_3": {
				"uid": "camp_4_sotm_e_3",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "70eddaf8-7346-11e6-91c9-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_4": {
				"uid": "camp_4_sotm_e_4",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "96d2594d-7359-11e6-bfb6-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_5": {
				"uid": "camp_4_sotm_e_5",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "53aa7a1e-735e-11e6-8bcd-06c66a004f76",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_6": {
				"uid": "camp_4_sotm_e_6",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "c0d763ab-735e-11e6-8bcd-06c66a004f76",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_7": {
				"uid": "camp_4_sotm_e_7",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_turret_t1_6"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_8": {
				"uid": "camp_4_sotm_e_8",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_wall_t1_40"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_9": {
				"uid": "camp_4_sotm_e_9",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_10": {
				"uid": "camp_4_sotm_e_10",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_starport_t2_2"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_11": {
				"uid": "camp_4_sotm_e_11",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2ea5b184-7374-11e6-b6f3-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_12": {
				"uid": "camp_4_sotm_e_12",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "6d33e004-7376-11e6-b6f3-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_13": {
				"uid": "camp_4_sotm_e_13",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "1ba6d6db-7377-11e6-b6f3-061c98004f78",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_14": {
				"uid": "camp_4_sotm_e_14",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1524828c-7379-11e6-b931-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_1": {
				"uid": "camp_5_tih_e_1",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMaterialsGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_2": {
				"uid": "camp_5_tih_e_2",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireOffenseLab_t1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_3": {
				"uid": "camp_5_tih_e_3",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "e13be059-741d-11e6-b6f3-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_4": {
				"uid": "camp_5_tih_e_4",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_12_t3_walls"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_5": {
				"uid": "camp_5_tih_e_5",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "b7652a6a-741e-11e6-b6f3-061c98004f78",
				"lootRemaining": {
					"credits": 1000,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_6": {
				"uid": "camp_5_tih_e_6",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "151d5209-741f-11e6-b6f3-061c98004f78",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_7": {
				"uid": "camp_5_tih_e_7",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireCreditGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_8": {
				"uid": "camp_5_tih_e_8",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "a7abb674-7421-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 6000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_1": {
				"uid": "chapter_7_bs_e_1",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d9649156-7424-11e6-a5c3-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_2": {
				"uid": "chapter_7_bs_e_2",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "7cbc5cec-7425-11e6-a5c3-06033c004f77",
				"lootRemaining": {
					"credits": 2100,
					"materials": 2100,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_3": {
				"uid": "chapter_7_bs_e_3",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1f510a6c-7427-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_4": {
				"uid": "chapter_7_bs_e_4",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireHQ_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_5": {
				"uid": "chapter_7_bs_e_5",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "cb679f29-7509-11e6-b6f3-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_6": {
				"uid": "chapter_7_bs_e_6",
				"campaignUid": "cmp_7_bs_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_7": {
				"uid": "chapter_7_bs_e_7",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "d1dc6335-76ad-11e6-a33a-060a32004f8c",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_8": {
				"uid": "chapter_7_bs_e_8",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f8d367c4-76ae-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 2400,
					"materials": 2400,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"Kill_infantry_t1_5",
					"Destroy_rebelTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_9": {
				"uid": "chapter_7_bs_e_9",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c2c3fc98-7d92-11e6-940f-06a77e004fbb",
				"lootRemaining": {
					"credits": 2600,
					"materials": 2600,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"Kill_infantry_t1_5",
					"Destroy_rebelTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_10": {
				"uid": "chapter_7_bs_e_10",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "221838d1-76cb-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_11": {
				"uid": "chapter_7_bs_e_11",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "76ece4c0-7734-11e6-b6f3-061c98004f78",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_12": {
				"uid": "chapter_7_bs_e_12",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireOffenseLab_t2_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_13": {
				"uid": "chapter_7_bs_e_13",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireTacticalCommand_t2_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_14": {
				"uid": "chapter_7_bs_e_14",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f34ca877-7e66-11e6-91a3-063864004f75",
				"lootRemaining": {
					"credits": 2500,
					"materials": 2500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"DestroyHQ",
					"Kill_infantry_t1_8"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_1": {
				"uid": "chapter_8_tat_e_1",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "ecf85bb7-7735-11e6-9f0c-06a77e004fbb",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_2": {
				"uid": "chapter_8_tat_e_2",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "320332c1-85af-11e6-a80d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_3": {
				"uid": "chapter_8_tat_e_3",
				"campaignUid": "cmp_8_tat_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_starport_t4_2"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_4": {
				"uid": "chapter_8_tat_e_4",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d361c8f3-862d-11e6-aad3-06c66a004f76",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_5": {
				"uid": "chapter_8_tat_e_5",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "195f75f9-862f-11e6-a80d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 8000,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_6": {
				"uid": "chapter_8_tat_e_6",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "3a8c7148-865a-11e6-a80d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_7": {
				"uid": "chapter_8_tat_e_7",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_barracks_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_8": {
				"uid": "chapter_8_tat_e_8",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "ee439858-867d-11e6-932d-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_9": {
				"uid": "chapter_8_tat_e_9",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "a70f1c41-88a7-11e6-a80d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_10": {
				"uid": "chapter_8_tat_e_10",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "79bf5a0c-88aa-11e6-bcda-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_11": {
				"uid": "chapter_8_tat_e_11",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f2d92449-88af-11e6-aad3-06c66a004f76",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_12": {
				"uid": "chapter_8_tat_e_12",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "6751f831-88b2-11e6-932d-063864004f75",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_13": {
				"uid": "chapter_8_tat_e_13",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "ce4e1ad3-88b2-11e6-932d-063864004f75",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_1": {
				"uid": "chapter_9_sas_e_1",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireFactory_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_2": {
				"uid": "chapter_9_sas_e_2",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "4e6208fc-88b3-11e6-9f3a-06dc8c004fbd",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_3": {
				"uid": "chapter_9_sas_e_3",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_4": {
				"uid": "chapter_9_sas_e_4",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "547f31c7-898b-11e6-aad3-06c66a004f76",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_5": {
				"uid": "chapter_9_sas_e_5",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireBarracks_t4_3"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_6": {
				"uid": "chapter_9_sas_e_6",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c612f005-898e-11e6-8a7e-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_7": {
				"uid": "chapter_9_sas_e_7",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2377a76a-938b-11e6-9b37-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_8": {
				"uid": "chapter_9_sas_e_8",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "fef4bf8a-898f-11e6-8a7e-06033c004f77",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_9": {
				"uid": "chapter_9_sas_e_9",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "137e07ab-92f8-11e6-a92f-06dc8c004fbd",
				"lootRemaining": {
					"credits": 3000,
					"materials": 3000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_10": {
				"uid": "chapter_9_sas_e_10",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_11": {
				"uid": "chapter_9_sas_e_11",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "8a73310a-9905-11e6-81bb-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_12": {
				"uid": "chapter_9_sas_e_12",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d3263402-937d-11e6-b072-06c66a004f76",
				"lootRemaining": {
					"credits": 7000,
					"materials": 7000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Destroy_storyRebShieldGen1",
					"Kill_hero_OtoVans4",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_1": {
				"uid": "chapter_10_bgh_e_1",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnEmpireRocketTurret1_2"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_2": {
				"uid": "chapter_10_bgh_e_2",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "76adc618-9377-11e6-a92f-06dc8c004fbd",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"kill_hero_t1_1",
					"DestroyAllBuildings",
					"kill_vehicle_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_3": {
				"uid": "chapter_10_bgh_e_3",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1bb566e2-92c3-11e6-8627-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 2763,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_4": {
				"uid": "chapter_10_bgh_e_4",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "a0406fae-9911-11e6-b2ba-061c98004f78",
				"lootRemaining": {
					"credits": 7000,
					"materials": 8000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_5": {
				"uid": "chapter_10_bgh_e_5",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnHQ5"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_6": {
				"uid": "chapter_10_bgh_e_6",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "bbe8d718-92c5-11e6-9b37-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyAllBuildings",
					"DestroyShieldGenerator1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_7": {
				"uid": "chapter_10_bgh_e_7",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f45e9d6a-92c6-11e6-a2a0-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"DestroyAllBuildings",
					"Kill_infantry_t1_20"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_8": {
				"uid": "chapter_10_bgh_e_8",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "46ce326a-a36d-11e6-bf6d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 1920,
					"materials": 7998,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_9": {
				"uid": "chapter_10_bgh_e_9",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "2208baf3-92d7-11e6-84d7-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_Rancor5_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_10": {
				"uid": "chapter_10_bgh_e_10",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9a19dc9d-92e9-11e6-a92f-06dc8c004fbd",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHalfBuildings",
					"RetainHQ",
					"AvoidCompleteLoss"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_11": {
				"uid": "chapter_10_bgh_e_11",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "23dd0db0-9451-11e6-8dee-063864004f75",
				"lootRemaining": {
					"credits": 9000,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_22",
					"Kill_vehicle_t1_6",
					"Kill_KraytDragon8_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_12": {
				"uid": "chapter_10_bgh_e_12",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnEmpireFleetCommand2_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_13": {
				"uid": "chapter_10_bgh_e_13",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "0bcbf8c3-92ed-11e6-a2a0-06033c004f77",
				"lootRemaining": {
					"credits": 7980,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"kill_WompRatHero_t1_1",
					"kill_WompRatGeneralist_t1_40",
					"kill_WompRatBruiser_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_1": {
				"uid": "chapter_11_tbft_e_1",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnBarracks6_3"
				],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_2": {
				"uid": "chapter_11_tbft_e_2",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9fc2754d-0059-11e7-8bc5-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_3": {
				"uid": "chapter_11_tbft_e_3",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnEmpireContrabandStorage1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_4": {
				"uid": "chapter_11_tbft_e_4",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "fab27d96-004e-11e7-8bc5-060a32004f8c",
				"lootRemaining": {
					"credits": 552,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_5": {
				"uid": "chapter_11_tbft_e_5",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "d88f6e52-c2e0-11e6-9ed2-06cb44004f79",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_6": {
				"uid": "chapter_11_tbft_e_6",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnHeroCommand7_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_7": {
				"uid": "chapter_11_tbft_e_7",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 1,
				"counters": {},
				"goals": 3,
				"lastBattleId": "24b12256-fedb-11e6-9191-06dc8c004fbd",
				"lootRemaining": {
					"credits": 2849,
					"materials": 7994,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_8": {
				"uid": "chapter_11_tbft_e_8",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "23e50f05-004f-11e7-8bc5-060a32004f8c",
				"lootRemaining": {
					"credits": 5140,
					"materials": 5849,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_9": {
				"uid": "chapter_11_tbft_e_9",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Active",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": "03070ae3-038b-11e7-b963-06a77e004fbb",
				"lootRemaining": {
					"credits": 10671,
					"materials": 10830,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			}
		},
		"tournaments": {
			"conflict_forestOps_tat_01": {
				"uid": "conflict_forestOps_tat_01",
				"rating": 3751,
				"collected": true,
				"percentile": 72,
				"tier": "tournament_tier_4",
				"redeemedRewards": [
					"lc_conf_crystal_tier4",
					"lc_conf_crystal_tier4"
				],
				"attacksWon": 19,
				"attacksLost": 6,
				"defensesWon": 12,
				"defensesLost": 13,
				"donatedTroops": 260
			}
		},
		"isFueInProgress": false,
		"DamagedBuildings": {
			"bld_26": 100,
			"bld_218": 100,
			"bld_141": 100,
			"bld_323": 100,
			"bld_82": 100,
			"bld_74": 100,
			"bld_73": 100,
			"bld_480": 100,
			"bld_445": 100,
			"bld_328": 100,
			"bld_142": 100,
			"bld_120": 100,
			"bld_212": 100,
			"bld_315": 100,
			"bld_322": 100,
			"bld_77": 100,
			"bld_203": 100,
			"bld_83": 100,
			"bld_309": 100,
			"bld_64": 100,
			"bld_313": 100,
			"bld_314": 100,
			"bld_319": 100,
			"bld_122": 100,
			"bld_310": 100,
			"bld_321": 100,
			"bld_24": 100,
			"bld_215": 100,
			"bld_53": 100,
			"bld_446": 100,
			"bld_17": 100,
			"bld_65": 100,
			"bld_10": 100,
			"bld_121": 100,
			"bld_23": 100,
			"bld_90": 100,
			"bld_116": 100,
			"bld_217": 100,
			"bld_16": 100,
			"bld_54": 100,
			"bld_156": 100,
			"bld_333": 100,
			"bld_123": 100,
			"bld_117": 100,
			"bld_88": 100,
			"bld_214": 100,
			"bld_311": 100,
			"bld_111": 100,
			"bld_159": 100,
			"bld_143": 100,
			"bld_76": 100,
			"bld_56": 100,
			"bld_63": 100,
			"bld_155": 100,
			"bld_106": 100,
			"bld_89": 100,
			"bld_72": 100,
			"bld_216": 100,
			"bld_22": 100,
			"bld_25": 100,
			"bld_211": 100,
			"bld_84": 100,
			"bld_75": 100,
			"bld_158": 100,
			"bld_113": 100,
			"bld_229": 100,
			"bld_101": 100,
			"bld_147": 100,
			"bld_9": 100,
			"bld_213": 100,
			"bld_157": 100,
			"bld_2": 100,
			"bld_68": 100,
			"bld_1": 100,
			"bld_105": 100,
			"bld_55": 100,
			"bld_52": 100,
			"bld_148": 14,
			"bld_91": 0,
			"bld_202": 0,
			"bld_201": 0,
			"bld_19": 67,
			"bld_18": 44,
			"bld_13": 19,
			"bld_71": 0,
			"bld_107": 0,
			"bld_104": 14,
			"bld_108": 14,
			"bld_69": 14,
			"bld_102": 0,
			"bld_61": 14,
			"bld_67": 53,
			"bld_66": 92,
			"bld_80": 0,
			"bld_114": 0,
			"bld_79": 0,
			"bld_78": 0,
			"bld_60": 0,
			"bld_210": 54,
			"bld_144": 0,
			"bld_115": 0,
			"bld_312": 100,
			"bld_94": 0,
			"bld_208": 0,
			"bld_207": 0,
			"bld_152": 0,
			"bld_103": 0,
			"bld_5": 0,
			"bld_3": 0,
			"bld_7": 0,
			"bld_12": 0,
			"bld_11": 0,
			"bld_14": 60,
			"bld_58": 53,
			"bld_151": 23,
			"bld_6": 62,
			"bld_57": 34,
			"bld_15": 49,
			"bld_320": 64,
			"bld_316": 27,
			"bld_146": 44,
			"bld_145": 0,
			"bld_20": 0,
			"bld_206": 0,
			"bld_204": 0,
			"bld_205": 0,
			"bld_150": 0,
			"bld_154": 58,
			"bld_81": 88,
			"bld_153": 0,
			"bld_318": 58,
			"bld_200": 0,
			"bld_317": 88,
			"bld_92": 0,
			"bld_109": 0,
			"bld_70": 0,
			"bld_8": 0,
			"bld_93": 0,
			"bld_209": 29,
			"bld_149": 0,
			"bld_21": 0,
			"bld_453": 0,
			"bld_455": 7,
			"bld_456": 8,
			"bld_449": 0,
			"bld_447": 0,
			"bld_4": 14,
			"bld_62": 0,
			"bld_110": 0,
			"bld_450": 10,
			"bld_59": 0,
			"bld_451": 0,
			"bld_452": 0,
			"bld_448": 0,
			"bld_454": 0
		},
		"deviceInfo": {},
		"timeZoneOffset": 2,
		"contracts": [
			{
				"uid": "troopEmpireSpeeder7",
				"endTime": 1490380100,
				"contractType": "Troop",
				"buildingId": "bld_155",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder7",
				"endTime": 1490380168,
				"contractType": "Troop",
				"buildingId": "bld_63",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder7",
				"endTime": 1490380181,
				"contractType": "Troop",
				"buildingId": "bld_155",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder7",
				"endTime": 1490380249,
				"contractType": "Troop",
				"buildingId": "bld_63",
				"perkIds": []
			},
			{
				"uid": "troopHeroCrimsonGuard7",
				"endTime": 1490380422,
				"contractType": "Hero",
				"buildingId": "bld_113",
				"perkIds": []
			},
			{
				"uid": "specialAttackAtmosMig2",
				"endTime": 1490380619,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "troopHeroATMP7",
				"endTime": 1490380692,
				"contractType": "Hero",
				"buildingId": "bld_113",
				"perkIds": []
			},
			{
				"uid": "specialAttackAtmosMig2",
				"endTime": 1490381339,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "specialAttackAtmosMig2",
				"endTime": 1490382059,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "specialAttackAtmosMig2",
				"endTime": 1490382779,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "specialAttackAtmosMig2",
				"endTime": 1490383499,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "specialAttackTieBomber6",
				"endTime": 1490384219,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "specialAttackTieBomber6",
				"endTime": 1490384939,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "empireMaterialsGenerator7",
				"endTime": 1490391360,
				"contractType": "Upgrade",
				"buildingId": "bld_121",
				"perkIds": []
			},
			{
				"uid": "troopDark7",
				"endTime": 1490522849,
				"contractType": "Research",
				"buildingId": "bld_82",
				"perkIds": []
			}
		],
		"frozenBuildings": [
			"bld_155",
			"bld_63"
		],
		"isConnectedAccount": true,
		"pvpTargetServedTime": 1490383621,
		"intros": [],
		"lastMission": "chapter_11_tbft_e_9",
		"isRateIncentivized": false,
		"lastPaymentTime": null,
		"lastWarParticipationTime": 1490152867,
		"identitySwitchTimes": {},
		"openOffer": null,
		"unlockedPlanets": [
			"planet1",
			"planet3",
			"planet23",
			"planet6",
			"planet21"
		],
		"relocationStarCount": 11,
		"holonetRewards": [
			"reward_kubaz4_e_ltr",
			"reward_undead_sample_e_ltr2",
			"reward_securityDroid_e_ltr",
			"reward_hovertank_e_ltr",
			"reward_atmosMig_e_ltr",
			"reward_desBiome_e_ltr",
			"reward_forBiome_e_ltr"
		],
		"playerObjectives": {
			"planet1": {
				"groupId": "obj_tatooine_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_type_hero_easy_e",
						"hq": 8,
						"count": 0,
						"target": 2,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 8,
						"count": 0,
						"target": 34,
						"state": "active"
					},
					{
						"uid": "obj_destroy_tacticalcommand_hard_e",
						"hq": 8,
						"count": 0,
						"target": 2,
						"state": "active"
					}
				]
			},
			"planet8": {
				"groupId": "obj_forestOps_yavin_23",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_train_heroatat_easy_e",
						"hq": 8,
						"count": 0,
						"target": 2,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 8,
						"count": 0,
						"target": 34,
						"state": "active"
					},
					{
						"uid": "obj_forestOps_destroy_starport_hard_e",
						"hq": 8,
						"count": 0,
						"target": 6,
						"state": "active"
					}
				]
			},
			"planet23": {
				"groupId": "obj_tfa_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_tiedefender_easy_e",
						"hq": 8,
						"count": 0,
						"target": 4,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 8,
						"count": 0,
						"target": 34,
						"state": "active"
					},
					{
						"uid": "obj_deploy_type_hero_hard_e",
						"hq": 8,
						"count": 0,
						"target": 4,
						"state": "active"
					}
				]
			},
			"planet21": {
				"groupId": "obj_hoth_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_loot_contraband_easy",
						"hq": 8,
						"count": 0,
						"target": 1000,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 8,
						"count": 0,
						"target": 34,
						"state": "active"
					},
					{
						"uid": "obj_train_empiretwilekincinerator_hard_e",
						"hq": 8,
						"count": 0,
						"target": 13,
						"state": "active"
					}
				]
			},
			"planet3": {
				"groupId": "obj_dandoran_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_atmp_easy_e",
						"hq": 8,
						"count": 0,
						"target": 3,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 8,
						"count": 0,
						"target": 34,
						"state": "active"
					},
					{
						"uid": "obj_deploy_herocrimsonguard_hard_e",
						"hq": 8,
						"count": 0,
						"target": 3,
						"state": "active"
					}
				]
			},
			"planet6": {
				"groupId": "obj_erkit_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_sniper_easy_e",
						"hq": 8,
						"count": 0,
						"target": 6,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 8,
						"count": 34,
						"target": 34,
						"state": "complete"
					},
					{
						"uid": "obj_destroy_contrabandgenerator_hard_e",
						"hq": 8,
						"count": 0,
						"target": 4,
						"state": "active"
					}
				]
			}
		},
		"lastObjectiveCheckTime": 1490379594,
		"raids": {
			"planet1": {
				"planetId": "planet1",
				"raidId": "raid_Tatooine1",
				"raidPoolId": "raidpool_desBiome_hq8_e",
				"raidMissionId": "raid_desBiome_e_hq8_1",
				"retried": null,
				"startTime": 1489640400,
				"endTime": null,
				"lastRaidStars": 3,
				"lastRaidId": "raid_Tatooine2",
				"lastRaidPoolId": "raidpool_tat_hq7_e",
				"lastRaidMissionId": "raid_tat_e_hq7_1",
				"nextRaidStartTime": 1489683600
			},
			"planet3": {
				"planetId": "planet3",
				"raidId": "raid_Dandoran1",
				"raidPoolId": "raidpool_gen_hq7_e",
				"raidMissionId": "raid_gen_e_hq7_1",
				"retried": false,
				"startTime": 1488085200,
				"endTime": null,
				"lastRaidStars": 2,
				"lastRaidId": "raid_Dandoran2",
				"lastRaidPoolId": "raidpool_gen_hq7_e",
				"lastRaidMissionId": "raid_gen_e_hq7_3",
				"nextRaidStartTime": 1488128400
			},
			"planet23": {
				"planetId": "planet23",
				"raidId": "raid_Takodana1",
				"raidPoolId": "raidpool_gen_hq7_e",
				"raidMissionId": "raid_gen_e_hq7_3",
				"retried": null,
				"startTime": 1484715600,
				"endTime": null,
				"lastRaidStars": 1,
				"lastRaidId": "raid_Takodana1",
				"lastRaidPoolId": "raidpool_gen_hq7_e",
				"lastRaidMissionId": "raid_gen_e_hq7_1",
				"nextRaidStartTime": 1484758800
			},
			"planet6": {
				"planetId": "planet6",
				"raidId": "raid_Erkit1",
				"raidPoolId": "raidpool_desBiome_hq8_e",
				"raidMissionId": "raid_desBiome_e_hq8_1",
				"retried": false,
				"startTime": 1490418000,
				"endTime": null,
				"lastRaidStars": 2,
				"lastRaidId": "raid_Erkit2",
				"lastRaidPoolId": "raidpool_desBiome_hq8_e",
				"lastRaidMissionId": "raid_desBiome_e_hq8_3",
				"nextRaidStartTime": 1490461200
			}
		},
		"perksInfo": {
			"perks": {
				"activatedPerks": [
					{
						"perkId": "perk_DntAmt_DntT5",
						"startTime": 1490104426,
						"endTime": 1490147626
					},
					{
						"perkId": "perk_GCrd_GCon4",
						"startTime": 1490116211,
						"endTime": 1490159411
					},
					{
						"perkId": "perk_CBar_CFac6",
						"startTime": 1490167785,
						"endTime": 1490210985
					}
				],
				"cooldowns": {
					"DntAmt_DntT": 1490205226,
					"GCrd_GCon": 1490217011,
					"CBar_CFac": 1490268585
				},
				"hasActivatedFirstPerk": true
			}
		},
		"armoryInfo": {
			"firstCratePurchased": true
		},
		"activeArmory": {
			"equipment": [
				"eqpEmpireRapidFireTurretDamage6",
				"eqpEmpireRapidFireTurretHealth6",
				"eqpEmpireMortarTurretDamage6",
				"eqpEmpireWallHealth7",
				"eqpEmpireHQHealth7",
				"eqpEmpireCreditGeneratorHealth7"
			],
			"capacity": 44
		},
		"shards": {
			"eqpEmpireHQHealth": 490,
			"eqpEmpirePentagonTrooper": 27,
			"eqpEmpireWallHealth": 961,
			"eqpEmpireRapidFireTurretDamage": 34,
			"eqpEmpireMortarTurretDamage": 36,
			"eqpEmpireRapidFireTurretHealth": 74,
			"eqpEmpireArcticATMP": 3,
			"eqpEmpireMortarTurretHealth": 85,
			"eqpEmpirePentagonHeavyTrooper": 16,
			"eqpEmpireHeavySnowtrooper": 19,
			"eqpEmpireSnowtrooper": 5,
			"shrd_specialAttackTieAdvanced": 30,
			"eqpEmpireCargoGreatDane": 4,
			"shrd_troopShock": 23,
			"eqpEmpireMaterialsGeneratorHealth": 450,
			"eqpEmpireContrabandGeneratorHealth": 482,
			"eqpEmpireBurstTurretDamage": 36,
			"eqpEmpireCreditGeneratorHealth": 80,
			"shrd_troopSecurityDroid": 13,
			"shrd_specialAttackAtmosMig": 13,
			"eqpEmpireArcticMHC": 8,
			"eqpEmpireBurstTurretHealth": 24,
			"eqpEmpireArcticINT4": 8,
			"eqpEmpireHovertank": 7,
			"eqpEmpireSandtrooper": 14,
			"shrd_troopEmpireJohhar": 2,
			"eqpEmpireHeavySandtrooper": 10
		},
		"troopDonationProgress": {
			"donationCount": 7,
			"lastTrackedDonationTime": 1490379634,
			"repDonationCooldownEndTime": 1490425200
		},
		"purchasedCrates": []
	},
	"scalars": {
		"attacksLost": 335,
		"attacksWon": 1410,
		"defensesLost": 432,
		"defensesWon": 154,
		"attacksStarted": 1748,
		"attacksCompleted": 1745,
		"attackRating": 5883,
		"defenseRating": -141,
		"xp": 0,
		"NF1219": 1
	},
	"name": "2tee2"
};

/***/ }),
/* 105 */
/***/ (function(module, exports) {

module.exports = {
	"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
	"playerModel": {
		"guildInfo": {
			"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
			"guildName": "fcuk",
			"icon": "SquadSymbols_11",
			"joinDate": 1484179531,
			"playerHasOutstandingJoinRequest": false
		},
		"upgrades": {
			"troop": {
				"Storm": 5,
				"ATST": 4,
				"Dark": 5,
				"EmpireSpeeder": 4,
				"Scout": 4,
				"2MTank": 4,
				"HeroATST": 5,
				"HeroATMP": 5,
				"Dewback": 4,
				"ATMP": 4,
				"HeroCrimsonGuard": 4
			},
			"specialAttack": {
				"TieFighter": 3
			},
			"building": {},
			"equipment": {}
		},
		"prizes": {
			"troop": {
				"SecurityDroid": 28,
				"Shock": 23,
				"EmpireHovertankSample": 1,
				"Technician": 10,
				"ATMP": 4,
				"ATAT": 3,
				"EmpireSpeeder": 10,
				"Scout": 11,
				"HeroATAT": 3,
				"2MTank": 4,
				"HeroATST": 5,
				"ProbeDroid": 5,
				"KubazInvader": 3,
				"HeavyStorm": 5,
				"EmpireTognath": 3,
				"HeroATMP": 1
			},
			"specialAttack": {
				"AtmosMig": 1,
				"TieAdvanced": 1
			},
			"resources": {},
			"crates": {
				"available": {},
				"inProgress": {},
				"next": 119,
				"nextDailyCrateTime": 1490094000,
				"nextHolonetTime": 1488124460
			}
		},
		"donatedTroops": {},
		"buildingsUnderConstruction": [
			"bld_138",
			"bld_139",
			"bld_24",
			"bld_25"
		],
		"map": {
			"next": 170,
			"planet": "planet1",
			"buildings": [
				{
					"key": "bld_1",
					"x": -2,
					"z": -2,
					"uid": "empireHQ5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_25",
					"x": 16,
					"z": 16,
					"uid": "empireStarport4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_59",
					"x": 16,
					"z": 10,
					"uid": "empireStarport4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_26",
					"x": 20,
					"z": -21,
					"uid": "empireDroidHut1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_118",
					"x": -21,
					"z": 19,
					"uid": "empireScoutTower1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_52",
					"x": 2,
					"z": -7,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_103",
					"x": 0,
					"z": -7,
					"uid": "empireRocketTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_76",
					"x": -2,
					"z": -7,
					"uid": "empireMortar4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_104",
					"x": 0,
					"z": 6,
					"uid": "empireRocketTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_75",
					"x": 2,
					"z": 6,
					"uid": "empireMortar4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_54",
					"x": 0,
					"z": -5,
					"uid": "empireMaterialsStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_89",
					"x": -3,
					"z": -5,
					"uid": "empireMaterialsStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_77",
					"x": 1,
					"z": 3,
					"uid": "empireCreditStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_23",
					"x": -2,
					"z": 3,
					"uid": "empireCreditStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_117",
					"x": -5,
					"z": -2,
					"uid": "empireShieldGenerator4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_98",
					"x": 4,
					"z": -1,
					"uid": "empireShieldGenerator4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_142",
					"x": -5,
					"z": 2,
					"uid": "empireBurstTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_73",
					"x": -5,
					"z": -4,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_22",
					"x": 4,
					"z": 3,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_72",
					"x": -2,
					"z": 6,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_143",
					"x": 4,
					"z": -3,
					"uid": "empireBurstTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_115",
					"x": -7,
					"z": -6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_17",
					"x": -7,
					"z": -1,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_16",
					"x": -7,
					"z": 0,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_15",
					"x": -7,
					"z": 1,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_14",
					"x": -7,
					"z": 2,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_69",
					"x": -7,
					"z": 4,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_114",
					"x": -7,
					"z": -5,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_19",
					"x": -7,
					"z": -3,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_18",
					"x": -7,
					"z": -2,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_20",
					"x": -7,
					"z": -4,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_13",
					"x": -7,
					"z": 3,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_67",
					"x": -7,
					"z": 7,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_11",
					"x": -7,
					"z": 6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_66",
					"x": -7,
					"z": -7,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_21",
					"x": -7,
					"z": 5,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_82",
					"x": 3,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_140",
					"x": 6,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_157",
					"x": -7,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_156",
					"x": -6,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_155",
					"x": -5,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_64",
					"x": 1,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_86",
					"x": 2,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_2",
					"x": 5,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_62",
					"x": -1,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_84",
					"x": 0,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_61",
					"x": -3,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_83",
					"x": -4,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_79",
					"x": 4,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_65",
					"x": -2,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_160",
					"x": -7,
					"z": -8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_9",
					"x": 6,
					"z": -2,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_8",
					"x": 6,
					"z": -1,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_7",
					"x": 6,
					"z": 0,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_70",
					"x": 6,
					"z": -7,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_6",
					"x": 6,
					"z": 4,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_5",
					"x": 6,
					"z": 3,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_106",
					"x": 6,
					"z": -5,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_113",
					"x": 6,
					"z": 5,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_112",
					"x": 6,
					"z": 6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_4",
					"x": 6,
					"z": 2,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_3",
					"x": 6,
					"z": 1,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_85",
					"x": 6,
					"z": -4,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_63",
					"x": 6,
					"z": -8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_12",
					"x": 6,
					"z": -6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_10",
					"x": 6,
					"z": -3,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_110",
					"x": 2,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_141",
					"x": 4,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_81",
					"x": -5,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_80",
					"x": -4,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_111",
					"x": 3,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_107",
					"x": -2,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_68",
					"x": 1,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_109",
					"x": 0,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_88",
					"x": -3,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_87",
					"x": -6,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_108",
					"x": -1,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_74",
					"x": -5,
					"z": 4,
					"uid": "empireOffenseLab5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_154",
					"x": 6,
					"z": 7,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_153",
					"x": 5,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_159",
					"x": -7,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_158",
					"x": 6,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_138",
					"x": 4,
					"z": -7,
					"uid": "empireTrapStrikeAOE3",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_139",
					"x": 4,
					"z": 6,
					"uid": "empireTrapStrikeAOE3",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_116",
					"x": -5,
					"z": -7,
					"uid": "empireTrapStrikeGeneric4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_91",
					"x": 4,
					"z": -6,
					"uid": "empireTrapStrikeGeneric4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_55",
					"x": 8,
					"z": -2,
					"uid": "empireSquadBuilding4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_137",
					"x": 8,
					"z": -6,
					"uid": "empireFleetCommand2",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_97",
					"x": -11,
					"z": 1,
					"uid": "empireTacticalCommand4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_136",
					"x": 8,
					"z": -10,
					"uid": "empireFactory4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_60",
					"x": -12,
					"z": -3,
					"uid": "empireFactory4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_105",
					"x": -10,
					"z": -6,
					"uid": "empireBarracks4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_56",
					"x": -10,
					"z": 5,
					"uid": "empireBarracks4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_71",
					"x": -10,
					"z": 8,
					"uid": "empireBarracks4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_53",
					"x": -10,
					"z": -9,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490330801,
					"currentStorage": 4200
				},
				{
					"key": "bld_102",
					"x": -10,
					"z": -12,
					"uid": "empireMaterialsGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 3000
				},
				{
					"key": "bld_58",
					"x": -7,
					"z": -12,
					"uid": "empireMaterialsGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 3000
				},
				{
					"key": "bld_90",
					"x": -4,
					"z": -12,
					"uid": "empireMaterialsGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 3000
				},
				{
					"key": "bld_144",
					"x": -1,
					"z": -12,
					"uid": "empireMaterialsGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 3000
				},
				{
					"key": "bld_78",
					"x": -7,
					"z": 10,
					"uid": "empireCreditGenerator5",
					"lastCollectTime": 1490330801,
					"currentStorage": 4200
				},
				{
					"key": "bld_57",
					"x": -4,
					"z": 10,
					"uid": "empireCreditGenerator5",
					"lastCollectTime": 1490330801,
					"currentStorage": 4200
				},
				{
					"key": "bld_148",
					"x": -1,
					"z": 10,
					"uid": "empireCreditGenerator5",
					"lastCollectTime": 1490330801,
					"currentStorage": 4200
				},
				{
					"key": "bld_101",
					"x": 2,
					"z": 10,
					"uid": "empireCreditGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 3000
				},
				{
					"key": "bld_24",
					"x": 5,
					"z": 10,
					"uid": "empireCreditGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 0
				}
			]
		},
		"inventory": {
			"storage": {
				"credits": {
					"amount": 8999,
					"capacity": 300000,
					"scale": 1
				},
				"materials": {
					"amount": 25600,
					"capacity": 300000,
					"scale": 1
				},
				"contraband": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				},
				"reputation": {
					"amount": 1,
					"capacity": 14,
					"scale": 1
				},
				"crystals": {
					"amount": 203,
					"capacity": -1,
					"scale": 1
				},
				"droids": {
					"amount": 4,
					"capacity": 5,
					"scale": 1
				},
				"xp": {
					"amount": 876,
					"capacity": -1,
					"scale": 1
				},
				"troop": {
					"amount": 0,
					"capacity": 20,
					"scale": 1
				},
				"hero": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				},
				"champion": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				}
			},
			"capacity": -1,
			"subStorage": {
				"troop": {
					"storage": {
						"troop2MTank4": {
							"amount": 1,
							"capacity": -1,
							"scale": 10
						},
						"troopATMP4": {
							"amount": 1,
							"capacity": -1,
							"scale": 15
						},
						"troopStorm5": {
							"amount": 2,
							"capacity": -1,
							"scale": 1
						},
						"troopDark5": {
							"amount": 2,
							"capacity": -1,
							"scale": 4
						}
					},
					"capacity": 52,
					"subStorage": {}
				},
				"specialAttack": {
					"storage": {},
					"capacity": 12,
					"subStorage": {}
				},
				"hero": {
					"storage": {
						"troopHeroATST5": {
							"amount": 1,
							"capacity": 1,
							"scale": 1
						}
					},
					"capacity": 2,
					"subStorage": {}
				},
				"champion": {
					"storage": {},
					"capacity": 0,
					"subStorage": {}
				}
			}
		},
		"faction": "empire",
		"currentQuest": "",
		"protectedUntil": 1490388087,
		"protectionFrom": 1490330487,
		"protectionCooldownUntil": {},
		"battleLogs": [
			{
				"battleId": "a9814708-09e2-11e7-b7db-06a77e004fbb",
				"attacker": {
					"playerId": "8c35f267-f8ea-11e6-97ea-06033c004f77",
					"name": "madhare",
					"faction": "rebel",
					"guildId": "30fb535b-8dab-11e6-980e-069da4004f8b",
					"guildName": "TheKoopTroop",
					"attackRating": 858,
					"attackRatingDelta": 3,
					"defenseRating": 87,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -789,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489625623,
				"looted": {
					"materials": 24458,
					"credits": 16200
				},
				"earned": {
					"materials": 24458,
					"credits": 16200
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 21122,
					"materials": 25714
				},
				"troopsExpended": {
					"troopHeroChewbacca4": 1,
					"troopWookie4": 2,
					"troopMedic5": 2,
					"troopSoldier5": 9,
					"troopT2BTank4": 3,
					"specialAttackXWing3": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 71,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 12,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "00dc01f9-0a27-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "5cc20c7f-c66b-11e6-b9bb-06c66a004f76",
					"name": "GooeyB",
					"faction": "rebel",
					"guildId": "2c670484-e322-11e5-9b2c-061c98004f78",
					"guildName": "chewbaca2.0",
					"attackRating": 4039,
					"attackRatingDelta": 11,
					"defenseRating": -283,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -800,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489654939,
				"looted": {
					"credits": 20122,
					"materials": 23062
				},
				"earned": {
					"contraband": 0,
					"credits": 21122,
					"materials": 24062
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 21122,
					"materials": 24062
				},
				"troopsExpended": {
					"troopSoldier6": 6,
					"troopWookie6": 9,
					"troopMedic6": 1,
					"troopHeroHanSolo6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelSandSoldier1",
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelWallHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "cdd457bd-0aab-11e7-9fcf-06033c004f77",
				"attacker": {
					"playerId": "aef9e907-3ebe-11e5-b2bd-06a77e004fbb",
					"name": "Luis Skywalker",
					"faction": "rebel",
					"guildId": "e12b6fe5-29f7-11e6-b3c1-06dc8c004fbd",
					"guildName": "Harlan",
					"attackRating": 3991,
					"attackRatingDelta": 11,
					"defenseRating": -212,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -811,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489711961,
				"looted": {
					"materials": 21690,
					"credits": 19338
				},
				"earned": {
					"contraband": 0,
					"materials": 22690,
					"credits": 20338
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 20338,
					"materials": 22690
				},
				"troopsExpended": {
					"troopHeavyRebel5": 3,
					"troopJuggernaut4": 1,
					"troopHailfire5": 1,
					"troopWookie5": 3,
					"troopMedic4": 2,
					"troopVanguard1": 4,
					"troopPathfinder5": 6,
					"troopSoldier5": 9,
					"troopHeroLeia4": 1
				},
				"attackerGuildTroopsExpended": {
					"troopAAT14": 2,
					"troopSoldier5": 6
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 30,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelWallHealth7",
					"eqpRebelMortarTurretHealth4",
					"eqpRebelSandSoldier1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "e730fd81-0b31-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "655437c4-be5e-11e6-b7df-060a32004f8c",
					"name": "Jeghit St. Alem",
					"faction": "rebel",
					"guildId": "119b48ab-bcb1-11e4-98ad-06a77e004fbb",
					"guildName": "RogueEwokCarnage",
					"attackRating": 7704,
					"attackRatingDelta": 7,
					"defenseRating": -67,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -818,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489769602,
				"looted": {
					"materials": 20592,
					"credits": 7950
				},
				"earned": {
					"contraband": 0,
					"materials": 21592,
					"credits": 8950
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19710,
					"materials": 21592
				},
				"troopsExpended": {
					"troopJuggernaut3": 1,
					"troopHeroChewbacca5": 1,
					"troopMedic5": 1,
					"troopWookie4": 2,
					"troopSoldier4": 17,
					"specialAttackXWing3": 3
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 76,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 28,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "99106dac-0b96-11e7-9fcf-06033c004f77",
				"attacker": {
					"playerId": "acae85ea-be3d-11e6-8d5b-069da4004f8b",
					"name": "torty",
					"faction": "rebel",
					"guildId": "f193396f-9d50-11e5-999b-06cb44004f79",
					"guildName": "Christian.Jedi",
					"attackRating": 1651,
					"attackRatingDelta": 11,
					"defenseRating": -558,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -829,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489812838,
				"looted": {
					"credits": 18710,
					"materials": 19714
				},
				"earned": {
					"contraband": 0,
					"credits": 19710,
					"materials": 20714
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19710,
					"materials": 20714
				},
				"troopsExpended": {
					"specialAttackXWing5": 2,
					"troopHeroChewbacca5": 1,
					"troopWookie5": 1,
					"troopAAT15": 1,
					"troopJuggernaut5": 1,
					"troopSoldier5": 10
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 14,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelWallHealth3",
					"eqpRebelSandSoldier2",
					"eqpRebelHQHealth4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "9808553d-0c1c-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "1957efb4-519c-11e6-bd42-060a32004f8c",
					"name": "бармалей",
					"faction": "rebel",
					"guildId": "20cab83b-82fa-11e6-b187-063864004f75",
					"guildName": "RUSSIAN_REVIVAL",
					"attackRating": 9433,
					"attackRatingDelta": 11,
					"defenseRating": -1578,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -840,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489870386,
				"looted": {
					"materials": 19010,
					"credits": 18208
				},
				"earned": {
					"contraband": 0,
					"materials": 20010,
					"credits": 19208
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19208,
					"materials": 20010
				},
				"troopsExpended": {
					"troopHeroLeia8": 1,
					"troopMedic8": 1,
					"troopHeavyRebel8": 3,
					"troopVanguard2": 1,
					"troopSoldier8": 5
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelWallHealth8",
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelSandSoldier2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "b44fc05b-0ca2-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "d78282bd-c075-11e6-aa77-063864004f75",
					"name": "kan",
					"faction": "rebel",
					"guildId": "5abe1db0-9924-11e6-84d4-060a32004f8c",
					"guildName": "ForceTuSeras",
					"attackRating": 3988,
					"attackRatingDelta": 3,
					"defenseRating": -963,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -843,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489927956,
				"looted": {
					"credits": 21519,
					"materials": 16200
				},
				"earned": {
					"credits": 21519,
					"materials": 16200
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 24388,
					"materials": 25568
				},
				"troopsExpended": {
					"troopJuggernaut6": 1,
					"troopHeroChewbacca6": 1,
					"troopWookie6": 4,
					"troopMedic5": 1,
					"troopT2BTank5": 3,
					"troopSoldier6": 10,
					"troopHeavyRebel5": 2,
					"troopMarksman6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 1,
					"troopTechnician7": 1
				},
				"baseDamagePercent": 67,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth5",
					"eqpRebelSandSoldier2",
					"eqpRebelBurstTurretDamage2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "599cc8db-0cc4-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1769,
					"attackRatingDelta": 3,
					"defenseRating": -843,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "a3531b4b-d9a6-11e6-8b53-06e6ee004fbc",
					"name": "MocnySiepator",
					"faction": "rebel",
					"guildId": "56fe3dfc-65a1-11e4-b32e-06dc8c004fbd",
					"guildName": "Green",
					"attackRating": 492,
					"attackRatingDelta": 0,
					"defenseRating": -191,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489942437,
				"looted": {
					"materials": 21916,
					"credits": 27746
				},
				"earned": {
					"materials": 21916,
					"credits": 27746
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 34730,
					"materials": 22916
				},
				"troopsExpended": {
					"troopStorm5": 10,
					"troopHeroATST4": 1,
					"troopDark5": 8,
					"troop2MTank4": 1,
					"specialAttackTieFighter3": 3
				},
				"attackerGuildTroopsExpended": {
					"troopEmpireSpeeder7": 1
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 61,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "0cee658e-0cc5-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1756,
					"attackRatingDelta": -13,
					"defenseRating": -843,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "d6457554-c0f7-11e6-a25b-060a32004f8c",
					"name": "1kubula3",
					"faction": "rebel",
					"guildId": "16568e86-f6db-11e5-a546-06c66a004f76",
					"guildName": "USAknights",
					"attackRating": 758,
					"attackRatingDelta": 0,
					"defenseRating": -24,
					"defenseRatingDelta": 16,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489942658,
				"looted": {
					"materials": 7530
				},
				"earned": {
					"materials": 7530
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19428,
					"materials": 29190
				},
				"troopsExpended": {
					"troopStorm5": 7,
					"troopATMP4": 1,
					"troop2MTank4": 1,
					"troopHeroCrimsonGuard4": 1,
					"troopDark5": 5,
					"specialAttackTieFighter3": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopSoldier10": 2,
					"troopSoldier7": 2
				},
				"baseDamagePercent": 17,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "b25c8d37-0cc5-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1759,
					"attackRatingDelta": 3,
					"defenseRating": -843,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "61f59c9b-a30c-11e6-a225-069da4004f8b",
					"name": "malibucoke",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 768,
					"attackRatingDelta": 0,
					"defenseRating": -758,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489943020,
				"looted": {
					"materials": 18684,
					"credits": 21044
				},
				"earned": {
					"contraband": 0,
					"materials": 18864,
					"credits": 21224
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 22044,
					"materials": 19684
				},
				"troopsExpended": {
					"troopStorm5": 9,
					"troopDark5": 6,
					"troopDewback4": 3,
					"troop2MTank4": 1,
					"troopHeroATMP4": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 90,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "da34f172-0cc6-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "fce9115c-dd9f-11e6-8934-06cb44004f79",
					"name": "kilozulu",
					"faction": "rebel",
					"guildId": "04562294-06c0-11e6-8170-06a77e004fbb",
					"guildName": "HungarySquad",
					"attackRating": 3289,
					"attackRatingDelta": 7,
					"defenseRating": -93,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1759,
					"attackRatingDelta": 0,
					"defenseRating": -850,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489943527,
				"looted": {
					"credits": 8064,
					"materials": 1974
				},
				"earned": {
					"contraband": 0,
					"credits": 9064,
					"materials": 2974
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 9064,
					"materials": 2974
				},
				"troopsExpended": {
					"troopATAP5": 1,
					"troopHeroChewbacca5": 1,
					"troopWookie6": 3,
					"troopMedic6": 1,
					"troopAAT16": 2,
					"troopPathfinder6": 4,
					"troopHeavyRebel6": 2,
					"troopSoldier5": 2
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 94,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 25,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth3",
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelHQHealth4",
					"eqpRebelRapidFireTurretDamage1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "0e668034-0d2c-11e7-9fcf-06033c004f77",
				"attacker": {
					"playerId": "b73613db-583e-11e6-ab5a-069da4004f8b",
					"name": "Master Obi-wan",
					"faction": "rebel",
					"guildId": "296ed84b-e310-11e5-9a6b-06a77e004fbb",
					"guildName": "Wookie-Clan",
					"attackRating": 4125,
					"attackRatingDelta": 7,
					"defenseRating": -1285,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1759,
					"attackRatingDelta": 0,
					"defenseRating": -857,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489986987,
				"looted": {
					"materials": 17550,
					"credits": 13358
				},
				"earned": {
					"contraband": 0,
					"materials": 18550,
					"credits": 14358
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17516,
					"materials": 18550
				},
				"troopsExpended": {
					"troopHeroChewbacca7": 1,
					"troopMedic7": 4,
					"troopHeavyRebel7": 5,
					"troopSoldier6": 11
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopDewback4": 3,
					"troopDark5": 1,
					"troopStorm5": 3
				},
				"baseDamagePercent": 89,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelWallHealth7",
					"eqpRebelRapidFireTurretDamage3",
					"eqpRebelRapidFireTurretHealth3",
					"eqpRebelCreditGeneratorHealth6",
					"eqpRebelMaterialsGeneratorHealth7"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "98ecc401-0d8e-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1746,
					"attackRatingDelta": -13,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2ee0c5a1-e6aa-11e6-a0d9-061c98004f78",
					"name": "кемеровский",
					"faction": "rebel",
					"guildId": "cbed720e-d4d4-11e6-994c-06dc8c004fbd",
					"guildName": "ITA-%5bFF0000%5dWAR",
					"attackRating": 691,
					"attackRatingDelta": 0,
					"defenseRating": -50,
					"defenseRatingDelta": 16,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490029309,
				"looted": {
					"materials": 29050,
					"credits": 11318
				},
				"earned": {
					"materials": 29050,
					"credits": 11318
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 33318,
					"materials": 32570
				},
				"troopsExpended": {
					"troopStorm5": 5,
					"troopATST4": 1,
					"troopDark5": 3,
					"troopDewback4": 5,
					"troopHeroCrimsonGuard4": 1,
					"troop2MTank4": 1,
					"specialAttackTieFighter3": 3
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 47,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "7350d15d-0d8f-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1753,
					"attackRatingDelta": 7,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "501d57df-889a-11e6-932d-063864004f75",
					"name": "Khan",
					"faction": "rebel",
					"guildId": "41fe89f3-45cd-11e4-93fb-06e6ee004fbc",
					"guildName": "ouest",
					"attackRating": 708,
					"attackRatingDelta": 0,
					"defenseRating": -705,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490029680,
				"looted": {
					"contraband": 0,
					"materials": 28222,
					"credits": 39850
				},
				"earned": {
					"contraband": 0,
					"materials": 29222,
					"credits": 40850
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 49850,
					"materials": 42044
				},
				"troopsExpended": {
					"troopATST4": 1,
					"troopStorm5": 8,
					"troopDark5": 3,
					"troopDewback4": 4,
					"troop2MTank4": 1,
					"troopHeroATST5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 78,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [
					"eqpRebelHQHealth4",
					"eqpRebelSandSoldier1",
					"eqpRebelRapidFireTurretHealth2"
				],
				"planetId": "planet1"
			},
			{
				"battleId": "f9da7eee-0d8f-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1742,
					"attackRatingDelta": -11,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "31c5588f-da7e-11e6-994c-06dc8c004fbd",
					"name": "graywolf",
					"faction": "rebel",
					"guildId": "1bd73aa7-6379-11e4-be18-06e6ee004fbc",
					"guildName": "BavarianCommando",
					"attackRating": 1072,
					"attackRatingDelta": 0,
					"defenseRating": -125,
					"defenseRatingDelta": 13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490029832,
				"looted": {
					"materials": 86
				},
				"earned": {
					"materials": 86
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 13616,
					"materials": 54425
				},
				"troopsExpended": {
					"troopStorm5": 3,
					"troop2MTank4": 1,
					"troopDark5": 6,
					"troopHeroATMP5": 1,
					"troopATMP4": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 23,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 13,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [
					"eqpRebelHQHealth1"
				],
				"planetId": "planet1"
			},
			{
				"battleId": "d7d03e98-0d90-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1749,
					"attackRatingDelta": 7,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "f53f1721-d740-11e6-95c1-063864004f75",
					"name": "Barry",
					"faction": "rebel",
					"guildId": "46ded9fe-c50b-11e5-8c56-06dc8c004fbd",
					"guildName": "froggy_power",
					"attackRating": 778,
					"attackRatingDelta": 0,
					"defenseRating": -366,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490030269,
				"looted": {
					"credits": 26100,
					"materials": 48128
				},
				"earned": {
					"contraband": 0,
					"credits": 27100,
					"materials": 49128
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 27100,
					"materials": 49128
				},
				"troopsExpended": {
					"troopDark5": 5,
					"troopHeroCrimsonGuard4": 1,
					"troopATMP4": 1,
					"troopStorm5": 7,
					"troop2MTank4": 1,
					"specialAttackTieFighter3": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopSoldier5": 4
				},
				"baseDamagePercent": 73,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "8698d01a-0d91-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1756,
					"attackRatingDelta": 7,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "92d42567-bdf6-11e6-aa77-063864004f75",
					"name": "vampire",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 147,
					"attackRatingDelta": 0,
					"defenseRating": -146,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490030561,
				"looted": {
					"materials": 9935,
					"credits": 17979
				},
				"earned": {
					"contraband": 0,
					"materials": 10935,
					"credits": 18979
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 24358,
					"materials": 25070
				},
				"troopsExpended": {
					"troopStorm5": 7,
					"troopDark5": 5,
					"troop2MTank4": 1,
					"troopATMP4": 1,
					"troopHeroATST5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 74,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "514370f2-0d92-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1763,
					"attackRatingDelta": 7,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "6303f553-6641-11e6-befe-06a77e004fbb",
					"name": "thor64",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 726,
					"attackRatingDelta": 0,
					"defenseRating": -725,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490030902,
				"looted": {
					"contraband": 0,
					"materials": 6459,
					"credits": 10950
				},
				"earned": {
					"contraband": 0,
					"materials": 7459,
					"credits": 11950
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 11950,
					"materials": 7459
				},
				"troopsExpended": {
					"troopDark5": 5,
					"troop2MTank4": 1,
					"troopHeroATMP5": 1,
					"troopATMP4": 1,
					"troopStorm5": 7
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 99,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [
					"eqpRebelHQHealth1"
				],
				"planetId": "planet1"
			},
			{
				"battleId": "0af548f8-0d93-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1770,
					"attackRatingDelta": 7,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "aaa3afe0-a415-11e4-bbf3-06e6ee004fbc",
					"name": "captain gunner4",
					"faction": "rebel",
					"guildId": "ab7076dd-21cb-11e5-a742-06e6ee004fbc",
					"guildName": "EnglishRebels",
					"attackRating": 197,
					"attackRatingDelta": 0,
					"defenseRating": 224,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490031217,
				"looted": {
					"materials": 28988,
					"credits": 29478
				},
				"earned": {
					"contraband": 0,
					"materials": 29988,
					"credits": 30478
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 36478,
					"materials": 50988
				},
				"troopsExpended": {
					"troopHeroCrimsonGuard4": 1,
					"troopDark5": 5,
					"troopATMP4": 1,
					"troop2MTank4": 1,
					"troopStorm5": 7,
					"specialAttackTieFighter3": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 55,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "c3a4f290-0d93-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1773,
					"attackRatingDelta": 3,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "cd4cd6ea-c96a-11e6-81ff-069da4004f8b",
					"name": "Pug",
					"faction": "rebel",
					"guildId": "c3286883-bd95-11e5-99f7-06cb44004f79",
					"guildName": "MetalMozilla",
					"attackRating": 1074,
					"attackRatingDelta": 0,
					"defenseRating": -516,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490031524,
				"looted": {
					"materials": 16763,
					"credits": 15658
				},
				"earned": {
					"materials": 16763,
					"credits": 15658
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 18774,
					"materials": 18326
				},
				"troopsExpended": {
					"troopStorm5": 7,
					"troopDark5": 5,
					"troopATMP4": 1,
					"troop2MTank4": 1,
					"troopHeroATST5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 61,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "1ef32cba-0d99-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "3d258b7c-6f77-11e5-96d2-06e6ee004fbc",
					"name": "sawyer",
					"faction": "rebel",
					"guildId": "73314b36-695e-11e4-b32e-06dc8c004fbd",
					"guildName": "Craiggors",
					"attackRating": 7857,
					"attackRatingDelta": 7,
					"defenseRating": -3805,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1773,
					"attackRatingDelta": 0,
					"defenseRating": -864,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490033795,
				"looted": {
					"credits": 8673,
					"materials": 29128
				},
				"earned": {
					"contraband": 0,
					"credits": 9673,
					"materials": 30128
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 9673,
					"materials": 30128
				},
				"troopsExpended": {
					"troopSoldier8": 6,
					"troopMedic8": 3,
					"troopHeavyRebel7": 1,
					"troopVanguard7": 2,
					"troopAAT17": 1,
					"troopHailfire8": 1,
					"troopHeroChewbacca7": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 94,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelSandSoldier1",
					"eqpRebelWallHealth1",
					"eqpRebelHQHealth1",
					"eqpRebelCreditGeneratorHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "88a6f113-0dab-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1776,
					"attackRatingDelta": 3,
					"defenseRating": -864,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "948bb54a-f120-11e6-9524-06cb44004f79",
					"name": "safo",
					"faction": "rebel",
					"guildId": "51d27811-a581-11e5-99f7-06cb44004f79",
					"guildName": "ITACOMBATTENTI",
					"attackRating": 1238,
					"attackRatingDelta": 0,
					"defenseRating": -187,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490041703,
				"looted": {
					"materials": 9757,
					"credits": 2383
				},
				"earned": {
					"materials": 9757,
					"credits": 2383
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 25684,
					"materials": 37208
				},
				"troopsExpended": {
					"troopHeroCrimsonGuard4": 1,
					"troopDark5": 5,
					"troopATMP4": 1,
					"troop2MTank4": 1,
					"troopStorm5": 7,
					"specialAttackTieFighter3": 3
				},
				"attackerGuildTroopsExpended": {
					"troop2MTank4": 1,
					"troopDewback4": 1,
					"troopStorm5": 3
				},
				"defenderGuildTroopsExpended": {
					"troopSoldier7": 4,
					"troopSoldier5": 4,
					"troopSoldier6": 1
				},
				"baseDamagePercent": 59,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 13,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "3f4016df-0dac-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": -15,
					"defenseRating": -864,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "1fcf2acb-5206-11e5-afd8-06a77e004fbb",
					"name": "kakapeng",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 255,
					"attackRatingDelta": 0,
					"defenseRating": 345,
					"defenseRatingDelta": 12,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490042006,
				"looted": {
					"credits": 14453,
					"materials": 6048
				},
				"earned": {
					"credits": 14453,
					"materials": 6048
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 22010,
					"materials": 22168
				},
				"troopsExpended": {
					"troopDark5": 5,
					"troop2MTank4": 1,
					"troopHeroATMP5": 1,
					"troopATMP4": 1,
					"troopStorm5": 7,
					"specialAttackTieFighter3": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 46,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 6,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "42d359ec-0dad-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "54dc03c8-fde2-11e6-8bc5-060a32004f8c",
					"name": "Cricrirebelle",
					"faction": "rebel",
					"guildId": "3f16149e-4ea5-11e5-a39c-06a77e004fbb",
					"guildName": "totoro7228",
					"attackRating": 1421,
					"attackRatingDelta": 7,
					"defenseRating": -51,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -871,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490042487,
				"looted": {
					"materials": 21985,
					"credits": 7107
				},
				"earned": {
					"contraband": 0,
					"materials": 22985,
					"credits": 8107
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 8107,
					"materials": 22985
				},
				"troopsExpended": {
					"troopSoldier6": 26,
					"troopHeroLeia6": 1,
					"troopMedic4": 2
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 93,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 19,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth2",
					"eqpRebelContrabandGeneratorHealth2",
					"eqpRebelCreditGeneratorHealth2",
					"eqpRebelWallHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "5c1e01e9-0e12-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "c7829c5e-9914-11e6-b5d4-06033c004f77",
					"name": "carbin",
					"faction": "rebel",
					"guildId": "fa43e2cc-e586-11e6-9f6e-063864004f75",
					"guildName": "HappyTogether_kr",
					"attackRating": 7047,
					"attackRatingDelta": 11,
					"defenseRating": -331,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -882,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490085845,
				"looted": {
					"materials": 33564,
					"credits": 21094
				},
				"earned": {
					"contraband": 0,
					"materials": 34564,
					"credits": 22094
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 22094,
					"materials": 34564
				},
				"troopsExpended": {
					"troopHeavyRebel8": 4,
					"troopMedic7": 1,
					"troopSoldier8": 15,
					"troopMarksman6": 1,
					"troopHeroLeia6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMortarTurretDamage3",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelBurstTurretDamage3"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "5077ddf8-0e98-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "c6f044b6-eae6-11e4-9fd2-06e6ee004fbc",
					"name": "yolo",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 11518,
					"attackRatingDelta": 11,
					"defenseRating": -2743,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -893,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490143420,
				"looted": {
					"credits": 19996,
					"materials": 30092
				},
				"earned": {
					"contraband": 0,
					"credits": 20996,
					"materials": 31092
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 20996,
					"materials": 31092
				},
				"troopsExpended": {
					"troopHeavyRebel8": 1,
					"troopMedic8": 1,
					"troopJuggernaut9": 1,
					"troopSoldier9": 15
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMaterialsGeneratorHealth4",
					"eqpRebelWallHealth5",
					"eqpRebelSandSoldier2",
					"eqpRebelContrabandGeneratorHealth4",
					"eqpRebelCreditGeneratorHealth4",
					"eqpRebelHQHealth6"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "687590a1-0f1e-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "191e971e-e918-11e5-8ce3-06cb44004f79",
					"name": "KON",
					"faction": "rebel",
					"guildId": "a3b8eb5a-358b-11e6-8a59-06a77e004fbb",
					"guildName": "KON",
					"attackRating": 2734,
					"attackRatingDelta": 15,
					"defenseRating": -2217,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -908,
					"defenseRatingDelta": -15,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490201008,
				"looted": {
					"materials": 27312,
					"credits": 19116
				},
				"earned": {
					"contraband": 0,
					"materials": 28312,
					"credits": 20116
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 20116,
					"materials": 28312
				},
				"troopsExpended": {
					"troopMercenaryRebelGamorreanWarrior2": 3,
					"troopSoldier7": 24
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 15,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelWallHealth5"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "d9184905-0fa4-11e7-bb9b-06033c004f77",
				"attacker": {
					"playerId": "0c6fa072-dbe3-11e6-95c1-063864004f75",
					"name": "RAZORBACK13",
					"faction": "rebel",
					"guildId": "637aaef1-f278-11e5-a0f4-06a77e004fbb",
					"guildName": "Goose",
					"attackRating": 5259,
					"attackRatingDelta": 3,
					"defenseRating": -910,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -911,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490258746,
				"looted": {
					"credits": 15600,
					"materials": 20645
				},
				"earned": {
					"contraband": 0,
					"credits": 15780,
					"materials": 20825
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19414,
					"materials": 26090
				},
				"troopsExpended": {
					"troopSoldier5": 19,
					"troopJuggernaut5": 1,
					"troopAAT15": 2
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 67,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 28,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth4",
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelSandSoldier1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "a8f57591-0fe7-11e7-85e1-06dc8c004fbd",
				"attacker": {
					"playerId": "38b11d47-9d4e-11e6-a53e-06cb44004f79",
					"name": "zsadam",
					"faction": "rebel",
					"guildId": "0097ea57-cd93-11e4-adac-06a77e004fbb",
					"guildName": "JoinSuperForce",
					"attackRating": 1624,
					"attackRatingDelta": 7,
					"defenseRating": -543,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -918,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490287466,
				"looted": {
					"credits": 18414,
					"materials": 24202
				},
				"earned": {
					"contraband": 0,
					"credits": 19414,
					"materials": 25202
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19414,
					"materials": 25202
				},
				"troopsExpended": {
					"troopHeroChewbacca5": 1,
					"troopWookie5": 3,
					"troopMedic5": 1,
					"troopT2BTank5": 4,
					"troopSoldier6": 10,
					"troopRebelSpeeder4": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 89,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 16,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelSandSoldier2",
					"eqpRebelHQHealth4",
					"eqpRebelWallHealth4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "9461b731-104c-11e7-a8ec-069da4004f8b",
				"attacker": {
					"playerId": "c11967e6-b89e-11e6-8e5c-06cb44004f79",
					"name": "lex",
					"faction": "rebel",
					"guildId": "1bd73aa7-6379-11e4-be18-06e6ee004fbc",
					"guildName": "BavarianCommando",
					"attackRating": 3114,
					"attackRatingDelta": 11,
					"defenseRating": -204,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -929,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490330801,
				"looted": {
					"credits": 17850,
					"materials": 22602
				},
				"earned": {
					"contraband": 0,
					"credits": 18850,
					"materials": 23602
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 18850,
					"materials": 23602
				},
				"troopsExpended": {
					"troopJuggernaut7": 1,
					"troopHeroChewbacca6": 1,
					"troopMedic6": 3,
					"troopMarksman5": 1,
					"troopHeavyRebel7": 7,
					"specialAttackXWing6": 5,
					"specialAttackZ951": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage2",
					"eqpRebelHQHealth5",
					"eqpRebelMaterialsGeneratorHealth4",
					"eqpRebelSandSoldier2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			}
		],
		"campaigns": {
			"cmp_fue": {
				"uid": "cmp_fue",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"sw_hth_outposts": {
				"uid": "sw_hth_outposts",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_0_hb_e": {
				"uid": "cmp_0_hb_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_1_utts_e": {
				"uid": "cmp_1_utts_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_2_tsw_e": {
				"uid": "cmp_2_tsw_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_3_tjg_e": {
				"uid": "cmp_3_tjg_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_4_sotm_e": {
				"uid": "cmp_4_sotm_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_5_tih_e": {
				"uid": "cmp_5_tih_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_7_bs_e": {
				"uid": "cmp_7_bs_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_8_tat_e": {
				"uid": "cmp_8_tat_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_9_sas_e": {
				"uid": "cmp_9_sas_e",
				"timeZone": 0,
				"completed": true,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_10_bgh_e": {
				"uid": "cmp_10_bgh_e",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			}
		},
		"missions": {
			"fue_defendBaseMission_00": {
				"uid": "fue_defendBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c2cc3312-d859-11e6-b64c-06a77e004fbb",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHalfBuildings",
					"RetainHQ",
					"AvoidCompleteLoss"
				],
				"grindMissionRetries": 0
			},
			"fue_impIntroBaseMission_00": {
				"uid": "fue_impIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "fc05dbe0-d859-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"fue_rebIntroBaseMission_00": {
				"uid": "fue_rebIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "26eaff48-d85a-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 1058,
					"materials": 1000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"sw_hth_outpost_s_1": {
				"uid": "sw_hth_outpost_s_1",
				"campaignUid": "sw_hth_outposts",
				"status": "Default",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_1": {
				"uid": "camp_1_utts_e_1",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9a65fcad-d85a-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2": {
				"uid": "camp_1_utts_e_2",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "7e8ca9d7-d85b-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2a": {
				"uid": "camp_1_utts_e_2a",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "0d0dae67-d85c-11e6-8255-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_3": {
				"uid": "camp_1_utts_e_3",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_Wall_T1_25"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_4": {
				"uid": "camp_1_utts_e_4",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "c4c42b74-d85c-11e6-8255-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_5": {
				"uid": "camp_1_utts_e_5",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT2EmpStarport"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_6": {
				"uid": "camp_1_utts_e_6",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "b234f83f-d85e-11e6-a59f-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_7": {
				"uid": "camp_1_utts_e_7",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2EmpCreGen"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_9": {
				"uid": "camp_1_utts_e_9",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "22f4093a-d85f-11e6-a59f-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 518,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_10": {
				"uid": "camp_1_utts_e_10",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own4Turrets"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_1": {
				"uid": "camp_2_tsw_e_1",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "a6e49647-d85f-11e6-a59f-060a32004f8c",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_2": {
				"uid": "camp_2_tsw_e_2",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T1EmpFactory"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_3": {
				"uid": "camp_2_tsw_e_3",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "ec575d2a-d85f-11e6-a59f-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_4": {
				"uid": "camp_2_tsw_e_4",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpCredGen"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_5": {
				"uid": "camp_2_tsw_e_5",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "6100c8a9-d860-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_1": {
				"uid": "camp_3_tjg_e_1",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "e1d6f5d2-d860-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_2": {
				"uid": "camp_3_tjg_e_2",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpBarracks"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_3": {
				"uid": "camp_3_tjg_e_3",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "16a66658-d861-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 500,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_4": {
				"uid": "camp_3_tjg_e_4",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "79e7a436-d861-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_5": {
				"uid": "camp_3_tjg_e_5",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T2EmpMatStor"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_6": {
				"uid": "camp_3_tjg_e_6",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "c9ef01e1-d861-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_7": {
				"uid": "camp_3_tjg_e_7",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpRFTurrets"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_8": {
				"uid": "camp_3_tjg_e_8",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "242f68bc-d862-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_9": {
				"uid": "camp_3_tjg_e_9",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT3EmpHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_10": {
				"uid": "camp_3_tjg_e_10",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c8b50bde-d86a-11e6-8705-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"Kill_TuskenHero_t1_1",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_1": {
				"uid": "camp_4_sotm_e_1",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMortar_T1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_2": {
				"uid": "camp_4_sotm_e_2",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireBarracks_T3_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_3": {
				"uid": "camp_4_sotm_e_3",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "851abe40-d91d-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_4": {
				"uid": "camp_4_sotm_e_4",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5cf38cc2-d91e-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_5": {
				"uid": "camp_4_sotm_e_5",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "29928302-d91f-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_6": {
				"uid": "camp_4_sotm_e_6",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "94a5dbbd-d91f-11e6-8705-061c98004f78",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_7": {
				"uid": "camp_4_sotm_e_7",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_turret_t1_6"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_8": {
				"uid": "camp_4_sotm_e_8",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_wall_t1_40"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_9": {
				"uid": "camp_4_sotm_e_9",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_10": {
				"uid": "camp_4_sotm_e_10",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_starport_t2_2"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_11": {
				"uid": "camp_4_sotm_e_11",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1590116e-d921-11e6-8705-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_12": {
				"uid": "camp_4_sotm_e_12",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "a917e65a-d922-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_13": {
				"uid": "camp_4_sotm_e_13",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "f7ee173c-d922-11e6-b64c-06a77e004fbb",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_14": {
				"uid": "camp_4_sotm_e_14",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "b73f4b9f-d923-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 1000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_1": {
				"uid": "camp_5_tih_e_1",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMaterialsGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_2": {
				"uid": "camp_5_tih_e_2",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireOffenseLab_t1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_3": {
				"uid": "camp_5_tih_e_3",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "6cd4f7c7-da94-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_4": {
				"uid": "camp_5_tih_e_4",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_12_t3_walls"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_5": {
				"uid": "camp_5_tih_e_5",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5b01ce0d-db8f-11e6-ba7c-069da4004f8b",
				"lootRemaining": {
					"credits": 1000,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_6": {
				"uid": "camp_5_tih_e_6",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "bfa50d62-db8f-11e6-ba45-06033c004f77",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_7": {
				"uid": "camp_5_tih_e_7",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireCreditGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_8": {
				"uid": "camp_5_tih_e_8",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5d360201-db91-11e6-ba45-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_1": {
				"uid": "chapter_7_bs_e_1",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "66ef5e25-db92-11e6-ba45-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_2": {
				"uid": "chapter_7_bs_e_2",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "4f4c8873-db93-11e6-95c1-063864004f75",
				"lootRemaining": {
					"credits": 2100,
					"materials": 2100,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_3": {
				"uid": "chapter_7_bs_e_3",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "7751a1dd-db94-11e6-95c1-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_4": {
				"uid": "chapter_7_bs_e_4",
				"campaignUid": "cmp_7_bs_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireHQ_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_5": {
				"uid": "chapter_7_bs_e_5",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "05b5d473-dd0b-11e6-994c-06dc8c004fbd",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_6": {
				"uid": "chapter_7_bs_e_6",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_7": {
				"uid": "chapter_7_bs_e_7",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "889e8a16-dd12-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_8": {
				"uid": "chapter_7_bs_e_8",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "e8fc5790-dd12-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 2400,
					"materials": 2400,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"Kill_infantry_t1_5",
					"Destroy_rebelTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_9": {
				"uid": "chapter_7_bs_e_9",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f067bc8f-e649-11e6-8432-06c66a004f76",
				"lootRemaining": {
					"credits": 2600,
					"materials": 2600,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"Kill_infantry_t1_5",
					"Destroy_rebelTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_10": {
				"uid": "chapter_7_bs_e_10",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2e1e6704-dd2d-11e6-b769-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 1946,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_11": {
				"uid": "chapter_7_bs_e_11",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "6cb5404a-dd18-11e6-ba45-06033c004f77",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_12": {
				"uid": "chapter_7_bs_e_12",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireOffenseLab_t2_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_13": {
				"uid": "chapter_7_bs_e_13",
				"campaignUid": "cmp_7_bs_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireTacticalCommand_t2_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_14": {
				"uid": "chapter_7_bs_e_14",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9894682c-e64a-11e6-8432-06c66a004f76",
				"lootRemaining": {
					"credits": 2800,
					"materials": 3800,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"DestroyHQ",
					"Kill_infantry_t1_8"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_1": {
				"uid": "chapter_8_tat_e_1",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "27e4da42-ddd9-11e6-b64c-06a77e004fbb",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_2": {
				"uid": "chapter_8_tat_e_2",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2fd35259-e64c-11e6-9b37-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 1940,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_3": {
				"uid": "chapter_8_tat_e_3",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_starport_t4_2"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_4": {
				"uid": "chapter_8_tat_e_4",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f99fb9bc-e5d8-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_5": {
				"uid": "chapter_8_tat_e_5",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d6692e67-e5d9-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 8000,
					"materials": 8000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_6": {
				"uid": "chapter_8_tat_e_6",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "aea5ee4b-e5da-11e6-9f6e-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_7": {
				"uid": "chapter_8_tat_e_7",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_barracks_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_8": {
				"uid": "chapter_8_tat_e_8",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "8d93a1c1-e5db-11e6-9f6e-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 7000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_9": {
				"uid": "chapter_8_tat_e_9",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "55a9b63b-e5dc-11e6-9f6e-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_10": {
				"uid": "chapter_8_tat_e_10",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2361e516-e5dd-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_11": {
				"uid": "chapter_8_tat_e_11",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "06cc47a5-e5de-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_12": {
				"uid": "chapter_8_tat_e_12",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "75779405-e5de-11e6-96c8-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_13": {
				"uid": "chapter_8_tat_e_13",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "e085474f-e5de-11e6-96c8-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_1": {
				"uid": "chapter_9_sas_e_1",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireFactory_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_2": {
				"uid": "chapter_9_sas_e_2",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "6a3c8f30-e5df-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_3": {
				"uid": "chapter_9_sas_e_3",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_4": {
				"uid": "chapter_9_sas_e_4",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "9626aa13-e5e0-11e6-96c8-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_5": {
				"uid": "chapter_9_sas_e_5",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireBarracks_t4_3"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_6": {
				"uid": "chapter_9_sas_e_6",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "3bc7d12f-e64d-11e6-9b37-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_7": {
				"uid": "chapter_9_sas_e_7",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "e471fdcf-e695-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 531,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_8": {
				"uid": "chapter_9_sas_e_8",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "8da01400-e696-11e6-96c8-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_9": {
				"uid": "chapter_9_sas_e_9",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "85073473-e69b-11e6-a0d9-061c98004f78",
				"lootRemaining": {
					"credits": 8000,
					"materials": 8000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_10": {
				"uid": "chapter_9_sas_e_10",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_11": {
				"uid": "chapter_9_sas_e_11",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 1,
				"counters": {},
				"goals": 3,
				"lastBattleId": "0d2ee99a-e6a1-11e6-843f-060a32004f8c",
				"lootRemaining": {
					"credits": 1000,
					"materials": 1000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_12": {
				"uid": "chapter_9_sas_e_12",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "4b14e24b-0d94-11e7-9902-06cb44004f79",
				"lootRemaining": {
					"credits": 7000,
					"materials": 7000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Destroy_storyRebShieldGen1",
					"Kill_hero_OtoVans4"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_1": {
				"uid": "chapter_10_bgh_e_1",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnEmpireRocketTurret1_2"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_2": {
				"uid": "chapter_10_bgh_e_2",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "40872dd5-e6a2-11e6-843f-060a32004f8c",
				"lootRemaining": {
					"credits": 3722,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"kill_hero_t1_1",
					"DestroyAllBuildings",
					"kill_vehicle_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_3": {
				"uid": "chapter_10_bgh_e_3",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1415f68b-e6a3-11e6-843f-060a32004f8c",
				"lootRemaining": {
					"credits": 3544,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_4": {
				"uid": "chapter_10_bgh_e_4",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f0ba952e-0d94-11e7-9902-06cb44004f79",
				"lootRemaining": {
					"credits": 8000,
					"materials": 8000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_5": {
				"uid": "chapter_10_bgh_e_5",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnHQ5"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_6": {
				"uid": "chapter_10_bgh_e_6",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Default",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			}
		},
		"tournaments": {},
		"isFueInProgress": false,
		"DamagedBuildings": {
			"bld_97": 100,
			"bld_117": 100,
			"bld_71": 100,
			"bld_88": 100,
			"bld_56": 100,
			"bld_78": 100,
			"bld_72": 100,
			"bld_57": 100,
			"bld_87": 100,
			"bld_21": 100,
			"bld_69": 100,
			"bld_118": 100,
			"bld_104": 100,
			"bld_74": 100,
			"bld_98": 100,
			"bld_148": 100,
			"bld_142": 100,
			"bld_75": 100,
			"bld_23": 100,
			"bld_101": 100,
			"bld_77": 100,
			"bld_22": 100,
			"bld_24": 100,
			"bld_60": 100,
			"bld_1": 100,
			"bld_13": 100,
			"bld_143": 100,
			"bld_73": 100,
			"bld_14": 100,
			"bld_89": 100,
			"bld_52": 100,
			"bld_54": 100,
			"bld_105": 100,
			"bld_103": 100,
			"bld_15": 100,
			"bld_76": 100,
			"bld_16": 100,
			"bld_17": 100,
			"bld_114": 100,
			"bld_115": 100,
			"bld_9": 100,
			"bld_7": 100,
			"bld_53": 100,
			"bld_18": 100,
			"bld_19": 100,
			"bld_58": 100,
			"bld_61": 100,
			"bld_20": 100,
			"bld_55": 100,
			"bld_137": 100,
			"bld_102": 100,
			"bld_90": 100,
			"bld_65": 100,
			"bld_144": 100,
			"bld_136": 100,
			"bld_3": 100,
			"bld_59": 100,
			"bld_25": 100,
			"bld_26": 100,
			"bld_67": 81,
			"bld_11": 0,
			"bld_66": 15,
			"bld_82": 0,
			"bld_140": 0,
			"bld_157": 0,
			"bld_156": 32,
			"bld_155": 0,
			"bld_64": 0,
			"bld_86": 0,
			"bld_2": 0,
			"bld_62": 54,
			"bld_84": 28,
			"bld_83": 54,
			"bld_79": 0,
			"bld_160": 0,
			"bld_8": 0,
			"bld_70": 0,
			"bld_6": 0,
			"bld_5": 0,
			"bld_106": 9,
			"bld_113": 0,
			"bld_112": 0,
			"bld_4": 0,
			"bld_85": 0,
			"bld_63": 0,
			"bld_12": 0,
			"bld_10": 5,
			"bld_110": 0,
			"bld_141": 0,
			"bld_81": 75,
			"bld_80": 0,
			"bld_111": 0,
			"bld_107": 0,
			"bld_68": 0,
			"bld_109": 0,
			"bld_108": 0,
			"bld_154": 0,
			"bld_153": 0,
			"bld_159": 9,
			"bld_158": 0,
			"bld_138": 0,
			"bld_139": 0,
			"bld_116": 0,
			"bld_91": 0
		},
		"deviceInfo": {},
		"timeZoneOffset": -5,
		"contracts": [
			{
				"uid": "troopStorm5",
				"endTime": 1490042056,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042056,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042056,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042081,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042106,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042106,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042106,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042131,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042156,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042156,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042156,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042181,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troop2MTank4",
				"endTime": 1490042183,
				"contractType": "Troop",
				"buildingId": "bld_136",
				"perkIds": []
			},
			{
				"uid": "troopATMP4",
				"endTime": 1490042197,
				"contractType": "Troop",
				"buildingId": "bld_60",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042206,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042206,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042206,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042231,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042256,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042256,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042256,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopHeroCrimsonGuard4",
				"endTime": 1490042269,
				"contractType": "Hero",
				"buildingId": "bld_97",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042281,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042306,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042306,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042306,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042331,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042356,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042356,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042356,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042381,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042406,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troop2MTank4",
				"endTime": 1490042423,
				"contractType": "Troop",
				"buildingId": "bld_136",
				"perkIds": []
			},
			{
				"uid": "specialAttackTieFighter3",
				"endTime": 1490042423,
				"contractType": "SpecialAttack",
				"buildingId": "bld_137",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042431,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042456,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042481,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042506,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042531,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042556,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042581,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042606,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042631,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042656,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042681,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042706,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042731,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042756,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042781,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042806,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "specialAttackTieFighter3",
				"endTime": 1490043143,
				"contractType": "SpecialAttack",
				"buildingId": "bld_137",
				"perkIds": []
			},
			{
				"uid": "specialAttackTieFighter3",
				"endTime": 1490043863,
				"contractType": "SpecialAttack",
				"buildingId": "bld_137",
				"perkIds": []
			},
			{
				"uid": "empireTrapStrikeAOE4",
				"endTime": 1490073530,
				"contractType": "Upgrade",
				"buildingId": "bld_138",
				"perkIds": []
			},
			{
				"uid": "empireTrapStrikeAOE4",
				"endTime": 1490085238,
				"contractType": "Upgrade",
				"buildingId": "bld_139",
				"perkIds": []
			},
			{
				"uid": "empireCreditGenerator5",
				"endTime": 1490101417,
				"contractType": "Upgrade",
				"buildingId": "bld_24",
				"perkIds": []
			},
			{
				"uid": "troopHeroCrimsonGuard5",
				"endTime": 1490102941,
				"contractType": "Research",
				"buildingId": "bld_74",
				"perkIds": []
			},
			{
				"uid": "empireStarport5",
				"endTime": 1490115854,
				"contractType": "Upgrade",
				"buildingId": "bld_25",
				"perkIds": []
			}
		],
		"frozenBuildings": [],
		"isConnectedAccount": true,
		"pvpTargetServedTime": 1490330673,
		"intros": [],
		"lastMission": "chapter_10_bgh_e_6",
		"isRateIncentivized": false,
		"lastPaymentTime": 1485609857,
		"lastWarParticipationTime": 1487475869,
		"identitySwitchTimes": {},
		"openOffer": null,
		"unlockedPlanets": [],
		"relocationStarCount": -1,
		"holonetRewards": [
			"reward_securityDroid_e_ltr",
			"reward_desBiome_e_ltr",
			"reward_forBiome_e_ltr"
		],
		"playerObjectives": {
			"planet1": {
				"groupId": "obj_tatooine_series10_5",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_deploy_dewback_easy_e",
						"hq": 5,
						"count": 4,
						"target": 4,
						"state": "rewarded"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 5,
						"count": 14,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_destroy_materialsstorage_hard_e",
						"hq": 5,
						"count": 2,
						"target": 2,
						"state": "rewarded"
					}
				]
			},
			"planet8": {
				"groupId": "obj_forestOps_yavin_19",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_deploy_scout_easy_e",
						"hq": 5,
						"count": 0,
						"target": 12,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_forestOps_deploy_dark_hard_e",
						"hq": 5,
						"count": 0,
						"target": 7,
						"state": "active"
					}
				]
			},
			"planet23": {
				"groupId": "obj_tfa_series10_5",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_destroy_tacticalcommand_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_train_technician_hard_e",
						"hq": 5,
						"count": 0,
						"target": 4,
						"state": "active"
					}
				]
			},
			"planet21": {
				"groupId": "obj_hoth_series10_5",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_deploy_type_hero_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_deploy_atat_hard_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					}
				]
			},
			"planet3": {
				"groupId": "obj_dandoran_series10_5",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_deploy_empirespeeder_easy_e",
						"hq": 5,
						"count": 0,
						"target": 2,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_deploy_storm_hard_e",
						"hq": 5,
						"count": 0,
						"target": 28,
						"state": "active"
					}
				]
			},
			"planet6": {
				"groupId": "obj_erkit_series10_5",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_train_dewback_easy_e",
						"hq": 5,
						"count": 0,
						"target": 4,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_train_tiebomber_hard_e",
						"hq": 5,
						"count": 0,
						"target": 3,
						"state": "active"
					}
				]
			}
		},
		"lastObjectiveCheckTime": 1490041346,
		"raids": {
			"planet1": {
				"planetId": "planet1",
				"raidId": "raid_Tatooine2",
				"raidPoolId": "raidpool_tat_hq5_e",
				"raidMissionId": "raid_tat_e_hq5_1",
				"retried": null,
				"startTime": 1490054400,
				"endTime": null,
				"lastRaidStars": 1,
				"lastRaidId": "raid_Tatooine1",
				"lastRaidPoolId": "raidpool_desBiome_hq5_e",
				"lastRaidMissionId": "raid_desBiome_e_hq5_3",
				"nextRaidStartTime": 1490097600
			}
		},
		"perksInfo": {
			"perks": {
				"activatedPerks": [
					{
						"perkId": "perk_CCan_TDrd4",
						"startTime": 1485580647,
						"endTime": 1485623847
					},
					{
						"perkId": "perk_CBar_CCan4",
						"startTime": 1485580649,
						"endTime": 1485623849
					},
					{
						"perkId": "perk_CBar_CFac4",
						"startTime": 1485580653,
						"endTime": 1485623853
					},
					{
						"perkId": "perk_CFac_CCan3",
						"startTime": 1485580655,
						"endTime": 1485623855
					}
				],
				"cooldowns": {
					"CCan_TDrd": 1485681447,
					"CBar_CCan": 1485681449,
					"CBar_CFac": 1485681453,
					"CFac_CCan": 1485681455
				},
				"hasActivatedFirstPerk": true
			}
		},
		"armoryInfo": {
			"firstCratePurchased": false
		},
		"activeArmory": {
			"equipment": [],
			"capacity": null
		},
		"shards": {
			"shrd_troopEmpireJohhar": 6,
			"shrd_troopShock": 2,
			"shrd_specialAttackTieAdvanced": 2
		},
		"troopDonationProgress": {
			"donationCount": 10,
			"lastTrackedDonationTime": 1490041454,
			"repDonationCooldownEndTime": 1490079600
		}
	},
	"scalars": {
		"attacksLost": 20,
		"attacksWon": 259,
		"defensesLost": 151,
		"defensesWon": 21,
		"attacksStarted": 281,
		"attacksCompleted": 279,
		"attackRating": 1761,
		"defenseRating": -929,
		"xp": 0,
		"NF1219": 1
	},
	"name": "BkeII"
};

/***/ }),
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(5);

var focusNode = __webpack_require__(55);

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(21);
var ExecutionEnvironment = __webpack_require__(6);
var FallbackCompositionState = __webpack_require__(119);
var SyntheticCompositionEvent = __webpack_require__(160);
var SyntheticInputEvent = __webpack_require__(163);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(57);
var ExecutionEnvironment = __webpack_require__(6);
var ReactInstrumentation = __webpack_require__(8);

var camelizeStyleName = __webpack_require__(88);
var dangerousStyleValue = __webpack_require__(170);
var hyphenateStyleName = __webpack_require__(95);
var memoizeStringOnly = __webpack_require__(98);
var warning = __webpack_require__(2);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue, component);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName], component);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(20);
var EventPropagators = __webpack_require__(21);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);
var SyntheticEvent = __webpack_require__(11);

var getEventTarget = __webpack_require__(43);
var isEventSupported = __webpack_require__(44);
var isTextInputElement = __webpack_require__(74);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}
function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  // IE10+ fire input events to often, such when a placeholder
  // changes or when an input with a placeholder is focused.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
}

/**
 * (For IE <=11) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For IE <=11) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  if (activeElement.attachEvent) {
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.addEventListener('propertychange', handlePropertyChange, false);
  }
}

/**
 * (For IE <=11) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;

  if (activeElement.detachEvent) {
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
  }

  activeElement = null;
  activeElementInst = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For IE <=11) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetInstForInputEvent(topLevelType, targetInst) {
  if (topLevelType === 'topInput') {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return targetInst;
  }
}

function handleEventsForInputEventIE(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9-11, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventIE(topLevelType, targetInst) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementInst;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === 'topClick') {
    return targetInst;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }
  }

};

module.exports = ChangeEventPlugin;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMLazyTree = __webpack_require__(18);
var ExecutionEnvironment = __webpack_require__(6);

var createNodesFromMarkup = __webpack_require__(91);
var emptyFunction = __webpack_require__(7);
var invariant = __webpack_require__(1);

var Danger = {

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }

};

module.exports = Danger;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(21);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticMouseEvent = __webpack_require__(25);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }

};

module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(13);

var getTextContentAccessor = __webpack_require__(72);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(19);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {}
};

module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactReconciler = __webpack_require__(22);

var instantiateReactComponent = __webpack_require__(73);
var KeyEscapeUtils = __webpack_require__(34);
var shouldUpdateReactComponent = __webpack_require__(76);
var traverseAllChildren = __webpack_require__(77);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = __webpack_require__(9);
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
  ) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
  ) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }

};

module.exports = ReactChildReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(30);
var ReactDOMIDOperations = __webpack_require__(127);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

};

module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var React = __webpack_require__(24);
var ReactComponentEnvironment = __webpack_require__(37);
var ReactCurrentOwner = __webpack_require__(12);
var ReactErrorUtils = __webpack_require__(38);
var ReactInstanceMap = __webpack_require__(39);
var ReactInstrumentation = __webpack_require__(8);
var ReactNodeTypes = __webpack_require__(146);
var ReactReconciler = __webpack_require__(22);

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = __webpack_require__(169);
}

var emptyObject = __webpack_require__(17);
var invariant = __webpack_require__(1);
var shallowEqual = __webpack_require__(29);
var shouldUpdateReactComponent = __webpack_require__(76);
var warning = __webpack_require__(2);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

module.exports = ReactCompositeComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var AutoFocusUtils = __webpack_require__(112);
var CSSPropertyOperations = __webpack_require__(114);
var DOMLazyTree = __webpack_require__(18);
var DOMNamespaces = __webpack_require__(31);
var DOMProperty = __webpack_require__(19);
var DOMPropertyOperations = __webpack_require__(59);
var EventPluginHub = __webpack_require__(20);
var EventPluginRegistry = __webpack_require__(32);
var ReactBrowserEventEmitter = __webpack_require__(36);
var ReactDOMComponentFlags = __webpack_require__(60);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMInput = __webpack_require__(128);
var ReactDOMOption = __webpack_require__(129);
var ReactDOMSelect = __webpack_require__(61);
var ReactDOMTextarea = __webpack_require__(133);
var ReactInstrumentation = __webpack_require__(8);
var ReactMultiChild = __webpack_require__(145);
var ReactServerRenderingTransaction = __webpack_require__(67);

var emptyFunction = __webpack_require__(7);
var escapeTextContentForBrowser = __webpack_require__(27);
var invariant = __webpack_require__(1);
var isEventSupported = __webpack_require__(44);
var shallowEqual = __webpack_require__(29);
var validateDOMNesting = __webpack_require__(46);
var warning = __webpack_require__(2);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }

};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var validateDOMNesting = __webpack_require__(46);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(18);
var ReactDOMComponentTree = __webpack_require__(5);

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(30);
var ReactDOMComponentTree = __webpack_require__(5);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMPropertyOperations = __webpack_require__(59);
var LinkedValueUtils = __webpack_require__(35);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };

    if (process.env.NODE_ENV !== 'production') {
      inst._wrapperState.controlled = isControlled(props);
    }
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {

      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var React = __webpack_require__(24);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMSelect = __webpack_require__(61);

var warning = __webpack_require__(2);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }

};

module.exports = ReactDOMOption;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var getNodeForCharacterOffset = __webpack_require__(175);
var getTextContentAccessor = __webpack_require__(72);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDefaultInjection = __webpack_require__(136);
var ReactServerRendering = __webpack_require__(152);
var ReactVersion = __webpack_require__(154);

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMChildrenOperations = __webpack_require__(30);
var DOMLazyTree = __webpack_require__(18);
var ReactDOMComponentTree = __webpack_require__(5);

var escapeTextContentForBrowser = __webpack_require__(27);
var invariant = __webpack_require__(1);
var validateDOMNesting = __webpack_require__(46);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }

});

module.exports = ReactDOMTextComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(35);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactInvalidSetStateWarningHook = __webpack_require__(143);
var ReactHostOperationHistoryHook = __webpack_require__(141);
var ReactComponentTreeHook = __webpack_require__(9);
var ExecutionEnvironment = __webpack_require__(6);

var performanceNow = __webpack_require__(100);
var warning = __webpack_require__(2);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure =
// $FlowFixMe https://github.com/facebook/flow/issues/2345
typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  performance.clearMeasures(measurementName);
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = __webpack_require__(111);
var BeforeInputEventPlugin = __webpack_require__(113);
var ChangeEventPlugin = __webpack_require__(115);
var DefaultEventPluginOrder = __webpack_require__(117);
var EnterLeaveEventPlugin = __webpack_require__(118);
var HTMLDOMPropertyConfig = __webpack_require__(120);
var ReactComponentBrowserEnvironment = __webpack_require__(122);
var ReactDOMComponent = __webpack_require__(124);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMEmptyComponent = __webpack_require__(126);
var ReactDOMTreeTraversal = __webpack_require__(134);
var ReactDOMTextComponent = __webpack_require__(132);
var ReactDefaultBatchingStrategy = __webpack_require__(62);
var ReactEventListener = __webpack_require__(139);
var ReactInjection = __webpack_require__(142);
var ReactReconcileTransaction = __webpack_require__(149);
var SVGDOMPropertyConfig = __webpack_require__(155);
var SelectEventPlugin = __webpack_require__(156);
var SimpleEventPlugin = __webpack_require__(157);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(20);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventListener = __webpack_require__(54);
var ExecutionEnvironment = __webpack_require__(6);
var PooledClass = __webpack_require__(13);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var getEventTarget = __webpack_require__(43);
var getUnboundedScrollPosition = __webpack_require__(93);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(19);
var EventPluginHub = __webpack_require__(20);
var EventPluginUtils = __webpack_require__(33);
var ReactComponentEnvironment = __webpack_require__(37);
var ReactEmptyComponent = __webpack_require__(63);
var ReactBrowserEventEmitter = __webpack_require__(36);
var ReactHostComponent = __webpack_require__(64);
var ReactUpdates = __webpack_require__(10);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var warning = __webpack_require__(2);

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var adler32 = __webpack_require__(168);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactComponentEnvironment = __webpack_require__(37);
var ReactInstanceMap = __webpack_require__(39);
var ReactInstrumentation = __webpack_require__(8);

var ReactCurrentOwner = __webpack_require__(12);
var ReactReconciler = __webpack_require__(22);
var ReactChildReconciler = __webpack_require__(121);

var emptyFunction = __webpack_require__(7);
var flattenChildren = __webpack_require__(171);
var invariant = __webpack_require__(1);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }

  }

};

module.exports = ReactMultiChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(24);

var invariant = __webpack_require__(1);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(58);
var PooledClass = __webpack_require__(13);
var ReactBrowserEventEmitter = __webpack_require__(36);
var ReactInputSelection = __webpack_require__(65);
var ReactInstrumentation = __webpack_require__(8);
var Transaction = __webpack_require__(26);
var ReactUpdateQueue = __webpack_require__(68);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactOwner = __webpack_require__(147);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(24);
var ReactDOMContainerInfo = __webpack_require__(125);
var ReactDefaultBatchingStrategy = __webpack_require__(62);
var ReactInstrumentation = __webpack_require__(8);
var ReactMarkupChecksum = __webpack_require__(144);
var ReactReconciler = __webpack_require__(22);
var ReactServerBatchingStrategy = __webpack_require__(151);
var ReactServerRenderingTransaction = __webpack_require__(67);
var ReactUpdates = __webpack_require__(10);

var emptyObject = __webpack_require__(17);
var instantiateReactComponent = __webpack_require__(73);
var invariant = __webpack_require__(1);

var pendingTransactions = 0;

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToStringImpl(element, makeStaticMarkup) {
  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    transaction = ReactServerRenderingTransaction.getPooled(makeStaticMarkup);

    pendingTransactions++;

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, true);
      var markup = ReactReconciler.mountComponent(componentInstance, transaction, null, ReactDOMContainerInfo(), emptyObject, 0 /* parentDebugID */
      );
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onUnmountComponent(componentInstance._debugID);
      }
      if (!makeStaticMarkup) {
        markup = ReactMarkupChecksum.addChecksumToMarkup(markup);
      }
      return markup;
    }, null);
  } finally {
    pendingTransactions--;
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    if (!pendingTransactions) {
      ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
    }
  }
}

/**
 * Render a ReactElement to its initial HTML. This should only be used on the
 * server.
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring
 */
function renderToString(element) {
  !React.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : _prodInvariant('46') : void 0;
  return renderToStringImpl(element, false);
}

/**
 * Similar to renderToString, except this doesn't create extra DOM attributes
 * such as data-react-id that React uses internally.
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostaticmarkup
 */
function renderToStaticMarkup(element) {
  !React.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : _prodInvariant('47') : void 0;
  return renderToStringImpl(element, true);
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = __webpack_require__(68);

var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.4.2';

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(21);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInputSelection = __webpack_require__(65);
var SyntheticEvent = __webpack_require__(11);

var getActiveElement = __webpack_require__(56);
var isTextInputElement = __webpack_require__(74);
var shallowEqual = __webpack_require__(29);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var EventListener = __webpack_require__(54);
var EventPropagators = __webpack_require__(21);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticAnimationEvent = __webpack_require__(158);
var SyntheticClipboardEvent = __webpack_require__(159);
var SyntheticEvent = __webpack_require__(11);
var SyntheticFocusEvent = __webpack_require__(162);
var SyntheticKeyboardEvent = __webpack_require__(164);
var SyntheticMouseEvent = __webpack_require__(25);
var SyntheticDragEvent = __webpack_require__(161);
var SyntheticTouchEvent = __webpack_require__(165);
var SyntheticTransitionEvent = __webpack_require__(166);
var SyntheticUIEvent = __webpack_require__(23);
var SyntheticWheelEvent = __webpack_require__(167);

var emptyFunction = __webpack_require__(7);
var getEventCharCode = __webpack_require__(41);
var invariant = __webpack_require__(1);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }

};

module.exports = SimpleEventPlugin;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(25);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(23);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(23);

var getEventCharCode = __webpack_require__(41);
var getEventKey = __webpack_require__(172);
var getEventModifierState = __webpack_require__(42);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(23);

var getEventModifierState = __webpack_require__(42);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(25);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactPropTypeLocationNames = __webpack_require__(148);
var ReactPropTypesSecret = __webpack_require__(66);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(9);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(57);
var warning = __webpack_require__(2);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var KeyEscapeUtils = __webpack_require__(34);
var traverseAllChildren = __webpack_require__(77);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = __webpack_require__(9);
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var getEventCharCode = __webpack_require__(41);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var escapeTextContentForBrowser = __webpack_require__(27);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(131);


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(15);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var PooledClass = __webpack_require__(180);
var ReactElement = __webpack_require__(14);

var emptyFunction = __webpack_require__(7);
var traverseAllChildren = __webpack_require__(189);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(15),
    _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(47);
var ReactElement = __webpack_require__(14);
var ReactPropTypeLocationNames = __webpack_require__(49);
var ReactNoopUpdateQueue = __webpack_require__(48);

var emptyObject = __webpack_require__(17);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

/**
 * Policies that describe methods in `ReactClassInterface`.
 */


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or host components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: 'DEFINE_MANY',

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: 'DEFINE_MANY',

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: 'DEFINE_MANY',

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: 'DEFINE_MANY',

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: 'DEFINE_MANY',

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: 'DEFINE_MANY_MERGED',

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: 'DEFINE_MANY_MERGED',

  /**
   * @return {object}
   * @optional
   */
  getChildContext: 'DEFINE_MANY_MERGED',

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: 'DEFINE_ONCE',

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: 'DEFINE_MANY',

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: 'DEFINE_MANY',

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: 'DEFINE_MANY',

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: 'DEFINE_ONCE',

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: 'DEFINE_MANY',

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: 'OVERRIDE_BASE'

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, 'childContext');
    }
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, 'context');
    }
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, 'prop');
    }
    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but only in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }
  }
}

function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (isAlreadyDefined) {
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classes.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    if (process.env.NODE_ENV !== 'production') {
      var typeofSpec = typeof spec;
      var isMixinValid = typeofSpec === 'object' && spec !== null;

      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }

    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === 'DEFINE_MANY_MERGED') {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === 'DEFINE_MANY') {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

    var isInherited = name in Constructor;
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  }
};

var ReactClassComponent = function () {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(14);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(79);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(14);
var ReactPropTypeLocationNames = __webpack_require__(49);
var ReactPropTypesSecret = __webpack_require__(80);

var emptyFunction = __webpack_require__(7);
var getIteratorFn = __webpack_require__(51);
var warning = __webpack_require__(2);

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),
  symbol: createPrimitiveTypeChecker('symbol'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
/*eslint-disable no-self-compare*/
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return x !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}
/*eslint-enable no-self-compare*/

/**
 * We use an Error-like object for backward compatibility as people may call
 * PropTypes directly and inspect their output. However we don't use real
 * Errors anymore. We don't inspect their stack anyway, and creating them
 * is prohibitively expensive if they are created too often, such as what
 * happens in oneOfType() for any type before the one that matched.
 */
function PropTypeError(message) {
  this.message = message;
  this.stack = '';
}
// Make `instanceof Error` still work for returned errors.
PropTypeError.prototype = Error.prototype;

function createChainableTypeChecker(validate) {
  if (process.env.NODE_ENV !== 'production') {
    var manualPropTypeCallCache = {};
  }
  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (process.env.NODE_ENV !== 'production') {
      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
        var cacheKey = componentName + ':' + propName;
        if (!manualPropTypeCallCache[cacheKey]) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
          manualPropTypeCallCache[cacheKey] = true;
        }
      }
    }
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        if (props[propName] === null) {
          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
        }
        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName, secret) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
    }
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!ReactElement.isValidElement(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (is(propValue, expectedValues[i])) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
    }
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === 'symbol') {
    return true;
  }

  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
  if (propValue['@@toStringTag'] === 'Symbol') {
    return true;
  }

  // Fallback for non-spec compliant Symbols which are polyfilled.
  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
    return true;
  }

  return false;
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  if (isSymbol(propType, propValue)) {
    return 'symbol';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return ANONYMOUS;
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(47);
var ReactNoopUpdateQueue = __webpack_require__(48);

var emptyObject = __webpack_require__(17);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = ReactPureComponent;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.4.2';

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(15);

var ReactPropTypeLocationNames = __webpack_require__(49);
var ReactPropTypesSecret = __webpack_require__(80);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(9);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(15);

var ReactElement = __webpack_require__(14);

var invariant = __webpack_require__(1);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(15);

var ReactCurrentOwner = __webpack_require__(12);
var REACT_ELEMENT_TYPE = __webpack_require__(78);

var getIteratorFn = __webpack_require__(51);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(179);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 190 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 191 */,
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./779a335e-7216-11e6-8b58-06033c004f77@1490386192.json": 104
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 192;

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZTFiYzJiZDZjMTdjODYzYWUwMjgiLCJ3ZWJwYWNrOi8vLy4vfi9wcm9jZXNzL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi93YXJuaW5nLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9yZWFjdFByb2RJbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTUNvbXBvbmVudFRyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW5zdHJ1bWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2suanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0VXBkYXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1Bvb2xlZENsYXNzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9yZWFjdFByb2RJbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9ET01MYXp5VHJlZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvRE9NUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0V2ZW50UGx1Z2luSHViLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9FdmVudFByb3BhZ2F0b3JzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdFJlY29uY2lsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1VJRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY01vdXNlRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1RyYW5zYWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiV2luSlNcIiIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL3NoYWxsb3dFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9ET01OYW1lc3BhY2VzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9FdmVudFBsdWdpblJlZ2lzdHJ5LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9FdmVudFBsdWdpblV0aWxzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9LZXlFc2NhcGVVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvTGlua2VkVmFsdWVVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdEVycm9yVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW5zdGFuY2VNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2NyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2dldEV2ZW50Q2hhckNvZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2dldEV2ZW50TW9kaWZpZXJTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvZ2V0RXZlbnRUYXJnZXQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2lzRXZlbnRTdXBwb3J0ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL3NldElubmVySFRNTC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvdmFsaWRhdGVET01OZXN0aW5nLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2NhbkRlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL2dldEl0ZXJhdG9yRm4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC13aW5qcy9yZWFjdC13aW5qcy5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdERPTVwiIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvRXZlbnRMaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2ZvY3VzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0NTU1Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9DYWxsYmFja1F1ZXVlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NQ29tcG9uZW50RmxhZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NU2VsZWN0LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdEVtcHR5Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdEhvc3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW5wdXRTZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdFVwZGF0ZVF1ZXVlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9WaWV3cG9ydE1ldHJpY3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2FjY3VtdWxhdGVJbnRvLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9mb3JFYWNoQWNjdW11bGF0ZWQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2dldFRleHRDb250ZW50QWNjZXNzb3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2lzVGV4dElucHV0RWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvc2V0VGV4dENvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi90cmF2ZXJzZUFsbENoaWxkcmVuLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0RWxlbWVudFN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRWYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0RhdGEudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL090aGVyUGFnZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL1Blb3BsZVBhZ2UudHN4Iiwid2VicGFjazovLy8uL3NyYy9Qcm9maWxlUGljdHVyZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2NhbWVsaXplLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvY2FtZWxpemVTdHlsZU5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9jcmVhdGVBcnJheUZyb21NaXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cC5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2dldE1hcmt1cFdyYXAuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2h5cGhlbmF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2h5cGhlbmF0ZVN0eWxlTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9mYmpzL2xpYi9tZW1vaXplU3RyaW5nT25seS5qcyIsIndlYnBhY2s6Ly8vLi9+L2ZianMvbGliL3BlcmZvcm1hbmNlLmpzIiwid2VicGFjazovLy8uL34vZmJqcy9saWIvcGVyZm9ybWFuY2VOb3cuanMiLCJ3ZWJwYWNrOi8vLy4vZGF0YS8yZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlAMTQ5MDM4NjMxNC5qc29uIiwid2VicGFjazovLy8uL2RhdGEvNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2QDE0OTAzODYxMzUuanNvbiIsIndlYnBhY2s6Ly8vLi9kYXRhLzc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N0AxNDkwMzg2MTkyLmpzb24iLCJ3ZWJwYWNrOi8vLy4vZGF0YS85ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJAMTQ5MDM4NjQ0Ni5qc29uIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9BUklBRE9NUHJvcGVydHlDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0F1dG9Gb2N1c1V0aWxzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0NoYW5nZUV2ZW50UGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9EYW5nZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0RlZmF1bHRFdmVudFBsdWdpbk9yZGVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9FbnRlckxlYXZlRXZlbnRQbHVnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvSFRNTERPTVByb3BlcnR5Q29uZmlnLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdENoaWxkUmVjb25jaWxlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTUNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01Db250YWluZXJJbmZvLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTUVtcHR5Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTUlET3BlcmF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01JbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01PcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NU2VsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01UZXh0Q29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVRleHRhcmVhLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVRyZWVUcmF2ZXJzYWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RGVidWdUb29sLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdERlZmF1bHRJbmplY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0RWxlbWVudFN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RFdmVudEVtaXR0ZXJNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RFdmVudExpc3RlbmVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdEZlYXR1cmVGbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RIb3N0T3BlcmF0aW9uSGlzdG9yeUhvb2suanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW5qZWN0aW9uLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdIb29rLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdE1hcmt1cENoZWNrc3VtLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdE11bHRpQ2hpbGQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0Tm9kZVR5cGVzLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdE93bmVyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RSZWYuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0U2VydmVyVXBkYXRlUXVldWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1JlYWN0VmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvU1ZHRE9NUHJvcGVydHlDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1NlbGVjdEV2ZW50UGx1Z2luLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9TaW1wbGVFdmVudFBsdWdpbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljQW5pbWF0aW9uRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0NsaXBib2FyZEV2ZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNEcmFnRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0ZvY3VzRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0lucHV0RXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0tleWJvYXJkRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1RvdWNoRXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1RyYW5zaXRpb25FdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljV2hlZWxFdmVudC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvYWRsZXIzMi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvY2hlY2tSZWFjdFR5cGVTcGVjLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9mbGF0dGVuQ2hpbGRyZW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL2dldEV2ZW50S2V5LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9nZXRJdGVyYXRvckZuLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL2xpYi9nZXROZXh0RGVidWdJRC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0LWRvbS9saWIvZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC1kb20vbGliL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QtZG9tL3NlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9LZXlFc2NhcGVVdGlscy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9Qb29sZWRDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9SZWFjdENoaWxkcmVuLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0Q2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RET01GYWN0b3JpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvUmVhY3RQdXJlQ29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL1JlYWN0VmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlYWN0L2xpYi9jaGVja1JlYWN0VHlwZVNwZWMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWFjdC9saWIvb25seUNoaWxkLmpzIiwid2VicGFjazovLy8uL34vcmVhY3QvbGliL3RyYXZlcnNlQWxsQ2hpbGRyZW4uanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9kYXRhIF5cXC5cXC8uKkAxNDkwMzg2MTkyXFwuanNvbiQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLG1EQUEyQyxjQUFjOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7QUNoRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVTs7Ozs7Ozs7QUNuTHRDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRDtBQUNyRCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBOztBQUVBLDJCOzs7Ozs7OztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdGQUF3RixhQUFhO0FBQ3JHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlO0FBQ2Y7O0FBRUE7QUFDQSw4RkFBOEYsZUFBZTtBQUM3RztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSx5Qjs7Ozs7Ozs7QUNqRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxvREFBb0Q7O0FBRXBELHNCQUFzQixtQkFBbUI7QUFDekM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCOztBQUV4QjtBQUNBOztBQUVBLG9DOzs7Ozs7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdCQUFnQixzQkFBc0I7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7Ozs7QUN6RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLFVBQVUsb0JBQW9CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVEsNENBQTRDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUSxnQkFBZ0I7QUFDeEI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUM7Ozs7Ozs7O0FDak1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxzQzs7Ozs7OztBQ2xDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLCtCOzs7Ozs7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQix3Qjs7Ozs7Ozs7QUN0QmxCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIseUJBQXlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQix5QkFBeUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7QUFHSDtBQUNBO0FBQ0E7O0FBRUEsd0M7Ozs7Ozs7O0FDNVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixXQUFXLGVBQWU7QUFDMUIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxQkFBcUIsc0JBQXNCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOEI7Ozs7Ozs7O0FDelBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsRUFBRTtBQUNiLFdBQVcsT0FBTztBQUNsQixXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdUNBQXVDO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUI7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkIsWUFBWSxPQUFPO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQzs7Ozs7Ozs7QUMxUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBOztBQUVBLG1DOzs7Ozs7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2Qjs7Ozs7Ozs7QUM5R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLEVBQUU7QUFDYixXQUFXLGNBQWM7QUFDekIsV0FBVyxFQUFFO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYjtBQUNBLFdBQVcsRUFBRTtBQUNiLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLG1CQUFtQixvQkFBb0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0I7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCOzs7Ozs7OztBQ25WQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG9EQUFvRDs7QUFFcEQsc0JBQXNCLG1CQUFtQjtBQUN6QztBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0I7O0FBRXhCO0FBQ0E7O0FBRUEsb0M7Ozs7OztBQ3JDQSx1Qjs7Ozs7OztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsNkI7Ozs7Ozs7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIscUJBQXFCO0FBQ3hDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCOzs7Ozs7O0FDcEhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDLDhCQUE4QjtBQUM5QjtBQUNBLGdCQUFnQjs7QUFFaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxvRUFBb0UseUJBQXlCOztBQUU3RjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9EQUFvRDtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUEsNkI7Ozs7Ozs7O0FDaE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBOztBQUVBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0dBQXdHO0FBQ3hHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsY0FBYyxVQUFVO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsRUFBRTtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG9CQUFvQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLEVBQUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsZ0M7Ozs7Ozs7O0FDcFJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQzs7Ozs7Ozs7QUNwSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCLGFBQWEsMERBQTBEO0FBQ3ZFLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixhQUFhLGFBQWE7QUFDMUIsYUFBYSwwQkFBMEI7QUFDdkMsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixhQUFhLDBCQUEwQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsaUM7Ozs7Ozs7O0FDdEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGtDOzs7Ozs7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHVCOzs7Ozs7OztBQ3ZGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxxQzs7Ozs7OztBQ3RFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNEJBQTRCO0FBQ3ZDO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0E7QUFDQSxjQUFjLDBCQUEwQjtBQUN4QztBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QixhQUFhLE9BQU87QUFDcEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEIsYUFBYSxTQUFTO0FBQ3RCLGFBQWEsU0FBUztBQUN0QixhQUFhLFNBQVM7QUFDdEI7QUFDQSxjQUFjLEVBQUU7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSw0QkFBNEIsZ0NBQWdDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0NBQWdDO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQzs7Ozs7Ozs7QUMvTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkIsb0JBQW9CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLEVBQUUsOEJBQThCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2Qzs7Ozs7O0FDekhBLHVCOzs7Ozs7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsOEI7Ozs7Ozs7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixXQUFXLFdBQVc7QUFDdEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxjQUFjO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx1Qzs7Ozs7Ozs7QUMvTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0I7Ozs7Ozs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qjs7QUFFOUI7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCOztBQUU3QjtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsdUVBQXVFO0FBQ3ZFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE1BQU07QUFDbkI7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxxQzs7Ozs7Ozs7QUM3UEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxFQUFFO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDhCQUE4QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOEJBQThCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksRUFBRTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSxrQzs7Ozs7Ozs7QUNoT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksT0FBTztBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDOzs7Ozs7O0FDekRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYyxFQUFFO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLEVBQUU7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxlQUFlO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQzs7Ozs7Ozs7QUNySUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDOztBQUV6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIseUJBQXlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRCwwQzs7Ozs7OztBQ3RVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSwyQzs7Ozs7Ozs7QUM1Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixXQUFXLEVBQUU7QUFDYixXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUM7Ozs7Ozs7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrQzs7Ozs7OztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLG9EOzs7Ozs7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZLE9BQU87QUFDbkI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQzs7Ozs7OztBQ2hEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsdUM7Ozs7Ozs7QUN6Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksZUFBZTtBQUMzQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDOzs7Ozs7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxrQzs7Ozs7OztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Qjs7Ozs7OztBQ2hHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQ0FBaUM7QUFDakMsZ0JBQWdCOztBQUVoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQzs7Ozs7Ozs7QUM1WEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDOzs7Ozs7OztBQ3BIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0EseURBQXlEOztBQUV6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQzs7Ozs7Ozs7QUM5RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEM7Ozs7Ozs7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFFBQVEsb0JBQW9CLEVBQUU7QUFDMUQ7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLG1DOzs7Ozs7OztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLHdDQUF3Qzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0I7Ozs7OztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixvQkFBb0I7QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkNBQTJDLFNBQVM7QUFDcEQ7QUFDQTtBQUNBLGdDQUFnQyxvQkFBb0I7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTCx1Q0FBdUMsU0FBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrQkFBa0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdDQUFnQyxRQUFRO0FBQ3hDO0FBQ0E7QUFDQSx3QkFBd0IsMkJBQTJCO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixtQkFBbUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdDQUF3QztBQUNoRTtBQUNBLFNBQVM7QUFDVDtBQUNBLDBCQUEwQixnREFBZ0Q7QUFDMUU7O0FBRUE7QUFDQSx3QkFBd0IsdUNBQXVDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7OztBQUdMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwREFBMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0EseURBQXlELFlBQVk7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSw0QkFBNEIsb0JBQW9CO0FBQ2hEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMLGtCQUFrQjtBQUNsQixnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELDRDQUE0QztBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRTtBQUNsRTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxrQkFBa0I7QUFDbEIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7Ozs7Ozs7QUN4eUZBLDBCOzs7Ozs7OytDQ0FBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixhQUFhLE9BQU87QUFDcEIsYUFBYSxTQUFTO0FBQ3RCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZUFBZTtBQUM1QixhQUFhLE9BQU87QUFDcEIsYUFBYSxTQUFTO0FBQ3RCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUEsK0I7Ozs7Ozs7O0FDbEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFdBQVcsV0FBVztBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsMkI7Ozs7Ozs7OENDekJBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSxrQzs7Ozs7Ozs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2Qjs7Ozs7OztBQ2xKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2Sjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0JBQXNCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRCx5RDs7Ozs7Ozs7QUNySEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxFQUFFO0FBQ2YsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLEVBQUU7QUFDZixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsRUFBRTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUEsdUM7Ozs7Ozs7O0FDM09BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsd0M7Ozs7Ozs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUdBQXVHO0FBQ3ZHO0FBQ0E7O0FBRUEsaUJBQWlCLDJCQUEyQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCLFdBQVcsUUFBUTtBQUNuQixXQUFXLEVBQUU7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0M7Ozs7Ozs7O0FDdE1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4Qzs7Ozs7OztBQ2xFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHFDOzs7Ozs7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGVBQWU7QUFDMUIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQzs7Ozs7Ozs7QUNsRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDOzs7Ozs7O0FDMUhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLHNDOzs7Ozs7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCOztBQUU1Qiw0QkFBNEI7O0FBRTVCO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsaUQ7Ozs7Ozs7O0FDeEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd1JBQXdSO0FBQ3hSOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsVUFBVTtBQUN2QixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5SUFBeUk7QUFDekk7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxrQzs7Ozs7Ozs7QUNoT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLGlDOzs7Ozs7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQSxZQUFZLFdBQVc7QUFDdkI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxnQzs7Ozs7Ozs7QUN4REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLG9DOzs7Ozs7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0M7Ozs7Ozs7QUMvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwyQzs7Ozs7Ozs7QUM5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsb0M7Ozs7Ozs7QUNqREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQzs7Ozs7OztBQ2xEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBLDRDOzs7Ozs7O0FDeENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLFFBQVE7QUFDbkIsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsR0FBRztBQUNkO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCOztBQUVBO0FBQ0EsbUJBQW1CLHFCQUFxQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMExBQTJMLHlDQUF5QywrR0FBK0cseUNBQXlDO0FBQzVYO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsR0FBRztBQUNkLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscUM7Ozs7Ozs7O0FDOUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsb0M7Ozs7Ozs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEIsV0FBVyxFQUFFO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlGQUF5Rjs7QUFFekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLHNCQUFzQjtBQUMzQztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHVDOzs7Ozs7OztBQ3hPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxzQzs7Ozs7Ozs7O0FDYkEsK0RBQStEO0FBQy9ELElBQUksS0FBSyxHQUFVLG1CQUFPLENBQUMsR0FBZ0UsQ0FBQyxDQUFDO0FBRzdGLElBQUksWUFBWSxHQUFHLENBQUMsQ0FBQztBQUNyQixJQUFJLFVBQVUsR0FBUSxFQUFFO0FBQ3hCLElBQUksU0FBUyxHQUFRLEVBQUU7QUFDdkIsSUFBSSxVQUFVLEdBQVEsRUFBRSxDQUFDO0FBQ3pCLElBQUksUUFBUSxHQUFRLEVBQUUsQ0FBQztBQUV2QixJQUFJLFdBQVcsR0FBRyxHQUFHLENBQUM7QUFDdEIsSUFBSSxZQUFZLEdBQUcsR0FBRyxDQUFDO0FBQ3ZCLElBQUksT0FBMEIsQ0FBQztBQUMvQixvQkFBb0IsS0FBVTtJQUMxQixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDWCxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUMzQyxPQUFPLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztRQUM1QixPQUFPLENBQUMsTUFBTSxHQUFHLFlBQVksQ0FBQztJQUNsQyxDQUFDO0lBQ0QsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQyxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQy9DLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDL0IsQ0FBQztBQUVELElBQUksWUFBWSxHQUFHO0lBQ2YsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDO0lBQzVDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUNqRCxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUM7Q0FDL0MsQ0FBQztBQUNGLElBQUksT0FBTyxHQUFHLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBVSxLQUFLO0lBQzFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFDLENBQUM7QUFFSCxtQkFBbUIsS0FBVSxFQUFFLElBQVM7SUFDcEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDO0FBQzlELENBQUM7QUFFRCx1QkFBdUIsS0FBaUI7SUFDcEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsa0JBQWtCLFNBQWMsRUFBRSxTQUFjLEVBQUUsVUFBZTtJQUM3RCxJQUFJLEdBQUcsR0FBRyxTQUFTLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLElBQUksTUFBTSxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDM0IsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFFRDtJQUNJLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsR0FBRyxHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQ7SUFDSSxNQUFNLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDekMsQ0FBQztBQUVEO0lBQ0ksTUFBTSxDQUFDO1FBQ0gsRUFBRSxFQUFFLFlBQVksRUFBRTtRQUNsQixJQUFJLEVBQUUsT0FBTyxFQUFFO1FBQ2YsTUFBTSxFQUFFLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDL0IsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM5QyxPQUFPLEVBQUUsYUFBYSxDQUFDLE9BQU8sQ0FBQztRQUMvQixXQUFXLEVBQUUsY0FBYyxFQUFFO1FBQzdCLFNBQVMsRUFBRSxjQUFjLEVBQUU7S0FDOUIsQ0FBQztBQUNOLENBQUM7QUFFRCxJQUFJLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFDckIsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFFM0QsTUFBTSxHQUFHLEVBQUU7QUFDWCxJQUFJLE1BQWM7QUFDbEIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsaUJBQU87SUFDekIsTUFBTSxHQUFHO1FBQ0wsT0FBTyxFQUFFLE9BQU8sQ0FBQyxVQUFVO1FBQzNCLFFBQVEsRUFBRSxPQUFPLENBQUMsV0FBVztRQUM3QixTQUFTLEVBQUUsT0FBTyxDQUFDLG1CQUFtQjtRQUN0QyxFQUFFLEVBQUUsT0FBTyxDQUFDLE9BQU87UUFDbkIsT0FBTyxFQUFFLE9BQU8sQ0FBQyxTQUFTO1FBQzFCLE1BQU0sRUFBRSxPQUFPLENBQUMsT0FBTztRQUN2QixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7UUFDMUIsS0FBSyxFQUFFLE9BQU8sQ0FBQyxhQUFhO1FBQzVCLE9BQU8sRUFBRSxPQUFPLENBQUMsV0FBVztRQUM1QixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7UUFDbEIsTUFBTSxFQUFFLE9BQU8sQ0FBQyxNQUFNO1FBQ3RCLEVBQUUsRUFBRSxPQUFPLENBQUMsUUFBUTtRQUNwQixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7UUFDbEIsa0JBQWtCLEVBQUUsT0FBTyxDQUFDLGtCQUFrQjtRQUM5QyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7UUFDcEIsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLGdCQUFnQjtRQUMxQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsZ0JBQWdCO1FBQzFDLGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYTtRQUNwQyxjQUFjLEVBQUUsT0FBTyxDQUFDLGNBQWM7UUFDdEMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1FBQzFCLEVBQUUsRUFBRSxPQUFPLENBQUMsRUFBRTtRQUNkLE9BQU8sRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDO0tBQ2xDO0lBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFFSCxrQ0FBa0M7QUFFbEMsSUFBSSxhQUFhLEdBQUcsRUFBRTtBQUN0QixhQUFhLENBQUMsSUFBSSxDQUFDLDZCQUFvQixHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQztBQUMzRixhQUFhLENBQUMsSUFBSSxDQUFDLG1CQUFPLENBQUMsR0FBZ0UsQ0FBQyxDQUFDLENBQUM7QUFDOUYsYUFBYSxDQUFDLElBQUksQ0FBQyxtQkFBTyxDQUFDLEdBQWdFLENBQUMsQ0FBQyxDQUFDO0FBRTlGLElBQUksT0FBTyxHQUFrQixFQUFFO0FBQy9CLElBQUksTUFBYztBQUNsQixhQUFhLENBQUMsT0FBTyxDQUFDLGlCQUFPO0lBQ3pCLE1BQU0sR0FBRztRQUNMLGNBQWMsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLGNBQWM7UUFDbEQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPO1FBQ3hCLE1BQU0sRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLO0tBQzdDO0lBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztBQUN2QixDQUFDLENBQUMsQ0FBQztBQUVILE9BQU8sQ0FBQyxHQUFHLENBQUM7SUFDUixNQUFNLEVBQUUsTUFBTTtJQUNkLE9BQU8sRUFBRSxPQUFPO0NBQ25CLENBQUM7QUFFRixPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ1IsTUFBTSxFQUFFLE1BQU07Q0FDakIsQ0FBQztBQUdGLE1BQU0sQ0FBQyxPQUFPLEdBQUc7SUFDYixNQUFNLEVBQUUsTUFBTTtJQUNkLE9BQU8sRUFBRSxPQUFPO0NBQ25CLENBQUM7Ozs7Ozs7Ozs7QUN6SUYsb0NBQStCO0FBRS9CLElBQUksWUFBWSxHQUFRO0lBQ3BCLEdBQUcsRUFBRSxZQUFZO0lBQ2pCLE1BQU0sRUFBRSxpQkFBaUI7SUFDekIsUUFBUSxFQUFFLFVBQVU7Q0FDdkIsQ0FBQztBQUVGLElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFDOUIsU0FBUyxFQUFFO1FBQ1AsUUFBUSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7S0FDN0M7SUFDRCxNQUFNO1FBQ0YsSUFBSSxLQUFLLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksT0FBTyxDQUFDO1FBQ3pELE1BQU0sQ0FBQyw0QkFBSSxTQUFTLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBRSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBRyxLQUFLLENBQU07SUFDN0UsQ0FBQztDQUNKLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDOzs7Ozs7Ozs7O0FDbEIzQixvQ0FBK0I7QUFDL0Isb0NBQStCO0FBRS9CLCtDQUE4QztBQUU5QyxJQUFJLFVBQVUsR0FBRyxtQkFBTyxDQUFDLEVBQWEsQ0FBQyxDQUFDO0FBRXhDLDZCQUE2QixDQUFTO0lBQ2xDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNWLE1BQU07UUFDTixjQUFjLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO0FBQzFDLENBQUM7QUFFRCxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBQy9CLHlCQUF5QjtRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ1YsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhO1NBQzNDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3BELENBQUM7SUFDRCxzQkFBc0IsWUFBQyxXQUFnQjtRQUNuQyxJQUFJLFFBQVEsR0FBRyxXQUFXLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztRQUNwRCxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzlDLG9FQUFvRTtRQUNwRSxVQUFVLENBQUM7WUFDUCxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7WUFDM0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbkgsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyQixDQUFDO0lBQ0Qsa0JBQWtCO0lBQ2xCLHFDQUFxQztJQUNyQyw4Q0FBOEM7SUFDOUMscUJBQXFCO0lBQ3JCLHdCQUF3QjtJQUN4Qiw0Q0FBNEM7SUFDNUMsOEJBQThCO0lBQzlCLFNBQVM7SUFDVCxxQkFBcUI7SUFDckIsNkJBQTZCO0lBQzdCLDhCQUE4QjtJQUM5QixTQUFTO0lBQ1QseUNBQXlDO0lBQ3pDLElBQUk7SUFDSixzQkFBc0IsWUFBQyxXQUFnQjtRQUNuQywwQ0FBMEM7UUFDMUMsK0NBQStDO1FBQy9DLG1DQUFtQztRQUNuQyxHQUFHO0lBQ1AsQ0FBQztJQUNELGNBQWMsRUFBRSxVQUFVLENBQUMsYUFBYSxDQUFDLFVBQVUsTUFBVztRQUMxRCxNQUFNLENBQUMsQ0FDSDtZQUNJLG9CQUFDLHdCQUFjLElBQUMsYUFBYSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUk7WUFDaEUsOEJBQU0sU0FBUyxFQUFDLE1BQU0sSUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBUTtZQUFBLCtCQUFNO1lBQ3RELDhCQUFNLFNBQVMsRUFBQyxJQUFJOztnQkFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQVM7WUFDakQsOEJBQU0sU0FBUyxFQUFDLE1BQU07O2dCQUFRLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSTtvQkFBUztZQUN2RCw4QkFBTSxTQUFTLEVBQUMsSUFBSTs7Z0JBQU0sTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUFTO1lBQ2pELDhCQUFNLFNBQVMsRUFBQyxPQUFPOztnQkFBUyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBUTtZQUN6RCwrQkFBTTtZQUNOLDhCQUFNLFNBQVMsRUFBQyxTQUFTOztnQkFBVyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU87b0JBQVM7WUFDaEUsOEJBQU0sU0FBUyxFQUFDLFVBQVU7O2dCQUFZLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFRO1lBQ2xFLCtCQUFNO1lBRU4sOEJBQU0sU0FBUyxFQUFDLG9CQUFvQjs7Z0JBQXVCLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQVE7WUFBQSwrQkFBTSxDQUNyRyxDQUNULENBQUM7SUFDTixDQUFDLENBQUM7SUFDRixxRUFBcUU7SUFDckUsY0FBYztJQUNkLHNDQUFzQztJQUN0QyxRQUFRO0lBQ1IsS0FBSztJQUNMLGdCQUFnQixZQUFDLGVBQXVCO1FBRXBDLE1BQU0sQ0FBQyxDQUNILDZCQUFLLFNBQVMsRUFBQyxrQkFBa0IsRUFBQyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFO1lBQzlILG9CQUFDLFVBQVUsQ0FBQyxRQUFRLElBQ2hCLEdBQUcsRUFBQyxVQUFVLEVBQ2QsU0FBUyxFQUFDLHlDQUF5QyxFQUNuRCxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsRUFDdEMsY0FBYyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFDNUMsWUFBWSxFQUFFLElBQUksQ0FBQyxjQUFjO2dCQUNqQyx1REFBdUQ7Z0JBQ3ZELGdEQUFnRDtnQkFDaEQsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUN6QixhQUFhLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEdBQUcsT0FBTyxHQUFHLFFBQVEsRUFDNUQsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLGNBQWMsR0FBRyxjQUFjLEVBQ3ZFLGtCQUFrQixFQUFFLElBQUksQ0FBQyxzQkFBc0IsRUFDL0Msa0JBQWtCLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixHQUFJLENBQ3JELENBQ1QsQ0FBQztJQUNOLENBQUM7SUFDRCxpQkFBaUIsWUFBQyxhQUFrQixFQUFFLGVBQXVCO1FBQ3pELEVBQUUsQ0FBQyxDQUFDLGFBQWEsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sQ0FBQyxDQUNILDZCQUFLLFNBQVMsRUFBQyxhQUFhLEVBQUMsS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsbUJBQW1CLENBQUMsZUFBZSxDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFO2dCQUM5SSw2QkFBSyxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUU7b0JBQ3BILDRCQUFJLFNBQVMsRUFBQyxRQUFRLEVBQUMsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsQ0FDaEUsQ0FDSixDQUNULENBQUM7UUFDTixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDNUQsTUFBTSxDQUFDLENBQ0gsNkJBQUssU0FBUyxFQUFDLGFBQWEsRUFBQyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUU7Z0JBQzlJLDZCQUFLLFNBQVMsRUFBQyxlQUFlO29CQUMxQiw2QkFBSyxTQUFTLEVBQUMsTUFBTSxJQUFFLGNBQWMsQ0FBQyxJQUFJLENBQU87b0JBQ2pELDZCQUFLLFNBQVMsRUFBQyxZQUFZO3dCQUN2QixvQkFBQyx3QkFBYyxJQUFDLGFBQWEsRUFBRSxjQUFjLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxHQUFHLEdBQUk7d0JBQ3BFLDZCQUFLLFNBQVMsRUFBQyxlQUFlOzRCQUMxQiw4QkFBTSxTQUFTLEVBQUMsU0FBUztnQ0FBRSxjQUFjLENBQUMsS0FBSztvQ0FBUzs0QkFDeEQsOEJBQU0sU0FBUyxFQUFDLE9BQU87O2dDQUFTLGNBQWMsQ0FBQyxPQUFPLENBQVE7NEJBQzlELDhCQUFNLFNBQVMsRUFBQyxTQUFTOztnQ0FBVyxjQUFjLENBQUMsS0FBSyxDQUFROzRCQUNoRSw4QkFBTSxTQUFTLEVBQUMsZ0JBQWdCLHVCQUEwQixDQUN4RCxDQUNKLENBQ0o7Z0JBQ04sNkJBQUssU0FBUyxFQUFDLFdBQVcsR0FBRztnQkFDN0IsNkJBQUssU0FBUyxFQUFDLGdCQUFnQjtvQkFDM0I7d0JBQ0k7NEJBQUksOEJBQU0sU0FBUyxFQUFDLGFBQWEsR0FBRztzQ0FBWTt3QkFDaEQ7NEJBQUksOEJBQU0sU0FBUyxFQUFDLFdBQVcsR0FBRzt5Q0FBZTt3QkFDakQ7NEJBQUksOEJBQU0sU0FBUyxFQUFDLFNBQVMsR0FBRzt1Q0FBYSxDQUM1QyxDQUNILENBQ0osQ0FDVCxDQUFDO1FBQ04sQ0FBQztJQUNMLENBQUM7SUFDRCxTQUFTLEVBQUU7UUFDUCxJQUFJLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsVUFBVTtRQUNwRSxNQUFNLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVTtRQUN6Qyw2Q0FBNkM7UUFDN0MsUUFBUSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFVBQVU7UUFDMUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVU7UUFDM0MsZUFBZSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVU7S0FDbkQ7SUFDRCxlQUFlO1FBQ1gsTUFBTSxDQUFDO1lBQ0gsTUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxFQUFFLENBQUMsVUFBVSxFQUFFO1lBQ3JDLGNBQWMsRUFBRSxFQUFFO1lBQ2xCLGFBQWEsRUFBRSxLQUFLO1NBQ3ZCLENBQUM7SUFDTixDQUFDO0lBQ0QsTUFBTTtRQUNGLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRXBGLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDOUIsRUFBRSxDQUFDLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDekMsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3BELENBQUM7UUFDTCxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixJQUFJLGVBQWUsR0FBRyxHQUFHLENBQUM7WUFDMUIsTUFBTSxDQUFDLENBQ0gsNkJBQUssS0FBSyxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRTtnQkFDekIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxlQUFlLENBQUMsQ0FDckQsQ0FDVCxDQUFDO1FBQ04sQ0FBQztJQUNMLENBQUM7Q0FDSixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdEs1QixvQ0FBK0I7QUFTL0I7SUFBNEMsa0NBQStDO0lBQTNGOztJQXNCQSxDQUFDO0lBcEJHLCtCQUFNLEdBQU47UUFDSSxJQUFNLElBQUksR0FBVyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7UUFDcEMsSUFBTSxNQUFNLEdBQVcsTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLEdBQUc7UUFFOUQsTUFBTSxDQUFDLENBQ0gsNkJBQUssU0FBUyxFQUFDLGdCQUFnQixFQUFDLEtBQUssRUFBRTtnQkFDbkMsZUFBZSxFQUFFLE1BQU07Z0JBQ3ZCLEtBQUssRUFBRSxJQUFJO2dCQUNYLE1BQU0sRUFBRSxJQUFJO2dCQUNaLGtCQUFrQixFQUFFLElBQUk7Z0JBQ3hCLGVBQWUsRUFBRSxJQUFJO2dCQUNyQixZQUFZLEVBQUUsSUFBSTtnQkFDbEIsY0FBYyxFQUFFLE9BQU87Z0JBQ3ZCLE9BQU8sRUFBRSxjQUFjO2FBQzFCO1lBQ0csNkJBQUssR0FBRyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksR0FBSSxDQUM3RCxDQUNULENBQUM7SUFDTixDQUFDO0lBRUwscUJBQUM7QUFBRCxDQUFDLENBdEIyQyxLQUFLLENBQUMsU0FBUyxHQXNCMUQ7Ozs7Ozs7Ozs7O0FDL0JELG9DQUErQjtBQUMvQixvQ0FBK0I7QUFDL0IsdUNBQXNDO0FBRXRDLDRDQUE0QztBQUM1QyxJQUFJLFVBQVUsR0FBRyxtQkFBTyxDQUFDLEVBQWEsQ0FBQyxDQUFDO0FBRXhDLHdDQUF3QztBQUN4QyxJQUFJLFVBQVUsR0FBRyxtQkFBTyxDQUFDLEVBQWtCLENBQUMsQ0FBQztBQUM3QyxJQUFJLFNBQVMsR0FBRyxtQkFBTyxDQUFDLEVBQWlCLENBQUMsQ0FBQztBQUczQyxvQ0FBb0M7QUFDcEMsc0NBQXNDO0FBQ3RDLElBQUksSUFBSSxHQUFHLG1CQUFPLENBQUMsRUFBVyxDQUFDLENBQUM7QUFFaEMsSUFBSSxXQUFXLEdBQUcsZUFBZSxDQUFDO0FBRWxDLElBQUksZ0JBQWdCLEdBQVE7SUFDeEIsS0FBSyxFQUFFO1FBQ0gsaUJBQWlCLEVBQUUsTUFBTTtRQUN6QixpQkFBaUIsRUFBRSxTQUFTO0tBQy9CO0lBQ0QsTUFBTSxFQUFFO1FBQ0osaUJBQWlCLEVBQUUsUUFBUTtRQUMzQixpQkFBaUIsRUFBRSxTQUFTO0tBQy9CO0lBQ0QsS0FBSyxFQUFFO1FBQ0gsaUJBQWlCLEVBQUUsUUFBUTtRQUMzQixpQkFBaUIsRUFBRSxRQUFRO0tBQzlCO0NBQ0osQ0FBQztBQUVGO0lBQ0ksSUFBSSxDQUFNLENBQUM7SUFDWCxJQUFJLE1BQU0sR0FBUSxFQUFFLENBQUM7SUFDckIsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUNuRCxJQUFJLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNOLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxDQUFDO1FBQzFDLENBQUM7SUFDTCxDQUFDO0lBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQztBQUNsQixDQUFDO0FBRUQ7SUFDSSxNQUFNLENBQUMsQ0FDSCxNQUFNLENBQUMsVUFBVSxJQUFJLElBQUksR0FBRyxPQUFPO1FBQy9CLE1BQU0sQ0FBQyxVQUFVLElBQUksR0FBRyxHQUFHLFFBQVE7WUFDL0IsT0FBTyxDQUNsQixDQUFDO0FBQ04sQ0FBQztBQUVELElBQUksR0FBRyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFDeEIsa0JBQWtCO1FBQ2QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUNELG1CQUFtQixZQUFDLFNBQWM7UUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNWLE1BQU0sRUFBRSxTQUFTO1NBQ3BCLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDRCxnQkFBZ0IsWUFBQyxXQUFnQjtRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ1YsUUFBUSxFQUFFLFdBQVc7U0FDeEIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUNELFVBQVU7UUFDTixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUNuQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNELFlBQVk7UUFDUixJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztRQUMvQixJQUFJLFFBQVEsR0FBRyxPQUFPLEVBQUUsQ0FBQztRQUV6QixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQztZQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDdEMsQ0FBQztJQUNMLENBQUM7SUFDRCxvQkFBb0IsWUFBQyxXQUFnQjtRQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ1YsUUFBUSxFQUFFLFdBQVc7WUFDckIsVUFBVSxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGlCQUFpQixLQUFLLFNBQVMsR0FBRyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVO1NBQ3hHLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDRCxnQkFBZ0I7UUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFDRCxnQkFBZ0I7UUFDWixJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUNELGVBQWU7UUFDWCxJQUFJLElBQUksR0FBRyxPQUFPLEVBQUUsQ0FBQztRQUVyQixJQUFJLFFBQVEsR0FBRyxVQUFVLElBQVM7WUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdEMsQ0FBQyxDQUFDO1FBRUYsSUFBSSxTQUFTLEdBQUcsVUFBVSxJQUFTO1lBQy9CLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNyQyxDQUFDLENBQUM7UUFFRixJQUFJLE1BQU0sR0FBRyxVQUFVLENBQU0sRUFBRSxDQUFNO1lBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDekIsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUNiLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDSixNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2IsQ0FBQztRQUNMLENBQUMsQ0FBQztRQUVGLElBQUksSUFBSSxHQUFHLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzthQUN6QyxZQUFZLENBQUMsTUFBTSxDQUFDO2FBQ3BCLGFBQWEsQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFeEMsTUFBTSxDQUFDO1lBQ0gsTUFBTSxFQUFFLElBQUk7WUFDWixJQUFJLEVBQUUsSUFBSTtZQUNWLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQztTQUN2QixDQUFDO0lBQ04sQ0FBQztJQUNELGtCQUFrQjtRQUNkLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFDRCxvQkFBb0I7UUFDaEIsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUNELGdCQUFnQjtRQUNaLE1BQU0sQ0FBQyxDQUNILG9CQUFDLFVBQVUsSUFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQ3JCLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDekIsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUM3QixVQUFVLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUNqQyxlQUFlLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixHQUFJLENBQ3BELENBQUM7SUFDTixDQUFDO0lBQ0QsZUFBZTtRQUNYLE1BQU0sQ0FBQyxvQkFBQyxTQUFTLElBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFJO0lBQ3ZELENBQUM7SUFDRCxhQUFhO1FBQ1QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNuQyxDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ2xDLENBQUM7SUFDTCxDQUFDO0lBQ0QsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtRQUNaLElBQUksU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDL0MsSUFBSSxvQkFBb0IsR0FBRyxTQUFTLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDO1FBQ3BFLE1BQU0sQ0FBQyxvQkFBb0I7WUFDdkIsZ0NBQVEsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxFQUFFLFNBQVMsRUFBQyxnQkFBZ0IsRUFBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsR0FBSTtZQUNuRyxJQUFJLENBQUM7SUFDYixDQUFDO0lBQ0QsTUFBTTtRQUNGLElBQUksYUFBYSxHQUFHLENBQ2hCO1lBQ0ksb0JBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLElBQ3pCLEtBQUssRUFBQyxRQUFRLEVBQ2QsSUFBSSxFQUFDLFNBQVMsRUFDZCxTQUFTLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxHQUFJO1lBQ25FLG9CQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxJQUN6QixLQUFLLEVBQUMsWUFBWSxFQUNsQixJQUFJLEVBQUMsU0FBUyxFQUNkLFNBQVMsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUk7WUFDaEUsb0JBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPO1lBQ3pCLDZCQUE2Qjs7Z0JBQTdCLDZCQUE2QjtnQkFDN0IsS0FBSyxFQUFDLGtCQUFrQixFQUN4QixJQUFJLEVBQUMsUUFBUSxFQUNiLFNBQVMsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEdBQUk7WUFFbkUsb0JBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxPQUFPLElBQ3pCLEtBQUssRUFBRSxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQ3pELEtBQUssRUFBQyxVQUFVLEVBQ2hCLElBQUksRUFBQyxVQUFVLEVBQ2YsU0FBUyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBSSxDQUNuRSxDQUNULENBQUM7UUFFRixJQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUU1QyxNQUFNLENBQUMsQ0FDSCw2QkFBSyxLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFO1lBRTFCLDZCQUFLLEtBQUssRUFBRSxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsZUFBZSxFQUFFLHdCQUF3QixFQUFFLEVBQUUsU0FBUyxFQUFDLGFBQWE7Z0JBQzFGLG9CQUFDLFVBQVUsQ0FBQyxtQkFBbUIscUJBQ1osV0FBVyxFQUMxQixLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLEVBQ2xDLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFDakMsU0FBUyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsR0FBSTtnQkFDdkMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUV4Qiw0QkFBSSxTQUFTLEVBQUMsUUFBUSxFQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLENBQUMsRUFBRSxXQUFXLENBQ2pGO1lBQ04sb0JBQUMsVUFBVSxDQUFDLFNBQVMsSUFDakIsRUFBRSxFQUFFLFdBQVcsRUFDZixLQUFLLEVBQUUsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLEVBQUUsRUFDdEMsYUFBYSxFQUFFLGFBQWEsRUFDNUIsZ0JBQWdCLEVBQUUsZ0JBQWdCLEVBQ2xDLFlBQVksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQ25DLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FFSyxDQUN4QyxDQUNULENBQUM7SUFDTixDQUFDO0NBQ0osQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLE1BQU0sQ0FBQyxvQkFBQyxHQUFHLE9BQUcsRUFBRSxRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7O0FDcE56RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLDBCOzs7Ozs7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DOzs7Ozs7O0FDdENBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUEsOEI7Ozs7Ozs7K0NDdENBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUJBQXlCO0FBQ3BDLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLG1MQUFtTDs7QUFFbkw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsYUFBYTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEVBQUU7QUFDYixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSxzQzs7Ozs7Ozs7K0NDN0hBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxRQUFRO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsVUFBVTtBQUNyQixZQUFZLDhCQUE4QjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVDOzs7Ozs7OzsrQ0NsRkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0I7Ozs7Ozs7O0FDN0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEMsWUFBWSxPQUFPO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0Qzs7Ozs7OztBQ3JDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCOzs7Ozs7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQzs7Ozs7OztBQ3JDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0I7Ozs7Ozs7QUN2QkE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxXQUFXLEVBQUU7QUFDYixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEI7Ozs7Ozs7QUN2QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DOzs7Ozs7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxtQzs7Ozs7OztBQ3JCQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0M7Ozs7OztBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKLGlCQUFpQjtBQUNqQjtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixrQkFBa0I7QUFDbEI7QUFDQSxtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFOzs7Ozs7O0FDM2pKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRTs7Ozs7O0FDajhCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixrQkFBa0I7QUFDbEI7QUFDQSxtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRTs7Ozs7O0FDdG5OQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSixpQkFBaUI7QUFDakI7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixrQkFBa0I7QUFDbEI7QUFDQSxtQkFBbUI7QUFDbkIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxQ0FBcUM7QUFDckMscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLHFDQUFxQztBQUNyQyxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFOzs7Ozs7Ozs7Ozs7QUM1K0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCx1QkFBdUI7QUFDdkI7QUFDQTs7QUFFQSx1Qzs7Ozs7OztBQ3hFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQzs7Ozs7OztBQ3RCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUM7QUFDbkM7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0M7Ozs7Ozs7QUMvWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRDQUE0Qzs7QUFFNUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxFQUFFO0FBQ2YsYUFBYSxrQkFBa0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDBCQUEwQjtBQUMxRCxvQkFBb0IsU0FBUztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLGtCQUFrQjtBQUMvQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEY7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QixhQUFhLE9BQU87QUFDcEIsYUFBYSxrQkFBa0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHVDOzs7Ozs7OztBQy9NQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsbUM7Ozs7Ozs7QUMvVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx3Qjs7Ozs7Ozs7QUM5Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx5Qzs7Ozs7OztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLHVDOzs7Ozs7O0FDbEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQixxQkFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsZUFBZTtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUEsMEM7Ozs7Ozs7QUM3RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQSx1Qzs7Ozs7OztBQ2xOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxS0FBcUs7QUFDcks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsMEJBQTBCO0FBQ3ZDLGFBQWEsT0FBTztBQUNwQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsc0M7Ozs7Ozs7O0FDeEpBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxrRDs7Ozs7OztBQzVCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSwwREFBMEQ7QUFDdkUsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxhQUFhLE9BQU87QUFDcEIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwwQkFBMEI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDBCQUEwQjtBQUN2QyxhQUFhLGFBQWE7QUFDMUIsYUFBYSxhQUFhO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDhCQUE4QjtBQUM5QixpQ0FBaUMsa0JBQWtCO0FBQ25EO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSwwQkFBMEI7QUFDdkMsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSwwQkFBMEI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGVBQWU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQSx5Qzs7Ozs7Ozs7QUNwNEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUseUJBQXlCO0FBQ3hDO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvTkFBb04sWUFBWTtBQUNoTztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrTkFBK04sK0JBQStCO0FBQzlQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUEsb0RBQW9EO0FBQ3BEO0FBQ0EsdUJBQXVCOztBQUV2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwwREFBMEQ7QUFDdkUsYUFBYSxtQkFBbUI7QUFDaEMsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsT0FBTztBQUNwQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDBEQUEwRDtBQUN2RSxhQUFhLE9BQU87QUFDcEIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMERBQTBEO0FBQ3ZFLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsdUJBQXVCLHdCQUF3QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGFBQWE7QUFDMUIsYUFBYSwwREFBMEQ7QUFDdkUsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSwwQkFBMEI7QUFDdkMsYUFBYSxhQUFhO0FBQzFCLGFBQWEsYUFBYTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLFlBQVk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxLQUFLO0FBQzNDO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RDtBQUN6RCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLDBCQUEwQjtBQUN2QyxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0JBQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxtQzs7Ozs7Ozs7QUN2K0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVDOzs7Ozs7OztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCx3Qzs7Ozs7OztBQzFEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGNBQWM7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0M7Ozs7Ozs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSwwR0FBMEc7QUFDMUc7QUFDQTtBQUNBO0FBQ0EsNEdBQTRHO0FBQzVHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsa0JBQWtCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwrQjs7Ozs7Ozs7QUNwUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHdCQUF3QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEI7QUFDMUIsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSw2QkFBNkIsMkNBQTJDOztBQUV4RTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsZ0M7Ozs7Ozs7O0FDekhBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFdBQVc7QUFDdEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx1QkFBdUI7QUFDbEMsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLHVCQUF1QjtBQUNwQyxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBOztBQUVBLG1DOzs7Ozs7O0FDbE5BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxnQzs7Ozs7OztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMERBQTBEO0FBQ3ZFLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxVQUFVO0FBQ3ZCLGFBQWEsMEJBQTBCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDOztBQUVELHVDOzs7Ozs7OztBQ2xLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2R0FBNkc7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQzs7Ozs7Ozs7QUM5SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCLE9BQU87QUFDaEM7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLE9BQU87QUFDaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsU0FBUztBQUNoQztBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHFCQUFxQjtBQUNsQztBQUNBO0FBQ0EseUJBQXlCLFNBQVM7QUFDbEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEU7Ozs7Ozs7O0FDdElBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLElBQUk7QUFDUDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsbUJBQW1CLGtCQUFrQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDOzs7Ozs7OztBQ3ZXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEU7Ozs7Ozs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxvQzs7Ozs7OztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdDOzs7Ozs7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxpQkFBaUIsa0NBQWtDO0FBQ25EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLE9BQU87QUFDcEIsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQzs7Ozs7OztBQ3pKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUM7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0M7Ozs7Ozs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0M7Ozs7Ozs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpRDs7Ozs7Ozs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLFdBQVc7QUFDeEIsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUM7Ozs7Ozs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixnQkFBZ0IsTUFBTTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSwwQkFBMEI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSwwQkFBMEI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsZUFBZSxlQUFlO0FBQzlCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLGVBQWU7QUFDOUIsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxlQUFlLGVBQWU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGVBQWU7QUFDOUIsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLDBCQUEwQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxlQUFlO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGlDOzs7Ozs7OztBQ2hjQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0M7Ozs7Ozs7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixpQkFBaUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxlQUFlO0FBQzVCLGFBQWEsT0FBTztBQUNwQixhQUFhLFdBQVc7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLGVBQWU7QUFDNUIsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsV0FBVztBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsNEI7Ozs7Ozs7O0FDNUZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDRDOzs7Ozs7OztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxVQUFVO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsVUFBVTtBQUN2QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGNBQWM7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLDJDOzs7Ozs7OztBQ2hMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQjs7Ozs7OztBQ3ZGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNkM7Ozs7Ozs7QUNwQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFdBQVcsYUFBYTtBQUN4QixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFOzs7Ozs7OztBQ3hGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpREFBaUQsMENBQTBDLDBEQUEwRCxFQUFFOztBQUV2Sjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2Qjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QixhQUFhLFVBQVU7QUFDdkI7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsZ0JBQWdCO0FBQzdCO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCLGFBQWEsZ0JBQWdCO0FBQzdCO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVELHdDOzs7Ozs7OztBQ3pJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsMEI7Ozs7Ozs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxzQzs7Ozs7OztBQzVTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQzs7Ozs7OztBQzdMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxtQzs7Ozs7Ozs7QUNsT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHlDOzs7Ozs7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEseUM7Ozs7Ozs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLDJDOzs7Ozs7O0FDbENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxvQzs7Ozs7OztBQ2xDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEscUM7Ozs7Ozs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEscUM7Ozs7Ozs7QUNuQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSx3Qzs7Ozs7OztBQ2xGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxxQzs7Ozs7OztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsMEM7Ozs7Ozs7QUNyQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHFDOzs7Ozs7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxPQUFPO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLE9BQU87QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUI7Ozs7Ozs7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUpBQWlKO0FBQ2pKO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxzSUFBc0k7QUFDdEk7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DOzs7Ozs7OztBQ3JGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxFQUFFO0FBQ2IsV0FBVyxrQkFBa0I7QUFDN0IsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNCQUFzQjtBQUN0Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUM7Ozs7Ozs7O0FDN0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsZ0JBQWdCO0FBQzNCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVLQUF1SztBQUN2SztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUM7Ozs7Ozs7O0FDMUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCOzs7Ozs7O0FDcEdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0Esd0NBQXdDOztBQUV4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQjs7Ozs7OztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0M7Ozs7Ozs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLFlBQVk7QUFDWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLFdBQVcsT0FBTztBQUNsQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDJDOzs7Ozs7O0FDeEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsNEM7Ozs7Ozs7QUNuR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsRUFBRTtBQUNiLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQzs7Ozs7OztBQ3hCQTs7QUFFQTs7Ozs7Ozs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0M7Ozs7Ozs7QUN6REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDZCOzs7Ozs7OztBQzlHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLEdBQUc7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsaUJBQWlCO0FBQzVCLFdBQVcsRUFBRTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsR0FBRztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxXQUFXLGlCQUFpQjtBQUM1QixXQUFXLEVBQUU7QUFDYixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQjs7Ozs7OztBQzdMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixLQUFLO0FBQ2xDO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSwwQkFBMEI7QUFDdkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsV0FBVztBQUN4QjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMEJBQTBCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUMsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDO0FBQ3RDLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNILDBCQUEwQjs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRIQUE0SDtBQUM1SDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb09BQW9POztBQUVwTztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb05BQW9OO0FBQ3BOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCLFdBQVcsU0FBUztBQUNwQixZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQixXQUFXLFNBQVM7QUFDcEIsWUFBWSxTQUFTO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsU0FBUztBQUNwQixZQUFZLFNBQVM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RkFBd0YsYUFBYTtBQUNyRztBQUNBOztBQUVBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLDRCOzs7Ozs7OztBQzNzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUM7Ozs7Ozs7O0FDeEtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUiwyQkFBMkI7QUFDM0IsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLEtBQUs7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCwwQkFBMEI7QUFDMUIsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLDJCQUEyQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUJBQW1CLGdDQUFnQztBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdDOzs7Ozs7OztBQ2hiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0M7Ozs7Ozs7QUN4Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLDBCOzs7Ozs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUpBQWlKO0FBQ2pKO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxzSUFBc0k7QUFDdEk7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DOzs7Ozs7OztBQ3JGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLGFBQWE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJCOzs7Ozs7OztBQ3BDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxHQUFHO0FBQ2QsV0FBVyxRQUFRO0FBQ25CLFdBQVcsVUFBVTtBQUNyQixXQUFXLEdBQUc7QUFDZDtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVCQUF1QjtBQUN2Qjs7QUFFQTtBQUNBLG1CQUFtQixxQkFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBMQUEyTCx5Q0FBeUMsK0dBQStHLHlDQUF5QztBQUM1WDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsVUFBVTtBQUNyQixXQUFXLEdBQUc7QUFDZCxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHFDOzs7Ozs7O0FDOUtBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDOzs7Ozs7OztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0IiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG5cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gODYpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGUxYmMyYmQ2YzE3Yzg2M2FlMDI4IiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9wcm9jZXNzL2Jyb3dzZXIuanNcbi8vIG1vZHVsZSBpZCA9IDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXNlIGludmFyaWFudCgpIHRvIGFzc2VydCBzdGF0ZSB3aGljaCB5b3VyIHByb2dyYW0gYXNzdW1lcyB0byBiZSB0cnVlLlxuICpcbiAqIFByb3ZpZGUgc3ByaW50Zi1zdHlsZSBmb3JtYXQgKG9ubHkgJXMgaXMgc3VwcG9ydGVkKSBhbmQgYXJndW1lbnRzXG4gKiB0byBwcm92aWRlIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgYnJva2UgYW5kIHdoYXQgeW91IHdlcmVcbiAqIGV4cGVjdGluZy5cbiAqXG4gKiBUaGUgaW52YXJpYW50IG1lc3NhZ2Ugd2lsbCBiZSBzdHJpcHBlZCBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGludmFyaWFudFxuICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFsaWRhdGVGb3JtYXQoZm9ybWF0KTtcblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgfSkpO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ZianMvbGliL2ludmFyaWFudC5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gLS0tIFdlbGNvbWUgdG8gZGVidWdnaW5nIFJlYWN0IC0tLVxuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHt9XG4gICAgfTtcblxuICAgIHdhcm5pbmcgPSBmdW5jdGlvbiB3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvcm1hdC5pbmRleE9mKCdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAnKSA9PT0gMCkge1xuICAgICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suXG4gICAgICB9XG5cbiAgICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMiA/IF9sZW4yIC0gMiA6IDApLCBfa2V5MiA9IDI7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgICBhcmdzW19rZXkyIC0gMl0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KHVuZGVmaW5lZCwgW2Zvcm1hdF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ZianMvbGliL3dhcm5pbmcuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogV0FSTklORzogRE8gTk9UIG1hbnVhbGx5IHJlcXVpcmUgdGhpcyBtb2R1bGUuXG4gKiBUaGlzIGlzIGEgcmVwbGFjZW1lbnQgZm9yIGBpbnZhcmlhbnQoLi4uKWAgdXNlZCBieSB0aGUgZXJyb3IgY29kZSBzeXN0ZW1cbiAqIGFuZCB3aWxsIF9vbmx5XyBiZSByZXF1aXJlZCBieSB0aGUgY29ycmVzcG9uZGluZyBiYWJlbCBwYXNzLlxuICogSXQgYWx3YXlzIHRocm93cy5cbiAqL1xuXG5mdW5jdGlvbiByZWFjdFByb2RJbnZhcmlhbnQoY29kZSkge1xuICB2YXIgYXJnQ291bnQgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcblxuICB2YXIgbWVzc2FnZSA9ICdNaW5pZmllZCBSZWFjdCBlcnJvciAjJyArIGNvZGUgKyAnOyB2aXNpdCAnICsgJ2h0dHA6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PScgKyBjb2RlO1xuXG4gIGZvciAodmFyIGFyZ0lkeCA9IDA7IGFyZ0lkeCA8IGFyZ0NvdW50OyBhcmdJZHgrKykge1xuICAgIG1lc3NhZ2UgKz0gJyZhcmdzW109JyArIGVuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYXJnSWR4ICsgMV0pO1xuICB9XG5cbiAgbWVzc2FnZSArPSAnIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCcgKyAnIGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLic7XG5cbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgcmVhY3RQcm9kSW52YXJpYW50J3Mgb3duIGZyYW1lXG5cbiAgdGhyb3cgZXJyb3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVhY3RQcm9kSW52YXJpYW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL3JlYWN0UHJvZEludmFyaWFudC5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L29iamVjdC1hc3NpZ24vaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50RmxhZ3MgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50RmxhZ3MnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgQVRUUl9OQU1FID0gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUU7XG52YXIgRmxhZ3MgPSBSZWFjdERPTUNvbXBvbmVudEZsYWdzO1xuXG52YXIgaW50ZXJuYWxJbnN0YW5jZUtleSA9ICdfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBnaXZlbiBub2RlIHNob3VsZCBiZSBjYWNoZWQuXG4gKi9cbmZ1bmN0aW9uIHNob3VsZFByZWNhY2hlTm9kZShub2RlLCBub2RlSUQpIHtcbiAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSA9PT0gU3RyaW5nKG5vZGVJRCkgfHwgbm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZSA9PT0gJyByZWFjdC10ZXh0OiAnICsgbm9kZUlEICsgJyAnIHx8IG5vZGUubm9kZVR5cGUgPT09IDggJiYgbm9kZS5ub2RlVmFsdWUgPT09ICcgcmVhY3QtZW1wdHk6ICcgKyBub2RlSUQgKyAnICc7XG59XG5cbi8qKlxuICogRHJpbGwgZG93biAodGhyb3VnaCBjb21wb3NpdGVzIGFuZCBlbXB0eSBjb21wb25lbnRzKSB1bnRpbCB3ZSBnZXQgYSBob3N0IG9yXG4gKiBob3N0IHRleHQgY29tcG9uZW50LlxuICpcbiAqIFRoaXMgaXMgcHJldHR5IHBvbHltb3JwaGljIGJ1dCB1bmF2b2lkYWJsZSB3aXRoIHRoZSBjdXJyZW50IHN0cnVjdHVyZSB3ZSBoYXZlXG4gKiBmb3IgYF9yZW5kZXJlZENoaWxkcmVuYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVuZGVyZWRIb3N0T3JUZXh0RnJvbUNvbXBvbmVudChjb21wb25lbnQpIHtcbiAgdmFyIHJlbmRlcmVkO1xuICB3aGlsZSAocmVuZGVyZWQgPSBjb21wb25lbnQuX3JlbmRlcmVkQ29tcG9uZW50KSB7XG4gICAgY29tcG9uZW50ID0gcmVuZGVyZWQ7XG4gIH1cbiAgcmV0dXJuIGNvbXBvbmVudDtcbn1cblxuLyoqXG4gKiBQb3B1bGF0ZSBgX2hvc3ROb2RlYCBvbiB0aGUgcmVuZGVyZWQgaG9zdC90ZXh0IGNvbXBvbmVudCB3aXRoIHRoZSBnaXZlblxuICogRE9NIG5vZGUuIFRoZSBwYXNzZWQgYGluc3RgIGNhbiBiZSBhIGNvbXBvc2l0ZS5cbiAqL1xuZnVuY3Rpb24gcHJlY2FjaGVOb2RlKGluc3QsIG5vZGUpIHtcbiAgdmFyIGhvc3RJbnN0ID0gZ2V0UmVuZGVyZWRIb3N0T3JUZXh0RnJvbUNvbXBvbmVudChpbnN0KTtcbiAgaG9zdEluc3QuX2hvc3ROb2RlID0gbm9kZTtcbiAgbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGhvc3RJbnN0O1xufVxuXG5mdW5jdGlvbiB1bmNhY2hlTm9kZShpbnN0KSB7XG4gIHZhciBub2RlID0gaW5zdC5faG9zdE5vZGU7XG4gIGlmIChub2RlKSB7XG4gICAgZGVsZXRlIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gICAgaW5zdC5faG9zdE5vZGUgPSBudWxsO1xuICB9XG59XG5cbi8qKlxuICogUG9wdWxhdGUgYF9ob3N0Tm9kZWAgb24gZWFjaCBjaGlsZCBvZiBgaW5zdGAsIGFzc3VtaW5nIHRoYXQgdGhlIGNoaWxkcmVuXG4gKiBtYXRjaCB1cCB3aXRoIHRoZSBET00gKGVsZW1lbnQpIGNoaWxkcmVuIG9mIGBub2RlYC5cbiAqXG4gKiBXZSBjYWNoZSBlbnRpcmUgbGV2ZWxzIGF0IG9uY2UgdG8gYXZvaWQgYW4gbl4yIHByb2JsZW0gd2hlcmUgd2UgYWNjZXNzIHRoZVxuICogY2hpbGRyZW4gb2YgYSBub2RlIHNlcXVlbnRpYWxseSBhbmQgaGF2ZSB0byB3YWxrIGZyb20gdGhlIHN0YXJ0IHRvIG91ciB0YXJnZXRcbiAqIG5vZGUgZXZlcnkgdGltZS5cbiAqXG4gKiBTaW5jZSB3ZSB1cGRhdGUgYF9yZW5kZXJlZENoaWxkcmVuYCBhbmQgdGhlIGFjdHVhbCBET00gYXQgKHNsaWdodGx5KVxuICogZGlmZmVyZW50IHRpbWVzLCB3ZSBjb3VsZCByYWNlIGhlcmUgYW5kIHNlZSBhIG5ld2VyIGBfcmVuZGVyZWRDaGlsZHJlbmAgdGhhblxuICogdGhlIERPTSBub2RlcyB3ZSBzZWUuIFRvIGF2b2lkIHRoaXMsIFJlYWN0TXVsdGlDaGlsZCBjYWxsc1xuICogYHByZXBhcmVUb01hbmFnZUNoaWxkcmVuYCBiZWZvcmUgd2UgY2hhbmdlIGBfcmVuZGVyZWRDaGlsZHJlbmAsIGF0IHdoaWNoXG4gKiB0aW1lIHRoZSBjb250YWluZXIncyBjaGlsZCBub2RlcyBhcmUgYWx3YXlzIGNhY2hlZCAodW50aWwgaXQgdW5tb3VudHMpLlxuICovXG5mdW5jdGlvbiBwcmVjYWNoZUNoaWxkTm9kZXMoaW5zdCwgbm9kZSkge1xuICBpZiAoaW5zdC5fZmxhZ3MgJiBGbGFncy5oYXNDYWNoZWRDaGlsZE5vZGVzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBjaGlsZHJlbiA9IGluc3QuX3JlbmRlcmVkQ2hpbGRyZW47XG4gIHZhciBjaGlsZE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIG91dGVyOiBmb3IgKHZhciBuYW1lIGluIGNoaWxkcmVuKSB7XG4gICAgaWYgKCFjaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBjaGlsZEluc3QgPSBjaGlsZHJlbltuYW1lXTtcbiAgICB2YXIgY2hpbGRJRCA9IGdldFJlbmRlcmVkSG9zdE9yVGV4dEZyb21Db21wb25lbnQoY2hpbGRJbnN0KS5fZG9tSUQ7XG4gICAgaWYgKGNoaWxkSUQgPT09IDApIHtcbiAgICAgIC8vIFdlJ3JlIGN1cnJlbnRseSB1bm1vdW50aW5nIHRoaXMgY2hpbGQgaW4gUmVhY3RNdWx0aUNoaWxkOyBza2lwIGl0LlxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIC8vIFdlIGFzc3VtZSB0aGUgY2hpbGQgbm9kZXMgYXJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBjaGlsZCBpbnN0YW5jZXMuXG4gICAgZm9yICg7IGNoaWxkTm9kZSAhPT0gbnVsbDsgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICBpZiAoc2hvdWxkUHJlY2FjaGVOb2RlKGNoaWxkTm9kZSwgY2hpbGRJRCkpIHtcbiAgICAgICAgcHJlY2FjaGVOb2RlKGNoaWxkSW5zdCwgY2hpbGROb2RlKTtcbiAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFdlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgRE9NIGNoaWxkcmVuIHdpdGhvdXQgZmluZGluZyBhbiBJRCBtYXRjaC5cbiAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVW5hYmxlIHRvIGZpbmQgZWxlbWVudCB3aXRoIElEICVzLicsIGNoaWxkSUQpIDogX3Byb2RJbnZhcmlhbnQoJzMyJywgY2hpbGRJRCkgOiB2b2lkIDA7XG4gIH1cbiAgaW5zdC5fZmxhZ3MgfD0gRmxhZ3MuaGFzQ2FjaGVkQ2hpbGROb2Rlcztcbn1cblxuLyoqXG4gKiBHaXZlbiBhIERPTSBub2RlLCByZXR1cm4gdGhlIGNsb3Nlc3QgUmVhY3RET01Db21wb25lbnQgb3JcbiAqIFJlYWN0RE9NVGV4dENvbXBvbmVudCBpbnN0YW5jZSBhbmNlc3Rvci5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICBpZiAobm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSkge1xuICAgIHJldHVybiBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICB9XG5cbiAgLy8gV2FsayB1cCB0aGUgdHJlZSB1bnRpbCB3ZSBmaW5kIGFuIGFuY2VzdG9yIHdob3NlIGluc3RhbmNlIHdlIGhhdmUgY2FjaGVkLlxuICB2YXIgcGFyZW50cyA9IFtdO1xuICB3aGlsZSAoIW5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0pIHtcbiAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVG9wIG9mIHRoZSB0cmVlLiBUaGlzIG5vZGUgbXVzdCBub3QgYmUgcGFydCBvZiBhIFJlYWN0IHRyZWUgKG9yIGlzXG4gICAgICAvLyB1bm1vdW50ZWQsIHBvdGVudGlhbGx5KS5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjbG9zZXN0O1xuICB2YXIgaW5zdDtcbiAgZm9yICg7IG5vZGUgJiYgKGluc3QgPSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldKTsgbm9kZSA9IHBhcmVudHMucG9wKCkpIHtcbiAgICBjbG9zZXN0ID0gaW5zdDtcbiAgICBpZiAocGFyZW50cy5sZW5ndGgpIHtcbiAgICAgIHByZWNhY2hlQ2hpbGROb2RlcyhpbnN0LCBub2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xvc2VzdDtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIERPTSBub2RlLCByZXR1cm4gdGhlIFJlYWN0RE9NQ29tcG9uZW50IG9yIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogaW5zdGFuY2UsIG9yIG51bGwgaWYgdGhlIG5vZGUgd2FzIG5vdCByZW5kZXJlZCBieSB0aGlzIFJlYWN0LlxuICovXG5mdW5jdGlvbiBnZXRJbnN0YW5jZUZyb21Ob2RlKG5vZGUpIHtcbiAgdmFyIGluc3QgPSBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShub2RlKTtcbiAgaWYgKGluc3QgIT0gbnVsbCAmJiBpbnN0Ll9ob3N0Tm9kZSA9PT0gbm9kZSkge1xuICAgIHJldHVybiBpbnN0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogR2l2ZW4gYSBSZWFjdERPTUNvbXBvbmVudCBvciBSZWFjdERPTVRleHRDb21wb25lbnQsIHJldHVybiB0aGUgY29ycmVzcG9uZGluZ1xuICogRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCkge1xuICAvLyBXaXRob3V0IHRoaXMgZmlyc3QgaW52YXJpYW50LCBwYXNzaW5nIGEgbm9uLURPTS1jb21wb25lbnQgdHJpZ2dlcnMgdGhlIG5leHRcbiAgLy8gaW52YXJpYW50IGZvciBhIG1pc3NpbmcgcGFyZW50LCB3aGljaCBpcyBzdXBlciBjb25mdXNpbmcuXG4gICEoaW5zdC5faG9zdE5vZGUgIT09IHVuZGVmaW5lZCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0Tm9kZUZyb21JbnN0YW5jZTogSW52YWxpZCBhcmd1bWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCczMycpIDogdm9pZCAwO1xuXG4gIGlmIChpbnN0Ll9ob3N0Tm9kZSkge1xuICAgIHJldHVybiBpbnN0Ll9ob3N0Tm9kZTtcbiAgfVxuXG4gIC8vIFdhbGsgdXAgdGhlIHRyZWUgdW50aWwgd2UgZmluZCBhbiBhbmNlc3RvciB3aG9zZSBET00gbm9kZSB3ZSBoYXZlIGNhY2hlZC5cbiAgdmFyIHBhcmVudHMgPSBbXTtcbiAgd2hpbGUgKCFpbnN0Ll9ob3N0Tm9kZSkge1xuICAgIHBhcmVudHMucHVzaChpbnN0KTtcbiAgICAhaW5zdC5faG9zdFBhcmVudCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdCBET00gdHJlZSByb290IHNob3VsZCBhbHdheXMgaGF2ZSBhIG5vZGUgcmVmZXJlbmNlLicpIDogX3Byb2RJbnZhcmlhbnQoJzM0JykgOiB2b2lkIDA7XG4gICAgaW5zdCA9IGluc3QuX2hvc3RQYXJlbnQ7XG4gIH1cblxuICAvLyBOb3cgcGFyZW50cyBjb250YWlucyBlYWNoIGFuY2VzdG9yIHRoYXQgZG9lcyAqbm90KiBoYXZlIGEgY2FjaGVkIG5hdGl2ZVxuICAvLyBub2RlLCBhbmQgYGluc3RgIGlzIHRoZSBkZWVwZXN0IGFuY2VzdG9yIHRoYXQgZG9lcy5cbiAgZm9yICg7IHBhcmVudHMubGVuZ3RoOyBpbnN0ID0gcGFyZW50cy5wb3AoKSkge1xuICAgIHByZWNhY2hlQ2hpbGROb2RlcyhpbnN0LCBpbnN0Ll9ob3N0Tm9kZSk7XG4gIH1cblxuICByZXR1cm4gaW5zdC5faG9zdE5vZGU7XG59XG5cbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSB7XG4gIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxcbiAgZ2V0SW5zdGFuY2VGcm9tTm9kZTogZ2V0SW5zdGFuY2VGcm9tTm9kZSxcbiAgZ2V0Tm9kZUZyb21JbnN0YW5jZTogZ2V0Tm9kZUZyb21JbnN0YW5jZSxcbiAgcHJlY2FjaGVDaGlsZE5vZGVzOiBwcmVjYWNoZUNoaWxkTm9kZXMsXG4gIHByZWNhY2hlTm9kZTogcHJlY2FjaGVOb2RlLFxuICB1bmNhY2hlTm9kZTogdW5jYWNoZU5vZGVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db21wb25lbnRUcmVlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NQ29tcG9uZW50VHJlZS5qc1xuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG5mdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9O1xufVxuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gYWNjZXB0cyBhbmQgZGlzY2FyZHMgaW5wdXRzOyBpdCBoYXMgbm8gc2lkZSBlZmZlY3RzLiBUaGlzIGlzXG4gKiBwcmltYXJpbHkgdXNlZnVsIGlkaW9tYXRpY2FsbHkgZm9yIG92ZXJyaWRhYmxlIGZ1bmN0aW9uIGVuZHBvaW50cyB3aGljaFxuICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS5cbiAqL1xudmFyIGVtcHR5RnVuY3Rpb24gPSBmdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge307XG5cbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMgPSBtYWtlRW1wdHlGdW5jdGlvbjtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbCA9IG1ha2VFbXB0eUZ1bmN0aW9uKG51bGwpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgcmV0dXJuIGFyZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZmJqcy9saWIvZW1wdHlGdW5jdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE2LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIFRydXN0IHRoZSBkZXZlbG9wZXIgdG8gb25seSB1c2UgUmVhY3RJbnN0cnVtZW50YXRpb24gd2l0aCBhIF9fREVWX18gY2hlY2tcblxudmFyIGRlYnVnVG9vbCA9IG51bGw7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdERlYnVnVG9vbCA9IHJlcXVpcmUoJy4vUmVhY3REZWJ1Z1Rvb2wnKTtcbiAgZGVidWdUb29sID0gUmVhY3REZWJ1Z1Rvb2w7XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBkZWJ1Z1Rvb2w6IGRlYnVnVG9vbCB9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW5zdHJ1bWVudGF0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gaXNOYXRpdmUoZm4pIHtcbiAgLy8gQmFzZWQgb24gaXNOYXRpdmUoKSBmcm9tIExvZGFzaFxuICB2YXIgZnVuY1RvU3RyaW5nID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICB2YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgKyBmdW5jVG9TdHJpbmdcbiAgLy8gVGFrZSBhbiBleGFtcGxlIG5hdGl2ZSBmdW5jdGlvbiBzb3VyY2UgZm9yIGNvbXBhcmlzb25cbiAgLmNhbGwoaGFzT3duUHJvcGVydHkpXG4gIC8vIFN0cmlwIHJlZ2V4IGNoYXJhY3RlcnMgc28gd2UgY2FuIHVzZSBpdCBmb3IgcmVnZXhcbiAgLnJlcGxhY2UoL1tcXFxcXiQuKis/KClbXFxde318XS9nLCAnXFxcXCQmJylcbiAgLy8gUmVtb3ZlIGhhc093blByb3BlcnR5IGZyb20gdGhlIHRlbXBsYXRlIHRvIG1ha2UgaXQgZ2VuZXJpY1xuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCcpO1xuICB0cnkge1xuICAgIHZhciBzb3VyY2UgPSBmdW5jVG9TdHJpbmcuY2FsbChmbik7XG4gICAgcmV0dXJuIHJlSXNOYXRpdmUudGVzdChzb3VyY2UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxudmFyIGNhblVzZUNvbGxlY3Rpb25zID1cbi8vIEFycmF5LmZyb21cbnR5cGVvZiBBcnJheS5mcm9tID09PSAnZnVuY3Rpb24nICYmXG4vLyBNYXBcbnR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgaXNOYXRpdmUoTWFwKSAmJlxuLy8gTWFwLnByb3RvdHlwZS5rZXlzXG5NYXAucHJvdG90eXBlICE9IG51bGwgJiYgdHlwZW9mIE1hcC5wcm90b3R5cGUua2V5cyA9PT0gJ2Z1bmN0aW9uJyAmJiBpc05hdGl2ZShNYXAucHJvdG90eXBlLmtleXMpICYmXG4vLyBTZXRcbnR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgJiYgaXNOYXRpdmUoU2V0KSAmJlxuLy8gU2V0LnByb3RvdHlwZS5rZXlzXG5TZXQucHJvdG90eXBlICE9IG51bGwgJiYgdHlwZW9mIFNldC5wcm90b3R5cGUua2V5cyA9PT0gJ2Z1bmN0aW9uJyAmJiBpc05hdGl2ZShTZXQucHJvdG90eXBlLmtleXMpO1xuXG52YXIgc2V0SXRlbTtcbnZhciBnZXRJdGVtO1xudmFyIHJlbW92ZUl0ZW07XG52YXIgZ2V0SXRlbUlEcztcbnZhciBhZGRSb290O1xudmFyIHJlbW92ZVJvb3Q7XG52YXIgZ2V0Um9vdElEcztcblxuaWYgKGNhblVzZUNvbGxlY3Rpb25zKSB7XG4gIHZhciBpdGVtTWFwID0gbmV3IE1hcCgpO1xuICB2YXIgcm9vdElEU2V0ID0gbmV3IFNldCgpO1xuXG4gIHNldEl0ZW0gPSBmdW5jdGlvbiAoaWQsIGl0ZW0pIHtcbiAgICBpdGVtTWFwLnNldChpZCwgaXRlbSk7XG4gIH07XG4gIGdldEl0ZW0gPSBmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gaXRlbU1hcC5nZXQoaWQpO1xuICB9O1xuICByZW1vdmVJdGVtID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgaXRlbU1hcFsnZGVsZXRlJ10oaWQpO1xuICB9O1xuICBnZXRJdGVtSURzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGl0ZW1NYXAua2V5cygpKTtcbiAgfTtcblxuICBhZGRSb290ID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgcm9vdElEU2V0LmFkZChpZCk7XG4gIH07XG4gIHJlbW92ZVJvb3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICByb290SURTZXRbJ2RlbGV0ZSddKGlkKTtcbiAgfTtcbiAgZ2V0Um9vdElEcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShyb290SURTZXQua2V5cygpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBpdGVtQnlLZXkgPSB7fTtcbiAgdmFyIHJvb3RCeUtleSA9IHt9O1xuXG4gIC8vIFVzZSBub24tbnVtZXJpYyBrZXlzIHRvIHByZXZlbnQgVjggcGVyZm9ybWFuY2UgaXNzdWVzOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MjMyXG4gIHZhciBnZXRLZXlGcm9tSUQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gJy4nICsgaWQ7XG4gIH07XG4gIHZhciBnZXRJREZyb21LZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGtleS5zdWJzdHIoMSksIDEwKTtcbiAgfTtcblxuICBzZXRJdGVtID0gZnVuY3Rpb24gKGlkLCBpdGVtKSB7XG4gICAgdmFyIGtleSA9IGdldEtleUZyb21JRChpZCk7XG4gICAgaXRlbUJ5S2V5W2tleV0gPSBpdGVtO1xuICB9O1xuICBnZXRJdGVtID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGtleSA9IGdldEtleUZyb21JRChpZCk7XG4gICAgcmV0dXJuIGl0ZW1CeUtleVtrZXldO1xuICB9O1xuICByZW1vdmVJdGVtID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGtleSA9IGdldEtleUZyb21JRChpZCk7XG4gICAgZGVsZXRlIGl0ZW1CeUtleVtrZXldO1xuICB9O1xuICBnZXRJdGVtSURzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhpdGVtQnlLZXkpLm1hcChnZXRJREZyb21LZXkpO1xuICB9O1xuXG4gIGFkZFJvb3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIga2V5ID0gZ2V0S2V5RnJvbUlEKGlkKTtcbiAgICByb290QnlLZXlba2V5XSA9IHRydWU7XG4gIH07XG4gIHJlbW92ZVJvb3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIga2V5ID0gZ2V0S2V5RnJvbUlEKGlkKTtcbiAgICBkZWxldGUgcm9vdEJ5S2V5W2tleV07XG4gIH07XG4gIGdldFJvb3RJRHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHJvb3RCeUtleSkubWFwKGdldElERnJvbUtleSk7XG4gIH07XG59XG5cbnZhciB1bm1vdW50ZWRJRHMgPSBbXTtcblxuZnVuY3Rpb24gcHVyZ2VEZWVwKGlkKSB7XG4gIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gIGlmIChpdGVtKSB7XG4gICAgdmFyIGNoaWxkSURzID0gaXRlbS5jaGlsZElEcztcblxuICAgIHJlbW92ZUl0ZW0oaWQpO1xuICAgIGNoaWxkSURzLmZvckVhY2gocHVyZ2VEZWVwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZXNjcmliZUNvbXBvbmVudEZyYW1lKG5hbWUsIHNvdXJjZSwgb3duZXJOYW1lKSB7XG4gIHJldHVybiAnXFxuICAgIGluICcgKyAobmFtZSB8fCAnVW5rbm93bicpICsgKHNvdXJjZSA/ICcgKGF0ICcgKyBzb3VyY2UuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLywgJycpICsgJzonICsgc291cmNlLmxpbmVOdW1iZXIgKyAnKScgOiBvd25lck5hbWUgPyAnIChjcmVhdGVkIGJ5ICcgKyBvd25lck5hbWUgKyAnKScgOiAnJyk7XG59XG5cbmZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKGVsZW1lbnQpIHtcbiAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiAnI2VtcHR5JztcbiAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGVsZW1lbnQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuICcjdGV4dCc7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZWxlbWVudC50eXBlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbGVtZW50LnR5cGUuZGlzcGxheU5hbWUgfHwgZWxlbWVudC50eXBlLm5hbWUgfHwgJ1Vua25vd24nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlSUQoaWQpIHtcbiAgdmFyIG5hbWUgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldERpc3BsYXlOYW1lKGlkKTtcbiAgdmFyIGVsZW1lbnQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoaWQpO1xuICB2YXIgb3duZXJJRCA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0T3duZXJJRChpZCk7XG4gIHZhciBvd25lck5hbWU7XG4gIGlmIChvd25lcklEKSB7XG4gICAgb3duZXJOYW1lID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXREaXNwbGF5TmFtZShvd25lcklEKTtcbiAgfVxuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhlbGVtZW50LCAnUmVhY3RDb21wb25lbnRUcmVlSG9vazogTWlzc2luZyBSZWFjdCBlbGVtZW50IGZvciBkZWJ1Z0lEICVzIHdoZW4gJyArICdidWlsZGluZyBzdGFjaycsIGlkKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGRlc2NyaWJlQ29tcG9uZW50RnJhbWUobmFtZSwgZWxlbWVudCAmJiBlbGVtZW50Ll9zb3VyY2UsIG93bmVyTmFtZSk7XG59XG5cbnZhciBSZWFjdENvbXBvbmVudFRyZWVIb29rID0ge1xuICBvblNldENoaWxkcmVuOiBmdW5jdGlvbiAoaWQsIG5leHRDaGlsZElEcykge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgIWl0ZW0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnSXRlbSBtdXN0IGhhdmUgYmVlbiBzZXQnKSA6IF9wcm9kSW52YXJpYW50KCcxNDQnKSA6IHZvaWQgMDtcbiAgICBpdGVtLmNoaWxkSURzID0gbmV4dENoaWxkSURzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXh0Q2hpbGRJRHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0Q2hpbGRJRCA9IG5leHRDaGlsZElEc1tpXTtcbiAgICAgIHZhciBuZXh0Q2hpbGQgPSBnZXRJdGVtKG5leHRDaGlsZElEKTtcbiAgICAgICFuZXh0Q2hpbGQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgaG9vayBldmVudHMgdG8gZmlyZSBmb3IgdGhlIGNoaWxkIGJlZm9yZSBpdHMgcGFyZW50IGluY2x1ZGVzIGl0IGluIG9uU2V0Q2hpbGRyZW4oKS4nKSA6IF9wcm9kSW52YXJpYW50KCcxNDAnKSA6IHZvaWQgMDtcbiAgICAgICEobmV4dENoaWxkLmNoaWxkSURzICE9IG51bGwgfHwgdHlwZW9mIG5leHRDaGlsZC5lbGVtZW50ICE9PSAnb2JqZWN0JyB8fCBuZXh0Q2hpbGQuZWxlbWVudCA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBvblNldENoaWxkcmVuKCkgdG8gZmlyZSBmb3IgYSBjb250YWluZXIgY2hpbGQgYmVmb3JlIGl0cyBwYXJlbnQgaW5jbHVkZXMgaXQgaW4gb25TZXRDaGlsZHJlbigpLicpIDogX3Byb2RJbnZhcmlhbnQoJzE0MScpIDogdm9pZCAwO1xuICAgICAgIW5leHRDaGlsZC5pc01vdW50ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgb25Nb3VudENvbXBvbmVudCgpIHRvIGZpcmUgZm9yIHRoZSBjaGlsZCBiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuJykgOiBfcHJvZEludmFyaWFudCgnNzEnKSA6IHZvaWQgMDtcbiAgICAgIGlmIChuZXh0Q2hpbGQucGFyZW50SUQgPT0gbnVsbCkge1xuICAgICAgICBuZXh0Q2hpbGQucGFyZW50SUQgPSBpZDtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5IGJ1dCBtb3VudGluZyBhIG5ldyByb290IGR1cmluZyBpblxuICAgICAgICAvLyBjb21wb25lbnRXaWxsTW91bnQgY3VycmVudGx5IGNhdXNlcyBub3QteWV0LW1vdW50ZWQgY29tcG9uZW50cyB0b1xuICAgICAgICAvLyBiZSBwdXJnZWQgZnJvbSBvdXIgdHJlZSBkYXRhIHNvIHRoZWlyIHBhcmVudCBpZCBpcyBtaXNzaW5nLlxuICAgICAgfVxuICAgICAgIShuZXh0Q2hpbGQucGFyZW50SUQgPT09IGlkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBvbkJlZm9yZU1vdW50Q29tcG9uZW50KCkgcGFyZW50IGFuZCBvblNldENoaWxkcmVuKCkgdG8gYmUgY29uc2lzdGVudCAoJXMgaGFzIHBhcmVudHMgJXMgYW5kICVzKS4nLCBuZXh0Q2hpbGRJRCwgbmV4dENoaWxkLnBhcmVudElELCBpZCkgOiBfcHJvZEludmFyaWFudCgnMTQyJywgbmV4dENoaWxkSUQsIG5leHRDaGlsZC5wYXJlbnRJRCwgaWQpIDogdm9pZCAwO1xuICAgIH1cbiAgfSxcbiAgb25CZWZvcmVNb3VudENvbXBvbmVudDogZnVuY3Rpb24gKGlkLCBlbGVtZW50LCBwYXJlbnRJRCkge1xuICAgIHZhciBpdGVtID0ge1xuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIHBhcmVudElEOiBwYXJlbnRJRCxcbiAgICAgIHRleHQ6IG51bGwsXG4gICAgICBjaGlsZElEczogW10sXG4gICAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgICAgdXBkYXRlQ291bnQ6IDBcbiAgICB9O1xuICAgIHNldEl0ZW0oaWQsIGl0ZW0pO1xuICB9LFxuICBvbkJlZm9yZVVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24gKGlkLCBlbGVtZW50KSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICBpZiAoIWl0ZW0gfHwgIWl0ZW0uaXNNb3VudGVkKSB7XG4gICAgICAvLyBXZSBtYXkgZW5kIHVwIGhlcmUgYXMgYSByZXN1bHQgb2Ygc2V0U3RhdGUoKSBpbiBjb21wb25lbnRXaWxsVW5tb3VudCgpLlxuICAgICAgLy8gSW4gdGhpcyBjYXNlLCBpZ25vcmUgdGhlIGVsZW1lbnQuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGl0ZW0uZWxlbWVudCA9IGVsZW1lbnQ7XG4gIH0sXG4gIG9uTW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgIWl0ZW0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnSXRlbSBtdXN0IGhhdmUgYmVlbiBzZXQnKSA6IF9wcm9kSW52YXJpYW50KCcxNDQnKSA6IHZvaWQgMDtcbiAgICBpdGVtLmlzTW91bnRlZCA9IHRydWU7XG4gICAgdmFyIGlzUm9vdCA9IGl0ZW0ucGFyZW50SUQgPT09IDA7XG4gICAgaWYgKGlzUm9vdCkge1xuICAgICAgYWRkUm9vdChpZCk7XG4gICAgfVxuICB9LFxuICBvblVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICBpZiAoIWl0ZW0gfHwgIWl0ZW0uaXNNb3VudGVkKSB7XG4gICAgICAvLyBXZSBtYXkgZW5kIHVwIGhlcmUgYXMgYSByZXN1bHQgb2Ygc2V0U3RhdGUoKSBpbiBjb21wb25lbnRXaWxsVW5tb3VudCgpLlxuICAgICAgLy8gSW4gdGhpcyBjYXNlLCBpZ25vcmUgdGhlIGVsZW1lbnQuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGl0ZW0udXBkYXRlQ291bnQrKztcbiAgfSxcbiAgb25Vbm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGlmIGl0IGV4aXN0cy5cbiAgICAgIC8vIGBpdGVtYCBtaWdodCBub3QgZXhpc3QgaWYgaXQgaXMgaW5zaWRlIGFuIGVycm9yIGJvdW5kYXJ5LCBhbmQgYSBzaWJsaW5nXG4gICAgICAvLyBlcnJvciBib3VuZGFyeSBjaGlsZCB0aHJldyB3aGlsZSBtb3VudGluZy4gVGhlbiB0aGlzIGluc3RhbmNlIG5ldmVyXG4gICAgICAvLyBnb3QgYSBjaGFuY2UgdG8gbW91bnQsIGJ1dCBpdCBzdGlsbCBnZXRzIGFuIHVubW91bnRpbmcgZXZlbnQgZHVyaW5nXG4gICAgICAvLyB0aGUgZXJyb3IgYm91bmRhcnkgY2xlYW51cC5cbiAgICAgIGl0ZW0uaXNNb3VudGVkID0gZmFsc2U7XG4gICAgICB2YXIgaXNSb290ID0gaXRlbS5wYXJlbnRJRCA9PT0gMDtcbiAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgcmVtb3ZlUm9vdChpZCk7XG4gICAgICB9XG4gICAgfVxuICAgIHVubW91bnRlZElEcy5wdXNoKGlkKTtcbiAgfSxcbiAgcHVyZ2VVbm1vdW50ZWRDb21wb25lbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKFJlYWN0Q29tcG9uZW50VHJlZUhvb2suX3ByZXZlbnRQdXJnaW5nKSB7XG4gICAgICAvLyBTaG91bGQgb25seSBiZSB1c2VkIGZvciB0ZXN0aW5nLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5tb3VudGVkSURzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWQgPSB1bm1vdW50ZWRJRHNbaV07XG4gICAgICBwdXJnZURlZXAoaWQpO1xuICAgIH1cbiAgICB1bm1vdW50ZWRJRHMubGVuZ3RoID0gMDtcbiAgfSxcbiAgaXNNb3VudGVkOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgIHJldHVybiBpdGVtID8gaXRlbS5pc01vdW50ZWQgOiBmYWxzZTtcbiAgfSxcbiAgZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW06IGZ1bmN0aW9uICh0b3BFbGVtZW50KSB7XG4gICAgdmFyIGluZm8gPSAnJztcbiAgICBpZiAodG9wRWxlbWVudCkge1xuICAgICAgdmFyIG5hbWUgPSBnZXREaXNwbGF5TmFtZSh0b3BFbGVtZW50KTtcbiAgICAgIHZhciBvd25lciA9IHRvcEVsZW1lbnQuX293bmVyO1xuICAgICAgaW5mbyArPSBkZXNjcmliZUNvbXBvbmVudEZyYW1lKG5hbWUsIHRvcEVsZW1lbnQuX3NvdXJjZSwgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpKTtcbiAgICB9XG5cbiAgICB2YXIgY3VycmVudE93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICB2YXIgaWQgPSBjdXJyZW50T3duZXIgJiYgY3VycmVudE93bmVyLl9kZWJ1Z0lEO1xuXG4gICAgaW5mbyArPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFN0YWNrQWRkZW5kdW1CeUlEKGlkKTtcbiAgICByZXR1cm4gaW5mbztcbiAgfSxcbiAgZ2V0U3RhY2tBZGRlbmR1bUJ5SUQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpbmZvID0gJyc7XG4gICAgd2hpbGUgKGlkKSB7XG4gICAgICBpbmZvICs9IGRlc2NyaWJlSUQoaWQpO1xuICAgICAgaWQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFBhcmVudElEKGlkKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG4gIH0sXG4gIGdldENoaWxkSURzOiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IGdldEl0ZW0oaWQpO1xuICAgIHJldHVybiBpdGVtID8gaXRlbS5jaGlsZElEcyA6IFtdO1xuICB9LFxuICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEVsZW1lbnQoaWQpO1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBnZXREaXNwbGF5TmFtZShlbGVtZW50KTtcbiAgfSxcbiAgZ2V0RWxlbWVudDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICByZXR1cm4gaXRlbSA/IGl0ZW0uZWxlbWVudCA6IG51bGw7XG4gIH0sXG4gIGdldE93bmVySUQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBlbGVtZW50ID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRFbGVtZW50KGlkKTtcbiAgICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQuX293bmVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQuX293bmVyLl9kZWJ1Z0lEO1xuICB9LFxuICBnZXRQYXJlbnRJRDogZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGl0ZW0gPSBnZXRJdGVtKGlkKTtcbiAgICByZXR1cm4gaXRlbSA/IGl0ZW0ucGFyZW50SUQgOiBudWxsO1xuICB9LFxuICBnZXRTb3VyY2U6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgdmFyIGVsZW1lbnQgPSBpdGVtID8gaXRlbS5lbGVtZW50IDogbnVsbDtcbiAgICB2YXIgc291cmNlID0gZWxlbWVudCAhPSBudWxsID8gZWxlbWVudC5fc291cmNlIDogbnVsbDtcbiAgICByZXR1cm4gc291cmNlO1xuICB9LFxuICBnZXRUZXh0OiBmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RWxlbWVudChpZCk7XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiAnJyArIGVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcbiAgZ2V0VXBkYXRlQ291bnQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpdGVtID0gZ2V0SXRlbShpZCk7XG4gICAgcmV0dXJuIGl0ZW0gPyBpdGVtLnVwZGF0ZUNvdW50IDogMDtcbiAgfSxcblxuXG4gIGdldFJvb3RJRHM6IGdldFJvb3RJRHMsXG4gIGdldFJlZ2lzdGVyZWRJRHM6IGdldEl0ZW1JRHNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnRUcmVlSG9vaztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2suanNcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKSxcbiAgICBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgQ2FsbGJhY2tRdWV1ZSA9IHJlcXVpcmUoJy4vQ2FsbGJhY2tRdWV1ZScpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFJlYWN0RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9SZWFjdEZlYXR1cmVGbGFncycpO1xudmFyIFJlYWN0UmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RSZWNvbmNpbGVyJyk7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1RyYW5zYWN0aW9uJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIGRpcnR5Q29tcG9uZW50cyA9IFtdO1xudmFyIHVwZGF0ZUJhdGNoTnVtYmVyID0gMDtcbnZhciBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG52YXIgYXNhcEVucXVldWVkID0gZmFsc2U7XG5cbnZhciBiYXRjaGluZ1N0cmF0ZWd5ID0gbnVsbDtcblxuZnVuY3Rpb24gZW5zdXJlSW5qZWN0ZWQoKSB7XG4gICEoUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gJiYgYmF0Y2hpbmdTdHJhdGVneSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IGluamVjdCBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcyBhbmQgYmF0Y2hpbmcgc3RyYXRlZ3knKSA6IF9wcm9kSW52YXJpYW50KCcxMjMnKSA6IHZvaWQgMDtcbn1cblxudmFyIE5FU1RFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCAhPT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgLy8gQWRkaXRpb25hbCB1cGRhdGVzIHdlcmUgZW5xdWV1ZWQgYnkgY29tcG9uZW50RGlkVXBkYXRlIGhhbmRsZXJzIG9yXG4gICAgICAvLyBzaW1pbGFyOyBiZWZvcmUgb3VyIG93biBVUERBVEVfUVVFVUVJTkcgd3JhcHBlciBjbG9zZXMsIHdlIHdhbnQgdG8gcnVuXG4gICAgICAvLyB0aGVzZSBuZXcgdXBkYXRlcyBzbyB0aGF0IGlmIEEncyBjb21wb25lbnREaWRVcGRhdGUgY2FsbHMgc2V0U3RhdGUgb25cbiAgICAgIC8vIEIsIEIgd2lsbCB1cGRhdGUgYmVmb3JlIHRoZSBjYWxsYmFjayBBJ3MgdXBkYXRlciBwcm92aWRlZCB3aGVuIGNhbGxpbmdcbiAgICAgIC8vIHNldFN0YXRlLlxuICAgICAgZGlydHlDb21wb25lbnRzLnNwbGljZSgwLCB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCk7XG4gICAgICBmbHVzaEJhdGNoZWRVcGRhdGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpcnR5Q29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgIH1cbiAgfVxufTtcblxudmFyIFVQREFURV9RVUVVRUlORyA9IHtcbiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5yZXNldCgpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcblxudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW05FU1RFRF9VUERBVEVTLCBVUERBVEVfUVVFVUVJTkddO1xuXG5mdW5jdGlvbiBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgdGhpcy5jYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZChcbiAgLyogdXNlQ3JlYXRlRWxlbWVudCAqL3RydWUpO1xufVxuXG5fYXNzaWduKFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbiwge1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuXG4gIGRlc3RydWN0b3I6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCA9IG51bGw7XG4gICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMuY2FsbGJhY2tRdWV1ZSk7XG4gICAgdGhpcy5jYWxsYmFja1F1ZXVlID0gbnVsbDtcbiAgICBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5yZWxlYXNlKHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuICAgIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24gPSBudWxsO1xuICB9LFxuXG4gIHBlcmZvcm06IGZ1bmN0aW9uIChtZXRob2QsIHNjb3BlLCBhKSB7XG4gICAgLy8gRXNzZW50aWFsbHkgY2FsbHMgYHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24ucGVyZm9ybShtZXRob2QsIHNjb3BlLCBhKWBcbiAgICAvLyB3aXRoIHRoaXMgdHJhbnNhY3Rpb24ncyB3cmFwcGVycyBhcm91bmQgaXQuXG4gICAgcmV0dXJuIFRyYW5zYWN0aW9uLnBlcmZvcm0uY2FsbCh0aGlzLCB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLnBlcmZvcm0sIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24sIG1ldGhvZCwgc2NvcGUsIGEpO1xuICB9XG59KTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24pO1xuXG5mdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyhjYWxsYmFjaywgYSwgYiwgYywgZCwgZSkge1xuICBlbnN1cmVJbmplY3RlZCgpO1xuICByZXR1cm4gYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhjYWxsYmFjaywgYSwgYiwgYywgZCwgZSk7XG59XG5cbi8qKlxuICogQXJyYXkgY29tcGFyYXRvciBmb3IgUmVhY3RDb21wb25lbnRzIGJ5IG1vdW50IG9yZGVyaW5nLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGMxIGZpcnN0IGNvbXBvbmVudCB5b3UncmUgY29tcGFyaW5nXG4gKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjMiBzZWNvbmQgY29tcG9uZW50IHlvdSdyZSBjb21wYXJpbmdcbiAqIEByZXR1cm4ge251bWJlcn0gUmV0dXJuIHZhbHVlIHVzYWJsZSBieSBBcnJheS5wcm90b3R5cGUuc29ydCgpLlxuICovXG5mdW5jdGlvbiBtb3VudE9yZGVyQ29tcGFyYXRvcihjMSwgYzIpIHtcbiAgcmV0dXJuIGMxLl9tb3VudE9yZGVyIC0gYzIuX21vdW50T3JkZXI7XG59XG5cbmZ1bmN0aW9uIHJ1bkJhdGNoZWRVcGRhdGVzKHRyYW5zYWN0aW9uKSB7XG4gIHZhciBsZW4gPSB0cmFuc2FjdGlvbi5kaXJ0eUNvbXBvbmVudHNMZW5ndGg7XG4gICEobGVuID09PSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBmbHVzaCB0cmFuc2FjdGlvblxcJ3Mgc3RvcmVkIGRpcnR5LWNvbXBvbmVudHMgbGVuZ3RoICglcykgdG8gbWF0Y2ggZGlydHktY29tcG9uZW50cyBhcnJheSBsZW5ndGggKCVzKS4nLCBsZW4sIGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIDogX3Byb2RJbnZhcmlhbnQoJzEyNCcsIGxlbiwgZGlydHlDb21wb25lbnRzLmxlbmd0aCkgOiB2b2lkIDA7XG5cbiAgLy8gU2luY2UgcmVjb25jaWxpbmcgYSBjb21wb25lbnQgaGlnaGVyIGluIHRoZSBvd25lciBoaWVyYXJjaHkgdXN1YWxseSAobm90XG4gIC8vIGFsd2F5cyAtLSBzZWUgc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkpIHdpbGwgcmVjb25jaWxlIGNoaWxkcmVuLCByZWNvbmNpbGVcbiAgLy8gdGhlbSBiZWZvcmUgdGhlaXIgY2hpbGRyZW4gYnkgc29ydGluZyB0aGUgYXJyYXkuXG4gIGRpcnR5Q29tcG9uZW50cy5zb3J0KG1vdW50T3JkZXJDb21wYXJhdG9yKTtcblxuICAvLyBBbnkgdXBkYXRlcyBlbnF1ZXVlZCB3aGlsZSByZWNvbmNpbGluZyBtdXN0IGJlIHBlcmZvcm1lZCBhZnRlciB0aGlzIGVudGlyZVxuICAvLyBiYXRjaC4gT3RoZXJ3aXNlLCBpZiBkaXJ0eUNvbXBvbmVudHMgaXMgW0EsIEJdIHdoZXJlIEEgaGFzIGNoaWxkcmVuIEIgYW5kXG4gIC8vIEMsIEIgY291bGQgdXBkYXRlIHR3aWNlIGluIGEgc2luZ2xlIGJhdGNoIGlmIEMncyByZW5kZXIgZW5xdWV1ZXMgYW4gdXBkYXRlXG4gIC8vIHRvIEIgKHNpbmNlIEIgd291bGQgaGF2ZSBhbHJlYWR5IHVwZGF0ZWQsIHdlIHNob3VsZCBza2lwIGl0LCBhbmQgdGhlIG9ubHlcbiAgLy8gd2F5IHdlIGNhbiBrbm93IHRvIGRvIHNvIGlzIGJ5IGNoZWNraW5nIHRoZSBiYXRjaCBjb3VudGVyKS5cbiAgdXBkYXRlQmF0Y2hOdW1iZXIrKztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgLy8gSWYgYSBjb21wb25lbnQgaXMgdW5tb3VudGVkIGJlZm9yZSBwZW5kaW5nIGNoYW5nZXMgYXBwbHksIGl0IHdpbGwgc3RpbGxcbiAgICAvLyBiZSBoZXJlLCBidXQgd2UgYXNzdW1lIHRoYXQgaXQgaGFzIGNsZWFyZWQgaXRzIF9wZW5kaW5nQ2FsbGJhY2tzIGFuZFxuICAgIC8vIHRoYXQgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IGlzIGEgbm9vcC5cbiAgICB2YXIgY29tcG9uZW50ID0gZGlydHlDb21wb25lbnRzW2ldO1xuXG4gICAgLy8gSWYgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5IGhhcHBlbnMgdG8gZW5xdWV1ZSBhbnkgbmV3IHVwZGF0ZXMsIHdlXG4gICAgLy8gc2hvdWxkbid0IGV4ZWN1dGUgdGhlIGNhbGxiYWNrcyB1bnRpbCB0aGUgbmV4dCByZW5kZXIgaGFwcGVucywgc29cbiAgICAvLyBzdGFzaCB0aGUgY2FsbGJhY2tzIGZpcnN0XG4gICAgdmFyIGNhbGxiYWNrcyA9IGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcztcbiAgICBjb21wb25lbnQuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuXG4gICAgdmFyIG1hcmtlck5hbWU7XG4gICAgaWYgKFJlYWN0RmVhdHVyZUZsYWdzLmxvZ1RvcExldmVsUmVuZGVycykge1xuICAgICAgdmFyIG5hbWVkQ29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgICAgLy8gRHVjayB0eXBlIFRvcExldmVsV3JhcHBlci4gVGhpcyBpcyBwcm9iYWJseSBhbHdheXMgdHJ1ZS5cbiAgICAgIGlmIChjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50LnR5cGUuaXNSZWFjdFRvcExldmVsV3JhcHBlcikge1xuICAgICAgICBuYW1lZENvbXBvbmVudCA9IGNvbXBvbmVudC5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgICB9XG4gICAgICBtYXJrZXJOYW1lID0gJ1JlYWN0IHVwZGF0ZTogJyArIG5hbWVkQ29tcG9uZW50LmdldE5hbWUoKTtcbiAgICAgIGNvbnNvbGUudGltZShtYXJrZXJOYW1lKTtcbiAgICB9XG5cbiAgICBSZWFjdFJlY29uY2lsZXIucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KGNvbXBvbmVudCwgdHJhbnNhY3Rpb24ucmVjb25jaWxlVHJhbnNhY3Rpb24sIHVwZGF0ZUJhdGNoTnVtYmVyKTtcblxuICAgIGlmIChtYXJrZXJOYW1lKSB7XG4gICAgICBjb25zb2xlLnRpbWVFbmQobWFya2VyTmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uY2FsbGJhY2tRdWV1ZS5lbnF1ZXVlKGNhbGxiYWNrc1tqXSwgY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZmx1c2hCYXRjaGVkVXBkYXRlcyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbidzIHdyYXBwZXJzIHdpbGwgY2xlYXIgdGhlIGRpcnR5Q29tcG9uZW50c1xuICAvLyBhcnJheSBhbmQgcGVyZm9ybSBhbnkgdXBkYXRlcyBlbnF1ZXVlZCBieSBtb3VudC1yZWFkeSBoYW5kbGVycyAoaS5lLixcbiAgLy8gY29tcG9uZW50RGlkVXBkYXRlKSBidXQgd2UgbmVlZCB0byBjaGVjayBoZXJlIHRvbyBpbiBvcmRlciB0byBjYXRjaFxuICAvLyB1cGRhdGVzIGVucXVldWVkIGJ5IHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgYXNhcCBjYWxscy5cbiAgd2hpbGUgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGggfHwgYXNhcEVucXVldWVkKSB7XG4gICAgaWYgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCk7XG4gICAgICB0cmFuc2FjdGlvbi5wZXJmb3JtKHJ1bkJhdGNoZWRVcGRhdGVzLCBudWxsLCB0cmFuc2FjdGlvbik7XG4gICAgICBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgIH1cblxuICAgIGlmIChhc2FwRW5xdWV1ZWQpIHtcbiAgICAgIGFzYXBFbnF1ZXVlZCA9IGZhbHNlO1xuICAgICAgdmFyIHF1ZXVlID0gYXNhcENhbGxiYWNrUXVldWU7XG4gICAgICBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG4gICAgICBxdWV1ZS5ub3RpZnlBbGwoKTtcbiAgICAgIENhbGxiYWNrUXVldWUucmVsZWFzZShxdWV1ZSk7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIE1hcmsgYSBjb21wb25lbnQgYXMgbmVlZGluZyBhIHJlcmVuZGVyLCBhZGRpbmcgYW4gb3B0aW9uYWwgY2FsbGJhY2sgdG8gYVxuICogbGlzdCBvZiBmdW5jdGlvbnMgd2hpY2ggd2lsbCBiZSBleGVjdXRlZCBvbmNlIHRoZSByZXJlbmRlciBvY2N1cnMuXG4gKi9cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoY29tcG9uZW50KSB7XG4gIGVuc3VyZUluamVjdGVkKCk7XG5cbiAgLy8gVmFyaW91cyBwYXJ0cyBvZiBvdXIgY29kZSAoc3VjaCBhcyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCdzXG4gIC8vIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQpIGFzc3VtZSB0aGF0IGNhbGxzIHRvIHJlbmRlciBhcmVuJ3QgbmVzdGVkO1xuICAvLyB2ZXJpZnkgdGhhdCB0aGF0J3MgdGhlIGNhc2UuIChUaGlzIGlzIGNhbGxlZCBieSBlYWNoIHRvcC1sZXZlbCB1cGRhdGVcbiAgLy8gZnVuY3Rpb24sIGxpa2Ugc2V0U3RhdGUsIGZvcmNlVXBkYXRlLCBldGMuOyBjcmVhdGlvbiBhbmRcbiAgLy8gZGVzdHJ1Y3Rpb24gb2YgdG9wLWxldmVsIGNvbXBvbmVudHMgaXMgZ3VhcmRlZCBpbiBSZWFjdE1vdW50LilcblxuICBpZiAoIWJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMpIHtcbiAgICBiYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzKGVucXVldWVVcGRhdGUsIGNvbXBvbmVudCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZGlydHlDb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgaWYgKGNvbXBvbmVudC5fdXBkYXRlQmF0Y2hOdW1iZXIgPT0gbnVsbCkge1xuICAgIGNvbXBvbmVudC5fdXBkYXRlQmF0Y2hOdW1iZXIgPSB1cGRhdGVCYXRjaE51bWJlciArIDE7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdG8gYmUgcnVuIGF0IHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgYmF0Y2hpbmcgY3ljbGUuIFRocm93c1xuICogaWYgbm8gdXBkYXRlcyBhcmUgY3VycmVudGx5IGJlaW5nIHBlcmZvcm1lZC5cbiAqL1xuZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgY29udGV4dCkge1xuICAhYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXMuYXNhcDogQ2FuXFwndCBlbnF1ZXVlIGFuIGFzYXAgY2FsbGJhY2sgaW4gYSBjb250ZXh0IHdoZXJldXBkYXRlcyBhcmUgbm90IGJlaW5nIGJhdGNoZWQuJykgOiBfcHJvZEludmFyaWFudCgnMTI1JykgOiB2b2lkIDA7XG4gIGFzYXBDYWxsYmFja1F1ZXVlLmVucXVldWUoY2FsbGJhY2ssIGNvbnRleHQpO1xuICBhc2FwRW5xdWV1ZWQgPSB0cnVlO1xufVxuXG52YXIgUmVhY3RVcGRhdGVzSW5qZWN0aW9uID0ge1xuICBpbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogZnVuY3Rpb24gKFJlY29uY2lsZVRyYW5zYWN0aW9uKSB7XG4gICAgIVJlY29uY2lsZVRyYW5zYWN0aW9uID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzJykgOiBfcHJvZEludmFyaWFudCgnMTI2JykgOiB2b2lkIDA7XG4gICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSBSZWNvbmNpbGVUcmFuc2FjdGlvbjtcbiAgfSxcblxuICBpbmplY3RCYXRjaGluZ1N0cmF0ZWd5OiBmdW5jdGlvbiAoX2JhdGNoaW5nU3RyYXRlZ3kpIHtcbiAgICAhX2JhdGNoaW5nU3RyYXRlZ3kgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSBiYXRjaGluZyBzdHJhdGVneScpIDogX3Byb2RJbnZhcmlhbnQoJzEyNycpIDogdm9pZCAwO1xuICAgICEodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoZWRVcGRhdGVzKCkgZnVuY3Rpb24nKSA6IF9wcm9kSW52YXJpYW50KCcxMjgnKSA6IHZvaWQgMDtcbiAgICAhKHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9PT0gJ2Jvb2xlYW4nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhbiBpc0JhdGNoaW5nVXBkYXRlcyBib29sZWFuIGF0dHJpYnV0ZScpIDogX3Byb2RJbnZhcmlhbnQoJzEyOScpIDogdm9pZCAwO1xuICAgIGJhdGNoaW5nU3RyYXRlZ3kgPSBfYmF0Y2hpbmdTdHJhdGVneTtcbiAgfVxufTtcblxudmFyIFJlYWN0VXBkYXRlcyA9IHtcbiAgLyoqXG4gICAqIFJlYWN0IHJlZmVyZW5jZXMgYFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb25gIHVzaW5nIHRoaXMgcHJvcGVydHkgaW4gb3JkZXJcbiAgICogdG8gYWxsb3cgZGVwZW5kZW5jeSBpbmplY3Rpb24uXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogbnVsbCxcblxuICBiYXRjaGVkVXBkYXRlczogYmF0Y2hlZFVwZGF0ZXMsXG4gIGVucXVldWVVcGRhdGU6IGVucXVldWVVcGRhdGUsXG4gIGZsdXNoQmF0Y2hlZFVwZGF0ZXM6IGZsdXNoQmF0Y2hlZFVwZGF0ZXMsXG4gIGluamVjdGlvbjogUmVhY3RVcGRhdGVzSW5qZWN0aW9uLFxuICBhc2FwOiBhc2FwXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0VXBkYXRlcztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdFVwZGF0ZXMuanNcbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBkaWRXYXJuRm9yQWRkZWROZXdQcm9wZXJ0eSA9IGZhbHNlO1xudmFyIGlzUHJveHlTdXBwb3J0ZWQgPSB0eXBlb2YgUHJveHkgPT09ICdmdW5jdGlvbic7XG5cbnZhciBzaG91bGRCZVJlbGVhc2VkUHJvcGVydGllcyA9IFsnZGlzcGF0Y2hDb25maWcnLCAnX3RhcmdldEluc3QnLCAnbmF0aXZlRXZlbnQnLCAnaXNEZWZhdWx0UHJldmVudGVkJywgJ2lzUHJvcGFnYXRpb25TdG9wcGVkJywgJ19kaXNwYXRjaExpc3RlbmVycycsICdfZGlzcGF0Y2hJbnN0YW5jZXMnXTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIEV2ZW50SW50ZXJmYWNlID0ge1xuICB0eXBlOiBudWxsLFxuICB0YXJnZXQ6IG51bGwsXG4gIC8vIGN1cnJlbnRUYXJnZXQgaXMgc2V0IHdoZW4gZGlzcGF0Y2hpbmc7IG5vIHVzZSBpbiBjb3B5aW5nIGl0IGhlcmVcbiAgY3VycmVudFRhcmdldDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwsXG4gIGV2ZW50UGhhc2U6IG51bGwsXG4gIGJ1YmJsZXM6IG51bGwsXG4gIGNhbmNlbGFibGU6IG51bGwsXG4gIHRpbWVTdGFtcDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuICB9LFxuICBkZWZhdWx0UHJldmVudGVkOiBudWxsLFxuICBpc1RydXN0ZWQ6IG51bGxcbn07XG5cbi8qKlxuICogU3ludGhldGljIGV2ZW50cyBhcmUgZGlzcGF0Y2hlZCBieSBldmVudCBwbHVnaW5zLCB0eXBpY2FsbHkgaW4gcmVzcG9uc2UgdG8gYVxuICogdG9wLWxldmVsIGV2ZW50IGRlbGVnYXRpb24gaGFuZGxlci5cbiAqXG4gKiBUaGVzZSBzeXN0ZW1zIHNob3VsZCBnZW5lcmFsbHkgdXNlIHBvb2xpbmcgdG8gcmVkdWNlIHRoZSBmcmVxdWVuY3kgb2YgZ2FyYmFnZVxuICogY29sbGVjdGlvbi4gVGhlIHN5c3RlbSBzaG91bGQgY2hlY2sgYGlzUGVyc2lzdGVudGAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlXG4gKiBldmVudCBzaG91bGQgYmUgcmVsZWFzZWQgaW50byB0aGUgcG9vbCBhZnRlciBiZWluZyBkaXNwYXRjaGVkLiBVc2VycyB0aGF0XG4gKiBuZWVkIGEgcGVyc2lzdGVkIGV2ZW50IHNob3VsZCBpbnZva2UgYHBlcnNpc3RgLlxuICpcbiAqIFN5bnRoZXRpYyBldmVudHMgKGFuZCBzdWJjbGFzc2VzKSBpbXBsZW1lbnQgdGhlIERPTSBMZXZlbCAzIEV2ZW50cyBBUEkgYnlcbiAqIG5vcm1hbGl6aW5nIGJyb3dzZXIgcXVpcmtzLiBTdWJjbGFzc2VzIGRvIG5vdCBuZWNlc3NhcmlseSBoYXZlIHRvIGltcGxlbWVudCBhXG4gKiBET00gaW50ZXJmYWNlOyBjdXN0b20gYXBwbGljYXRpb24tc3BlY2lmaWMgZXZlbnRzIGNhbiBhbHNvIHN1YmNsYXNzIHRoaXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHsqfSB0YXJnZXRJbnN0IE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gbmF0aXZlRXZlbnRUYXJnZXQgVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0V2ZW50KGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyB0aGVzZSBoYXZlIGEgZ2V0dGVyL3NldHRlciBmb3Igd2FybmluZ3NcbiAgICBkZWxldGUgdGhpcy5uYXRpdmVFdmVudDtcbiAgICBkZWxldGUgdGhpcy5wcmV2ZW50RGVmYXVsdDtcbiAgICBkZWxldGUgdGhpcy5zdG9wUHJvcGFnYXRpb247XG4gIH1cblxuICB0aGlzLmRpc3BhdGNoQ29uZmlnID0gZGlzcGF0Y2hDb25maWc7XG4gIHRoaXMuX3RhcmdldEluc3QgPSB0YXJnZXRJbnN0O1xuICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG5cbiAgdmFyIEludGVyZmFjZSA9IHRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO1xuICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcbiAgICBpZiAoIUludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZGVsZXRlIHRoaXNbcHJvcE5hbWVdOyAvLyB0aGlzIGhhcyBhIGdldHRlci9zZXR0ZXIgZm9yIHdhcm5pbmdzXG4gICAgfVxuICAgIHZhciBub3JtYWxpemUgPSBJbnRlcmZhY2VbcHJvcE5hbWVdO1xuICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgIHRoaXNbcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3BOYW1lID09PSAndGFyZ2V0Jykge1xuICAgICAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpc1twcm9wTmFtZV0gPSBuYXRpdmVFdmVudFtwcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkICE9IG51bGwgPyBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkIDogbmF0aXZlRXZlbnQucmV0dXJuVmFsdWUgPT09IGZhbHNlO1xuICBpZiAoZGVmYXVsdFByZXZlbnRlZCkge1xuICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG4gIH1cbiAgdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbl9hc3NpZ24oU3ludGhldGljRXZlbnQucHJvdG90eXBlLCB7XG5cbiAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgaWYgKCFldmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBldmVudC5yZXR1cm5WYWx1ZSAhPT0gJ3Vua25vd24nKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHZhbGlkLXR5cGVvZlxuICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgIGlmICghZXZlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBldmVudC5jYW5jZWxCdWJibGUgIT09ICd1bmtub3duJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSB2YWxpZC10eXBlb2ZcbiAgICAgIC8vIFRoZSBDaGFuZ2VFdmVudFBsdWdpbiByZWdpc3RlcnMgYSBcInByb3BlcnR5Y2hhbmdlXCIgZXZlbnQgZm9yXG4gICAgICAvLyBJRS4gVGhpcyBldmVudCBkb2VzIG5vdCBzdXBwb3J0IGJ1YmJsaW5nIG9yIGNhbmNlbGxpbmcsIGFuZFxuICAgICAgLy8gYW55IHJlZmVyZW5jZXMgdG8gY2FuY2VsQnViYmxlIHRocm93IFwiTWVtYmVyIG5vdCBmb3VuZFwiLiAgQVxuICAgICAgLy8gdHlwZW9mIGNoZWNrIG9mIFwidW5rbm93blwiIGNpcmN1bXZlbnRzIHRoaXMgaXNzdWUgKGFuZCBpcyBhbHNvXG4gICAgICAvLyBJRSBzcGVjaWZpYykuXG4gICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogV2UgcmVsZWFzZSBhbGwgZGlzcGF0Y2hlZCBgU3ludGhldGljRXZlbnRgcyBhZnRlciBlYWNoIGV2ZW50IGxvb3AsIGFkZGluZ1xuICAgKiB0aGVtIGJhY2sgaW50byB0aGUgcG9vbC4gVGhpcyBhbGxvd3MgYSB3YXkgdG8gaG9sZCBvbnRvIGEgcmVmZXJlbmNlIHRoYXRcbiAgICogd29uJ3QgYmUgYWRkZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgKi9cbiAgcGVyc2lzdDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNQZXJzaXN0ZW50ID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiB0aGlzIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBiYWNrIGludG8gdGhlIHBvb2wuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhpcyBzaG91bGQgbm90IGJlIHJlbGVhc2VkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqL1xuICBpc1BlcnNpc3RlbnQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgYGRlc3RydWN0b3JgIG9uIGVhY2ggaW5zdGFuY2UgaXQgcmVsZWFzZXMuXG4gICAqL1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIEludGVyZmFjZSA9IHRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3BOYW1lLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKHByb3BOYW1lLCBJbnRlcmZhY2VbcHJvcE5hbWVdKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW3Byb3BOYW1lXSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2hvdWxkQmVSZWxlYXNlZFByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXNbc2hvdWxkQmVSZWxlYXNlZFByb3BlcnRpZXNbaV1dID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmF0aXZlRXZlbnQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCduYXRpdmVFdmVudCcsIG51bGwpKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncHJldmVudERlZmF1bHQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCdwcmV2ZW50RGVmYXVsdCcsIGVtcHR5RnVuY3Rpb24pKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RvcFByb3BhZ2F0aW9uJywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbignc3RvcFByb3BhZ2F0aW9uJywgZW1wdHlGdW5jdGlvbikpO1xuICAgIH1cbiAgfVxuXG59KTtcblxuU3ludGhldGljRXZlbnQuSW50ZXJmYWNlID0gRXZlbnRJbnRlcmZhY2U7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGlmIChpc1Byb3h5U3VwcG9ydGVkKSB7XG4gICAgLyplc2xpbnQtZGlzYWJsZSBuby1mdW5jLWFzc2lnbiAqL1xuICAgIFN5bnRoZXRpY0V2ZW50ID0gbmV3IFByb3h5KFN5bnRoZXRpY0V2ZW50LCB7XG4gICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uICh0YXJnZXQsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHkodGFyZ2V0LCBPYmplY3QuY3JlYXRlKHRhcmdldC5wcm90b3R5cGUpLCBhcmdzKTtcbiAgICAgIH0sXG4gICAgICBhcHBseTogZnVuY3Rpb24gKGNvbnN0cnVjdG9yLCB0aGF0LCBhcmdzKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJveHkoY29uc3RydWN0b3IuYXBwbHkodGhhdCwgYXJncyksIHtcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAocHJvcCAhPT0gJ2lzUGVyc2lzdGVudCcgJiYgIXRhcmdldC5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UuaGFzT3duUHJvcGVydHkocHJvcCkgJiYgc2hvdWxkQmVSZWxlYXNlZFByb3BlcnRpZXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHkgfHwgdGFyZ2V0LmlzUGVyc2lzdGVudCgpLCAnVGhpcyBzeW50aGV0aWMgZXZlbnQgaXMgcmV1c2VkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLiBJZiB5b3VcXCdyZSAnICsgJ3NlZWluZyB0aGlzLCB5b3VcXCdyZSBhZGRpbmcgYSBuZXcgcHJvcGVydHkgaW4gdGhlIHN5bnRoZXRpYyBldmVudCBvYmplY3QuICcgKyAnVGhlIHByb3BlcnR5IGlzIG5ldmVyIHJlbGVhc2VkLiBTZWUgJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWV2ZW50LXBvb2xpbmcgZm9yIG1vcmUgaW5mb3JtYXRpb24uJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGRpZFdhcm5Gb3JBZGRlZE5ld1Byb3BlcnR5ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvKmVzbGludC1lbmFibGUgbm8tZnVuYy1hc3NpZ24gKi9cbiAgfVxufVxuLyoqXG4gKiBIZWxwZXIgdG8gcmVkdWNlIGJvaWxlcnBsYXRlIHdoZW4gY3JlYXRpbmcgc3ViY2xhc3Nlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBDbGFzc1xuICogQHBhcmFtIHs/b2JqZWN0fSBJbnRlcmZhY2VcbiAqL1xuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzID0gZnVuY3Rpb24gKENsYXNzLCBJbnRlcmZhY2UpIHtcbiAgdmFyIFN1cGVyID0gdGhpcztcblxuICB2YXIgRSA9IGZ1bmN0aW9uICgpIHt9O1xuICBFLnByb3RvdHlwZSA9IFN1cGVyLnByb3RvdHlwZTtcbiAgdmFyIHByb3RvdHlwZSA9IG5ldyBFKCk7XG5cbiAgX2Fzc2lnbihwcm90b3R5cGUsIENsYXNzLnByb3RvdHlwZSk7XG4gIENsYXNzLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2xhc3M7XG5cbiAgQ2xhc3MuSW50ZXJmYWNlID0gX2Fzc2lnbih7fSwgU3VwZXIuSW50ZXJmYWNlLCBJbnRlcmZhY2UpO1xuICBDbGFzcy5hdWdtZW50Q2xhc3MgPSBTdXBlci5hdWdtZW50Q2xhc3M7XG5cbiAgUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKENsYXNzLCBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIpO1xufTtcblxuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFN5bnRoZXRpY0V2ZW50LCBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0V2ZW50O1xuXG4vKipcbiAgKiBIZWxwZXIgdG8gbnVsbGlmeSBzeW50aGV0aWNFdmVudCBpbnN0YW5jZSBwcm9wZXJ0aWVzIHdoZW4gZGVzdHJ1Y3RpbmdcbiAgKlxuICAqIEBwYXJhbSB7b2JqZWN0fSBTeW50aGV0aWNFdmVudFxuICAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wTmFtZVxuICAqIEByZXR1cm4ge29iamVjdH0gZGVmaW5lUHJvcGVydHkgb2JqZWN0XG4gICovXG5mdW5jdGlvbiBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKHByb3BOYW1lLCBnZXRWYWwpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgZ2V0VmFsID09PSAnZnVuY3Rpb24nO1xuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBzZXQ6IHNldCxcbiAgICBnZXQ6IGdldFxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICB2YXIgYWN0aW9uID0gaXNGdW5jdGlvbiA/ICdzZXR0aW5nIHRoZSBtZXRob2QnIDogJ3NldHRpbmcgdGhlIHByb3BlcnR5JztcbiAgICB3YXJuKGFjdGlvbiwgJ1RoaXMgaXMgZWZmZWN0aXZlbHkgYSBuby1vcCcpO1xuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgdmFyIGFjdGlvbiA9IGlzRnVuY3Rpb24gPyAnYWNjZXNzaW5nIHRoZSBtZXRob2QnIDogJ2FjY2Vzc2luZyB0aGUgcHJvcGVydHknO1xuICAgIHZhciByZXN1bHQgPSBpc0Z1bmN0aW9uID8gJ1RoaXMgaXMgYSBuby1vcCBmdW5jdGlvbicgOiAnVGhpcyBpcyBzZXQgdG8gbnVsbCc7XG4gICAgd2FybihhY3Rpb24sIHJlc3VsdCk7XG4gICAgcmV0dXJuIGdldFZhbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHdhcm4oYWN0aW9uLCByZXN1bHQpIHtcbiAgICB2YXIgd2FybmluZ0NvbmRpdGlvbiA9IGZhbHNlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHdhcm5pbmdDb25kaXRpb24sICdUaGlzIHN5bnRoZXRpYyBldmVudCBpcyByZXVzZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuIElmIHlvdVxcJ3JlIHNlZWluZyB0aGlzLCAnICsgJ3lvdVxcJ3JlICVzIGAlc2Agb24gYSByZWxlYXNlZC9udWxsaWZpZWQgc3ludGhldGljIGV2ZW50LiAlcy4gJyArICdJZiB5b3UgbXVzdCBrZWVwIHRoZSBvcmlnaW5hbCBzeW50aGV0aWMgZXZlbnQgYXJvdW5kLCB1c2UgZXZlbnQucGVyc2lzdCgpLiAnICsgJ1NlZSBodHRwczovL2ZiLm1lL3JlYWN0LWV2ZW50LXBvb2xpbmcgZm9yIG1vcmUgaW5mb3JtYXRpb24uJywgYWN0aW9uLCBwcm9wTmFtZSwgcmVzdWx0KSA6IHZvaWQgMDtcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0V2ZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICovXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSB7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAdHlwZSB7UmVhY3RDb21wb25lbnR9XG4gICAqL1xuICBjdXJyZW50OiBudWxsXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDdXJyZW50T3duZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdEN1cnJlbnRPd25lci5qc1xuLy8gbW9kdWxlIGlkID0gMTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogU3RhdGljIHBvb2xlcnMuIFNldmVyYWwgY3VzdG9tIHZlcnNpb25zIGZvciBlYWNoIHBvdGVudGlhbCBudW1iZXIgb2ZcbiAqIGFyZ3VtZW50cy4gQSBjb21wbGV0ZWx5IGdlbmVyaWMgcG9vbGVyIGlzIGVhc3kgdG8gaW1wbGVtZW50LCBidXQgd291bGRcbiAqIHJlcXVpcmUgYWNjZXNzaW5nIHRoZSBgYXJndW1lbnRzYCBvYmplY3QuIEluIGVhY2ggb2YgdGhlc2UsIGB0aGlzYCByZWZlcnMgdG9cbiAqIHRoZSBDbGFzcyBpdHNlbGYsIG5vdCBhbiBpbnN0YW5jZS4gSWYgYW55IG90aGVycyBhcmUgbmVlZGVkLCBzaW1wbHkgYWRkIHRoZW1cbiAqIGhlcmUsIG9yIGluIHRoZWlyIG93biBmaWxlcy5cbiAqL1xudmFyIG9uZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGNvcHlGaWVsZHNGcm9tKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGNvcHlGaWVsZHNGcm9tKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhjb3B5RmllbGRzRnJvbSk7XG4gIH1cbn07XG5cbnZhciB0d29Bcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIpIHtcbiAgdmFyIEtsYXNzID0gdGhpcztcbiAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIpO1xuICB9XG59O1xuXG52YXIgdGhyZWVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMpO1xuICB9XG59O1xuXG52YXIgZm91ckFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24gKGExLCBhMiwgYTMsIGE0KSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMsIGE0KTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzLCBhNCk7XG4gIH1cbn07XG5cbnZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gICEoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nKSA6IF9wcm9kSW52YXJpYW50KCcyNScpIDogdm9pZCAwO1xuICBpbnN0YW5jZS5kZXN0cnVjdG9yKCk7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoIDwgS2xhc3MucG9vbFNpemUpIHtcbiAgICBLbGFzcy5pbnN0YW5jZVBvb2wucHVzaChpbnN0YW5jZSk7XG4gIH1cbn07XG5cbnZhciBERUZBVUxUX1BPT0xfU0laRSA9IDEwO1xudmFyIERFRkFVTFRfUE9PTEVSID0gb25lQXJndW1lbnRQb29sZXI7XG5cbi8qKlxuICogQXVnbWVudHMgYENvcHlDb25zdHJ1Y3RvcmAgdG8gYmUgYSBwb29sYWJsZSBjbGFzcywgYXVnbWVudGluZyBvbmx5IHRoZSBjbGFzc1xuICogaXRzZWxmIChzdGF0aWNhbGx5KSBub3QgYWRkaW5nIGFueSBwcm90b3R5cGljYWwgZmllbGRzLiBBbnkgQ29weUNvbnN0cnVjdG9yXG4gKiB5b3UgZ2l2ZSB0aGlzIG1heSBoYXZlIGEgYHBvb2xTaXplYCBwcm9wZXJ0eSwgYW5kIHdpbGwgbG9vayBmb3IgYVxuICogcHJvdG90eXBpY2FsIGBkZXN0cnVjdG9yYCBvbiBpbnN0YW5jZXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gQ29weUNvbnN0cnVjdG9yIENvbnN0cnVjdG9yIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVzZXQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwb29sZXIgQ3VzdG9taXphYmxlIHBvb2xlci5cbiAqL1xudmFyIGFkZFBvb2xpbmdUbyA9IGZ1bmN0aW9uIChDb3B5Q29uc3RydWN0b3IsIHBvb2xlcikge1xuICAvLyBDYXN0aW5nIGFzIGFueSBzbyB0aGF0IGZsb3cgaWdub3JlcyB0aGUgYWN0dWFsIGltcGxlbWVudGF0aW9uIGFuZCB0cnVzdHNcbiAgLy8gaXQgdG8gbWF0Y2ggdGhlIHR5cGUgd2UgZGVjbGFyZWRcbiAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICBOZXdLbGFzcy5pbnN0YW5jZVBvb2wgPSBbXTtcbiAgTmV3S2xhc3MuZ2V0UG9vbGVkID0gcG9vbGVyIHx8IERFRkFVTFRfUE9PTEVSO1xuICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgTmV3S2xhc3MucG9vbFNpemUgPSBERUZBVUxUX1BPT0xfU0laRTtcbiAgfVxuICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgcmV0dXJuIE5ld0tsYXNzO1xufTtcblxudmFyIFBvb2xlZENsYXNzID0ge1xuICBhZGRQb29saW5nVG86IGFkZFBvb2xpbmdUbyxcbiAgb25lQXJndW1lbnRQb29sZXI6IG9uZUFyZ3VtZW50UG9vbGVyLFxuICB0d29Bcmd1bWVudFBvb2xlcjogdHdvQXJndW1lbnRQb29sZXIsXG4gIHRocmVlQXJndW1lbnRQb29sZXI6IHRocmVlQXJndW1lbnRQb29sZXIsXG4gIGZvdXJBcmd1bWVudFBvb2xlcjogZm91ckFyZ3VtZW50UG9vbGVyXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvb2xlZENsYXNzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1Bvb2xlZENsYXNzLmpzXG4vLyBtb2R1bGUgaWQgPSAxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbnZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vY2FuRGVmaW5lUHJvcGVydHknKTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFN5bWJvbCcpO1xuXG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGtleTogdHJ1ZSxcbiAgcmVmOiB0cnVlLFxuICBfX3NlbGY6IHRydWUsXG4gIF9fc291cmNlOiB0cnVlXG59O1xuXG52YXIgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24sIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duO1xuXG5mdW5jdGlvbiBoYXNWYWxpZFJlZihjb25maWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdyZWYnKSkge1xuICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAncmVmJykuZ2V0O1xuICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZEtleShjb25maWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdrZXknKSkge1xuICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAna2V5JykuZ2V0O1xuICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gY29uZmlnLmtleSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpIHtcbiAgdmFyIHdhcm5BYm91dEFjY2Vzc2luZ0tleSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duKSB7XG4gICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKSA6IHZvaWQgMDtcbiAgICB9XG4gIH07XG4gIHdhcm5BYm91dEFjY2Vzc2luZ0tleS5pc1JlYWN0V2FybmluZyA9IHRydWU7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ2tleScsIHtcbiAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ0tleSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgd2FybkFib3V0QWNjZXNzaW5nUmVmID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24pIHtcbiAgICAgIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXM6IGByZWZgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgJyArICdpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lICcgKyAndmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCAnICsgJ3Byb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgIH1cbiAgfTtcbiAgd2FybkFib3V0QWNjZXNzaW5nUmVmLmlzUmVhY3RXYXJuaW5nID0gdHJ1ZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAncmVmJywge1xuICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nUmVmLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBGYWN0b3J5IG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgUmVhY3QgZWxlbWVudC4gVGhpcyBubyBsb25nZXIgYWRoZXJlcyB0b1xuICogdGhlIGNsYXNzIHBhdHRlcm4sIHNvIGRvIG5vdCB1c2UgbmV3IHRvIGNhbGwgaXQuIEFsc28sIG5vIGluc3RhbmNlb2YgY2hlY2tcbiAqIHdpbGwgd29yay4gSW5zdGVhZCB0ZXN0ICQkdHlwZW9mIGZpZWxkIGFnYWluc3QgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpIHRvIGNoZWNrXG4gKiBpZiBzb21ldGhpbmcgaXMgYSBSZWFjdCBFbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7Kn0gdHlwZVxuICogQHBhcmFtIHsqfSBrZXlcbiAqIEBwYXJhbSB7c3RyaW5nfG9iamVjdH0gcmVmXG4gKiBAcGFyYW0geyp9IHNlbGYgQSAqdGVtcG9yYXJ5KiBoZWxwZXIgdG8gZGV0ZWN0IHBsYWNlcyB3aGVyZSBgdGhpc2AgaXNcbiAqIGRpZmZlcmVudCBmcm9tIHRoZSBgb3duZXJgIHdoZW4gUmVhY3QuY3JlYXRlRWxlbWVudCBpcyBjYWxsZWQsIHNvIHRoYXQgd2VcbiAqIGNhbiB3YXJuLiBXZSB3YW50IHRvIGdldCByaWQgb2Ygb3duZXIgYW5kIHJlcGxhY2Ugc3RyaW5nIGByZWZgcyB3aXRoIGFycm93XG4gKiBmdW5jdGlvbnMsIGFuZCBhcyBsb25nIGFzIGB0aGlzYCBhbmQgb3duZXIgYXJlIHRoZSBzYW1lLCB0aGVyZSB3aWxsIGJlIG5vXG4gKiBjaGFuZ2UgaW4gYmVoYXZpb3IuXG4gKiBAcGFyYW0geyp9IHNvdXJjZSBBbiBhbm5vdGF0aW9uIG9iamVjdCAoYWRkZWQgYnkgYSB0cmFuc3BpbGVyIG9yIG90aGVyd2lzZSlcbiAqIGluZGljYXRpbmcgZmlsZW5hbWUsIGxpbmUgbnVtYmVyLCBhbmQvb3Igb3RoZXIgaW5mb3JtYXRpb24uXG4gKiBAcGFyYW0geyp9IG93bmVyXG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIGVsZW1lbnQgPSB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3cgdXMgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyBhcyBhIFJlYWN0IEVsZW1lbnRcbiAgICAkJHR5cGVvZjogUkVBQ1RfRUxFTUVOVF9UWVBFLFxuXG4gICAgLy8gQnVpbHQtaW4gcHJvcGVydGllcyB0aGF0IGJlbG9uZyBvbiB0aGUgZWxlbWVudFxuICAgIHR5cGU6IHR5cGUsXG4gICAga2V5OiBrZXksXG4gICAgcmVmOiByZWYsXG4gICAgcHJvcHM6IHByb3BzLFxuXG4gICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgZWxlbWVudC5cbiAgICBfb3duZXI6IG93bmVyXG4gIH07XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGUgdmFsaWRhdGlvbiBmbGFnIGlzIGN1cnJlbnRseSBtdXRhdGl2ZS4gV2UgcHV0IGl0IG9uXG4gICAgLy8gYW4gZXh0ZXJuYWwgYmFja2luZyBzdG9yZSBzbyB0aGF0IHdlIGNhbiBmcmVlemUgdGhlIHdob2xlIG9iamVjdC5cbiAgICAvLyBUaGlzIGNhbiBiZSByZXBsYWNlZCB3aXRoIGEgV2Vha01hcCBvbmNlIHRoZXkgYXJlIGltcGxlbWVudGVkIGluXG4gICAgLy8gY29tbW9ubHkgdXNlZCBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMuXG4gICAgZWxlbWVudC5fc3RvcmUgPSB7fTtcblxuICAgIC8vIFRvIG1ha2UgY29tcGFyaW5nIFJlYWN0RWxlbWVudHMgZWFzaWVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB3ZSBtYWtlXG4gICAgLy8gdGhlIHZhbGlkYXRpb24gZmxhZyBub24tZW51bWVyYWJsZSAod2hlcmUgcG9zc2libGUsIHdoaWNoIHNob3VsZFxuICAgIC8vIGluY2x1ZGUgZXZlcnkgZW52aXJvbm1lbnQgd2UgcnVuIHRlc3RzIGluKSwgc28gdGhlIHRlc3QgZnJhbWV3b3JrXG4gICAgLy8gaWdub3JlcyBpdC5cbiAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50Ll9zdG9yZSwgJ3ZhbGlkYXRlZCcsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgLy8gc2VsZiBhbmQgc291cmNlIGFyZSBERVYgb25seSBwcm9wZXJ0aWVzLlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc2VsZicsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHNlbGZcbiAgICAgIH0pO1xuICAgICAgLy8gVHdvIGVsZW1lbnRzIGNyZWF0ZWQgaW4gdHdvIGRpZmZlcmVudCBwbGFjZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWRcbiAgICAgIC8vIGVxdWFsIGZvciB0ZXN0aW5nIHB1cnBvc2VzIGFuZCB0aGVyZWZvcmUgd2UgaGlkZSBpdCBmcm9tIGVudW1lcmF0aW9uLlxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc291cmNlJywge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZTogc291cmNlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICBlbGVtZW50Ll9zZWxmID0gc2VsZjtcbiAgICAgIGVsZW1lbnQuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB9XG4gICAgaWYgKE9iamVjdC5mcmVlemUpIHtcbiAgICAgIE9iamVjdC5mcmVlemUoZWxlbWVudC5wcm9wcyk7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYW5kIHJldHVybiBhIG5ldyBSZWFjdEVsZW1lbnQgb2YgdGhlIGdpdmVuIHR5cGUuXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY3JlYXRlZWxlbWVudFxuICovXG5SZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZTtcblxuICAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG4gIHZhciBwcm9wcyA9IHt9O1xuXG4gIHZhciBrZXkgPSBudWxsO1xuICB2YXIgcmVmID0gbnVsbDtcbiAgdmFyIHNlbGYgPSBudWxsO1xuICB2YXIgc291cmNlID0gbnVsbDtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgICAgcmVmID0gY29uZmlnLnJlZjtcbiAgICB9XG4gICAgaWYgKGhhc1ZhbGlkS2V5KGNvbmZpZykpIHtcbiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICB9XG5cbiAgICBzZWxmID0gY29uZmlnLl9fc2VsZiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NlbGY7XG4gICAgc291cmNlID0gY29uZmlnLl9fc291cmNlID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc291cmNlO1xuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcbiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCBwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkQXJyYXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcbiAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gdHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChrZXkgfHwgcmVmKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzLiQkdHlwZW9mID09PSAndW5kZWZpbmVkJyB8fCBwcm9wcy4kJHR5cGVvZiAhPT0gUkVBQ1RfRUxFTUVOVF9UWVBFKSB7XG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nID8gdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgJ1Vua25vd24nIDogdHlwZTtcbiAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LCBwcm9wcyk7XG59O1xuXG4vKipcbiAqIFJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgUmVhY3RFbGVtZW50cyBvZiBhIGdpdmVuIHR5cGUuXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY3JlYXRlZmFjdG9yeVxuICovXG5SZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gIHZhciBmYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbiAgLy8gRXhwb3NlIHRoZSB0eXBlIG9uIHRoZSBmYWN0b3J5IGFuZCB0aGUgcHJvdG90eXBlIHNvIHRoYXQgaXQgY2FuIGJlXG4gIC8vIGVhc2lseSBhY2Nlc3NlZCBvbiBlbGVtZW50cy4gRS5nLiBgPEZvbyAvPi50eXBlID09PSBGb29gLlxuICAvLyBUaGlzIHNob3VsZCBub3QgYmUgbmFtZWQgYGNvbnN0cnVjdG9yYCBzaW5jZSB0aGlzIG1heSBub3QgYmUgdGhlIGZ1bmN0aW9uXG4gIC8vIHRoYXQgY3JlYXRlZCB0aGUgZWxlbWVudCwgYW5kIGl0IG1heSBub3QgZXZlbiBiZSBhIGNvbnN0cnVjdG9yLlxuICAvLyBMZWdhY3kgaG9vayBUT0RPOiBXYXJuIGlmIHRoaXMgaXMgYWNjZXNzZWRcbiAgZmFjdG9yeS50eXBlID0gdHlwZTtcbiAgcmV0dXJuIGZhY3Rvcnk7XG59O1xuXG5SZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlS2V5ID0gZnVuY3Rpb24gKG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudChvbGRFbGVtZW50LnR5cGUsIG5ld0tleSwgb2xkRWxlbWVudC5yZWYsIG9sZEVsZW1lbnQuX3NlbGYsIG9sZEVsZW1lbnQuX3NvdXJjZSwgb2xkRWxlbWVudC5fb3duZXIsIG9sZEVsZW1lbnQucHJvcHMpO1xuXG4gIHJldHVybiBuZXdFbGVtZW50O1xufTtcblxuLyoqXG4gKiBDbG9uZSBhbmQgcmV0dXJuIGEgbmV3IFJlYWN0RWxlbWVudCB1c2luZyBlbGVtZW50IGFzIHRoZSBzdGFydGluZyBwb2ludC5cbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jbG9uZWVsZW1lbnRcbiAqL1xuUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZTtcblxuICAvLyBPcmlnaW5hbCBwcm9wcyBhcmUgY29waWVkXG4gIHZhciBwcm9wcyA9IF9hc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpO1xuXG4gIC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWRcbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gIC8vIFNlbGYgaXMgcHJlc2VydmVkIHNpbmNlIHRoZSBvd25lciBpcyBwcmVzZXJ2ZWQuXG4gIHZhciBzZWxmID0gZWxlbWVudC5fc2VsZjtcbiAgLy8gU291cmNlIGlzIHByZXNlcnZlZCBzaW5jZSBjbG9uZUVsZW1lbnQgaXMgdW5saWtlbHkgdG8gYmUgdGFyZ2V0ZWQgYnkgYVxuICAvLyB0cmFuc3BpbGVyLCBhbmQgdGhlIG9yaWdpbmFsIHNvdXJjZSBpcyBwcm9iYWJseSBhIGJldHRlciBpbmRpY2F0b3Igb2YgdGhlXG4gIC8vIHRydWUgb3duZXIuXG4gIHZhciBzb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG5cbiAgLy8gT3duZXIgd2lsbCBiZSBwcmVzZXJ2ZWQsIHVubGVzcyByZWYgaXMgb3ZlcnJpZGRlblxuICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcblxuICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkge1xuICAgICAgLy8gU2lsZW50bHkgc3RlYWwgdGhlIHJlZiBmcm9tIHRoZSBwYXJlbnQuXG4gICAgICByZWYgPSBjb25maWcucmVmO1xuICAgICAgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgIH1cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH1cblxuICAgIC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIG92ZXJyaWRlIGV4aXN0aW5nIHByb3BzXG4gICAgdmFyIGRlZmF1bHRQcm9wcztcbiAgICBpZiAoZWxlbWVudC50eXBlICYmIGVsZW1lbnQudHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICAgIGRlZmF1bHRQcm9wcyA9IGVsZW1lbnQudHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgfVxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIGlmIChjb25maWdbcHJvcE5hbWVdID09PSB1bmRlZmluZWQgJiYgZGVmYXVsdFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDaGlsZHJlbiBjYW4gYmUgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCwgYW5kIHRob3NlIGFyZSB0cmFuc2ZlcnJlZCBvbnRvXG4gIC8vIHRoZSBuZXdseSBhbGxvY2F0ZWQgcHJvcHMgb2JqZWN0LlxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIH1cbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gIH1cblxuICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKTtcbn07XG5cbi8qKlxuICogVmVyaWZpZXMgdGhlIG9iamVjdCBpcyBhIFJlYWN0RWxlbWVudC5cbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5pc3ZhbGlkZWxlbWVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSB2YWxpZCBjb21wb25lbnQuXG4gKiBAZmluYWxcbiAqL1xuUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdEVsZW1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFdBUk5JTkc6IERPIE5PVCBtYW51YWxseSByZXF1aXJlIHRoaXMgbW9kdWxlLlxuICogVGhpcyBpcyBhIHJlcGxhY2VtZW50IGZvciBgaW52YXJpYW50KC4uLilgIHVzZWQgYnkgdGhlIGVycm9yIGNvZGUgc3lzdGVtXG4gKiBhbmQgd2lsbCBfb25seV8gYmUgcmVxdWlyZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgYmFiZWwgcGFzcy5cbiAqIEl0IGFsd2F5cyB0aHJvd3MuXG4gKi9cblxuZnVuY3Rpb24gcmVhY3RQcm9kSW52YXJpYW50KGNvZGUpIHtcbiAgdmFyIGFyZ0NvdW50ID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG5cbiAgdmFyIG1lc3NhZ2UgPSAnTWluaWZpZWQgUmVhY3QgZXJyb3IgIycgKyBjb2RlICsgJzsgdmlzaXQgJyArICdodHRwOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD0nICsgY29kZTtcblxuICBmb3IgKHZhciBhcmdJZHggPSAwOyBhcmdJZHggPCBhcmdDb3VudDsgYXJnSWR4KyspIHtcbiAgICBtZXNzYWdlICs9ICcmYXJnc1tdPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2FyZ0lkeCArIDFdKTtcbiAgfVxuXG4gIG1lc3NhZ2UgKz0gJyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQnICsgJyBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nO1xuXG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IHJlYWN0UHJvZEludmFyaWFudCdzIG93biBmcmFtZVxuXG4gIHRocm93IGVycm9yO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlYWN0UHJvZEludmFyaWFudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvbGliL3JlYWN0UHJvZEludmFyaWFudC5qc1xuLy8gbW9kdWxlIGlkID0gMTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcIlJlYWN0XCJcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW1wdHlPYmplY3QgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ZianMvbGliL2VtcHR5T2JqZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSAxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NTmFtZXNwYWNlcyA9IHJlcXVpcmUoJy4vRE9NTmFtZXNwYWNlcycpO1xudmFyIHNldElubmVySFRNTCA9IHJlcXVpcmUoJy4vc2V0SW5uZXJIVE1MJyk7XG5cbnZhciBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uJyk7XG52YXIgc2V0VGV4dENvbnRlbnQgPSByZXF1aXJlKCcuL3NldFRleHRDb250ZW50Jyk7XG5cbnZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG52YXIgRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFID0gMTE7XG5cbi8qKlxuICogSW4gSUUgKDgtMTEpIGFuZCBFZGdlLCBhcHBlbmRpbmcgbm9kZXMgd2l0aCBubyBjaGlsZHJlbiBpcyBkcmFtYXRpY2FsbHlcbiAqIGZhc3RlciB0aGFuIGFwcGVuZGluZyBhIGZ1bGwgc3VidHJlZSwgc28gd2UgZXNzZW50aWFsbHkgcXVldWUgdXAgdGhlXG4gKiAuYXBwZW5kQ2hpbGQgY2FsbHMgaGVyZSBhbmQgYXBwbHkgdGhlbSBzbyBlYWNoIG5vZGUgaXMgYWRkZWQgdG8gaXRzIHBhcmVudFxuICogYmVmb3JlIGFueSBjaGlsZHJlbiBhcmUgYWRkZWQuXG4gKlxuICogSW4gb3RoZXIgYnJvd3NlcnMsIGRvaW5nIHNvIGlzIHNsb3dlciBvciBuZXV0cmFsIGNvbXBhcmVkIHRvIHRoZSBvdGhlciBvcmRlclxuICogKGluIEZpcmVmb3gsIHR3aWNlIGFzIHNsb3cpIHNvIHdlIG9ubHkgZG8gdGhpcyBpbnZlcnNpb24gaW4gSUUuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zcGljeWovaW5uZXJodG1sLXZzLWNyZWF0ZWVsZW1lbnQtdnMtY2xvbmVub2RlLlxuICovXG52YXIgZW5hYmxlTGF6eSA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50LmRvY3VtZW50TW9kZSA9PT0gJ251bWJlcicgfHwgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvci51c2VyQWdlbnQgPT09ICdzdHJpbmcnICYmIC9cXGJFZGdlXFwvXFxkLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG5mdW5jdGlvbiBpbnNlcnRUcmVlQ2hpbGRyZW4odHJlZSkge1xuICBpZiAoIWVuYWJsZUxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5vZGUgPSB0cmVlLm5vZGU7XG4gIHZhciBjaGlsZHJlbiA9IHRyZWUuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnNlcnRUcmVlQmVmb3JlKG5vZGUsIGNoaWxkcmVuW2ldLCBudWxsKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHJlZS5odG1sICE9IG51bGwpIHtcbiAgICBzZXRJbm5lckhUTUwobm9kZSwgdHJlZS5odG1sKTtcbiAgfSBlbHNlIGlmICh0cmVlLnRleHQgIT0gbnVsbCkge1xuICAgIHNldFRleHRDb250ZW50KG5vZGUsIHRyZWUudGV4dCk7XG4gIH1cbn1cblxudmFyIGluc2VydFRyZWVCZWZvcmUgPSBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uIChwYXJlbnROb2RlLCB0cmVlLCByZWZlcmVuY2VOb2RlKSB7XG4gIC8vIERvY3VtZW50RnJhZ21lbnRzIGFyZW4ndCBhY3R1YWxseSBwYXJ0IG9mIHRoZSBET00gYWZ0ZXIgaW5zZXJ0aW9uIHNvXG4gIC8vIGFwcGVuZGluZyBjaGlsZHJlbiB3b24ndCB1cGRhdGUgdGhlIERPTS4gV2UgbmVlZCB0byBlbnN1cmUgdGhlIGZyYWdtZW50XG4gIC8vIGlzIHByb3Blcmx5IHBvcHVsYXRlZCBmaXJzdCwgYnJlYWtpbmcgb3V0IG9mIG91ciBsYXp5IGFwcHJvYWNoIGZvciBqdXN0XG4gIC8vIHRoaXMgbGV2ZWwuIEFsc28sIHNvbWUgPG9iamVjdD4gcGx1Z2lucyAobGlrZSBGbGFzaCBQbGF5ZXIpIHdpbGwgcmVhZFxuICAvLyA8cGFyYW0+IG5vZGVzIGltbWVkaWF0ZWx5IHVwb24gaW5zZXJ0aW9uIGludG8gdGhlIERPTSwgc28gPG9iamVjdD5cbiAgLy8gbXVzdCBhbHNvIGJlIHBvcHVsYXRlZCBwcmlvciB0byBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICBpZiAodHJlZS5ub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUgfHwgdHJlZS5ub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSAmJiB0cmVlLm5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ29iamVjdCcgJiYgKHRyZWUubm9kZS5uYW1lc3BhY2VVUkkgPT0gbnVsbCB8fCB0cmVlLm5vZGUubmFtZXNwYWNlVVJJID09PSBET01OYW1lc3BhY2VzLmh0bWwpKSB7XG4gICAgaW5zZXJ0VHJlZUNoaWxkcmVuKHRyZWUpO1xuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRyZWUubm9kZSwgcmVmZXJlbmNlTm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodHJlZS5ub2RlLCByZWZlcmVuY2VOb2RlKTtcbiAgICBpbnNlcnRUcmVlQ2hpbGRyZW4odHJlZSk7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiByZXBsYWNlQ2hpbGRXaXRoVHJlZShvbGROb2RlLCBuZXdUcmVlKSB7XG4gIG9sZE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3VHJlZS5ub2RlLCBvbGROb2RlKTtcbiAgaW5zZXJ0VHJlZUNoaWxkcmVuKG5ld1RyZWUpO1xufVxuXG5mdW5jdGlvbiBxdWV1ZUNoaWxkKHBhcmVudFRyZWUsIGNoaWxkVHJlZSkge1xuICBpZiAoZW5hYmxlTGF6eSkge1xuICAgIHBhcmVudFRyZWUuY2hpbGRyZW4ucHVzaChjaGlsZFRyZWUpO1xuICB9IGVsc2Uge1xuICAgIHBhcmVudFRyZWUubm9kZS5hcHBlbmRDaGlsZChjaGlsZFRyZWUubm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcXVldWVIVE1MKHRyZWUsIGh0bWwpIHtcbiAgaWYgKGVuYWJsZUxhenkpIHtcbiAgICB0cmVlLmh0bWwgPSBodG1sO1xuICB9IGVsc2Uge1xuICAgIHNldElubmVySFRNTCh0cmVlLm5vZGUsIGh0bWwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHF1ZXVlVGV4dCh0cmVlLCB0ZXh0KSB7XG4gIGlmIChlbmFibGVMYXp5KSB7XG4gICAgdHJlZS50ZXh0ID0gdGV4dDtcbiAgfSBlbHNlIHtcbiAgICBzZXRUZXh0Q29udGVudCh0cmVlLm5vZGUsIHRleHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdGhpcy5ub2RlLm5vZGVOYW1lO1xufVxuXG5mdW5jdGlvbiBET01MYXp5VHJlZShub2RlKSB7XG4gIHJldHVybiB7XG4gICAgbm9kZTogbm9kZSxcbiAgICBjaGlsZHJlbjogW10sXG4gICAgaHRtbDogbnVsbCxcbiAgICB0ZXh0OiBudWxsLFxuICAgIHRvU3RyaW5nOiB0b1N0cmluZ1xuICB9O1xufVxuXG5ET01MYXp5VHJlZS5pbnNlcnRUcmVlQmVmb3JlID0gaW5zZXJ0VHJlZUJlZm9yZTtcbkRPTUxhenlUcmVlLnJlcGxhY2VDaGlsZFdpdGhUcmVlID0gcmVwbGFjZUNoaWxkV2l0aFRyZWU7XG5ET01MYXp5VHJlZS5xdWV1ZUNoaWxkID0gcXVldWVDaGlsZDtcbkRPTUxhenlUcmVlLnF1ZXVlSFRNTCA9IHF1ZXVlSFRNTDtcbkRPTUxhenlUcmVlLnF1ZXVlVGV4dCA9IHF1ZXVlVGV4dDtcblxubW9kdWxlLmV4cG9ydHMgPSBET01MYXp5VHJlZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9ET01MYXp5VHJlZS5qc1xuLy8gbW9kdWxlIGlkID0gMThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBjaGVja01hc2sodmFsdWUsIGJpdG1hc2spIHtcbiAgcmV0dXJuICh2YWx1ZSAmIGJpdG1hc2spID09PSBiaXRtYXNrO1xufVxuXG52YXIgRE9NUHJvcGVydHlJbmplY3Rpb24gPSB7XG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gbm9ybWFsaXplZCwgY2FtZWxjYXNlZCBwcm9wZXJ0eSBuYW1lcyB0byBhIGNvbmZpZ3VyYXRpb24gdGhhdFxuICAgKiBzcGVjaWZpZXMgaG93IHRoZSBhc3NvY2lhdGVkIERPTSBwcm9wZXJ0eSBzaG91bGQgYmUgYWNjZXNzZWQgb3IgcmVuZGVyZWQuXG4gICAqL1xuICBNVVNUX1VTRV9QUk9QRVJUWTogMHgxLFxuICBIQVNfQk9PTEVBTl9WQUxVRTogMHg0LFxuICBIQVNfTlVNRVJJQ19WQUxVRTogMHg4LFxuICBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTogMHgxMCB8IDB4OCxcbiAgSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRTogMHgyMCxcblxuICAvKipcbiAgICogSW5qZWN0IHNvbWUgc3BlY2lhbGl6ZWQga25vd2xlZGdlIGFib3V0IHRoZSBET00uIFRoaXMgdGFrZXMgYSBjb25maWcgb2JqZWN0XG4gICAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiBpc0N1c3RvbUF0dHJpYnV0ZTogZnVuY3Rpb24gdGhhdCBnaXZlbiBhbiBhdHRyaWJ1dGUgbmFtZSB3aWxsIHJldHVybiB0cnVlXG4gICAqIGlmIGl0IGNhbiBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET00gdmVyYmF0aW0uIFVzZWZ1bCBmb3IgZGF0YS0qIG9yIGFyaWEtKlxuICAgKiBhdHRyaWJ1dGVzIHdoZXJlIGl0J3MgaW1wb3NzaWJsZSB0byBlbnVtZXJhdGUgYWxsIG9mIHRoZSBwb3NzaWJsZVxuICAgKiBhdHRyaWJ1dGUgbmFtZXMsXG4gICAqXG4gICAqIFByb3BlcnRpZXM6IG9iamVjdCBtYXBwaW5nIERPTSBwcm9wZXJ0eSBuYW1lIHRvIG9uZSBvZiB0aGVcbiAgICogRE9NUHJvcGVydHlJbmplY3Rpb24gY29uc3RhbnRzIG9yIG51bGwuIElmIHlvdXIgYXR0cmlidXRlIGlzbid0IGluIGhlcmUsXG4gICAqIGl0IHdvbid0IGdldCB3cml0dGVuIHRvIHRoZSBET00uXG4gICAqXG4gICAqIERPTUF0dHJpYnV0ZU5hbWVzOiBvYmplY3QgbWFwcGluZyBSZWFjdCBhdHRyaWJ1dGUgbmFtZSB0byB0aGUgRE9NXG4gICAqIGF0dHJpYnV0ZSBuYW1lLiBBdHRyaWJ1dGUgbmFtZXMgbm90IHNwZWNpZmllZCB1c2UgdGhlICoqbG93ZXJjYXNlKipcbiAgICogbm9ybWFsaXplZCBuYW1lLlxuICAgKlxuICAgKiBET01BdHRyaWJ1dGVOYW1lc3BhY2VzOiBvYmplY3QgbWFwcGluZyBSZWFjdCBhdHRyaWJ1dGUgbmFtZSB0byB0aGUgRE9NXG4gICAqIGF0dHJpYnV0ZSBuYW1lc3BhY2UgVVJMLiAoQXR0cmlidXRlIG5hbWVzIG5vdCBzcGVjaWZpZWQgdXNlIG5vIG5hbWVzcGFjZS4pXG4gICAqXG4gICAqIERPTVByb3BlcnR5TmFtZXM6IHNpbWlsYXIgdG8gRE9NQXR0cmlidXRlTmFtZXMgYnV0IGZvciBET00gcHJvcGVydGllcy5cbiAgICogUHJvcGVydHkgbmFtZXMgbm90IHNwZWNpZmllZCB1c2UgdGhlIG5vcm1hbGl6ZWQgbmFtZS5cbiAgICpcbiAgICogRE9NTXV0YXRpb25NZXRob2RzOiBQcm9wZXJ0aWVzIHRoYXQgcmVxdWlyZSBzcGVjaWFsIG11dGF0aW9uIG1ldGhvZHMuIElmXG4gICAqIGB2YWx1ZWAgaXMgdW5kZWZpbmVkLCB0aGUgbXV0YXRpb24gbWV0aG9kIHNob3VsZCB1bnNldCB0aGUgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkb21Qcm9wZXJ0eUNvbmZpZyB0aGUgY29uZmlnIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICovXG4gIGluamVjdERPTVByb3BlcnR5Q29uZmlnOiBmdW5jdGlvbiAoZG9tUHJvcGVydHlDb25maWcpIHtcbiAgICB2YXIgSW5qZWN0aW9uID0gRE9NUHJvcGVydHlJbmplY3Rpb247XG4gICAgdmFyIFByb3BlcnRpZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzIHx8IHt9O1xuICAgIHZhciBET01BdHRyaWJ1dGVOYW1lc3BhY2VzID0gZG9tUHJvcGVydHlDb25maWcuRE9NQXR0cmlidXRlTmFtZXNwYWNlcyB8fCB7fTtcbiAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01BdHRyaWJ1dGVOYW1lcyB8fCB7fTtcbiAgICB2YXIgRE9NUHJvcGVydHlOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTVByb3BlcnR5TmFtZXMgfHwge307XG4gICAgdmFyIERPTU11dGF0aW9uTWV0aG9kcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTU11dGF0aW9uTWV0aG9kcyB8fCB7fTtcblxuICAgIGlmIChkb21Qcm9wZXJ0eUNvbmZpZy5pc0N1c3RvbUF0dHJpYnV0ZSkge1xuICAgICAgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLnB1c2goZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGUpO1xuICAgIH1cblxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIFByb3BlcnRpZXMpIHtcbiAgICAgICEhRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnaW5qZWN0RE9NUHJvcGVydHlDb25maWcoLi4uKTogWW91XFwncmUgdHJ5aW5nIHRvIGluamVjdCBET00gcHJvcGVydHkgXFwnJXNcXCcgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBpbmplY3RlZC4gWW91IG1heSBiZSBhY2NpZGVudGFsbHkgaW5qZWN0aW5nIHRoZSBzYW1lIERPTSBwcm9wZXJ0eSBjb25maWcgdHdpY2UsIG9yIHlvdSBtYXkgYmUgaW5qZWN0aW5nIHR3byBjb25maWdzIHRoYXQgaGF2ZSBjb25mbGljdGluZyBwcm9wZXJ0eSBuYW1lcy4nLCBwcm9wTmFtZSkgOiBfcHJvZEludmFyaWFudCgnNDgnLCBwcm9wTmFtZSkgOiB2b2lkIDA7XG5cbiAgICAgIHZhciBsb3dlckNhc2VkID0gcHJvcE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciBwcm9wQ29uZmlnID0gUHJvcGVydGllc1twcm9wTmFtZV07XG5cbiAgICAgIHZhciBwcm9wZXJ0eUluZm8gPSB7XG4gICAgICAgIGF0dHJpYnV0ZU5hbWU6IGxvd2VyQ2FzZWQsXG4gICAgICAgIGF0dHJpYnV0ZU5hbWVzcGFjZTogbnVsbCxcbiAgICAgICAgcHJvcGVydHlOYW1lOiBwcm9wTmFtZSxcbiAgICAgICAgbXV0YXRpb25NZXRob2Q6IG51bGwsXG5cbiAgICAgICAgbXVzdFVzZVByb3BlcnR5OiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZKSxcbiAgICAgICAgaGFzQm9vbGVhblZhbHVlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19CT09MRUFOX1ZBTFVFKSxcbiAgICAgICAgaGFzTnVtZXJpY1ZhbHVlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19OVU1FUklDX1ZBTFVFKSxcbiAgICAgICAgaGFzUG9zaXRpdmVOdW1lcmljVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpLFxuICAgICAgICBoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUUpXG4gICAgICB9O1xuICAgICAgIShwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlICsgcHJvcGVydHlJbmZvLmhhc051bWVyaWNWYWx1ZSArIHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIDw9IDEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RPTVByb3BlcnR5OiBWYWx1ZSBjYW4gYmUgb25lIG9mIGJvb2xlYW4sIG92ZXJsb2FkZWQgYm9vbGVhbiwgb3IgbnVtZXJpYyB2YWx1ZSwgYnV0IG5vdCBhIGNvbWJpbmF0aW9uOiAlcycsIHByb3BOYW1lKSA6IF9wcm9kSW52YXJpYW50KCc1MCcsIHByb3BOYW1lKSA6IHZvaWQgMDtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZF0gPSBwcm9wTmFtZTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IERPTUF0dHJpYnV0ZU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgICAgcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2F0dHJpYnV0ZU5hbWVdID0gcHJvcE5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lc3BhY2UgPSBET01BdHRyaWJ1dGVOYW1lc3BhY2VzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTVByb3BlcnR5TmFtZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWUgPSBET01Qcm9wZXJ0eU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKERPTU11dGF0aW9uTWV0aG9kcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcGVydHlJbmZvLm11dGF0aW9uTWV0aG9kID0gRE9NTXV0YXRpb25NZXRob2RzW3Byb3BOYW1lXTtcbiAgICAgIH1cblxuICAgICAgRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wTmFtZV0gPSBwcm9wZXJ0eUluZm87XG4gICAgfVxuICB9XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG52YXIgQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiA9ICc6QS1aX2EtelxcXFx1MDBDMC1cXFxcdTAwRDZcXFxcdTAwRDgtXFxcXHUwMEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEJztcbi8qIGVzbGludC1lbmFibGUgbWF4LWxlbiAqL1xuXG4vKipcbiAqIERPTVByb3BlcnR5IGV4cG9ydHMgbG9va3VwIG9iamVjdHMgdGhhdCBjYW4gYmUgdXNlZCBsaWtlIGZ1bmN0aW9uczpcbiAqXG4gKiAgID4gRE9NUHJvcGVydHkuaXNWYWxpZFsnaWQnXVxuICogICB0cnVlXG4gKiAgID4gRE9NUHJvcGVydHkuaXNWYWxpZFsnZm9vYmFyJ11cbiAqICAgdW5kZWZpbmVkXG4gKlxuICogQWx0aG91Z2ggdGhpcyBtYXkgYmUgY29uZnVzaW5nLCBpdCBwZXJmb3JtcyBiZXR0ZXIgaW4gZ2VuZXJhbC5cbiAqXG4gKiBAc2VlIGh0dHA6Ly9qc3BlcmYuY29tL2tleS1leGlzdHNcbiAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20va2V5LW1pc3NpbmdcbiAqL1xudmFyIERPTVByb3BlcnR5ID0ge1xuXG4gIElEX0FUVFJJQlVURV9OQU1FOiAnZGF0YS1yZWFjdGlkJyxcbiAgUk9PVF9BVFRSSUJVVEVfTkFNRTogJ2RhdGEtcmVhY3Ryb290JyxcblxuICBBVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSOiBBVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSLFxuICBBVFRSSUJVVEVfTkFNRV9DSEFSOiBBVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSICsgJ1xcXFwtLjAtOVxcXFx1MDBCN1xcXFx1MDMwMC1cXFxcdTAzNkZcXFxcdTIwM0YtXFxcXHUyMDQwJyxcblxuICAvKipcbiAgICogTWFwIGZyb20gcHJvcGVydHkgXCJzdGFuZGFyZCBuYW1lXCIgdG8gYW4gb2JqZWN0IHdpdGggaW5mbyBhYm91dCBob3cgdG8gc2V0XG4gICAqIHRoZSBwcm9wZXJ0eSBpbiB0aGUgRE9NLiBFYWNoIG9iamVjdCBjb250YWluczpcbiAgICpcbiAgICogYXR0cmlidXRlTmFtZTpcbiAgICogICBVc2VkIHdoZW4gcmVuZGVyaW5nIG1hcmt1cCBvciB3aXRoIGAqQXR0cmlidXRlKClgLlxuICAgKiBhdHRyaWJ1dGVOYW1lc3BhY2VcbiAgICogcHJvcGVydHlOYW1lOlxuICAgKiAgIFVzZWQgb24gRE9NIG5vZGUgaW5zdGFuY2VzLiAoVGhpcyBpbmNsdWRlcyBwcm9wZXJ0aWVzIHRoYXQgbXV0YXRlIGR1ZSB0b1xuICAgKiAgIGV4dGVybmFsIGZhY3RvcnMuKVxuICAgKiBtdXRhdGlvbk1ldGhvZDpcbiAgICogICBJZiBub24tbnVsbCwgdXNlZCBpbnN0ZWFkIG9mIHRoZSBwcm9wZXJ0eSBvciBgc2V0QXR0cmlidXRlKClgIGFmdGVyXG4gICAqICAgaW5pdGlhbCByZW5kZXIuXG4gICAqIG11c3RVc2VQcm9wZXJ0eTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBtdXN0IGJlIGFjY2Vzc2VkIGFuZCBtdXRhdGVkIGFzIGFuIG9iamVjdCBwcm9wZXJ0eS5cbiAgICogaGFzQm9vbGVhblZhbHVlOlxuICAgKiAgIFdoZXRoZXIgdGhlIHByb3BlcnR5IHNob3VsZCBiZSByZW1vdmVkIHdoZW4gc2V0IHRvIGEgZmFsc2V5IHZhbHVlLlxuICAgKiBoYXNOdW1lcmljVmFsdWU6XG4gICAqICAgV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgbnVtZXJpYyBhbmQgc2hvdWxkIGJlXG4gICAqICAgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogaGFzUG9zaXRpdmVOdW1lcmljVmFsdWU6XG4gICAqICAgV2hldGhlciB0aGUgcHJvcGVydHkgbXVzdCBiZSBwb3NpdGl2ZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgcG9zaXRpdmVcbiAgICogICBudW1lcmljIGFuZCBzaG91bGQgYmUgcmVtb3ZlZCB3aGVuIHNldCB0byBhIGZhbHNleSB2YWx1ZS5cbiAgICogaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZTpcbiAgICogICBXaGV0aGVyIHRoZSBwcm9wZXJ0eSBjYW4gYmUgdXNlZCBhcyBhIGZsYWcgYXMgd2VsbCBhcyB3aXRoIGEgdmFsdWUuXG4gICAqICAgUmVtb3ZlZCB3aGVuIHN0cmljdGx5IGVxdWFsIHRvIGZhbHNlOyBwcmVzZW50IHdpdGhvdXQgYSB2YWx1ZSB3aGVuXG4gICAqICAgc3RyaWN0bHkgZXF1YWwgdG8gdHJ1ZTsgcHJlc2VudCB3aXRoIGEgdmFsdWUgb3RoZXJ3aXNlLlxuICAgKi9cbiAgcHJvcGVydGllczoge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBsb3dlcmNhc2UgcHJvcGVydHkgbmFtZXMgdG8gdGhlIHByb3Blcmx5IGNhc2VkIHZlcnNpb24sIHVzZWRcbiAgICogdG8gd2FybiBpbiB0aGUgY2FzZSBvZiBtaXNzaW5nIHByb3BlcnRpZXMuIEF2YWlsYWJsZSBvbmx5IGluIF9fREVWX18uXG4gICAqXG4gICAqIGF1dG9mb2N1cyBpcyBwcmVkZWZpbmVkLCBiZWNhdXNlIGFkZGluZyBpdCB0byB0aGUgcHJvcGVydHkgd2hpdGVsaXN0XG4gICAqIGNhdXNlcyB1bmludGVuZGVkIHNpZGUgZWZmZWN0cy5cbiAgICpcbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIGdldFBvc3NpYmxlU3RhbmRhcmROYW1lOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8geyBhdXRvZm9jdXM6ICdhdXRvRm9jdXMnIH0gOiBudWxsLFxuXG4gIC8qKlxuICAgKiBBbGwgb2YgdGhlIGlzQ3VzdG9tQXR0cmlidXRlKCkgZnVuY3Rpb25zIHRoYXQgaGF2ZSBiZWVuIGluamVjdGVkLlxuICAgKi9cbiAgX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zOiBbXSxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgYSBwcm9wZXJ0eSBuYW1lIGlzIGEgY3VzdG9tIGF0dHJpYnV0ZS5cbiAgICogQG1ldGhvZFxuICAgKi9cbiAgaXNDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpc0N1c3RvbUF0dHJpYnV0ZUZuID0gRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zW2ldO1xuICAgICAgaWYgKGlzQ3VzdG9tQXR0cmlidXRlRm4oYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICBpbmplY3Rpb246IERPTVByb3BlcnR5SW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVByb3BlcnR5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL0RPTVByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSAxOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5SZWdpc3RyeScpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luVXRpbHMnKTtcbnZhciBSZWFjdEVycm9yVXRpbHMgPSByZXF1aXJlKCcuL1JlYWN0RXJyb3JVdGlscycpO1xuXG52YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKCcuL2FjY3VtdWxhdGVJbnRvJyk7XG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZSgnLi9mb3JFYWNoQWNjdW11bGF0ZWQnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBJbnRlcm5hbCBzdG9yZSBmb3IgZXZlbnQgbGlzdGVuZXJzXG4gKi9cbnZhciBsaXN0ZW5lckJhbmsgPSB7fTtcblxuLyoqXG4gKiBJbnRlcm5hbCBxdWV1ZSBvZiBldmVudHMgdGhhdCBoYXZlIGFjY3VtdWxhdGVkIHRoZWlyIGRpc3BhdGNoZXMgYW5kIGFyZVxuICogd2FpdGluZyB0byBoYXZlIHRoZWlyIGRpc3BhdGNoZXMgZXhlY3V0ZWQuXG4gKi9cbnZhciBldmVudFF1ZXVlID0gbnVsbDtcblxuLyoqXG4gKiBEaXNwYXRjaGVzIGFuIGV2ZW50IGFuZCByZWxlYXNlcyBpdCBiYWNrIGludG8gdGhlIHBvb2wsIHVubGVzcyBwZXJzaXN0ZW50LlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gZXZlbnQgU3ludGhldGljIGV2ZW50IHRvIGJlIGRpc3BhdGNoZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNpbXVsYXRlZCBJZiB0aGUgZXZlbnQgaXMgc2ltdWxhdGVkIChjaGFuZ2VzIGV4biBiZWhhdmlvcilcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UgPSBmdW5jdGlvbiAoZXZlbnQsIHNpbXVsYXRlZCkge1xuICBpZiAoZXZlbnQpIHtcbiAgICBFdmVudFBsdWdpblV0aWxzLmV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlcihldmVudCwgc2ltdWxhdGVkKTtcblxuICAgIGlmICghZXZlbnQuaXNQZXJzaXN0ZW50KCkpIHtcbiAgICAgIGV2ZW50LmNvbnN0cnVjdG9yLnJlbGVhc2UoZXZlbnQpO1xuICAgIH1cbiAgfVxufTtcbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VTaW11bGF0ZWQgPSBmdW5jdGlvbiAoZSkge1xuICByZXR1cm4gZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKGUsIHRydWUpO1xufTtcbnZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCA9IGZ1bmN0aW9uIChlKSB7XG4gIHJldHVybiBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UoZSwgZmFsc2UpO1xufTtcblxudmFyIGdldERpY3Rpb25hcnlLZXkgPSBmdW5jdGlvbiAoaW5zdCkge1xuICAvLyBQcmV2ZW50cyBWOCBwZXJmb3JtYW5jZSBpc3N1ZTpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNzIzMlxuICByZXR1cm4gJy4nICsgaW5zdC5fcm9vdE5vZGVJRDtcbn07XG5cbmZ1bmN0aW9uIGlzSW50ZXJhY3RpdmUodGFnKSB7XG4gIHJldHVybiB0YWcgPT09ICdidXR0b24nIHx8IHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICdzZWxlY3QnIHx8IHRhZyA9PT0gJ3RleHRhcmVhJztcbn1cblxuZnVuY3Rpb24gc2hvdWxkUHJldmVudE1vdXNlRXZlbnQobmFtZSwgdHlwZSwgcHJvcHMpIHtcbiAgc3dpdGNoIChuYW1lKSB7XG4gICAgY2FzZSAnb25DbGljayc6XG4gICAgY2FzZSAnb25DbGlja0NhcHR1cmUnOlxuICAgIGNhc2UgJ29uRG91YmxlQ2xpY2snOlxuICAgIGNhc2UgJ29uRG91YmxlQ2xpY2tDYXB0dXJlJzpcbiAgICBjYXNlICdvbk1vdXNlRG93bic6XG4gICAgY2FzZSAnb25Nb3VzZURvd25DYXB0dXJlJzpcbiAgICBjYXNlICdvbk1vdXNlTW92ZSc6XG4gICAgY2FzZSAnb25Nb3VzZU1vdmVDYXB0dXJlJzpcbiAgICBjYXNlICdvbk1vdXNlVXAnOlxuICAgIGNhc2UgJ29uTW91c2VVcENhcHR1cmUnOlxuICAgICAgcmV0dXJuICEhKHByb3BzLmRpc2FibGVkICYmIGlzSW50ZXJhY3RpdmUodHlwZSkpO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIGlzIGEgdW5pZmllZCBpbnRlcmZhY2UgZm9yIGV2ZW50IHBsdWdpbnMgdG8gYmUgaW5zdGFsbGVkIGFuZCBjb25maWd1cmVkLlxuICpcbiAqIEV2ZW50IHBsdWdpbnMgY2FuIGltcGxlbWVudCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICBgZXh0cmFjdEV2ZW50c2Age2Z1bmN0aW9uKHN0cmluZywgRE9NRXZlbnRUYXJnZXQsIHN0cmluZywgb2JqZWN0KTogKn1cbiAqICAgICBSZXF1aXJlZC4gV2hlbiBhIHRvcC1sZXZlbCBldmVudCBpcyBmaXJlZCwgdGhpcyBtZXRob2QgaXMgZXhwZWN0ZWQgdG9cbiAqICAgICBleHRyYWN0IHN5bnRoZXRpYyBldmVudHMgdGhhdCB3aWxsIGluIHR1cm4gYmUgcXVldWVkIGFuZCBkaXNwYXRjaGVkLlxuICpcbiAqICAgYGV2ZW50VHlwZXNgIHtvYmplY3R9XG4gKiAgICAgT3B0aW9uYWwsIHBsdWdpbnMgdGhhdCBmaXJlIGV2ZW50cyBtdXN0IHB1Ymxpc2ggYSBtYXBwaW5nIG9mIHJlZ2lzdHJhdGlvblxuICogICAgIG5hbWVzIHRoYXQgYXJlIHVzZWQgdG8gcmVnaXN0ZXIgbGlzdGVuZXJzLiBWYWx1ZXMgb2YgdGhpcyBtYXBwaW5nIG11c3RcbiAqICAgICBiZSBvYmplY3RzIHRoYXQgY29udGFpbiBgcmVnaXN0cmF0aW9uTmFtZWAgb3IgYHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzYC5cbiAqXG4gKiAgIGBleGVjdXRlRGlzcGF0Y2hgIHtmdW5jdGlvbihvYmplY3QsIGZ1bmN0aW9uLCBzdHJpbmcpfVxuICogICAgIE9wdGlvbmFsLCBhbGxvd3MgcGx1Z2lucyB0byBvdmVycmlkZSBob3cgYW4gZXZlbnQgZ2V0cyBkaXNwYXRjaGVkLiBCeVxuICogICAgIGRlZmF1bHQsIHRoZSBsaXN0ZW5lciBpcyBzaW1wbHkgaW52b2tlZC5cbiAqXG4gKiBFYWNoIHBsdWdpbiB0aGF0IGlzIGluamVjdGVkIGludG8gYEV2ZW50c1BsdWdpbkh1YmAgaXMgaW1tZWRpYXRlbHkgb3BlcmFibGUuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgRXZlbnRQbHVnaW5IdWIgPSB7XG5cbiAgLyoqXG4gICAqIE1ldGhvZHMgZm9yIGluamVjdGluZyBkZXBlbmRlbmNpZXMuXG4gICAqL1xuICBpbmplY3Rpb246IHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IEluamVjdGVkRXZlbnRQbHVnaW5PcmRlclxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbk9yZGVyOiBFdmVudFBsdWdpblJlZ2lzdHJ5LmluamVjdEV2ZW50UGx1Z2luT3JkZXIsXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAgICAgKi9cbiAgICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lXG5cbiAgfSxcblxuICAvKipcbiAgICogU3RvcmVzIGBsaXN0ZW5lcmAgYXQgYGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtrZXldYC4gSXMgaWRlbXBvdGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGluc3QgVGhlIGluc3RhbmNlLCB3aGljaCBpcyB0aGUgc291cmNlIG9mIGV2ZW50cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgY2FsbGJhY2sgdG8gc3RvcmUuXG4gICAqL1xuICBwdXRMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgISh0eXBlb2YgbGlzdGVuZXIgPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkICVzIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IHR5cGUgJXMnLCByZWdpc3RyYXRpb25OYW1lLCB0eXBlb2YgbGlzdGVuZXIpIDogX3Byb2RJbnZhcmlhbnQoJzk0JywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyKSA6IHZvaWQgMDtcblxuICAgIHZhciBrZXkgPSBnZXREaWN0aW9uYXJ5S2V5KGluc3QpO1xuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSB8fCAobGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdID0ge30pO1xuICAgIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2tleV0gPSBsaXN0ZW5lcjtcblxuICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLmRpZFB1dExpc3RlbmVyKSB7XG4gICAgICBQbHVnaW5Nb2R1bGUuZGlkUHV0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGluc3QgVGhlIGluc3RhbmNlLCB3aGljaCBpcyB0aGUgc291cmNlIG9mIGV2ZW50cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb259IFRoZSBzdG9yZWQgY2FsbGJhY2suXG4gICAqL1xuICBnZXRMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAvLyBUT0RPOiBzaG91bGRQcmV2ZW50TW91c2VFdmVudCBpcyBET00tc3BlY2lmaWMgYW5kIGRlZmluaXRlbHkgc2hvdWxkIG5vdFxuICAgIC8vIGxpdmUgaGVyZTsgbmVlZHMgdG8gYmUgbW92ZWQgdG8gYSBiZXR0ZXIgcGxhY2Ugc29vblxuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICBpZiAoc2hvdWxkUHJldmVudE1vdXNlRXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgaW5zdC5fY3VycmVudEVsZW1lbnQudHlwZSwgaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHMpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGtleSA9IGdldERpY3Rpb25hcnlLZXkoaW5zdCk7XG4gICAgcmV0dXJuIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lICYmIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2tleV07XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgYSBsaXN0ZW5lciBmcm9tIHRoZSByZWdpc3RyYXRpb24gYmFuay5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGluc3QgVGhlIGluc3RhbmNlLCB3aGljaCBpcyB0aGUgc291cmNlIG9mIGV2ZW50cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlZ2lzdHJhdGlvbk5hbWUgTmFtZSBvZiBsaXN0ZW5lciAoZS5nLiBgb25DbGlja2ApLlxuICAgKi9cbiAgZGVsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uIChpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgaWYgKFBsdWdpbk1vZHVsZSAmJiBQbHVnaW5Nb2R1bGUud2lsbERlbGV0ZUxpc3RlbmVyKSB7XG4gICAgICBQbHVnaW5Nb2R1bGUud2lsbERlbGV0ZUxpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgIH1cblxuICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAvLyBUT0RPOiBUaGlzIHNob3VsZCBuZXZlciBiZSBudWxsIC0tIHdoZW4gaXMgaXQ/XG4gICAgaWYgKGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICB2YXIga2V5ID0gZ2V0RGljdGlvbmFyeUtleShpbnN0KTtcbiAgICAgIGRlbGV0ZSBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtrZXldO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRGVsZXRlcyBhbGwgbGlzdGVuZXJzIGZvciB0aGUgRE9NIGVsZW1lbnQgd2l0aCB0aGUgc3VwcGxpZWQgSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnN0IFRoZSBpbnN0YW5jZSwgd2hpY2ggaXMgdGhlIHNvdXJjZSBvZiBldmVudHMuXG4gICAqL1xuICBkZWxldGVBbGxMaXN0ZW5lcnM6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgdmFyIGtleSA9IGdldERpY3Rpb25hcnlLZXkoaW5zdCk7XG4gICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiBsaXN0ZW5lckJhbmspIHtcbiAgICAgIGlmICghbGlzdGVuZXJCYW5rLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtrZXldKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcikge1xuICAgICAgICBQbHVnaW5Nb2R1bGUud2lsbERlbGV0ZUxpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdW2tleV07XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgcmVnaXN0ZXJlZCBwbHVnaW5zIGFuIG9wcG9ydHVuaXR5IHRvIGV4dHJhY3QgZXZlbnRzIGZyb20gdG9wLWxldmVsXG4gICAqIG5hdGl2ZSBicm93c2VyIGV2ZW50cy5cbiAgICpcbiAgICogQHJldHVybiB7Kn0gQW4gYWNjdW11bGF0aW9uIG9mIHN5bnRoZXRpYyBldmVudHMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGV2ZW50cztcbiAgICB2YXIgcGx1Z2lucyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIE5vdCBldmVyeSBwbHVnaW4gaW4gdGhlIG9yZGVyaW5nIG1heSBiZSBsb2FkZWQgYXQgcnVudGltZS5cbiAgICAgIHZhciBwb3NzaWJsZVBsdWdpbiA9IHBsdWdpbnNbaV07XG4gICAgICBpZiAocG9zc2libGVQbHVnaW4pIHtcbiAgICAgICAgdmFyIGV4dHJhY3RlZEV2ZW50cyA9IHBvc3NpYmxlUGx1Z2luLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICBpZiAoZXh0cmFjdGVkRXZlbnRzKSB7XG4gICAgICAgICAgZXZlbnRzID0gYWNjdW11bGF0ZUludG8oZXZlbnRzLCBleHRyYWN0ZWRFdmVudHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBldmVudHM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVucXVldWVzIGEgc3ludGhldGljIGV2ZW50IHRoYXQgc2hvdWxkIGJlIGRpc3BhdGNoZWQgd2hlblxuICAgKiBgcHJvY2Vzc0V2ZW50UXVldWVgIGlzIGludm9rZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZlbnRzIEFuIGFjY3VtdWxhdGlvbiBvZiBzeW50aGV0aWMgZXZlbnRzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVFdmVudHM6IGZ1bmN0aW9uIChldmVudHMpIHtcbiAgICBpZiAoZXZlbnRzKSB7XG4gICAgICBldmVudFF1ZXVlID0gYWNjdW11bGF0ZUludG8oZXZlbnRRdWV1ZSwgZXZlbnRzKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERpc3BhdGNoZXMgYWxsIHN5bnRoZXRpYyBldmVudHMgb24gdGhlIGV2ZW50IHF1ZXVlLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByb2Nlc3NFdmVudFF1ZXVlOiBmdW5jdGlvbiAoc2ltdWxhdGVkKSB7XG4gICAgLy8gU2V0IGBldmVudFF1ZXVlYCB0byBudWxsIGJlZm9yZSBwcm9jZXNzaW5nIGl0IHNvIHRoYXQgd2UgY2FuIHRlbGwgaWYgbW9yZVxuICAgIC8vIGV2ZW50cyBnZXQgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZy5cbiAgICB2YXIgcHJvY2Vzc2luZ0V2ZW50UXVldWUgPSBldmVudFF1ZXVlO1xuICAgIGV2ZW50UXVldWUgPSBudWxsO1xuICAgIGlmIChzaW11bGF0ZWQpIHtcbiAgICAgIGZvckVhY2hBY2N1bXVsYXRlZChwcm9jZXNzaW5nRXZlbnRRdWV1ZSwgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlU2ltdWxhdGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yRWFjaEFjY3VtdWxhdGVkKHByb2Nlc3NpbmdFdmVudFF1ZXVlLCBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCk7XG4gICAgfVxuICAgICEhZXZlbnRRdWV1ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzRXZlbnRRdWV1ZSgpOiBBZGRpdGlvbmFsIGV2ZW50cyB3ZXJlIGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcgYW4gZXZlbnQgcXVldWUuIFN1cHBvcnQgZm9yIHRoaXMgaGFzIG5vdCB5ZXQgYmVlbiBpbXBsZW1lbnRlZC4nKSA6IF9wcm9kSW52YXJpYW50KCc5NScpIDogdm9pZCAwO1xuICAgIC8vIFRoaXMgd291bGQgYmUgYSBnb29kIHRpbWUgdG8gcmV0aHJvdyBpZiBhbnkgb2YgdGhlIGV2ZW50IGhhbmRsZXJzIHRocmV3LlxuICAgIFJlYWN0RXJyb3JVdGlscy5yZXRocm93Q2F1Z2h0RXJyb3IoKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlc2UgYXJlIG5lZWRlZCBmb3IgdGVzdHMgb25seS4gRG8gbm90IHVzZSFcbiAgICovXG4gIF9fcHVyZ2U6IGZ1bmN0aW9uICgpIHtcbiAgICBsaXN0ZW5lckJhbmsgPSB7fTtcbiAgfSxcblxuICBfX2dldExpc3RlbmVyQmFuazogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsaXN0ZW5lckJhbms7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpbkh1YjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9FdmVudFBsdWdpbkh1Yi5qc1xuLy8gbW9kdWxlIGlkID0gMjBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UGx1Z2luVXRpbHMgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luVXRpbHMnKTtcblxudmFyIGFjY3VtdWxhdGVJbnRvID0gcmVxdWlyZSgnLi9hY2N1bXVsYXRlSW50bycpO1xudmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9IHJlcXVpcmUoJy4vZm9yRWFjaEFjY3VtdWxhdGVkJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGdldExpc3RlbmVyID0gRXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXI7XG5cbi8qKlxuICogU29tZSBldmVudCB0eXBlcyBoYXZlIGEgbm90aW9uIG9mIGRpZmZlcmVudCByZWdpc3RyYXRpb24gbmFtZXMgZm9yIGRpZmZlcmVudFxuICogXCJwaGFzZXNcIiBvZiBwcm9wYWdhdGlvbi4gVGhpcyBmaW5kcyBsaXN0ZW5lcnMgYnkgYSBnaXZlbiBwaGFzZS5cbiAqL1xuZnVuY3Rpb24gbGlzdGVuZXJBdFBoYXNlKGluc3QsIGV2ZW50LCBwcm9wYWdhdGlvblBoYXNlKSB7XG4gIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcHJvcGFnYXRpb25QaGFzZV07XG4gIHJldHVybiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKTtcbn1cblxuLyoqXG4gKiBUYWdzIGEgYFN5bnRoZXRpY0V2ZW50YCB3aXRoIGRpc3BhdGNoZWQgbGlzdGVuZXJzLiBDcmVhdGluZyB0aGlzIGZ1bmN0aW9uXG4gKiBoZXJlLCBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gYmluZCBvciBjcmVhdGUgZnVuY3Rpb25zIGZvciBlYWNoIGV2ZW50LlxuICogTXV0YXRpbmcgdGhlIGV2ZW50J3MgbWVtYmVycyBhbGxvd3MgdXMgdG8gbm90IGhhdmUgdG8gY3JlYXRlIGEgd3JhcHBpbmdcbiAqIFwiZGlzcGF0Y2hcIiBvYmplY3QgdGhhdCBwYWlycyB0aGUgZXZlbnQgd2l0aCB0aGUgbGlzdGVuZXIuXG4gKi9cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMoaW5zdCwgcGhhc2UsIGV2ZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoaW5zdCwgJ0Rpc3BhdGNoaW5nIGluc3QgbXVzdCBub3QgYmUgbnVsbCcpIDogdm9pZCAwO1xuICB9XG4gIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyQXRQaGFzZShpbnN0LCBldmVudCwgcGhhc2UpO1xuICBpZiAobGlzdGVuZXIpIHtcbiAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMsIGluc3QpO1xuICB9XG59XG5cbi8qKlxuICogQ29sbGVjdCBkaXNwYXRjaGVzIChtdXN0IGJlIGVudGlyZWx5IGNvbGxlY3RlZCBiZWZvcmUgZGlzcGF0Y2hpbmcgLSBzZWUgdW5pdFxuICogdGVzdHMpLiBMYXppbHkgYWxsb2NhdGUgdGhlIGFycmF5IHRvIGNvbnNlcnZlIG1lbW9yeS4gIFdlIG11c3QgbG9vcCB0aHJvdWdoXG4gKiBlYWNoIGV2ZW50IGFuZCBwZXJmb3JtIHRoZSB0cmF2ZXJzYWwgZm9yIGVhY2ggb25lLiBXZSBjYW5ub3QgcGVyZm9ybSBhXG4gKiBzaW5nbGUgdHJhdmVyc2FsIGZvciB0aGUgZW50aXJlIGNvbGxlY3Rpb24gb2YgZXZlbnRzIGJlY2F1c2UgZWFjaCBldmVudCBtYXlcbiAqIGhhdmUgYSBkaWZmZXJlbnQgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKGV2ZW50KSB7XG4gIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIEV2ZW50UGx1Z2luVXRpbHMudHJhdmVyc2VUd29QaGFzZShldmVudC5fdGFyZ2V0SW5zdCwgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcywgZXZlbnQpO1xuICB9XG59XG5cbi8qKlxuICogU2FtZSBhcyBgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZWAsIGJ1dCBza2lwcyBvdmVyIHRoZSB0YXJnZXRJRC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgdmFyIHRhcmdldEluc3QgPSBldmVudC5fdGFyZ2V0SW5zdDtcbiAgICB2YXIgcGFyZW50SW5zdCA9IHRhcmdldEluc3QgPyBFdmVudFBsdWdpblV0aWxzLmdldFBhcmVudEluc3RhbmNlKHRhcmdldEluc3QpIDogbnVsbDtcbiAgICBFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlVHdvUGhhc2UocGFyZW50SW5zdCwgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcywgZXZlbnQpO1xuICB9XG59XG5cbi8qKlxuICogQWNjdW11bGF0ZXMgd2l0aG91dCByZWdhcmQgdG8gZGlyZWN0aW9uLCBkb2VzIG5vdCBsb29rIGZvciBwaGFzZWRcbiAqIHJlZ2lzdHJhdGlvbiBuYW1lcy4gU2FtZSBhcyBgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGVgIGJ1dCB3aXRob3V0XG4gKiByZXF1aXJpbmcgdGhhdCB0aGUgYGRpc3BhdGNoTWFya2VyYCBiZSB0aGUgc2FtZSBhcyB0aGUgZGlzcGF0Y2hlZCBJRC5cbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpc3BhdGNoZXMoaW5zdCwgaWdub3JlZERpcmVjdGlvbiwgZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWU7XG4gICAgdmFyIGxpc3RlbmVyID0gZ2V0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcywgaW5zdCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjdW11bGF0ZXMgZGlzcGF0Y2hlcyBvbiBhbiBgU3ludGhldGljRXZlbnRgLCBidXQgb25seSBmb3IgdGhlXG4gKiBgZGlzcGF0Y2hNYXJrZXJgLlxuICogQHBhcmFtIHtTeW50aGV0aWNFdmVudH0gZXZlbnRcbiAqL1xuZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhldmVudC5fdGFyZ2V0SW5zdCwgbnVsbCwgZXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnRzKSB7XG4gIGZvckVhY2hBY2N1bXVsYXRlZChldmVudHMsIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUpO1xufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldChldmVudHMpIHtcbiAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQpO1xufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tLCB0bykge1xuICBFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgYWNjdW11bGF0ZURpc3BhdGNoZXMsIGxlYXZlLCBlbnRlcik7XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKGV2ZW50cykge1xuICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlc1NpbmdsZSk7XG59XG5cbi8qKlxuICogQSBzbWFsbCBzZXQgb2YgcHJvcGFnYXRpb24gcGF0dGVybnMsIGVhY2ggb2Ygd2hpY2ggd2lsbCBhY2NlcHQgYSBzbWFsbCBhbW91bnRcbiAqIG9mIGluZm9ybWF0aW9uLCBhbmQgZ2VuZXJhdGUgYSBzZXQgb2YgXCJkaXNwYXRjaCByZWFkeSBldmVudCBvYmplY3RzXCIgLSB3aGljaFxuICogYXJlIHNldHMgb2YgZXZlbnRzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYW5ub3RhdGVkIHdpdGggYSBzZXQgb2YgZGlzcGF0Y2hlZFxuICogbGlzdGVuZXIgZnVuY3Rpb25zL2lkcy4gVGhlIEFQSSBpcyBkZXNpZ25lZCB0aGlzIHdheSB0byBkaXNjb3VyYWdlIHRoZXNlXG4gKiBwcm9wYWdhdGlvbiBzdHJhdGVnaWVzIGZyb20gYWN0dWFsbHkgZXhlY3V0aW5nIHRoZSBkaXNwYXRjaGVzLCBzaW5jZSB3ZVxuICogYWx3YXlzIHdhbnQgdG8gY29sbGVjdCB0aGUgZW50aXJlIHNldCBvZiBkaXNwYXRjaGVzIGJlZm9yZSBleGVjdXRpbmcgZXZlbnQgYVxuICogc2luZ2xlIG9uZS5cbiAqXG4gKiBAY29uc3RydWN0b3IgRXZlbnRQcm9wYWdhdG9yc1xuICovXG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHtcbiAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlczogYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyxcbiAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0LFxuICBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczogYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMsXG4gIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlczogYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UHJvcGFnYXRvcnM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvRXZlbnRQcm9wYWdhdG9ycy5qc1xuLy8gbW9kdWxlIGlkID0gMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UmVmID0gcmVxdWlyZSgnLi9SZWFjdFJlZicpO1xudmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuLyoqXG4gKiBIZWxwZXIgdG8gY2FsbCBSZWFjdFJlZi5hdHRhY2hSZWZzIHdpdGggdGhpcyBjb21wb3NpdGUgY29tcG9uZW50LCBzcGxpdCBvdXRcbiAqIHRvIGF2b2lkIGFsbG9jYXRpb25zIGluIHRoZSB0cmFuc2FjdGlvbiBtb3VudC1yZWFkeSBxdWV1ZS5cbiAqL1xuZnVuY3Rpb24gYXR0YWNoUmVmcygpIHtcbiAgUmVhY3RSZWYuYXR0YWNoUmVmcyh0aGlzLCB0aGlzLl9jdXJyZW50RWxlbWVudCk7XG59XG5cbnZhciBSZWFjdFJlY29uY2lsZXIgPSB7XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBjb21wb25lbnQsIHJlbmRlcnMgbWFya3VwLCBhbmQgcmVnaXN0ZXJzIGV2ZW50IGxpc3RlbmVycy5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb258UmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHs/b2JqZWN0fSB0aGUgY29udGFpbmluZyBob3N0IGNvbXBvbmVudCBpbnN0YW5jZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IGluZm8gYWJvdXQgdGhlIGhvc3QgY29udGFpbmVyXG4gICAqIEByZXR1cm4gez9zdHJpbmd9IFJlbmRlcmVkIG1hcmt1cCB0byBiZSBpbnNlcnRlZCBpbnRvIHRoZSBET00uXG4gICAqIEBmaW5hbFxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgdHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCBjb250ZXh0LCBwYXJlbnREZWJ1Z0lEIC8vIDAgaW4gcHJvZHVjdGlvbiBhbmQgZm9yIHJvb3RzXG4gICkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWZvcmVNb3VudENvbXBvbmVudChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCwgcGFyZW50RGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtYXJrdXAgPSBpbnRlcm5hbEluc3RhbmNlLm1vdW50Q29tcG9uZW50KHRyYW5zYWN0aW9uLCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgY29udGV4dCwgcGFyZW50RGVidWdJRCk7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50ICYmIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50LnJlZiAhPSBudWxsKSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGF0dGFjaFJlZnMsIGludGVybmFsSW5zdGFuY2UpO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTW91bnRDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXJrdXA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB2YWx1ZSB0aGF0IGNhbiBiZSBwYXNzZWQgdG9cbiAgICogUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXAuXG4gICAqL1xuICBnZXRIb3N0Tm9kZTogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICByZXR1cm4gaW50ZXJuYWxJbnN0YW5jZS5nZXRIb3N0Tm9kZSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFsbG9jYXRlZCBieSBgbW91bnRDb21wb25lbnRgLlxuICAgKlxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgc2FmZWx5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZm9yZVVubW91bnRDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICAgIFJlYWN0UmVmLmRldGFjaFJlZnMoaW50ZXJuYWxJbnN0YW5jZSwgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQpO1xuICAgIGludGVybmFsSW5zdGFuY2UudW5tb3VudENvbXBvbmVudChzYWZlbHkpO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Vbm1vdW50Q29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlIGEgY29tcG9uZW50IHVzaW5nIGEgbmV3IGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGludGVybmFsSW5zdGFuY2VcbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IG5leHRFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHRcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgbmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG5cbiAgICBpZiAobmV4dEVsZW1lbnQgPT09IHByZXZFbGVtZW50ICYmIGNvbnRleHQgPT09IGludGVybmFsSW5zdGFuY2UuX2NvbnRleHQpIHtcbiAgICAgIC8vIFNpbmNlIGVsZW1lbnRzIGFyZSBpbW11dGFibGUgYWZ0ZXIgdGhlIG93bmVyIGlzIHJlbmRlcmVkLFxuICAgICAgLy8gd2UgY2FuIGRvIGEgY2hlYXAgaWRlbnRpdHkgY29tcGFyZSBoZXJlIHRvIGRldGVybWluZSBpZiB0aGlzIGlzIGFcbiAgICAgIC8vIHN1cGVyZmx1b3VzIHJlY29uY2lsZS4gSXQncyBwb3NzaWJsZSBmb3Igc3RhdGUgdG8gYmUgbXV0YWJsZSBidXQgc3VjaFxuICAgICAgLy8gY2hhbmdlIHNob3VsZCB0cmlnZ2VyIGFuIHVwZGF0ZSBvZiB0aGUgb3duZXIgd2hpY2ggd291bGQgcmVjcmVhdGVcbiAgICAgIC8vIHRoZSBlbGVtZW50LiBXZSBleHBsaWNpdGx5IGNoZWNrIGZvciB0aGUgZXhpc3RlbmNlIG9mIGFuIG93bmVyIHNpbmNlXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIGZvciBhbiBlbGVtZW50IGNyZWF0ZWQgb3V0c2lkZSBhIGNvbXBvc2l0ZSB0byBiZVxuICAgICAgLy8gZGVlcGx5IG11dGF0ZWQgYW5kIHJldXNlZC5cblxuICAgICAgLy8gVE9ETzogQmFpbGluZyBvdXQgZWFybHkgaXMganVzdCBhIHBlcmYgb3B0aW1pemF0aW9uIHJpZ2h0P1xuICAgICAgLy8gVE9ETzogUmVtb3ZpbmcgdGhlIHJldHVybiBzdGF0ZW1lbnQgc2hvdWxkIGFmZmVjdCBjb3JyZWN0bmVzcz9cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVmb3JlVXBkYXRlQ29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQsIG5leHRFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVmc0NoYW5nZWQgPSBSZWFjdFJlZi5zaG91bGRVcGRhdGVSZWZzKHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCk7XG5cbiAgICBpZiAocmVmc0NoYW5nZWQpIHtcbiAgICAgIFJlYWN0UmVmLmRldGFjaFJlZnMoaW50ZXJuYWxJbnN0YW5jZSwgcHJldkVsZW1lbnQpO1xuICAgIH1cblxuICAgIGludGVybmFsSW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudChuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuXG4gICAgaWYgKHJlZnNDaGFuZ2VkICYmIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50ICYmIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50LnJlZiAhPSBudWxsKSB7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGF0dGFjaFJlZnMsIGludGVybmFsSW5zdGFuY2UpO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25VcGRhdGVDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBGbHVzaCBhbnkgZGlydHkgY2hhbmdlcyBpbiBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gaW50ZXJuYWxJbnN0YW5jZVxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBmdW5jdGlvbiAoaW50ZXJuYWxJbnN0YW5jZSwgdHJhbnNhY3Rpb24sIHVwZGF0ZUJhdGNoTnVtYmVyKSB7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UuX3VwZGF0ZUJhdGNoTnVtYmVyICE9PSB1cGRhdGVCYXRjaE51bWJlcikge1xuICAgICAgLy8gVGhlIGNvbXBvbmVudCdzIGVucXVldWVkIGJhdGNoIG51bWJlciBzaG91bGQgYWx3YXlzIGJlIHRoZSBjdXJyZW50XG4gICAgICAvLyBiYXRjaCBvciB0aGUgZm9sbG93aW5nIG9uZS5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGludGVybmFsSW5zdGFuY2UuX3VwZGF0ZUJhdGNoTnVtYmVyID09IG51bGwgfHwgaW50ZXJuYWxJbnN0YW5jZS5fdXBkYXRlQmF0Y2hOdW1iZXIgPT09IHVwZGF0ZUJhdGNoTnVtYmVyICsgMSwgJ3BlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogVW5leHBlY3RlZCBiYXRjaCBudW1iZXIgKGN1cnJlbnQgJXMsICcgKyAncGVuZGluZyAlcyknLCB1cGRhdGVCYXRjaE51bWJlciwgaW50ZXJuYWxJbnN0YW5jZS5fdXBkYXRlQmF0Y2hOdW1iZXIpIDogdm9pZCAwO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVmb3JlVXBkYXRlQ29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQsIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaW50ZXJuYWxJbnN0YW5jZS5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkodHJhbnNhY3Rpb24pO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25VcGRhdGVDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0UmVjb25jaWxlci5qc1xuLy8gbW9kdWxlIGlkID0gMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG52YXIgZ2V0RXZlbnRUYXJnZXQgPSByZXF1aXJlKCcuL2dldEV2ZW50VGFyZ2V0Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBVSUV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIFVJRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHZpZXc6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChldmVudC52aWV3KSB7XG4gICAgICByZXR1cm4gZXZlbnQudmlldztcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoZXZlbnQpO1xuICAgIGlmICh0YXJnZXQud2luZG93ID09PSB0YXJnZXQpIHtcbiAgICAgIC8vIHRhcmdldCBpcyBhIHdpbmRvdyBvYmplY3RcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgdmFyIGRvYyA9IHRhcmdldC5vd25lckRvY3VtZW50O1xuICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgd2h5IGBvd25lckRvY3VtZW50YCBpcyBzb21ldGltZXMgdW5kZWZpbmVkIGluIElFOC5cbiAgICBpZiAoZG9jKSB7XG4gICAgICByZXR1cm4gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB3aW5kb3c7XG4gICAgfVxuICB9LFxuICBkZXRhaWw6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBldmVudC5kZXRhaWwgfHwgMDtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY1VJRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVUlFdmVudCwgVUlFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljVUlFdmVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNVSUV2ZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKCcuL1JlYWN0Q2hpbGRyZW4nKTtcbnZhciBSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnQnKTtcbnZhciBSZWFjdFB1cmVDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0UHVyZUNvbXBvbmVudCcpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKCcuL1JlYWN0Q2xhc3MnKTtcbnZhciBSZWFjdERPTUZhY3RvcmllcyA9IHJlcXVpcmUoJy4vUmVhY3RET01GYWN0b3JpZXMnKTtcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlcycpO1xudmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG5cbnZhciBvbmx5Q2hpbGQgPSByZXF1aXJlKCcuL29ubHlDaGlsZCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQ7XG52YXIgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5O1xudmFyIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQ7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFZhbGlkYXRvcicpO1xuICBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQ7XG4gIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeTtcbiAgY2xvbmVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNsb25lRWxlbWVudDtcbn1cblxudmFyIF9fc3ByZWFkID0gX2Fzc2lnbjtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBfX3NwcmVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh3YXJuZWQsICdSZWFjdC5fX3NwcmVhZCBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIHVzZWQuIFVzZSAnICsgJ09iamVjdC5hc3NpZ24gZGlyZWN0bHkgb3IgYW5vdGhlciBoZWxwZXIgZnVuY3Rpb24gd2l0aCBzaW1pbGFyICcgKyAnc2VtYW50aWNzLiBZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIHlvdXIgY29tcGlsZXIuICcgKyAnU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtc3ByZWFkLWRlcHJlY2F0aW9uIGZvciBtb3JlIGRldGFpbHMuJykgOiB2b2lkIDA7XG4gICAgd2FybmVkID0gdHJ1ZTtcbiAgICByZXR1cm4gX2Fzc2lnbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG52YXIgUmVhY3QgPSB7XG5cbiAgLy8gTW9kZXJuXG5cbiAgQ2hpbGRyZW46IHtcbiAgICBtYXA6IFJlYWN0Q2hpbGRyZW4ubWFwLFxuICAgIGZvckVhY2g6IFJlYWN0Q2hpbGRyZW4uZm9yRWFjaCxcbiAgICBjb3VudDogUmVhY3RDaGlsZHJlbi5jb3VudCxcbiAgICB0b0FycmF5OiBSZWFjdENoaWxkcmVuLnRvQXJyYXksXG4gICAgb25seTogb25seUNoaWxkXG4gIH0sXG5cbiAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudCxcbiAgUHVyZUNvbXBvbmVudDogUmVhY3RQdXJlQ29tcG9uZW50LFxuXG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQsXG4gIGNsb25lRWxlbWVudDogY2xvbmVFbGVtZW50LFxuICBpc1ZhbGlkRWxlbWVudDogUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50LFxuXG4gIC8vIENsYXNzaWNcblxuICBQcm9wVHlwZXM6IFJlYWN0UHJvcFR5cGVzLFxuICBjcmVhdGVDbGFzczogUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyxcbiAgY3JlYXRlRmFjdG9yeTogY3JlYXRlRmFjdG9yeSxcbiAgY3JlYXRlTWl4aW46IGZ1bmN0aW9uIChtaXhpbikge1xuICAgIC8vIEN1cnJlbnRseSBhIG5vb3AuIFdpbGwgYmUgdXNlZCB0byB2YWxpZGF0ZSBhbmQgdHJhY2UgbWl4aW5zLlxuICAgIHJldHVybiBtaXhpbjtcbiAgfSxcblxuICAvLyBUaGlzIGxvb2tzIERPTSBzcGVjaWZpYyBidXQgdGhlc2UgYXJlIGFjdHVhbGx5IGlzb21vcnBoaWMgaGVscGVyc1xuICAvLyBzaW5jZSB0aGV5IGFyZSBqdXN0IGdlbmVyYXRpbmcgRE9NIHN0cmluZ3MuXG4gIERPTTogUmVhY3RET01GYWN0b3JpZXMsXG5cbiAgdmVyc2lvbjogUmVhY3RWZXJzaW9uLFxuXG4gIC8vIERlcHJlY2F0ZWQgaG9vayBmb3IgSlNYIHNwcmVhZCwgZG9uJ3QgdXNlIHRoaXMgZm9yIGFueXRoaW5nLlxuICBfX3NwcmVhZDogX19zcHJlYWRcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdC5qc1xuLy8gbW9kdWxlIGlkID0gMjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcbnZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKCcuL1ZpZXdwb3J0TWV0cmljcycpO1xuXG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZSgnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIE1vdXNlRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgTW91c2VFdmVudEludGVyZmFjZSA9IHtcbiAgc2NyZWVuWDogbnVsbCxcbiAgc2NyZWVuWTogbnVsbCxcbiAgY2xpZW50WDogbnVsbCxcbiAgY2xpZW50WTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICBidXR0b246IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIFdlYmtpdCwgRmlyZWZveCwgSUU5K1xuICAgIC8vIHdoaWNoOiAgMSAyIDNcbiAgICAvLyBidXR0b246IDAgMSAyIChzdGFuZGFyZClcbiAgICB2YXIgYnV0dG9uID0gZXZlbnQuYnV0dG9uO1xuICAgIGlmICgnd2hpY2gnIGluIGV2ZW50KSB7XG4gICAgICByZXR1cm4gYnV0dG9uO1xuICAgIH1cbiAgICAvLyBJRTw5XG4gICAgLy8gd2hpY2g6ICB1bmRlZmluZWRcbiAgICAvLyBidXR0b246IDAgMCAwXG4gICAgLy8gYnV0dG9uOiAxIDQgMiAob25tb3VzZXVwKVxuICAgIHJldHVybiBidXR0b24gPT09IDIgPyAyIDogYnV0dG9uID09PSA0ID8gMSA6IDA7XG4gIH0sXG4gIGJ1dHRvbnM6IG51bGwsXG4gIHJlbGF0ZWRUYXJnZXQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IChldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudCA/IGV2ZW50LnRvRWxlbWVudCA6IGV2ZW50LmZyb21FbGVtZW50KTtcbiAgfSxcbiAgLy8gXCJQcm9wcmlldGFyeVwiIEludGVyZmFjZS5cbiAgcGFnZVg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAncGFnZVgnIGluIGV2ZW50ID8gZXZlbnQucGFnZVggOiBldmVudC5jbGllbnRYICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0O1xuICB9LFxuICBwYWdlWTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdwYWdlWScgaW4gZXZlbnQgPyBldmVudC5wYWdlWSA6IGV2ZW50LmNsaWVudFkgKyBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbFRvcDtcbiAgfVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljTW91c2VFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljTW91c2VFdmVudCwgTW91c2VFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljTW91c2VFdmVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNNb3VzZUV2ZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAyNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIE9CU0VSVkVEX0VSUk9SID0ge307XG5cbi8qKlxuICogYFRyYW5zYWN0aW9uYCBjcmVhdGVzIGEgYmxhY2sgYm94IHRoYXQgaXMgYWJsZSB0byB3cmFwIGFueSBtZXRob2Qgc3VjaCB0aGF0XG4gKiBjZXJ0YWluIGludmFyaWFudHMgYXJlIG1haW50YWluZWQgYmVmb3JlIGFuZCBhZnRlciB0aGUgbWV0aG9kIGlzIGludm9rZWRcbiAqIChFdmVuIGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gd2hpbGUgaW52b2tpbmcgdGhlIHdyYXBwZWQgbWV0aG9kKS4gV2hvZXZlclxuICogaW5zdGFudGlhdGVzIGEgdHJhbnNhY3Rpb24gY2FuIHByb3ZpZGUgZW5mb3JjZXJzIG9mIHRoZSBpbnZhcmlhbnRzIGF0XG4gKiBjcmVhdGlvbiB0aW1lLiBUaGUgYFRyYW5zYWN0aW9uYCBjbGFzcyBpdHNlbGYgd2lsbCBzdXBwbHkgb25lIGFkZGl0aW9uYWxcbiAqIGF1dG9tYXRpYyBpbnZhcmlhbnQgZm9yIHlvdSAtIHRoZSBpbnZhcmlhbnQgdGhhdCBhbnkgdHJhbnNhY3Rpb24gaW5zdGFuY2VcbiAqIHNob3VsZCBub3QgYmUgcnVuIHdoaWxlIGl0IGlzIGFscmVhZHkgYmVpbmcgcnVuLiBZb3Ugd291bGQgdHlwaWNhbGx5IGNyZWF0ZSBhXG4gKiBzaW5nbGUgaW5zdGFuY2Ugb2YgYSBgVHJhbnNhY3Rpb25gIGZvciByZXVzZSBtdWx0aXBsZSB0aW1lcywgdGhhdCBwb3RlbnRpYWxseVxuICogaXMgdXNlZCB0byB3cmFwIHNldmVyYWwgZGlmZmVyZW50IG1ldGhvZHMuIFdyYXBwZXJzIGFyZSBleHRyZW1lbHkgc2ltcGxlIC1cbiAqIHRoZXkgb25seSByZXF1aXJlIGltcGxlbWVudGluZyB0d28gbWV0aG9kcy5cbiAqXG4gKiA8cHJlPlxuICogICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXJzIChpbmplY3RlZCBhdCBjcmVhdGlvbiB0aW1lKVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgICAgICAgICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tK1xuICogICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgIHYgICAgICAgIHwgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgICAgKy0tLS0tLS0tLS0tLS0tLSsgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgICstLXwgICAgd3JhcHBlcjEgICB8LS0tfC0tLS0rICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICArLS0tLS0tLS0tLS0tLS0tKyAgIHYgICAgfCAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgICAgICArLS0tLS0tLS0tLS0tLSsgIHwgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHwgICAgICstLS0tfCAgIHdyYXBwZXIyICB8LS0tLS0tLS0rICAgfFxuICogICAgICAgICAgICAgICAgICAgIHwgICB8ICAgICB8ICAgICstLS0tLS0tLS0tLS0tKyAgfCAgICAgfCAgIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICAgfCAgICAgfCAgICAgICAgICAgICAgICAgICAgIHwgICAgIHwgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCAgIHYgICAgIHYgICAgICAgICAgICAgICAgICAgICB2ICAgICB2ICAgfCB3cmFwcGVyXG4gKiAgICAgICAgICAgICAgICAgICAgfCArLS0tKyArLS0tKyAgICstLS0tLS0tLS0rICAgKy0tLSsgKy0tLSsgfCBpbnZhcmlhbnRzXG4gKiBwZXJmb3JtKGFueU1ldGhvZCkgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfCBtYWludGFpbmVkXG4gKiArLS0tLS0tLS0tLS0tLS0tLS0+fC18LS0tfC18LS0tfC0tPnxhbnlNZXRob2R8LS0tfC0tLXwtfC0tLXwtfC0tLS0tLS0tPlxuICogICAgICAgICAgICAgICAgICAgIHwgfCAgIHwgfCAgIHwgICB8ICAgICAgICAgfCAgIHwgICB8IHwgICB8IHxcbiAqICAgICAgICAgICAgICAgICAgICB8IHwgICB8IHwgICB8ICAgfCAgICAgICAgIHwgICB8ICAgfCB8ICAgfCB8XG4gKiAgICAgICAgICAgICAgICAgICAgfCB8ICAgfCB8ICAgfCAgIHwgICAgICAgICB8ICAgfCAgIHwgfCAgIHwgfFxuICogICAgICAgICAgICAgICAgICAgIHwgKy0tLSsgKy0tLSsgICArLS0tLS0tLS0tKyAgICstLS0rICstLS0rIHxcbiAqICAgICAgICAgICAgICAgICAgICB8ICBpbml0aWFsaXplICAgICAgICAgICAgICAgICAgICBjbG9zZSAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICogPC9wcmU+XG4gKlxuICogVXNlIGNhc2VzOlxuICogLSBQcmVzZXJ2aW5nIHRoZSBpbnB1dCBzZWxlY3Rpb24gcmFuZ2VzIGJlZm9yZS9hZnRlciByZWNvbmNpbGlhdGlvbi5cbiAqICAgUmVzdG9yaW5nIHNlbGVjdGlvbiBldmVuIGluIHRoZSBldmVudCBvZiBhbiB1bmV4cGVjdGVkIGVycm9yLlxuICogLSBEZWFjdGl2YXRpbmcgZXZlbnRzIHdoaWxlIHJlYXJyYW5naW5nIHRoZSBET00sIHByZXZlbnRpbmcgYmx1cnMvZm9jdXNlcyxcbiAqICAgd2hpbGUgZ3VhcmFudGVlaW5nIHRoYXQgYWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHN5c3RlbSBpcyByZWFjdGl2YXRlZC5cbiAqIC0gRmx1c2hpbmcgYSBxdWV1ZSBvZiBjb2xsZWN0ZWQgRE9NIG11dGF0aW9ucyB0byB0aGUgbWFpbiBVSSB0aHJlYWQgYWZ0ZXIgYVxuICogICByZWNvbmNpbGlhdGlvbiB0YWtlcyBwbGFjZSBpbiBhIHdvcmtlciB0aHJlYWQuXG4gKiAtIEludm9raW5nIGFueSBjb2xsZWN0ZWQgYGNvbXBvbmVudERpZFVwZGF0ZWAgY2FsbGJhY2tzIGFmdGVyIHJlbmRlcmluZyBuZXdcbiAqICAgY29udGVudC5cbiAqIC0gKEZ1dHVyZSB1c2UgY2FzZSk6IFdyYXBwaW5nIHBhcnRpY3VsYXIgZmx1c2hlcyBvZiB0aGUgYFJlYWN0V29ya2VyYCBxdWV1ZVxuICogICB0byBwcmVzZXJ2ZSB0aGUgYHNjcm9sbFRvcGAgKGFuIGF1dG9tYXRpYyBzY3JvbGwgYXdhcmUgRE9NKS5cbiAqIC0gKEZ1dHVyZSB1c2UgY2FzZSk6IExheW91dCBjYWxjdWxhdGlvbnMgYmVmb3JlIGFuZCBhZnRlciBET00gdXBkYXRlcy5cbiAqXG4gKiBUcmFuc2FjdGlvbmFsIHBsdWdpbiBBUEk6XG4gKiAtIEEgbW9kdWxlIHRoYXQgaGFzIGFuIGBpbml0aWFsaXplYCBtZXRob2QgdGhhdCByZXR1cm5zIGFueSBwcmVjb21wdXRhdGlvbi5cbiAqIC0gYW5kIGEgYGNsb3NlYCBtZXRob2QgdGhhdCBhY2NlcHRzIHRoZSBwcmVjb21wdXRhdGlvbi4gYGNsb3NlYCBpcyBpbnZva2VkXG4gKiAgIHdoZW4gdGhlIHdyYXBwZWQgcHJvY2VzcyBpcyBjb21wbGV0ZWQsIG9yIGhhcyBmYWlsZWQuXG4gKlxuICogQHBhcmFtIHtBcnJheTxUcmFuc2FjdGlvbmFsV3JhcHBlcj59IHRyYW5zYWN0aW9uV3JhcHBlciBXcmFwcGVyIG1vZHVsZXNcbiAqIHRoYXQgaW1wbGVtZW50IGBpbml0aWFsaXplYCBhbmQgYGNsb3NlYC5cbiAqIEByZXR1cm4ge1RyYW5zYWN0aW9ufSBTaW5nbGUgdHJhbnNhY3Rpb24gZm9yIHJldXNlIGluIHRocmVhZC5cbiAqXG4gKiBAY2xhc3MgVHJhbnNhY3Rpb25cbiAqL1xudmFyIFRyYW5zYWN0aW9uSW1wbCA9IHtcbiAgLyoqXG4gICAqIFNldHMgdXAgdGhpcyBpbnN0YW5jZSBzbyB0aGF0IGl0IGlzIHByZXBhcmVkIGZvciBjb2xsZWN0aW5nIG1ldHJpY3MuIERvZXNcbiAgICogc28gc3VjaCB0aGF0IHRoaXMgc2V0dXAgbWV0aG9kIG1heSBiZSB1c2VkIG9uIGFuIGluc3RhbmNlIHRoYXQgaXMgYWxyZWFkeVxuICAgKiBpbml0aWFsaXplZCwgaW4gYSB3YXkgdGhhdCBkb2VzIG5vdCBjb25zdW1lIGFkZGl0aW9uYWwgbWVtb3J5IHVwb24gcmV1c2UuXG4gICAqIFRoYXQgY2FuIGJlIHVzZWZ1bCBpZiB5b3UgZGVjaWRlIHRvIG1ha2UgeW91ciBzdWJjbGFzcyBvZiB0aGlzIG1peGluIGFcbiAgICogXCJQb29sZWRDbGFzc1wiLlxuICAgKi9cbiAgcmVpbml0aWFsaXplVHJhbnNhY3Rpb246IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLmdldFRyYW5zYWN0aW9uV3JhcHBlcnMoKTtcbiAgICBpZiAodGhpcy53cmFwcGVySW5pdERhdGEpIHtcbiAgICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud3JhcHBlckluaXREYXRhID0gW107XG4gICAgfVxuICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IGZhbHNlO1xuICB9LFxuXG4gIF9pc0luVHJhbnNhY3Rpb246IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBAYWJzdHJhY3RcbiAgICogQHJldHVybiB7QXJyYXk8VHJhbnNhY3Rpb25XcmFwcGVyPn0gQXJyYXkgb2YgdHJhbnNhY3Rpb24gd3JhcHBlcnMuXG4gICAqL1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBudWxsLFxuXG4gIGlzSW5UcmFuc2FjdGlvbjogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2lzSW5UcmFuc2FjdGlvbjtcbiAgfSxcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGZ1bmN0aW9uIHdpdGhpbiBhIHNhZmV0eSB3aW5kb3cuIFVzZSB0aGlzIGZvciB0aGUgdG9wIGxldmVsXG4gICAqIG1ldGhvZHMgdGhhdCByZXN1bHQgaW4gbGFyZ2UgYW1vdW50cyBvZiBjb21wdXRhdGlvbi9tdXRhdGlvbnMgdGhhdCB3b3VsZFxuICAgKiBuZWVkIHRvIGJlIHNhZmV0eSBjaGVja2VkLiBUaGUgb3B0aW9uYWwgYXJndW1lbnRzIGhlbHBzIHByZXZlbnQgdGhlIG5lZWRcbiAgICogdG8gYmluZCBpbiBtYW55IGNhc2VzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2QgTWVtYmVyIG9mIHNjb3BlIHRvIGNhbGwuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzY29wZSBTY29wZSB0byBpbnZva2UgZnJvbS5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gYSBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGIgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBjIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3Q/PX0gZCBBcmd1bWVudCB0byBwYXNzIHRvIHRoZSBtZXRob2QuXG4gICAqIEBwYXJhbSB7T2JqZWN0Pz19IGUgQXJndW1lbnQgdG8gcGFzcyB0byB0aGUgbWV0aG9kLlxuICAgKiBAcGFyYW0ge09iamVjdD89fSBmIEFyZ3VtZW50IHRvIHBhc3MgdG8gdGhlIG1ldGhvZC5cbiAgICpcbiAgICogQHJldHVybiB7Kn0gUmV0dXJuIHZhbHVlIGZyb20gYG1ldGhvZGAuXG4gICAqL1xuICBwZXJmb3JtOiBmdW5jdGlvbiAobWV0aG9kLCBzY29wZSwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgICEhdGhpcy5pc0luVHJhbnNhY3Rpb24oKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUcmFuc2FjdGlvbi5wZXJmb3JtKC4uLik6IENhbm5vdCBpbml0aWFsaXplIGEgdHJhbnNhY3Rpb24gd2hlbiB0aGVyZSBpcyBhbHJlYWR5IGFuIG91dHN0YW5kaW5nIHRyYW5zYWN0aW9uLicpIDogX3Byb2RJbnZhcmlhbnQoJzI3JykgOiB2b2lkIDA7XG4gICAgdmFyIGVycm9yVGhyb3duO1xuICAgIHZhciByZXQ7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IHRydWU7XG4gICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoXG4gICAgICAvLyBlcnJvclRocm93biBzZXQgdG8gdHJ1ZSBiZWZvcmUgc2V0dGluZyBpdCB0byBmYWxzZSBhZnRlciBjYWxsaW5nXG4gICAgICAvLyBjbG9zZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byB0cnVlIGluIHRoZSBmaW5hbGx5IGJsb2NrLCBpdCBtZWFuc1xuICAgICAgLy8gb25lIG9mIHRoZXNlIGNhbGxzIHRocmV3LlxuICAgICAgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgdGhpcy5pbml0aWFsaXplQWxsKDApO1xuICAgICAgcmV0ID0gbWV0aG9kLmNhbGwoc2NvcGUsIGEsIGIsIGMsIGQsIGUsIGYpO1xuICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgLy8gSWYgYG1ldGhvZGAgdGhyb3dzLCBwcmVmZXIgdG8gc2hvdyB0aGF0IHN0YWNrIHRyYWNlIG92ZXIgYW55IHRocm93blxuICAgICAgICAgIC8vIGJ5IGludm9raW5nIGBjbG9zZUFsbGAuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoMCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFNpbmNlIGBtZXRob2RgIGRpZG4ndCB0aHJvdywgd2UgZG9uJ3Qgd2FudCB0byBzaWxlbmNlIHRoZSBleGNlcHRpb25cbiAgICAgICAgICAvLyBoZXJlLlxuICAgICAgICAgIHRoaXMuY2xvc2VBbGwoMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIGluaXRpYWxpemVBbGw6IGZ1bmN0aW9uIChzdGFydEluZGV4KSB7XG4gICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0cmFuc2FjdGlvbldyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IHRyYW5zYWN0aW9uV3JhcHBlcnNbaV07XG4gICAgICB0cnkge1xuICAgICAgICAvLyBDYXRjaGluZyBlcnJvcnMgbWFrZXMgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LCBzbyB3ZSBzdGFydCB3aXRoIHRoZVxuICAgICAgICAvLyBPQlNFUlZFRF9FUlJPUiBzdGF0ZSBiZWZvcmUgb3ZlcndyaXRpbmcgaXQgd2l0aCB0aGUgcmVhbCByZXR1cm4gdmFsdWVcbiAgICAgICAgLy8gb2YgaW5pdGlhbGl6ZSAtLSBpZiBpdCdzIHN0aWxsIHNldCB0byBPQlNFUlZFRF9FUlJPUiBpbiB0aGUgZmluYWxseVxuICAgICAgICAvLyBibG9jaywgaXQgbWVhbnMgd3JhcHBlci5pbml0aWFsaXplIHRocmV3LlxuICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IE9CU0VSVkVEX0VSUk9SO1xuICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IHdyYXBwZXIuaW5pdGlhbGl6ZSA/IHdyYXBwZXIuaW5pdGlhbGl6ZS5jYWxsKHRoaXMpIDogbnVsbDtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmICh0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9PT0gT0JTRVJWRURfRVJST1IpIHtcbiAgICAgICAgICAvLyBUaGUgaW5pdGlhbGl6ZXIgZm9yIHdyYXBwZXIgaSB0aHJldyBhbiBlcnJvcjsgaW5pdGlhbGl6ZSB0aGVcbiAgICAgICAgICAvLyByZW1haW5pbmcgd3JhcHBlcnMgYnV0IHNpbGVuY2UgYW55IGV4Y2VwdGlvbnMgZnJvbSB0aGVtIHRvIGVuc3VyZVxuICAgICAgICAgIC8vIHRoYXQgdGhlIGZpcnN0IGVycm9yIGlzIHRoZSBvbmUgdG8gYnViYmxlIHVwLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVBbGwoaSArIDEpO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogSW52b2tlcyBlYWNoIG9mIGB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnMuY2xvc2VbaV1gIGZ1bmN0aW9ucywgcGFzc2luZyBpbnRvXG4gICAqIHRoZW0gdGhlIHJlc3BlY3RpdmUgcmV0dXJuIHZhbHVlcyBvZiBgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzLmluaXRbaV1gXG4gICAqIChgY2xvc2VgcnMgdGhhdCBjb3JyZXNwb25kIHRvIGluaXRpYWxpemVycyB0aGF0IGZhaWxlZCB3aWxsIG5vdCBiZVxuICAgKiBpbnZva2VkKS5cbiAgICovXG4gIGNsb3NlQWxsOiBmdW5jdGlvbiAoc3RhcnRJbmRleCkge1xuICAgICF0aGlzLmlzSW5UcmFuc2FjdGlvbigpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RyYW5zYWN0aW9uLmNsb3NlQWxsKCk6IENhbm5vdCBjbG9zZSB0cmFuc2FjdGlvbiB3aGVuIG5vbmUgYXJlIG9wZW4uJykgOiBfcHJvZEludmFyaWFudCgnMjgnKSA6IHZvaWQgMDtcbiAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdHJhbnNhY3Rpb25XcmFwcGVyc1tpXTtcbiAgICAgIHZhciBpbml0RGF0YSA9IHRoaXMud3JhcHBlckluaXREYXRhW2ldO1xuICAgICAgdmFyIGVycm9yVGhyb3duO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQ2F0Y2hpbmcgZXJyb3JzIG1ha2VzIGRlYnVnZ2luZyBtb3JlIGRpZmZpY3VsdCwgc28gd2Ugc3RhcnQgd2l0aFxuICAgICAgICAvLyBlcnJvclRocm93biBzZXQgdG8gdHJ1ZSBiZWZvcmUgc2V0dGluZyBpdCB0byBmYWxzZSBhZnRlciBjYWxsaW5nXG4gICAgICAgIC8vIGNsb3NlIC0tIGlmIGl0J3Mgc3RpbGwgc2V0IHRvIHRydWUgaW4gdGhlIGZpbmFsbHkgYmxvY2ssIGl0IG1lYW5zXG4gICAgICAgIC8vIHdyYXBwZXIuY2xvc2UgdGhyZXcuXG4gICAgICAgIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgaWYgKGluaXREYXRhICE9PSBPQlNFUlZFRF9FUlJPUiAmJiB3cmFwcGVyLmNsb3NlKSB7XG4gICAgICAgICAgd3JhcHBlci5jbG9zZS5jYWxsKHRoaXMsIGluaXREYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlcnJvclRocm93biA9IGZhbHNlO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgLy8gVGhlIGNsb3NlciBmb3Igd3JhcHBlciBpIHRocmV3IGFuIGVycm9yOyBjbG9zZSB0aGUgcmVtYWluaW5nXG4gICAgICAgICAgLy8gd3JhcHBlcnMgYnV0IHNpbGVuY2UgYW55IGV4Y2VwdGlvbnMgZnJvbSB0aGVtIHRvIGVuc3VyZSB0aGF0IHRoZVxuICAgICAgICAgIC8vIGZpcnN0IGVycm9yIGlzIHRoZSBvbmUgdG8gYnViYmxlIHVwLlxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlQWxsKGkgKyAxKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNhY3Rpb25JbXBsO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1RyYW5zYWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAyNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE2LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBCYXNlZCBvbiB0aGUgZXNjYXBlLWh0bWwgbGlicmFyeSwgd2hpY2ggaXMgdXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgYmVsb3c6XG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTMgVEogSG9sb3dheWNodWtcbiAqIENvcHlyaWdodCAoYykgMjAxNSBBbmRyZWFzIEx1YmJlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUgVGlhbmNoZW5nIFwiVGltb3RoeVwiIEd1XG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nXG4gKiBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbiAqICdTb2Z0d2FyZScpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbiAqIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbiAqIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xuICogcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvXG4gKiB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcbiAqIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4gKiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuICogQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcbiAqIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4gKiBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBjb2RlIGNvcGllZCBhbmQgbW9kaWZpZWQgZnJvbSBlc2NhcGUtaHRtbFxuLyoqXG4gKiBNb2R1bGUgdmFyaWFibGVzLlxuICogQHByaXZhdGVcbiAqL1xuXG52YXIgbWF0Y2hIdG1sUmVnRXhwID0gL1tcIicmPD5dLztcblxuLyoqXG4gKiBFc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIGluIHRoZSBnaXZlbiBzdHJpbmcgb2YgaHRtbC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGVzY2FwZSBmb3IgaW5zZXJ0aW5nIGludG8gSFRNTFxuICogQHJldHVybiB7c3RyaW5nfVxuICogQHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVzY2FwZUh0bWwoc3RyaW5nKSB7XG4gIHZhciBzdHIgPSAnJyArIHN0cmluZztcbiAgdmFyIG1hdGNoID0gbWF0Y2hIdG1sUmVnRXhwLmV4ZWMoc3RyKTtcblxuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIHZhciBlc2NhcGU7XG4gIHZhciBodG1sID0gJyc7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsYXN0SW5kZXggPSAwO1xuXG4gIGZvciAoaW5kZXggPSBtYXRjaC5pbmRleDsgaW5kZXggPCBzdHIubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgc3dpdGNoIChzdHIuY2hhckNvZGVBdChpbmRleCkpIHtcbiAgICAgIGNhc2UgMzQ6XG4gICAgICAgIC8vIFwiXG4gICAgICAgIGVzY2FwZSA9ICcmcXVvdDsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIC8vICZcbiAgICAgICAgZXNjYXBlID0gJyZhbXA7JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM5OlxuICAgICAgICAvLyAnXG4gICAgICAgIGVzY2FwZSA9ICcmI3gyNzsnOyAvLyBtb2RpZmllZCBmcm9tIGVzY2FwZS1odG1sOyB1c2VkIHRvIGJlICcmIzM5J1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjA6XG4gICAgICAgIC8vIDxcbiAgICAgICAgZXNjYXBlID0gJyZsdDsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNjI6XG4gICAgICAgIC8vID5cbiAgICAgICAgZXNjYXBlID0gJyZndDsnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChsYXN0SW5kZXggIT09IGluZGV4KSB7XG4gICAgICBodG1sICs9IHN0ci5zdWJzdHJpbmcobGFzdEluZGV4LCBpbmRleCk7XG4gICAgfVxuXG4gICAgbGFzdEluZGV4ID0gaW5kZXggKyAxO1xuICAgIGh0bWwgKz0gZXNjYXBlO1xuICB9XG5cbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gaW5kZXggPyBodG1sICsgc3RyLnN1YnN0cmluZyhsYXN0SW5kZXgsIGluZGV4KSA6IGh0bWw7XG59XG4vLyBlbmQgY29kZSBjb3BpZWQgYW5kIG1vZGlmaWVkIGZyb20gZXNjYXBlLWh0bWxcblxuXG4vKipcbiAqIEVzY2FwZXMgdGV4dCB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdGV4dCBUZXh0IHZhbHVlIHRvIGVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gQW4gZXNjYXBlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0ZXh0KSB7XG4gIGlmICh0eXBlb2YgdGV4dCA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGVvZiB0ZXh0ID09PSAnbnVtYmVyJykge1xuICAgIC8vIHRoaXMgc2hvcnRjaXJjdWl0IGhlbHBzIHBlcmYgZm9yIHR5cGVzIHRoYXQgd2Uga25vdyB3aWxsIG5ldmVyIGhhdmVcbiAgICAvLyBzcGVjaWFsIGNoYXJhY3RlcnMsIGVzcGVjaWFsbHkgZ2l2ZW4gdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIHVzZWQgb2Z0ZW5cbiAgICAvLyBmb3IgbnVtZXJpYyBkb20gaWRzLlxuICAgIHJldHVybiAnJyArIHRleHQ7XG4gIH1cbiAgcmV0dXJuIGVzY2FwZUh0bWwodGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBXaW5KUztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcIldpbkpTXCJcbi8vIG1vZHVsZSBpZCA9IDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaGFsbG93RXF1YWw7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ZianMvbGliL3NoYWxsb3dFcXVhbC5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIERhbmdlciA9IHJlcXVpcmUoJy4vRGFuZ2VyJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcblxudmFyIGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSByZXF1aXJlKCcuL2NyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24nKTtcbnZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKCcuL3NldElubmVySFRNTCcpO1xudmFyIHNldFRleHRDb250ZW50ID0gcmVxdWlyZSgnLi9zZXRUZXh0Q29udGVudCcpO1xuXG5mdW5jdGlvbiBnZXROb2RlQWZ0ZXIocGFyZW50Tm9kZSwgbm9kZSkge1xuICAvLyBTcGVjaWFsIGNhc2UgZm9yIHRleHQgY29tcG9uZW50cywgd2hpY2ggcmV0dXJuIFtvcGVuLCBjbG9zZV0gY29tbWVudHNcbiAgLy8gZnJvbSBnZXRIb3N0Tm9kZS5cbiAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICBub2RlID0gbm9kZVsxXTtcbiAgfVxuICByZXR1cm4gbm9kZSA/IG5vZGUubmV4dFNpYmxpbmcgOiBwYXJlbnROb2RlLmZpcnN0Q2hpbGQ7XG59XG5cbi8qKlxuICogSW5zZXJ0cyBgY2hpbGROb2RlYCBhcyBhIGNoaWxkIG9mIGBwYXJlbnROb2RlYCBhdCB0aGUgYGluZGV4YC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudE5vZGUgUGFyZW50IG5vZGUgaW4gd2hpY2ggdG8gaW5zZXJ0LlxuICogQHBhcmFtIHtET01FbGVtZW50fSBjaGlsZE5vZGUgQ2hpbGQgbm9kZSB0byBpbnNlcnQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggSW5kZXggYXQgd2hpY2ggdG8gaW5zZXJ0IHRoZSBjaGlsZC5cbiAqIEBpbnRlcm5hbFxuICovXG52YXIgaW5zZXJ0Q2hpbGRBdCA9IGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24gKHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICAvLyBXZSByZWx5IGV4Y2x1c2l2ZWx5IG9uIGBpbnNlcnRCZWZvcmUobm9kZSwgbnVsbClgIGluc3RlYWQgb2YgYWxzbyB1c2luZ1xuICAvLyBgYXBwZW5kQ2hpbGQobm9kZSlgLiAoVXNpbmcgYHVuZGVmaW5lZGAgaXMgbm90IGFsbG93ZWQgYnkgYWxsIGJyb3dzZXJzIHNvXG4gIC8vIHdlIGFyZSBjYXJlZnVsIHRvIHVzZSBgbnVsbGAuKVxuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShjaGlsZE5vZGUsIHJlZmVyZW5jZU5vZGUpO1xufSk7XG5cbmZ1bmN0aW9uIGluc2VydExhenlUcmVlQ2hpbGRBdChwYXJlbnROb2RlLCBjaGlsZFRyZWUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgRE9NTGF6eVRyZWUuaW5zZXJ0VHJlZUJlZm9yZShwYXJlbnROb2RlLCBjaGlsZFRyZWUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiBtb3ZlQ2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkTm9kZSkpIHtcbiAgICBtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBjaGlsZE5vZGVbMF0sIGNoaWxkTm9kZVsxXSwgcmVmZXJlbmNlTm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgaW5zZXJ0Q2hpbGRBdChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIHJlZmVyZW5jZU5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIGNoaWxkTm9kZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZE5vZGUpKSB7XG4gICAgdmFyIGNsb3NpbmdDb21tZW50ID0gY2hpbGROb2RlWzFdO1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZVswXTtcbiAgICByZW1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgY2xvc2luZ0NvbW1lbnQpO1xuICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvc2luZ0NvbW1lbnQpO1xuICB9XG4gIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2hpbGROb2RlKTtcbn1cblxuZnVuY3Rpb24gbW92ZURlbGltaXRlZFRleHQocGFyZW50Tm9kZSwgb3BlbmluZ0NvbW1lbnQsIGNsb3NpbmdDb21tZW50LCByZWZlcmVuY2VOb2RlKSB7XG4gIHZhciBub2RlID0gb3BlbmluZ0NvbW1lbnQ7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICBpbnNlcnRDaGlsZEF0KHBhcmVudE5vZGUsIG5vZGUsIHJlZmVyZW5jZU5vZGUpO1xuICAgIGlmIChub2RlID09PSBjbG9zaW5nQ29tbWVudCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIHN0YXJ0Tm9kZSwgY2xvc2luZ0NvbW1lbnQpIHtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZS5uZXh0U2libGluZztcbiAgICBpZiAobm9kZSA9PT0gY2xvc2luZ0NvbW1lbnQpIHtcbiAgICAgIC8vIFRoZSBjbG9zaW5nIGNvbW1lbnQgaXMgcmVtb3ZlZCBieSBSZWFjdE11bHRpQ2hpbGQuXG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZURlbGltaXRlZFRleHQob3BlbmluZ0NvbW1lbnQsIGNsb3NpbmdDb21tZW50LCBzdHJpbmdUZXh0KSB7XG4gIHZhciBwYXJlbnROb2RlID0gb3BlbmluZ0NvbW1lbnQucGFyZW50Tm9kZTtcbiAgdmFyIG5vZGVBZnRlckNvbW1lbnQgPSBvcGVuaW5nQ29tbWVudC5uZXh0U2libGluZztcbiAgaWYgKG5vZGVBZnRlckNvbW1lbnQgPT09IGNsb3NpbmdDb21tZW50KSB7XG4gICAgLy8gVGhlcmUgYXJlIG5vIHRleHQgbm9kZXMgYmV0d2VlbiB0aGUgb3BlbmluZyBhbmQgY2xvc2luZyBjb21tZW50czsgaW5zZXJ0XG4gICAgLy8gYSBuZXcgb25lIGlmIHN0cmluZ1RleHQgaXNuJ3QgZW1wdHkuXG4gICAgaWYgKHN0cmluZ1RleHQpIHtcbiAgICAgIGluc2VydENoaWxkQXQocGFyZW50Tm9kZSwgZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyaW5nVGV4dCksIG5vZGVBZnRlckNvbW1lbnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoc3RyaW5nVGV4dCkge1xuICAgICAgLy8gU2V0IHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGZpcnN0IG5vZGUgYWZ0ZXIgdGhlIG9wZW5pbmcgY29tbWVudCwgYW5kXG4gICAgICAvLyByZW1vdmUgYWxsIGZvbGxvd2luZyBub2RlcyB1cCB1bnRpbCB0aGUgY2xvc2luZyBjb21tZW50LlxuICAgICAgc2V0VGV4dENvbnRlbnQobm9kZUFmdGVyQ29tbWVudCwgc3RyaW5nVGV4dCk7XG4gICAgICByZW1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIG5vZGVBZnRlckNvbW1lbnQsIGNsb3NpbmdDb21tZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBvcGVuaW5nQ29tbWVudCwgY2xvc2luZ0NvbW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICBpbnN0YW5jZUlEOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShvcGVuaW5nQ29tbWVudCkuX2RlYnVnSUQsXG4gICAgICB0eXBlOiAncmVwbGFjZSB0ZXh0JyxcbiAgICAgIHBheWxvYWQ6IHN0cmluZ1RleHRcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAgPSBEYW5nZXIuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCA9IGZ1bmN0aW9uIChvbGRDaGlsZCwgbWFya3VwLCBwcmV2SW5zdGFuY2UpIHtcbiAgICBEYW5nZXIuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAob2xkQ2hpbGQsIG1hcmt1cCk7XG4gICAgaWYgKHByZXZJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgIGluc3RhbmNlSUQ6IHByZXZJbnN0YW5jZS5fZGVidWdJRCxcbiAgICAgICAgdHlwZTogJ3JlcGxhY2Ugd2l0aCcsXG4gICAgICAgIHBheWxvYWQ6IG1hcmt1cC50b1N0cmluZygpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5leHRJbnN0YW5jZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG1hcmt1cC5ub2RlKTtcbiAgICAgIGlmIChuZXh0SW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgICAgaW5zdGFuY2VJRDogbmV4dEluc3RhbmNlLl9kZWJ1Z0lELFxuICAgICAgICAgIHR5cGU6ICdtb3VudCcsXG4gICAgICAgICAgcGF5bG9hZDogbWFya3VwLnRvU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIHVwZGF0aW5nIHdpdGggRE9NIGNoaWxkcmVuLlxuICovXG52YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0ge1xuXG4gIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwOiBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCxcblxuICByZXBsYWNlRGVsaW1pdGVkVGV4dDogcmVwbGFjZURlbGltaXRlZFRleHQsXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgYSBjb21wb25lbnQncyBjaGlsZHJlbiBieSBwcm9jZXNzaW5nIGEgc2VyaWVzIG9mIHVwZGF0ZXMuIFRoZVxuICAgKiB1cGRhdGUgY29uZmlndXJhdGlvbnMgYXJlIGVhY2ggZXhwZWN0ZWQgdG8gaGF2ZSBhIGBwYXJlbnROb2RlYCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHthcnJheTxvYmplY3Q+fSB1cGRhdGVzIExpc3Qgb2YgdXBkYXRlIGNvbmZpZ3VyYXRpb25zLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHByb2Nlc3NVcGRhdGVzOiBmdW5jdGlvbiAocGFyZW50Tm9kZSwgdXBkYXRlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgcGFyZW50Tm9kZURlYnVnSUQgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShwYXJlbnROb2RlKS5fZGVidWdJRDtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBrID0gMDsgayA8IHVwZGF0ZXMubGVuZ3RoOyBrKyspIHtcbiAgICAgIHZhciB1cGRhdGUgPSB1cGRhdGVzW2tdO1xuICAgICAgc3dpdGNoICh1cGRhdGUudHlwZSkge1xuICAgICAgICBjYXNlICdJTlNFUlRfTUFSS1VQJzpcbiAgICAgICAgICBpbnNlcnRMYXp5VHJlZUNoaWxkQXQocGFyZW50Tm9kZSwgdXBkYXRlLmNvbnRlbnQsIGdldE5vZGVBZnRlcihwYXJlbnROb2RlLCB1cGRhdGUuYWZ0ZXJOb2RlKSk7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICAgICAgICBpbnN0YW5jZUlEOiBwYXJlbnROb2RlRGVidWdJRCxcbiAgICAgICAgICAgICAgdHlwZTogJ2luc2VydCBjaGlsZCcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHsgdG9JbmRleDogdXBkYXRlLnRvSW5kZXgsIGNvbnRlbnQ6IHVwZGF0ZS5jb250ZW50LnRvU3RyaW5nKCkgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdNT1ZFX0VYSVNUSU5HJzpcbiAgICAgICAgICBtb3ZlQ2hpbGQocGFyZW50Tm9kZSwgdXBkYXRlLmZyb21Ob2RlLCBnZXROb2RlQWZ0ZXIocGFyZW50Tm9kZSwgdXBkYXRlLmFmdGVyTm9kZSkpO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtcbiAgICAgICAgICAgICAgaW5zdGFuY2VJRDogcGFyZW50Tm9kZURlYnVnSUQsXG4gICAgICAgICAgICAgIHR5cGU6ICdtb3ZlIGNoaWxkJyxcbiAgICAgICAgICAgICAgcGF5bG9hZDogeyBmcm9tSW5kZXg6IHVwZGF0ZS5mcm9tSW5kZXgsIHRvSW5kZXg6IHVwZGF0ZS50b0luZGV4IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnU0VUX01BUktVUCc6XG4gICAgICAgICAgc2V0SW5uZXJIVE1MKHBhcmVudE5vZGUsIHVwZGF0ZS5jb250ZW50KTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgICAgICAgIGluc3RhbmNlSUQ6IHBhcmVudE5vZGVEZWJ1Z0lELFxuICAgICAgICAgICAgICB0eXBlOiAncmVwbGFjZSBjaGlsZHJlbicsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHVwZGF0ZS5jb250ZW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnVEVYVF9DT05URU5UJzpcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChwYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCk7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICAgICAgICBpbnN0YW5jZUlEOiBwYXJlbnROb2RlRGVidWdJRCxcbiAgICAgICAgICAgICAgdHlwZTogJ3JlcGxhY2UgdGV4dCcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHVwZGF0ZS5jb250ZW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnUkVNT1ZFX05PREUnOlxuICAgICAgICAgIHJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIHVwZGF0ZS5mcm9tTm9kZSk7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICAgICAgICBpbnN0YW5jZUlEOiBwYXJlbnROb2RlRGVidWdJRCxcbiAgICAgICAgICAgICAgdHlwZTogJ3JlbW92ZSBjaGlsZCcsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHsgZnJvbUluZGV4OiB1cGRhdGUuZnJvbUluZGV4IH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01DaGlsZHJlbk9wZXJhdGlvbnM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NTmFtZXNwYWNlcyA9IHtcbiAgaHRtbDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnLFxuICBtYXRobWw6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJyxcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTU5hbWVzcGFjZXM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvRE9NTmFtZXNwYWNlcy5qc1xuLy8gbW9kdWxlIGlkID0gMzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBvcmRlcmluZyBvZiBldmVudCBwbHVnaW5zLlxuICovXG52YXIgZXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG5cbi8qKlxuICogSW5qZWN0YWJsZSBtYXBwaW5nIGZyb20gbmFtZXMgdG8gZXZlbnQgcGx1Z2luIG1vZHVsZXMuXG4gKi9cbnZhciBuYW1lc1RvUGx1Z2lucyA9IHt9O1xuXG4vKipcbiAqIFJlY29tcHV0ZXMgdGhlIHBsdWdpbiBsaXN0IHVzaW5nIHRoZSBpbmplY3RlZCBwbHVnaW5zIGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKSB7XG4gIGlmICghZXZlbnRQbHVnaW5PcmRlcikge1xuICAgIC8vIFdhaXQgdW50aWwgYW4gYGV2ZW50UGx1Z2luT3JkZXJgIGlzIGluamVjdGVkLlxuICAgIHJldHVybjtcbiAgfVxuICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgdmFyIHBsdWdpbk1vZHVsZSA9IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgIHZhciBwbHVnaW5JbmRleCA9IGV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihwbHVnaW5OYW1lKTtcbiAgICAhKHBsdWdpbkluZGV4ID4gLTEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2lucyB0aGF0IGRvIG5vdCBleGlzdCBpbiB0aGUgcGx1Z2luIG9yZGVyaW5nLCBgJXNgLicsIHBsdWdpbk5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzk2JywgcGx1Z2luTmFtZSkgOiB2b2lkIDA7XG4gICAgaWYgKEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICAhcGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRXZlbnQgcGx1Z2lucyBtdXN0IGltcGxlbWVudCBhbiBgZXh0cmFjdEV2ZW50c2AgbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC4nLCBwbHVnaW5OYW1lKSA6IF9wcm9kSW52YXJpYW50KCc5NycsIHBsdWdpbk5hbWUpIDogdm9pZCAwO1xuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0gPSBwbHVnaW5Nb2R1bGU7XG4gICAgdmFyIHB1Ymxpc2hlZEV2ZW50cyA9IHBsdWdpbk1vZHVsZS5ldmVudFR5cGVzO1xuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBwdWJsaXNoZWRFdmVudHMpIHtcbiAgICAgICFwdWJsaXNoRXZlbnRGb3JQbHVnaW4ocHVibGlzaGVkRXZlbnRzW2V2ZW50TmFtZV0sIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBGYWlsZWQgdG8gcHVibGlzaCBldmVudCBgJXNgIGZvciBwbHVnaW4gYCVzYC4nLCBldmVudE5hbWUsIHBsdWdpbk5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzk4JywgZXZlbnROYW1lLCBwbHVnaW5OYW1lKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQdWJsaXNoZXMgYW4gZXZlbnQgc28gdGhhdCBpdCBjYW4gYmUgZGlzcGF0Y2hlZCBieSB0aGUgc3VwcGxpZWQgcGx1Z2luLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBEaXNwYXRjaCBjb25maWd1cmF0aW9uIGZvciB0aGUgZXZlbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgdGhlIGV2ZW50IHdhcyBzdWNjZXNzZnVsbHkgcHVibGlzaGVkLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gcHVibGlzaEV2ZW50Rm9yUGx1Z2luKGRpc3BhdGNoQ29uZmlnLCBwbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkge1xuICAhIUV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lIGV2ZW50IG5hbWUsIGAlc2AuJywgZXZlbnROYW1lKSA6IF9wcm9kSW52YXJpYW50KCc5OScsIGV2ZW50TmFtZSkgOiB2b2lkIDA7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV0gPSBkaXNwYXRjaENvbmZpZztcblxuICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMgPSBkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztcbiAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgZm9yICh2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuICAgICAgICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSA9IHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlTmFtZV07XG4gICAgICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGEgcmVnaXN0cmF0aW9uIG5hbWUgdGhhdCBpcyB1c2VkIHRvIGlkZW50aWZ5IGRpc3BhdGNoZWQgZXZlbnRzIGFuZFxuICogY2FuIGJlIHVzZWQgd2l0aCBgRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXJgIHRvIHJlZ2lzdGVyIGxpc3RlbmVycy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBSZWdpc3RyYXRpb24gbmFtZSB0byBhZGQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHJlZ2lzdHJhdGlvbk5hbWUsIHBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKSB7XG4gICEhRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgcmVnaXN0cmF0aW9uIG5hbWUsIGAlc2AuJywgcmVnaXN0cmF0aW9uTmFtZSkgOiBfcHJvZEludmFyaWFudCgnMTAwJywgcmVnaXN0cmF0aW9uTmFtZSkgOiB2b2lkIDA7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBwbHVnaW5Nb2R1bGU7XG4gIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXSA9IHBsdWdpbk1vZHVsZS5ldmVudFR5cGVzW2V2ZW50TmFtZV0uZGVwZW5kZW5jaWVzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gcmVnaXN0cmF0aW9uTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1tsb3dlckNhc2VkTmFtZV0gPSByZWdpc3RyYXRpb25OYW1lO1xuXG4gICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09ICdvbkRvdWJsZUNsaWNrJykge1xuICAgICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLm9uZGJsY2xpY2sgPSByZWdpc3RyYXRpb25OYW1lO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBwbHVnaW5zIHNvIHRoYXQgdGhleSBjYW4gZXh0cmFjdCBhbmQgZGlzcGF0Y2ggZXZlbnRzLlxuICpcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHVifVxuICovXG52YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcblxuICAvKipcbiAgICogT3JkZXJlZCBsaXN0IG9mIGluamVjdGVkIHBsdWdpbnMuXG4gICAqL1xuICBwbHVnaW5zOiBbXSxcblxuICAvKipcbiAgICogTWFwcGluZyBmcm9tIGV2ZW50IG5hbWUgdG8gZGlzcGF0Y2ggY29uZmlnXG4gICAqL1xuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gcGx1Z2luIG1vZHVsZVxuICAgKi9cbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM6IHt9LFxuXG4gIC8qKlxuICAgKiBNYXBwaW5nIGZyb20gcmVnaXN0cmF0aW9uIG5hbWUgdG8gZXZlbnQgbmFtZVxuICAgKi9cbiAgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczoge30sXG5cbiAgLyoqXG4gICAqIE1hcHBpbmcgZnJvbSBsb3dlcmNhc2UgcmVnaXN0cmF0aW9uIG5hbWVzIHRvIHRoZSBwcm9wZXJseSBjYXNlZCB2ZXJzaW9uLFxuICAgKiB1c2VkIHRvIHdhcm4gaW4gdGhlIGNhc2Ugb2YgbWlzc2luZyBldmVudCBoYW5kbGVycy4gQXZhaWxhYmxlXG4gICAqIG9ubHkgaW4gX19ERVZfXy5cbiAgICogQHR5cGUge09iamVjdH1cbiAgICovXG4gIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB7fSA6IG51bGwsXG4gIC8vIFRydXN0IHRoZSBkZXZlbG9wZXIgdG8gb25seSB1c2UgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyBpbiBfX0RFVl9fXG5cbiAgLyoqXG4gICAqIEluamVjdHMgYW4gb3JkZXJpbmcgb2YgcGx1Z2lucyAoYnkgcGx1Z2luIG5hbWUpLiBUaGlzIGFsbG93cyB0aGUgb3JkZXJpbmdcbiAgICogdG8gYmUgZGVjb3VwbGVkIGZyb20gaW5qZWN0aW9uIG9mIHRoZSBhY3R1YWwgcGx1Z2lucyBzbyB0aGF0IG9yZGVyaW5nIGlzXG4gICAqIGFsd2F5cyBkZXRlcm1pbmlzdGljIHJlZ2FyZGxlc3Mgb2YgcGFja2FnaW5nLCBvbi10aGUtZmx5IGluamVjdGlvbiwgZXRjLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5fSBJbmplY3RlZEV2ZW50UGx1Z2luT3JkZXJcbiAgICogQGludGVybmFsXG4gICAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyfVxuICAgKi9cbiAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogZnVuY3Rpb24gKGluamVjdGVkRXZlbnRQbHVnaW5PcmRlcikge1xuICAgICEhZXZlbnRQbHVnaW5PcmRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbiBvcmRlcmluZyBtb3JlIHRoYW4gb25jZS4gWW91IGFyZSBsaWtlbHkgdHJ5aW5nIHRvIGxvYWQgbW9yZSB0aGFuIG9uZSBjb3B5IG9mIFJlYWN0LicpIDogX3Byb2RJbnZhcmlhbnQoJzEwMScpIDogdm9pZCAwO1xuICAgIC8vIENsb25lIHRoZSBvcmRlcmluZyBzbyBpdCBjYW5ub3QgYmUgZHluYW1pY2FsbHkgbXV0YXRlZC5cbiAgICBldmVudFBsdWdpbk9yZGVyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyKTtcbiAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBJbmplY3RzIHBsdWdpbnMgdG8gYmUgdXNlZCBieSBgRXZlbnRQbHVnaW5IdWJgLiBUaGUgcGx1Z2luIG5hbWVzIG11c3QgYmVcbiAgICogaW4gdGhlIG9yZGVyaW5nIGluamVjdGVkIGJ5IGBpbmplY3RFdmVudFBsdWdpbk9yZGVyYC5cbiAgICpcbiAgICogUGx1Z2lucyBjYW4gYmUgaW5qZWN0ZWQgYXMgcGFydCBvZiBwYWdlIGluaXRpYWxpemF0aW9uIG9yIG9uLXRoZS1mbHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbmplY3RlZE5hbWVzVG9QbHVnaW5zIE1hcCBmcm9tIG5hbWVzIHRvIHBsdWdpbiBtb2R1bGVzLlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZX1cbiAgICovXG4gIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTogZnVuY3Rpb24gKGluamVjdGVkTmFtZXNUb1BsdWdpbnMpIHtcbiAgICB2YXIgaXNPcmRlcmluZ0RpcnR5ID0gZmFsc2U7XG4gICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICBpZiAoIWluamVjdGVkTmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgcGx1Z2luTW9kdWxlID0gaW5qZWN0ZWROYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgIGlmICghbmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkgfHwgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gIT09IHBsdWdpbk1vZHVsZSkge1xuICAgICAgICAhIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgdHdvIGRpZmZlcmVudCBldmVudCBwbHVnaW5zIHVzaW5nIHRoZSBzYW1lIG5hbWUsIGAlc2AuJywgcGx1Z2luTmFtZSkgOiBfcHJvZEludmFyaWFudCgnMTAyJywgcGx1Z2luTmFtZSkgOiB2b2lkIDA7XG4gICAgICAgIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID0gcGx1Z2luTW9kdWxlO1xuICAgICAgICBpc09yZGVyaW5nRGlydHkgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNPcmRlcmluZ0RpcnR5KSB7XG4gICAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTG9va3MgdXAgdGhlIHBsdWdpbiBmb3IgdGhlIHN1cHBsaWVkIGV2ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQSBzeW50aGV0aWMgZXZlbnQuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IFRoZSBwbHVnaW4gdGhhdCBjcmVhdGVkIHRoZSBzdXBwbGllZCBldmVudC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRQbHVnaW5Nb2R1bGVGb3JFdmVudDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoQ29uZmlnID0gZXZlbnQuZGlzcGF0Y2hDb25maWc7XG4gICAgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgIHJldHVybiBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW2Rpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWVdIHx8IG51bGw7XG4gICAgfVxuICAgIGlmIChkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBwdWxsaW5nIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIG91dCBvZiBkaXNwYXRjaENvbmZpZyBoZWxwcyBGbG93IHNlZVxuICAgICAgLy8gdGhhdCBpdCBpcyBub3QgdW5kZWZpbmVkLlxuICAgICAgdmFyIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzID0gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7XG5cbiAgICAgIGZvciAodmFyIHBoYXNlIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICAgIGlmICghcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2UpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcGhhc2VdXTtcbiAgICAgICAgaWYgKHBsdWdpbk1vZHVsZSkge1xuICAgICAgICAgIHJldHVybiBwbHVnaW5Nb2R1bGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZXNldEV2ZW50UGx1Z2luczogZnVuY3Rpb24gKCkge1xuICAgIGV2ZW50UGx1Z2luT3JkZXIgPSBudWxsO1xuICAgIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gbmFtZXNUb1BsdWdpbnMpIHtcbiAgICAgIGlmIChuYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSkge1xuICAgICAgICBkZWxldGUgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICB9XG4gICAgfVxuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2lucy5sZW5ndGggPSAwO1xuXG4gICAgdmFyIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzO1xuICAgIGZvciAodmFyIGV2ZW50TmFtZSBpbiBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MpIHtcbiAgICAgIGlmIChldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSkge1xuICAgICAgICBkZWxldGUgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzW2V2ZW50TmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcztcbiAgICBmb3IgKHZhciByZWdpc3RyYXRpb25OYW1lIGluIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzKSB7XG4gICAgICBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocmVnaXN0cmF0aW9uTmFtZSkpIHtcbiAgICAgICAgZGVsZXRlIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lcztcbiAgICAgIGZvciAodmFyIGxvd2VyQ2FzZWROYW1lIGluIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgICAgaWYgKHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpKSB7XG4gICAgICAgICAgZGVsZXRlIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXNbbG93ZXJDYXNlZE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5SZWdpc3RyeTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9FdmVudFBsdWdpblJlZ2lzdHJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAzMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3RFcnJvclV0aWxzID0gcmVxdWlyZSgnLi9SZWFjdEVycm9yVXRpbHMnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogSW5qZWN0ZWQgZGVwZW5kZW5jaWVzOlxuICovXG5cbi8qKlxuICogLSBgQ29tcG9uZW50VHJlZWA6IFtyZXF1aXJlZF0gTW9kdWxlIHRoYXQgY2FuIGNvbnZlcnQgYmV0d2VlbiBSZWFjdCBpbnN0YW5jZXNcbiAqICAgYW5kIGFjdHVhbCBub2RlIHJlZmVyZW5jZXMuXG4gKi9cbnZhciBDb21wb25lbnRUcmVlO1xudmFyIFRyZWVUcmF2ZXJzYWw7XG52YXIgaW5qZWN0aW9uID0ge1xuICBpbmplY3RDb21wb25lbnRUcmVlOiBmdW5jdGlvbiAoSW5qZWN0ZWQpIHtcbiAgICBDb21wb25lbnRUcmVlID0gSW5qZWN0ZWQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKEluamVjdGVkICYmIEluamVjdGVkLmdldE5vZGVGcm9tSW5zdGFuY2UgJiYgSW5qZWN0ZWQuZ2V0SW5zdGFuY2VGcm9tTm9kZSwgJ0V2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLmluamVjdENvbXBvbmVudFRyZWUoLi4uKTogSW5qZWN0ZWQgJyArICdtb2R1bGUgaXMgbWlzc2luZyBnZXROb2RlRnJvbUluc3RhbmNlIG9yIGdldEluc3RhbmNlRnJvbU5vZGUuJykgOiB2b2lkIDA7XG4gICAgfVxuICB9LFxuICBpbmplY3RUcmVlVHJhdmVyc2FsOiBmdW5jdGlvbiAoSW5qZWN0ZWQpIHtcbiAgICBUcmVlVHJhdmVyc2FsID0gSW5qZWN0ZWQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKEluamVjdGVkICYmIEluamVjdGVkLmlzQW5jZXN0b3IgJiYgSW5qZWN0ZWQuZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IsICdFdmVudFBsdWdpblV0aWxzLmluamVjdGlvbi5pbmplY3RUcmVlVHJhdmVyc2FsKC4uLik6IEluamVjdGVkICcgKyAnbW9kdWxlIGlzIG1pc3NpbmcgaXNBbmNlc3RvciBvciBnZXRMb3dlc3RDb21tb25BbmNlc3Rvci4nKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGlzRW5kaXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSAndG9wTW91c2VVcCcgfHwgdG9wTGV2ZWxUeXBlID09PSAndG9wVG91Y2hFbmQnIHx8IHRvcExldmVsVHlwZSA9PT0gJ3RvcFRvdWNoQ2FuY2VsJztcbn1cblxuZnVuY3Rpb24gaXNNb3ZlaXNoKHRvcExldmVsVHlwZSkge1xuICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSAndG9wTW91c2VNb3ZlJyB8fCB0b3BMZXZlbFR5cGUgPT09ICd0b3BUb3VjaE1vdmUnO1xufVxuZnVuY3Rpb24gaXNTdGFydGlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gJ3RvcE1vdXNlRG93bicgfHwgdG9wTGV2ZWxUeXBlID09PSAndG9wVG91Y2hTdGFydCc7XG59XG5cbnZhciB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcztcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICAgIHZhciBkaXNwYXRjaEluc3RhbmNlcyA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcblxuICAgIHZhciBsaXN0ZW5lcnNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpO1xuICAgIHZhciBsaXN0ZW5lcnNMZW4gPSBsaXN0ZW5lcnNJc0FyciA/IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aCA6IGRpc3BhdGNoTGlzdGVuZXJzID8gMSA6IDA7XG5cbiAgICB2YXIgaW5zdGFuY2VzSXNBcnIgPSBBcnJheS5pc0FycmF5KGRpc3BhdGNoSW5zdGFuY2VzKTtcbiAgICB2YXIgaW5zdGFuY2VzTGVuID0gaW5zdGFuY2VzSXNBcnIgPyBkaXNwYXRjaEluc3RhbmNlcy5sZW5ndGggOiBkaXNwYXRjaEluc3RhbmNlcyA/IDEgOiAwO1xuXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoaW5zdGFuY2VzSXNBcnIgPT09IGxpc3RlbmVyc0lzQXJyICYmIGluc3RhbmNlc0xlbiA9PT0gbGlzdGVuZXJzTGVuLCAnRXZlbnRQbHVnaW5VdGlsczogSW52YWxpZCBgZXZlbnRgLicpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIERpc3BhdGNoIHRoZSBldmVudCB0byB0aGUgbGlzdGVuZXIuXG4gKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCBTeW50aGV0aWNFdmVudCB0byBoYW5kbGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gc2ltdWxhdGVkIElmIHRoZSBldmVudCBpcyBzaW11bGF0ZWQgKGNoYW5nZXMgZXhuIGJlaGF2aW9yKVxuICogQHBhcmFtIHtmdW5jdGlvbn0gbGlzdGVuZXIgQXBwbGljYXRpb24tbGV2ZWwgY2FsbGJhY2tcbiAqIEBwYXJhbSB7Kn0gaW5zdCBJbnRlcm5hbCBjb21wb25lbnQgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoKGV2ZW50LCBzaW11bGF0ZWQsIGxpc3RlbmVyLCBpbnN0KSB7XG4gIHZhciB0eXBlID0gZXZlbnQudHlwZSB8fCAndW5rbm93bi1ldmVudCc7XG4gIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBFdmVudFBsdWdpblV0aWxzLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG4gIGlmIChzaW11bGF0ZWQpIHtcbiAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrV2l0aENhdGNoKHR5cGUsIGxpc3RlbmVyLCBldmVudCk7XG4gIH0gZWxzZSB7XG4gICAgUmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFjayh0eXBlLCBsaXN0ZW5lciwgZXZlbnQpO1xuICB9XG4gIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xufVxuXG4vKipcbiAqIFN0YW5kYXJkL3NpbXBsZSBpdGVyYXRpb24gdGhyb3VnaCBhbiBldmVudCdzIGNvbGxlY3RlZCBkaXNwYXRjaGVzLlxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIoZXZlbnQsIHNpbXVsYXRlZCkge1xuICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIHZhciBkaXNwYXRjaEluc3RhbmNlcyA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvLyBMaXN0ZW5lcnMgYW5kIEluc3RhbmNlcyBhcmUgdHdvIHBhcmFsbGVsIGFycmF5cyB0aGF0IGFyZSBhbHdheXMgaW4gc3luYy5cbiAgICAgIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgc2ltdWxhdGVkLCBkaXNwYXRjaExpc3RlbmVyc1tpXSwgZGlzcGF0Y2hJbnN0YW5jZXNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgc2ltdWxhdGVkLCBkaXNwYXRjaExpc3RlbmVycywgZGlzcGF0Y2hJbnN0YW5jZXMpO1xuICB9XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IG51bGw7XG59XG5cbi8qKlxuICogU3RhbmRhcmQvc2ltcGxlIGl0ZXJhdGlvbiB0aHJvdWdoIGFuIGV2ZW50J3MgY29sbGVjdGVkIGRpc3BhdGNoZXMsIGJ1dCBzdG9wc1xuICogYXQgdGhlIGZpcnN0IGRpc3BhdGNoIGV4ZWN1dGlvbiByZXR1cm5pbmcgdHJ1ZSwgYW5kIHJldHVybnMgdGhhdCBpZC5cbiAqXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBpZCBvZiB0aGUgZmlyc3QgZGlzcGF0Y2ggZXhlY3V0aW9uIHdobydzIGxpc3RlbmVyIHJldHVybnNcbiAqIHRydWUsIG9yIG51bGwgaWYgbm8gbGlzdGVuZXIgcmV0dXJuZWQgdHJ1ZS5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpIHtcbiAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICB2YXIgZGlzcGF0Y2hJbnN0YW5jZXMgPSBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXM7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgLy8gTGlzdGVuZXJzIGFuZCBJbnN0YW5jZXMgYXJlIHR3byBwYXJhbGxlbCBhcnJheXMgdGhhdCBhcmUgYWx3YXlzIGluIHN5bmMuXG4gICAgICBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnNbaV0oZXZlbnQsIGRpc3BhdGNoSW5zdGFuY2VzW2ldKSkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2hJbnN0YW5jZXNbaV07XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG4gICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKGV2ZW50LCBkaXNwYXRjaEluc3RhbmNlcykpIHtcbiAgICAgIHJldHVybiBkaXNwYXRjaEluc3RhbmNlcztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQHNlZSBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbFxuICovXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlKGV2ZW50KSB7XG4gIHZhciByZXQgPSBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCk7XG4gIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IG51bGw7XG4gIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogRXhlY3V0aW9uIG9mIGEgXCJkaXJlY3RcIiBkaXNwYXRjaCAtIHRoZXJlIG11c3QgYmUgYXQgbW9zdCBvbmUgZGlzcGF0Y2hcbiAqIGFjY3VtdWxhdGVkIG9uIHRoZSBldmVudCBvciBpdCBpcyBjb25zaWRlcmVkIGFuIGVycm9yLiBJdCBkb2Vzbid0IHJlYWxseSBtYWtlXG4gKiBzZW5zZSBmb3IgYW4gZXZlbnQgd2l0aCBtdWx0aXBsZSBkaXNwYXRjaGVzIChidWJibGVkKSB0byBrZWVwIHRyYWNrIG9mIHRoZVxuICogcmV0dXJuIHZhbHVlcyBhdCBlYWNoIGRpc3BhdGNoIGV4ZWN1dGlvbiwgYnV0IGl0IGRvZXMgdGVuZCB0byBtYWtlIHNlbnNlIHdoZW5cbiAqIGRlYWxpbmcgd2l0aCBcImRpcmVjdFwiIGRpc3BhdGNoZXMuXG4gKlxuICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBleGVjdXRpbmcgdGhlIHNpbmdsZSBkaXNwYXRjaC5cbiAqL1xuZnVuY3Rpb24gZXhlY3V0ZURpcmVjdERpc3BhdGNoKGV2ZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICB9XG4gIHZhciBkaXNwYXRjaExpc3RlbmVyID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICB2YXIgZGlzcGF0Y2hJbnN0YW5jZSA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAgISFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2V4ZWN1dGVEaXJlY3REaXNwYXRjaCguLi4pOiBJbnZhbGlkIGBldmVudGAuJykgOiBfcHJvZEludmFyaWFudCgnMTAzJykgOiB2b2lkIDA7XG4gIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBkaXNwYXRjaExpc3RlbmVyID8gRXZlbnRQbHVnaW5VdGlscy5nZXROb2RlRnJvbUluc3RhbmNlKGRpc3BhdGNoSW5zdGFuY2UpIDogbnVsbDtcbiAgdmFyIHJlcyA9IGRpc3BhdGNoTGlzdGVuZXIgPyBkaXNwYXRjaExpc3RlbmVyKGV2ZW50KSA6IG51bGw7XG4gIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBudWxsO1xuICByZXR1cm4gcmVzO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmZiBudW1iZXIgb2YgZGlzcGF0Y2hlcyBhY2N1bXVsYXRlZCBpcyBncmVhdGVyIHRoYW4gMC5cbiAqL1xuZnVuY3Rpb24gaGFzRGlzcGF0Y2hlcyhldmVudCkge1xuICByZXR1cm4gISFldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG59XG5cbi8qKlxuICogR2VuZXJhbCB1dGlsaXRpZXMgdGhhdCBhcmUgdXNlZnVsIGluIGNyZWF0aW5nIGN1c3RvbSBFdmVudCBQbHVnaW5zLlxuICovXG52YXIgRXZlbnRQbHVnaW5VdGlscyA9IHtcbiAgaXNFbmRpc2g6IGlzRW5kaXNoLFxuICBpc01vdmVpc2g6IGlzTW92ZWlzaCxcbiAgaXNTdGFydGlzaDogaXNTdGFydGlzaCxcblxuICBleGVjdXRlRGlyZWN0RGlzcGF0Y2g6IGV4ZWN1dGVEaXJlY3REaXNwYXRjaCxcbiAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIsXG4gIGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWU6IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUsXG4gIGhhc0Rpc3BhdGNoZXM6IGhhc0Rpc3BhdGNoZXMsXG5cbiAgZ2V0SW5zdGFuY2VGcm9tTm9kZTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG5vZGUpO1xuICB9LFxuICBnZXROb2RlRnJvbUluc3RhbmNlOiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBDb21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2Uobm9kZSk7XG4gIH0sXG4gIGlzQW5jZXN0b3I6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFRyZWVUcmF2ZXJzYWwuaXNBbmNlc3RvcihhLCBiKTtcbiAgfSxcbiAgZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3I6IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIFRyZWVUcmF2ZXJzYWwuZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoYSwgYik7XG4gIH0sXG4gIGdldFBhcmVudEluc3RhbmNlOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIHJldHVybiBUcmVlVHJhdmVyc2FsLmdldFBhcmVudEluc3RhbmNlKGluc3QpO1xuICB9LFxuICB0cmF2ZXJzZVR3b1BoYXNlOiBmdW5jdGlvbiAodGFyZ2V0LCBmbiwgYXJnKSB7XG4gICAgcmV0dXJuIFRyZWVUcmF2ZXJzYWwudHJhdmVyc2VUd29QaGFzZSh0YXJnZXQsIGZuLCBhcmcpO1xuICB9LFxuICB0cmF2ZXJzZUVudGVyTGVhdmU6IGZ1bmN0aW9uIChmcm9tLCB0bywgZm4sIGFyZ0Zyb20sIGFyZ1RvKSB7XG4gICAgcmV0dXJuIFRyZWVUcmF2ZXJzYWwudHJhdmVyc2VFbnRlckxlYXZlKGZyb20sIHRvLCBmbiwgYXJnRnJvbSwgYXJnVG8pO1xuICB9LFxuXG4gIGluamVjdGlvbjogaW5qZWN0aW9uXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50UGx1Z2luVXRpbHM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvRXZlbnRQbHVnaW5VdGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEVzY2FwZSBhbmQgd3JhcCBrZXkgc28gaXQgaXMgc2FmZSB0byB1c2UgYXMgYSByZWFjdGlkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgZXNjYXBlZCBrZXkuXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICB2YXIgZXNjYXBlUmVnZXggPSAvWz06XS9nO1xuICB2YXIgZXNjYXBlckxvb2t1cCA9IHtcbiAgICAnPSc6ICc9MCcsXG4gICAgJzonOiAnPTInXG4gIH07XG4gIHZhciBlc2NhcGVkU3RyaW5nID0gKCcnICsga2V5KS5yZXBsYWNlKGVzY2FwZVJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gZXNjYXBlckxvb2t1cFttYXRjaF07XG4gIH0pO1xuXG4gIHJldHVybiAnJCcgKyBlc2NhcGVkU3RyaW5nO1xufVxuXG4vKipcbiAqIFVuZXNjYXBlIGFuZCB1bndyYXAga2V5IGZvciBodW1hbi1yZWFkYWJsZSBkaXNwbGF5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSB0byB1bmVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHVuZXNjYXBlZCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHVuZXNjYXBlKGtleSkge1xuICB2YXIgdW5lc2NhcGVSZWdleCA9IC8oPTB8PTIpL2c7XG4gIHZhciB1bmVzY2FwZXJMb29rdXAgPSB7XG4gICAgJz0wJzogJz0nLFxuICAgICc9Mic6ICc6J1xuICB9O1xuICB2YXIga2V5U3Vic3RyaW5nID0ga2V5WzBdID09PSAnLicgJiYga2V5WzFdID09PSAnJCcgPyBrZXkuc3Vic3RyaW5nKDIpIDoga2V5LnN1YnN0cmluZygxKTtcblxuICByZXR1cm4gKCcnICsga2V5U3Vic3RyaW5nKS5yZXBsYWNlKHVuZXNjYXBlUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiB1bmVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICB9KTtcbn1cblxudmFyIEtleUVzY2FwZVV0aWxzID0ge1xuICBlc2NhcGU6IGVzY2FwZSxcbiAgdW5lc2NhcGU6IHVuZXNjYXBlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleUVzY2FwZVV0aWxzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL0tleUVzY2FwZVV0aWxzLmpzXG4vLyBtb2R1bGUgaWQgPSAzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3QnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBoYXNSZWFkT25seVZhbHVlID0ge1xuICAnYnV0dG9uJzogdHJ1ZSxcbiAgJ2NoZWNrYm94JzogdHJ1ZSxcbiAgJ2ltYWdlJzogdHJ1ZSxcbiAgJ2hpZGRlbic6IHRydWUsXG4gICdyYWRpbyc6IHRydWUsXG4gICdyZXNldCc6IHRydWUsXG4gICdzdWJtaXQnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dFByb3BzKSB7XG4gICEoaW5wdXRQcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0UHJvcHMudmFsdWVMaW5rID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgdmFsdWVMaW5rLiBJZiB5b3Ugd2FudCB0byB1c2UgY2hlY2tlZExpbmssIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIHZhbHVlTGluayBhbmQgdmljZSB2ZXJzYS4nKSA6IF9wcm9kSW52YXJpYW50KCc4NycpIDogdm9pZCAwO1xufVxuZnVuY3Rpb24gX2Fzc2VydFZhbHVlTGluayhpbnB1dFByb3BzKSB7XG4gIF9hc3NlcnRTaW5nbGVMaW5rKGlucHV0UHJvcHMpO1xuICAhKGlucHV0UHJvcHMudmFsdWUgPT0gbnVsbCAmJiBpbnB1dFByb3BzLm9uQ2hhbmdlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgdmFsdWVMaW5rIGFuZCBhIHZhbHVlIG9yIG9uQ2hhbmdlIGV2ZW50LiBJZiB5b3Ugd2FudCB0byB1c2UgdmFsdWUgb3Igb25DaGFuZ2UsIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIHZhbHVlTGluay4nKSA6IF9wcm9kSW52YXJpYW50KCc4OCcpIDogdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXRQcm9wcykge1xuICBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dFByb3BzKTtcbiAgIShpbnB1dFByb3BzLmNoZWNrZWQgPT0gbnVsbCAmJiBpbnB1dFByb3BzLm9uQ2hhbmdlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgY2hlY2tlZCBwcm9wZXJ0eSBvciBvbkNoYW5nZSBldmVudC4gSWYgeW91IHdhbnQgdG8gdXNlIGNoZWNrZWQgb3Igb25DaGFuZ2UsIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gdXNlIGNoZWNrZWRMaW5rJykgOiBfcHJvZEludmFyaWFudCgnODknKSA6IHZvaWQgMDtcbn1cblxudmFyIHByb3BUeXBlcyA9IHtcbiAgdmFsdWU6IGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fCBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgKyAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICsgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRWYWx1ZWAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgfSxcbiAgY2hlY2tlZDogZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYGNoZWNrZWRgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgKyAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdENoZWNrZWRgLiBPdGhlcndpc2UsICcgKyAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyk7XG4gIH0sXG4gIG9uQ2hhbmdlOiBSZWFjdC5Qcm9wVHlwZXMuZnVuY1xufTtcblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSB7XG4gIGlmIChvd25lcikge1xuICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogUHJvdmlkZSBhIGxpbmtlZCBgdmFsdWVgIGF0dHJpYnV0ZSBmb3IgY29udHJvbGxlZCBmb3Jtcy4gWW91IHNob3VsZCBub3QgdXNlXG4gKiB0aGlzIG91dHNpZGUgb2YgdGhlIFJlYWN0RE9NIGNvbnRyb2xsZWQgZm9ybSBjb21wb25lbnRzLlxuICovXG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHtcbiAgY2hlY2tQcm9wVHlwZXM6IGZ1bmN0aW9uICh0YWdOYW1lLCBwcm9wcywgb3duZXIpIHtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMsIHByb3BOYW1lLCB0YWdOYW1lLCAncHJvcCcsIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgIH1cbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgIC8vIE9ubHkgbW9uaXRvciB0aGlzIGZhaWx1cmUgb25jZSBiZWNhdXNlIHRoZXJlIHRlbmRzIHRvIGJlIGEgbG90IG9mIHRoZVxuICAgICAgICAvLyBzYW1lIGVycm9yLlxuICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuXG4gICAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcik7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkIGZvcm0gcHJvcFR5cGU6ICVzJXMnLCBlcnJvci5tZXNzYWdlLCBhZGRlbmR1bSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge29iamVjdH0gaW5wdXRQcm9wcyBQcm9wcyBmb3IgZm9ybSBjb21wb25lbnRcbiAgICogQHJldHVybiB7Kn0gY3VycmVudCB2YWx1ZSBvZiB0aGUgaW5wdXQgZWl0aGVyIGZyb20gdmFsdWUgcHJvcCBvciBsaW5rLlxuICAgKi9cbiAgZ2V0VmFsdWU6IGZ1bmN0aW9uIChpbnB1dFByb3BzKSB7XG4gICAgaWYgKGlucHV0UHJvcHMudmFsdWVMaW5rKSB7XG4gICAgICBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgcmV0dXJuIGlucHV0UHJvcHMudmFsdWVMaW5rLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gaW5wdXRQcm9wcy52YWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtvYmplY3R9IGlucHV0UHJvcHMgUHJvcHMgZm9yIGZvcm0gY29tcG9uZW50XG4gICAqIEByZXR1cm4geyp9IGN1cnJlbnQgY2hlY2tlZCBzdGF0dXMgb2YgdGhlIGlucHV0IGVpdGhlciBmcm9tIGNoZWNrZWQgcHJvcFxuICAgKiAgICAgICAgICAgICBvciBsaW5rLlxuICAgKi9cbiAgZ2V0Q2hlY2tlZDogZnVuY3Rpb24gKGlucHV0UHJvcHMpIHtcbiAgICBpZiAoaW5wdXRQcm9wcy5jaGVja2VkTGluaykge1xuICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgcmV0dXJuIGlucHV0UHJvcHMuY2hlY2tlZExpbmsudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBpbnB1dFByb3BzLmNoZWNrZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBpbnB1dFByb3BzIFByb3BzIGZvciBmb3JtIGNvbXBvbmVudFxuICAgKiBAcGFyYW0ge1N5bnRoZXRpY0V2ZW50fSBldmVudCBjaGFuZ2UgZXZlbnQgdG8gaGFuZGxlXG4gICAqL1xuICBleGVjdXRlT25DaGFuZ2U6IGZ1bmN0aW9uIChpbnB1dFByb3BzLCBldmVudCkge1xuICAgIGlmIChpbnB1dFByb3BzLnZhbHVlTGluaykge1xuICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dFByb3BzKTtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLnZhbHVlTGluay5yZXF1ZXN0Q2hhbmdlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChpbnB1dFByb3BzLmNoZWNrZWRMaW5rKSB7XG4gICAgICBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXRQcm9wcyk7XG4gICAgICByZXR1cm4gaW5wdXRQcm9wcy5jaGVja2VkTGluay5yZXF1ZXN0Q2hhbmdlKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgICB9IGVsc2UgaWYgKGlucHV0UHJvcHMub25DaGFuZ2UpIHtcbiAgICAgIHJldHVybiBpbnB1dFByb3BzLm9uQ2hhbmdlLmNhbGwodW5kZWZpbmVkLCBldmVudCk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpbmtlZFZhbHVlVXRpbHM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvTGlua2VkVmFsdWVVdGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpblJlZ2lzdHJ5Jyk7XG52YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiA9IHJlcXVpcmUoJy4vUmVhY3RFdmVudEVtaXR0ZXJNaXhpbicpO1xudmFyIFZpZXdwb3J0TWV0cmljcyA9IHJlcXVpcmUoJy4vVmlld3BvcnRNZXRyaWNzJyk7XG5cbnZhciBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSA9IHJlcXVpcmUoJy4vZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUnKTtcbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50U3VwcG9ydGVkJyk7XG5cbi8qKlxuICogU3VtbWFyeSBvZiBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBldmVudCBoYW5kbGluZzpcbiAqXG4gKiAgLSBUb3AtbGV2ZWwgZGVsZWdhdGlvbiBpcyB1c2VkIHRvIHRyYXAgbW9zdCBuYXRpdmUgYnJvd3NlciBldmVudHMuIFRoaXNcbiAqICAgIG1heSBvbmx5IG9jY3VyIGluIHRoZSBtYWluIHRocmVhZCBhbmQgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mXG4gKiAgICBSZWFjdEV2ZW50TGlzdGVuZXIsIHdoaWNoIGlzIGluamVjdGVkIGFuZCBjYW4gdGhlcmVmb3JlIHN1cHBvcnQgcGx1Z2dhYmxlXG4gKiAgICBldmVudCBzb3VyY2VzLiBUaGlzIGlzIHRoZSBvbmx5IHdvcmsgdGhhdCBvY2N1cnMgaW4gdGhlIG1haW4gdGhyZWFkLlxuICpcbiAqICAtIFdlIG5vcm1hbGl6ZSBhbmQgZGUtZHVwbGljYXRlIGV2ZW50cyB0byBhY2NvdW50IGZvciBicm93c2VyIHF1aXJrcy4gVGhpc1xuICogICAgbWF5IGJlIGRvbmUgaW4gdGhlIHdvcmtlciB0aHJlYWQuXG4gKlxuICogIC0gRm9yd2FyZCB0aGVzZSBuYXRpdmUgZXZlbnRzICh3aXRoIHRoZSBhc3NvY2lhdGVkIHRvcC1sZXZlbCB0eXBlIHVzZWQgdG9cbiAqICAgIHRyYXAgaXQpIHRvIGBFdmVudFBsdWdpbkh1YmAsIHdoaWNoIGluIHR1cm4gd2lsbCBhc2sgcGx1Z2lucyBpZiB0aGV5IHdhbnRcbiAqICAgIHRvIGV4dHJhY3QgYW55IHN5bnRoZXRpYyBldmVudHMuXG4gKlxuICogIC0gVGhlIGBFdmVudFBsdWdpbkh1YmAgd2lsbCB0aGVuIHByb2Nlc3MgZWFjaCBldmVudCBieSBhbm5vdGF0aW5nIHRoZW0gd2l0aFxuICogICAgXCJkaXNwYXRjaGVzXCIsIGEgc2VxdWVuY2Ugb2YgbGlzdGVuZXJzIGFuZCBJRHMgdGhhdCBjYXJlIGFib3V0IHRoYXQgZXZlbnQuXG4gKlxuICogIC0gVGhlIGBFdmVudFBsdWdpbkh1YmAgdGhlbiBkaXNwYXRjaGVzIHRoZSBldmVudHMuXG4gKlxuICogT3ZlcnZpZXcgb2YgUmVhY3QgYW5kIHRoZSBldmVudCBzeXN0ZW06XG4gKlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogfCAgICBET00gICAgIHwgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogICAgICAgfCAgICAgICAgICAgLlxuICogICAgICAgdiAgICAgICAgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLlxuICogfCBSZWFjdEV2ZW50IHwgICAgLlxuICogfCAgTGlzdGVuZXIgIHwgICAgLlxuICogKy0tLS0tLS0tLS0tLSsgICAgLiAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiAgICAgICB8ICAgICAgICAgICAuICAgICAgICAgICAgICAgKy0tLS0tLS0tK3xTaW1wbGVFdmVudHxcbiAqICAgICAgIHwgICAgICAgICAgIC4gICAgICAgICAgICAgICB8ICAgICAgICAgfFBsdWdpbiAgICAgfFxuICogKy0tLS0tfC0tLS0tLSsgICAgLiAgICAgICAgICAgICAgIHYgICAgICAgICArLS0tLS0tLS0tLS0rXG4gKiB8ICAgICB8ICAgICAgfCAgICAuICAgICstLS0tLS0tLS0tLS0tLSsgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0rXG4gKiB8ICAgICArLS0tLS0tLS0tLS0uLS0tPnxFdmVudFBsdWdpbkh1YnwgICAgICAgICAgICAgICAgICAgIHwgICAgRXZlbnQgICB8XG4gKiB8ICAgICAgICAgICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgICstLS0tLS0tLS0tLSsgIHwgUHJvcGFnYXRvcnN8XG4gKiB8IFJlYWN0RXZlbnQgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgIHxUYXBFdmVudCAgIHwgIHwtLS0tLS0tLS0tLS18XG4gKiB8ICBFbWl0dGVyICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHw8LS0tK3xQbHVnaW4gICAgIHwgIHxvdGhlciBwbHVnaW58XG4gKiB8ICAgICAgICAgICAgfCAgICAuICAgIHwgICAgICAgICAgICAgIHwgICAgICstLS0tLS0tLS0tLSsgIHwgIHV0aWxpdGllcyB8XG4gKiB8ICAgICArLS0tLS0tLS0tLS0uLS0tPnwgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0rXG4gKiB8ICAgICB8ICAgICAgfCAgICAuICAgICstLS0tLS0tLS0tLS0tLStcbiAqICstLS0tLXwtLS0tLS0rICAgIC4gICAgICAgICAgICAgICAgXiAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogICAgICAgfCAgICAgICAgICAgLiAgICAgICAgICAgICAgICB8ICAgICAgICB8RW50ZXIvTGVhdmV8XG4gKiAgICAgICArICAgICAgICAgICAuICAgICAgICAgICAgICAgICstLS0tLS0tK3xQbHVnaW4gICAgIHxcbiAqICstLS0tLS0tLS0tLS0tKyAgIC4gICAgICAgICAgICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tK1xuICogfCBhcHBsaWNhdGlvbiB8ICAgLlxuICogfC0tLS0tLS0tLS0tLS18ICAgLlxuICogfCAgICAgICAgICAgICB8ICAgLlxuICogfCAgICAgICAgICAgICB8ICAgLlxuICogKy0tLS0tLS0tLS0tLS0rICAgLlxuICogICAgICAgICAgICAgICAgICAgLlxuICogICAgUmVhY3QgQ29yZSAgICAgLiAgR2VuZXJhbCBQdXJwb3NlIEV2ZW50IFBsdWdpbiBTeXN0ZW1cbiAqL1xuXG52YXIgaGFzRXZlbnRQYWdlWFk7XG52YXIgYWxyZWFkeUxpc3RlbmluZ1RvID0ge307XG52YXIgaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUgPSBmYWxzZTtcbnZhciByZWFjdFRvcExpc3RlbmVyc0NvdW50ZXIgPSAwO1xuXG4vLyBGb3IgZXZlbnRzIGxpa2UgJ3N1Ym1pdCcgd2hpY2ggZG9uJ3QgY29uc2lzdGVudGx5IGJ1YmJsZSAod2hpY2ggd2UgdHJhcCBhdCBhXG4vLyBsb3dlciBub2RlIHRoYW4gYGRvY3VtZW50YCksIGJpbmRpbmcgYXQgYGRvY3VtZW50YCB3b3VsZCBjYXVzZSBkdXBsaWNhdGVcbi8vIGV2ZW50cyBzbyB3ZSBkb24ndCBpbmNsdWRlIHRoZW0gaGVyZVxudmFyIHRvcEV2ZW50TWFwcGluZyA9IHtcbiAgdG9wQWJvcnQ6ICdhYm9ydCcsXG4gIHRvcEFuaW1hdGlvbkVuZDogZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbmVuZCcpIHx8ICdhbmltYXRpb25lbmQnLFxuICB0b3BBbmltYXRpb25JdGVyYXRpb246IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25pdGVyYXRpb24nKSB8fCAnYW5pbWF0aW9uaXRlcmF0aW9uJyxcbiAgdG9wQW5pbWF0aW9uU3RhcnQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25zdGFydCcpIHx8ICdhbmltYXRpb25zdGFydCcsXG4gIHRvcEJsdXI6ICdibHVyJyxcbiAgdG9wQ2FuUGxheTogJ2NhbnBsYXknLFxuICB0b3BDYW5QbGF5VGhyb3VnaDogJ2NhbnBsYXl0aHJvdWdoJyxcbiAgdG9wQ2hhbmdlOiAnY2hhbmdlJyxcbiAgdG9wQ2xpY2s6ICdjbGljaycsXG4gIHRvcENvbXBvc2l0aW9uRW5kOiAnY29tcG9zaXRpb25lbmQnLFxuICB0b3BDb21wb3NpdGlvblN0YXJ0OiAnY29tcG9zaXRpb25zdGFydCcsXG4gIHRvcENvbXBvc2l0aW9uVXBkYXRlOiAnY29tcG9zaXRpb251cGRhdGUnLFxuICB0b3BDb250ZXh0TWVudTogJ2NvbnRleHRtZW51JyxcbiAgdG9wQ29weTogJ2NvcHknLFxuICB0b3BDdXQ6ICdjdXQnLFxuICB0b3BEb3VibGVDbGljazogJ2RibGNsaWNrJyxcbiAgdG9wRHJhZzogJ2RyYWcnLFxuICB0b3BEcmFnRW5kOiAnZHJhZ2VuZCcsXG4gIHRvcERyYWdFbnRlcjogJ2RyYWdlbnRlcicsXG4gIHRvcERyYWdFeGl0OiAnZHJhZ2V4aXQnLFxuICB0b3BEcmFnTGVhdmU6ICdkcmFnbGVhdmUnLFxuICB0b3BEcmFnT3ZlcjogJ2RyYWdvdmVyJyxcbiAgdG9wRHJhZ1N0YXJ0OiAnZHJhZ3N0YXJ0JyxcbiAgdG9wRHJvcDogJ2Ryb3AnLFxuICB0b3BEdXJhdGlvbkNoYW5nZTogJ2R1cmF0aW9uY2hhbmdlJyxcbiAgdG9wRW1wdGllZDogJ2VtcHRpZWQnLFxuICB0b3BFbmNyeXB0ZWQ6ICdlbmNyeXB0ZWQnLFxuICB0b3BFbmRlZDogJ2VuZGVkJyxcbiAgdG9wRXJyb3I6ICdlcnJvcicsXG4gIHRvcEZvY3VzOiAnZm9jdXMnLFxuICB0b3BJbnB1dDogJ2lucHV0JyxcbiAgdG9wS2V5RG93bjogJ2tleWRvd24nLFxuICB0b3BLZXlQcmVzczogJ2tleXByZXNzJyxcbiAgdG9wS2V5VXA6ICdrZXl1cCcsXG4gIHRvcExvYWRlZERhdGE6ICdsb2FkZWRkYXRhJyxcbiAgdG9wTG9hZGVkTWV0YWRhdGE6ICdsb2FkZWRtZXRhZGF0YScsXG4gIHRvcExvYWRTdGFydDogJ2xvYWRzdGFydCcsXG4gIHRvcE1vdXNlRG93bjogJ21vdXNlZG93bicsXG4gIHRvcE1vdXNlTW92ZTogJ21vdXNlbW92ZScsXG4gIHRvcE1vdXNlT3V0OiAnbW91c2VvdXQnLFxuICB0b3BNb3VzZU92ZXI6ICdtb3VzZW92ZXInLFxuICB0b3BNb3VzZVVwOiAnbW91c2V1cCcsXG4gIHRvcFBhc3RlOiAncGFzdGUnLFxuICB0b3BQYXVzZTogJ3BhdXNlJyxcbiAgdG9wUGxheTogJ3BsYXknLFxuICB0b3BQbGF5aW5nOiAncGxheWluZycsXG4gIHRvcFByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICB0b3BSYXRlQ2hhbmdlOiAncmF0ZWNoYW5nZScsXG4gIHRvcFNjcm9sbDogJ3Njcm9sbCcsXG4gIHRvcFNlZWtlZDogJ3NlZWtlZCcsXG4gIHRvcFNlZWtpbmc6ICdzZWVraW5nJyxcbiAgdG9wU2VsZWN0aW9uQ2hhbmdlOiAnc2VsZWN0aW9uY2hhbmdlJyxcbiAgdG9wU3RhbGxlZDogJ3N0YWxsZWQnLFxuICB0b3BTdXNwZW5kOiAnc3VzcGVuZCcsXG4gIHRvcFRleHRJbnB1dDogJ3RleHRJbnB1dCcsXG4gIHRvcFRpbWVVcGRhdGU6ICd0aW1ldXBkYXRlJyxcbiAgdG9wVG91Y2hDYW5jZWw6ICd0b3VjaGNhbmNlbCcsXG4gIHRvcFRvdWNoRW5kOiAndG91Y2hlbmQnLFxuICB0b3BUb3VjaE1vdmU6ICd0b3VjaG1vdmUnLFxuICB0b3BUb3VjaFN0YXJ0OiAndG91Y2hzdGFydCcsXG4gIHRvcFRyYW5zaXRpb25FbmQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCd0cmFuc2l0aW9uZW5kJykgfHwgJ3RyYW5zaXRpb25lbmQnLFxuICB0b3BWb2x1bWVDaGFuZ2U6ICd2b2x1bWVjaGFuZ2UnLFxuICB0b3BXYWl0aW5nOiAnd2FpdGluZycsXG4gIHRvcFdoZWVsOiAnd2hlZWwnXG59O1xuXG4vKipcbiAqIFRvIGVuc3VyZSBubyBjb25mbGljdHMgd2l0aCBvdGhlciBwb3RlbnRpYWwgUmVhY3QgaW5zdGFuY2VzIG9uIHRoZSBwYWdlXG4gKi9cbnZhciB0b3BMaXN0ZW5lcnNJREtleSA9ICdfcmVhY3RMaXN0ZW5lcnNJRCcgKyBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG5cbmZ1bmN0aW9uIGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpIHtcbiAgLy8gSW4gSUU4LCBgbW91bnRBdGAgaXMgYSBob3N0IG9iamVjdCBhbmQgZG9lc24ndCBoYXZlIGBoYXNPd25Qcm9wZXJ0eWBcbiAgLy8gZGlyZWN0bHkuXG4gIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vdW50QXQsIHRvcExpc3RlbmVyc0lES2V5KSkge1xuICAgIG1vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldID0gcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyKys7XG4gICAgYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXSA9IHt9O1xuICB9XG4gIHJldHVybiBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dO1xufVxuXG4vKipcbiAqIGBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXJgIGlzIHVzZWQgdG8gYXR0YWNoIHRvcC1sZXZlbCBldmVudCBsaXN0ZW5lcnMuIEZvclxuICogZXhhbXBsZTpcbiAqXG4gKiAgIEV2ZW50UGx1Z2luSHViLnB1dExpc3RlbmVyKCdteUlEJywgJ29uQ2xpY2snLCBteUZ1bmN0aW9uKTtcbiAqXG4gKiBUaGlzIHdvdWxkIGFsbG9jYXRlIGEgXCJyZWdpc3RyYXRpb25cIiBvZiBgKCdvbkNsaWNrJywgbXlGdW5jdGlvbilgIG9uICdteUlEJy5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IF9hc3NpZ24oe30sIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4sIHtcblxuICAvKipcbiAgICogSW5qZWN0YWJsZSBldmVudCBiYWNrZW5kXG4gICAqL1xuICBSZWFjdEV2ZW50TGlzdGVuZXI6IG51bGwsXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFJlYWN0RXZlbnRMaXN0ZW5lclxuICAgICAqL1xuICAgIGluamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gKFJlYWN0RXZlbnRMaXN0ZW5lcikge1xuICAgICAgUmVhY3RFdmVudExpc3RlbmVyLnNldEhhbmRsZVRvcExldmVsKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5oYW5kbGVUb3BMZXZlbCk7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyID0gUmVhY3RFdmVudExpc3RlbmVyO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB3aGV0aGVyIG9yIG5vdCBhbnkgY3JlYXRlZCBjYWxsYmFja3Mgc2hvdWxkIGJlIGVuYWJsZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBUcnVlIGlmIGNhbGxiYWNrcyBzaG91bGQgYmUgZW5hYmxlZC5cbiAgICovXG4gIHNldEVuYWJsZWQ6IGZ1bmN0aW9uIChlbmFibGVkKSB7XG4gICAgaWYgKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuc2V0RW5hYmxlZChlbmFibGVkKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgY2FsbGJhY2tzIGFyZSBlbmFibGVkLlxuICAgKi9cbiAgaXNFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIgJiYgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5pc0VuYWJsZWQoKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFdlIGxpc3RlbiBmb3IgYnViYmxlZCB0b3VjaCBldmVudHMgb24gdGhlIGRvY3VtZW50IG9iamVjdC5cbiAgICpcbiAgICogRmlyZWZveCB2OC4wMSAoYW5kIHBvc3NpYmx5IG90aGVycykgZXhoaWJpdGVkIHN0cmFuZ2UgYmVoYXZpb3Igd2hlblxuICAgKiBtb3VudGluZyBgb25tb3VzZW1vdmVgIGV2ZW50cyBhdCBzb21lIG5vZGUgdGhhdCB3YXMgbm90IHRoZSBkb2N1bWVudFxuICAgKiBlbGVtZW50LiBUaGUgc3ltcHRvbXMgd2VyZSB0aGF0IGlmIHlvdXIgbW91c2UgaXMgbm90IG1vdmluZyBvdmVyIHNvbWV0aGluZ1xuICAgKiBjb250YWluZWQgd2l0aGluIHRoYXQgbW91bnQgcG9pbnQgKGZvciBleGFtcGxlIG9uIHRoZSBiYWNrZ3JvdW5kKSB0aGVcbiAgICogdG9wLWxldmVsIGxpc3RlbmVycyBmb3IgYG9ubW91c2Vtb3ZlYCB3b24ndCBiZSBjYWxsZWQuIEhvd2V2ZXIsIGlmIHlvdVxuICAgKiByZWdpc3RlciB0aGUgYG1vdXNlbW92ZWAgb24gdGhlIGRvY3VtZW50IG9iamVjdCwgdGhlbiBpdCB3aWxsIG9mIGNvdXJzZVxuICAgKiBjYXRjaCBhbGwgYG1vdXNlbW92ZWBzLiBUaGlzIGFsb25nIHdpdGggaU9TIHF1aXJrcywganVzdGlmaWVzIHJlc3RyaWN0aW5nXG4gICAqIHRvcC1sZXZlbCBsaXN0ZW5lcnMgdG8gdGhlIGRvY3VtZW50IG9iamVjdCBvbmx5LCBhdCBsZWFzdCBmb3IgdGhlc2VcbiAgICogbW92ZW1lbnQgdHlwZXMgb2YgZXZlbnRzIGFuZCBwb3NzaWJseSBhbGwgZXZlbnRzLlxuICAgKlxuICAgKiBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDEwLzA5L2NsaWNrX2V2ZW50X2RlbC5odG1sXG4gICAqXG4gICAqIEFsc28sIGBrZXl1cGAvYGtleXByZXNzYC9ga2V5ZG93bmAgZG8gbm90IGJ1YmJsZSB0byB0aGUgd2luZG93IG9uIElFLCBidXRcbiAgICogdGhleSBidWJibGUgdG8gZG9jdW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRlbnREb2N1bWVudEhhbmRsZSBEb2N1bWVudCB3aGljaCBvd25zIHRoZSBjb250YWluZXJcbiAgICovXG4gIGxpc3RlblRvOiBmdW5jdGlvbiAocmVnaXN0cmF0aW9uTmFtZSwgY29udGVudERvY3VtZW50SGFuZGxlKSB7XG4gICAgdmFyIG1vdW50QXQgPSBjb250ZW50RG9jdW1lbnRIYW5kbGU7XG4gICAgdmFyIGlzTGlzdGVuaW5nID0gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCk7XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llc1tyZWdpc3RyYXRpb25OYW1lXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVwZW5kZW5jaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICAgIGlmICghKGlzTGlzdGVuaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpICYmIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldKSkge1xuICAgICAgICBpZiAoZGVwZW5kZW5jeSA9PT0gJ3RvcFdoZWVsJykge1xuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCd3aGVlbCcpKSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcFdoZWVsJywgJ3doZWVsJywgbW91bnRBdCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdtb3VzZXdoZWVsJykpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wV2hlZWwnLCAnbW91c2V3aGVlbCcsIG1vdW50QXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBGaXJlZm94IG5lZWRzIHRvIGNhcHR1cmUgYSBkaWZmZXJlbnQgbW91c2Ugc2Nyb2xsIGV2ZW50LlxuICAgICAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvdGVzdHMvc2Nyb2xsLmh0bWxcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wV2hlZWwnLCAnRE9NTW91c2VTY3JvbGwnLCBtb3VudEF0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gJ3RvcFNjcm9sbCcpIHtcblxuICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdzY3JvbGwnLCB0cnVlKSkge1xuICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudCgndG9wU2Nyb2xsJywgJ3Njcm9sbCcsIG1vdW50QXQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcFNjcm9sbCcsICdzY3JvbGwnLCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLldJTkRPV19IQU5ETEUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkZXBlbmRlbmN5ID09PSAndG9wRm9jdXMnIHx8IGRlcGVuZGVuY3kgPT09ICd0b3BCbHVyJykge1xuXG4gICAgICAgICAgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ2ZvY3VzJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQoJ3RvcEZvY3VzJywgJ2ZvY3VzJywgbW91bnRBdCk7XG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KCd0b3BCbHVyJywgJ2JsdXInLCBtb3VudEF0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ2ZvY3VzaW4nKSkge1xuICAgICAgICAgICAgLy8gSUUgaGFzIGBmb2N1c2luYCBhbmQgYGZvY3Vzb3V0YCBldmVudHMgd2hpY2ggYnViYmxlLlxuICAgICAgICAgICAgLy8gQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAwOC8wNC9kZWxlZ2F0aW5nX3RoZS5odG1sXG4gICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcEZvY3VzJywgJ2ZvY3VzaW4nLCBtb3VudEF0KTtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wQmx1cicsICdmb2N1c291dCcsIG1vdW50QXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHRvIG1ha2Ugc3VyZSBibHVyIGFuZCBmb2N1cyBldmVudCBsaXN0ZW5lcnMgYXJlIG9ubHkgYXR0YWNoZWQgb25jZVxuICAgICAgICAgIGlzTGlzdGVuaW5nLnRvcEJsdXIgPSB0cnVlO1xuICAgICAgICAgIGlzTGlzdGVuaW5nLnRvcEZvY3VzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0b3BFdmVudE1hcHBpbmcuaGFzT3duUHJvcGVydHkoZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQoZGVwZW5kZW5jeSwgdG9wRXZlbnRNYXBwaW5nW2RlcGVuZGVuY3ldLCBtb3VudEF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzTGlzdGVuaW5nW2RlcGVuZGVuY3ldID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgdHJhcEJ1YmJsZWRFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICByZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpO1xuICB9LFxuXG4gIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgIHJldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQcm90ZWN0IGFnYWluc3QgZG9jdW1lbnQuY3JlYXRlRXZlbnQoKSByZXR1cm5pbmcgbnVsbFxuICAgKiBTb21lIHBvcHVwIGJsb2NrZXIgZXh0ZW5zaW9ucyBhcHBlYXIgdG8gZG8gdGhpczpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy82ODg3XG4gICAqL1xuICBzdXBwb3J0c0V2ZW50UGFnZVhZOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFkb2N1bWVudC5jcmVhdGVFdmVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZXYgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICAgIHJldHVybiBldiAhPSBudWxsICYmICdwYWdlWCcgaW4gZXY7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExpc3RlbnMgdG8gd2luZG93IHNjcm9sbCBhbmQgcmVzaXplIGV2ZW50cy4gV2UgY2FjaGUgc2Nyb2xsIHZhbHVlcyBzbyB0aGF0XG4gICAqIGFwcGxpY2F0aW9uIGNvZGUgY2FuIGFjY2VzcyB0aGVtIHdpdGhvdXQgdHJpZ2dlcmluZyByZWZsb3dzLlxuICAgKlxuICAgKiBWaWV3cG9ydE1ldHJpY3MgaXMgb25seSB1c2VkIGJ5IFN5bnRoZXRpY01vdXNlL1RvdWNoRXZlbnQgYW5kIG9ubHkgd2hlblxuICAgKiBwYWdlWC9wYWdlWSBpc24ndCBzdXBwb3J0ZWQgKGxlZ2FjeSBicm93c2VycykuXG4gICAqXG4gICAqIE5PVEU6IFNjcm9sbCBldmVudHMgZG8gbm90IGJ1YmJsZS5cbiAgICpcbiAgICogQHNlZSBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2RvbS9ldmVudHMvc2Nyb2xsLmh0bWxcbiAgICovXG4gIGVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZzogZnVuY3Rpb24gKCkge1xuICAgIGlmIChoYXNFdmVudFBhZ2VYWSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBoYXNFdmVudFBhZ2VYWSA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zdXBwb3J0c0V2ZW50UGFnZVhZKCk7XG4gICAgfVxuICAgIGlmICghaGFzRXZlbnRQYWdlWFkgJiYgIWlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlKSB7XG4gICAgICB2YXIgcmVmcmVzaCA9IFZpZXdwb3J0TWV0cmljcy5yZWZyZXNoU2Nyb2xsVmFsdWVzO1xuICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5tb25pdG9yU2Nyb2xsVmFsdWUocmVmcmVzaCk7XG4gICAgICBpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgaW5qZWN0ZWQgPSBmYWxzZTtcblxudmFyIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQgPSB7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBzd2FwcGluZyBvdXQgbW91bnQgaW1hZ2VzIGluIHRoZSBtaWRkbGUgb2ZcbiAgICogdGhlIHRyZWUuXG4gICAqL1xuICByZXBsYWNlTm9kZVdpdGhNYXJrdXA6IG51bGwsXG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHkgaW5qZWN0YWJsZSBob29rIGZvciBwcm9jZXNzaW5nIGEgcXVldWUgb2YgY2hpbGQgdXBkYXRlcy4gV2lsbFxuICAgKiBsYXRlciBtb3ZlIGludG8gTXVsdGlDaGlsZENvbXBvbmVudHMuXG4gICAqL1xuICBwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBudWxsLFxuXG4gIGluamVjdGlvbjoge1xuICAgIGluamVjdEVudmlyb25tZW50OiBmdW5jdGlvbiAoZW52aXJvbm1lbnQpIHtcbiAgICAgICEhaW5qZWN0ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJykgOiBfcHJvZEludmFyaWFudCgnMTA0JykgOiB2b2lkIDA7XG4gICAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cCA9IGVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cDtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyA9IGVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXM7XG4gICAgICBpbmplY3RlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjYXVnaHRFcnJvciA9IG51bGw7XG5cbi8qKlxuICogQ2FsbCBhIGZ1bmN0aW9uIHdoaWxlIGd1YXJkaW5nIGFnYWluc3QgZXJyb3JzIHRoYXQgaGFwcGVucyB3aXRoaW4gaXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgdGhlIGd1YXJkIHRvIHVzZSBmb3IgbG9nZ2luZyBvciBkZWJ1Z2dpbmdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZVxuICogQHBhcmFtIHsqfSBhIEZpcnN0IGFyZ3VtZW50XG4gKiBAcGFyYW0geyp9IGIgU2Vjb25kIGFyZ3VtZW50XG4gKi9cbmZ1bmN0aW9uIGludm9rZUd1YXJkZWRDYWxsYmFjayhuYW1lLCBmdW5jLCBhKSB7XG4gIHRyeSB7XG4gICAgZnVuYyhhKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIGlmIChjYXVnaHRFcnJvciA9PT0gbnVsbCkge1xuICAgICAgY2F1Z2h0RXJyb3IgPSB4O1xuICAgIH1cbiAgfVxufVxuXG52YXIgUmVhY3RFcnJvclV0aWxzID0ge1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2s6IGludm9rZUd1YXJkZWRDYWxsYmFjayxcblxuICAvKipcbiAgICogSW52b2tlZCBieSBSZWFjdFRlc3RVdGlscy5TaW11bGF0ZSBzbyB0aGF0IGFueSBlcnJvcnMgdGhyb3duIGJ5IHRoZSBldmVudFxuICAgKiBoYW5kbGVyIGFyZSBzdXJlIHRvIGJlIHJldGhyb3duIGJ5IHJldGhyb3dDYXVnaHRFcnJvci5cbiAgICovXG4gIGludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaDogaW52b2tlR3VhcmRlZENhbGxiYWNrLFxuXG4gIC8qKlxuICAgKiBEdXJpbmcgZXhlY3V0aW9uIG9mIGd1YXJkZWQgZnVuY3Rpb25zIHdlIHdpbGwgY2FwdHVyZSB0aGUgZmlyc3QgZXJyb3Igd2hpY2hcbiAgICogd2Ugd2lsbCByZXRocm93IHRvIGJlIGhhbmRsZWQgYnkgdGhlIHRvcCBsZXZlbCBlcnJvciBoYW5kbGVyLlxuICAgKi9cbiAgcmV0aHJvd0NhdWdodEVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNhdWdodEVycm9yKSB7XG4gICAgICB2YXIgZXJyb3IgPSBjYXVnaHRFcnJvcjtcbiAgICAgIGNhdWdodEVycm9yID0gbnVsbDtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgLyoqXG4gICAqIFRvIGhlbHAgZGV2ZWxvcG1lbnQgd2UgY2FuIGdldCBiZXR0ZXIgZGV2dG9vbHMgaW50ZWdyYXRpb24gYnkgc2ltdWxhdGluZyBhXG4gICAqIHJlYWwgYnJvd3NlciBldmVudC5cbiAgICovXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRpc3BhdGNoRXZlbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZmFrZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdyZWFjdCcpO1xuICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiAobmFtZSwgZnVuYywgYSkge1xuICAgICAgdmFyIGJvdW5kRnVuYyA9IGZ1bmMuYmluZChudWxsLCBhKTtcbiAgICAgIHZhciBldnRUeXBlID0gJ3JlYWN0LScgKyBuYW1lO1xuICAgICAgZmFrZU5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBib3VuZEZ1bmMsIGZhbHNlKTtcbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIC8vICRGbG93Rml4TWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzIzMzZcbiAgICAgIGV2dC5pbml0RXZlbnQoZXZ0VHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgIGZha2VOb2RlLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgIGZha2VOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgYm91bmRGdW5jLCBmYWxzZSk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXJyb3JVdGlscztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdEVycm9yVXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogYFJlYWN0SW5zdGFuY2VNYXBgIG1haW50YWlucyBhIG1hcHBpbmcgZnJvbSBhIHB1YmxpYyBmYWNpbmcgc3RhdGVmdWxcbiAqIGluc3RhbmNlIChrZXkpIGFuZCB0aGUgaW50ZXJuYWwgcmVwcmVzZW50YXRpb24gKHZhbHVlKS4gVGhpcyBhbGxvd3MgcHVibGljXG4gKiBtZXRob2RzIHRvIGFjY2VwdCB0aGUgdXNlciBmYWNpbmcgaW5zdGFuY2UgYXMgYW4gYXJndW1lbnQgYW5kIG1hcCB0aGVtIGJhY2tcbiAqIHRvIGludGVybmFsIG1ldGhvZHMuXG4gKi9cblxuLy8gVE9ETzogUmVwbGFjZSB0aGlzIHdpdGggRVM2OiB2YXIgUmVhY3RJbnN0YW5jZU1hcCA9IG5ldyBNYXAoKTtcblxudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSB7XG5cbiAgLyoqXG4gICAqIFRoaXMgQVBJIHNob3VsZCBiZSBjYWxsZWQgYGRlbGV0ZWAgYnV0IHdlJ2QgaGF2ZSB0byBtYWtlIHN1cmUgdG8gYWx3YXlzXG4gICAqIHRyYW5zZm9ybSB0aGVzZSB0byBzdHJpbmdzIGZvciBJRSBzdXBwb3J0LiBXaGVuIHRoaXMgdHJhbnNmb3JtIGlzIGZ1bGx5XG4gICAqIHN1cHBvcnRlZCB3ZSBjYW4gcmVuYW1lIGl0LlxuICAgKi9cbiAgcmVtb3ZlOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlO1xuICB9LFxuXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSAhPT0gdW5kZWZpbmVkO1xuICB9LFxuXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IHZhbHVlO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnN0YW5jZU1hcDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdEluc3RhbmNlTWFwLmpzXG4vLyBtb2R1bGUgaWQgPSAzOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuLyogZ2xvYmFscyBNU0FwcCAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gd2hpY2ggaGFzICd1bnNhZmUnIHByaXZpbGVnZXMgKHJlcXVpcmVkIGJ5IHdpbmRvd3M4IGFwcHMpXG4gKi9cblxudmFyIGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSBmdW5jdGlvbiAoZnVuYykge1xuICBpZiAodHlwZW9mIE1TQXBwICE9PSAndW5kZWZpbmVkJyAmJiBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnMCwgYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZnVuYyhhcmcwLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIGBjaGFyQ29kZWAgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFwiY2hhcmFjdGVyIGNvZGVcIiBhbmQgaXMgc2FmZSB0byB1c2Ugd2l0aFxuICogYFN0cmluZy5mcm9tQ2hhckNvZGVgLiBBcyBzdWNoLCBvbmx5IGtleXMgdGhhdCBjb3JyZXNwb25kIHRvIHByaW50YWJsZVxuICogY2hhcmFjdGVycyBwcm9kdWNlIGEgdmFsaWQgYGNoYXJDb2RlYCwgdGhlIG9ubHkgZXhjZXB0aW9uIHRvIHRoaXMgaXMgRW50ZXIuXG4gKiBUaGUgVGFiLWtleSBpcyBjb25zaWRlcmVkIG5vbi1wcmludGFibGUgYW5kIGRvZXMgbm90IGhhdmUgYSBgY2hhckNvZGVgLFxuICogcHJlc3VtYWJseSBiZWNhdXNlIGl0IGRvZXMgbm90IHByb2R1Y2UgYSB0YWItY2hhcmFjdGVyIGluIGJyb3dzZXJzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge251bWJlcn0gTm9ybWFsaXplZCBgY2hhckNvZGVgIHByb3BlcnR5LlxuICovXG5cbmZ1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGNoYXJDb2RlO1xuICB2YXIga2V5Q29kZSA9IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG5cbiAgaWYgKCdjaGFyQ29kZScgaW4gbmF0aXZlRXZlbnQpIHtcbiAgICBjaGFyQ29kZSA9IG5hdGl2ZUV2ZW50LmNoYXJDb2RlO1xuXG4gICAgLy8gRkYgZG9lcyBub3Qgc2V0IGBjaGFyQ29kZWAgZm9yIHRoZSBFbnRlci1rZXksIGNoZWNrIGFnYWluc3QgYGtleUNvZGVgLlxuICAgIGlmIChjaGFyQ29kZSA9PT0gMCAmJiBrZXlDb2RlID09PSAxMykge1xuICAgICAgY2hhckNvZGUgPSAxMztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBgY2hhckNvZGVgLCBidXQgYGtleUNvZGVgIGhhcyB0aGUgY29ycmVjdCB2YWx1ZS5cbiAgICBjaGFyQ29kZSA9IGtleUNvZGU7XG4gIH1cblxuICAvLyBTb21lIG5vbi1wcmludGFibGUga2V5cyBhcmUgcmVwb3J0ZWQgaW4gYGNoYXJDb2RlYC9ga2V5Q29kZWAsIGRpc2NhcmQgdGhlbS5cbiAgLy8gTXVzdCBub3QgZGlzY2FyZCB0aGUgKG5vbi0pcHJpbnRhYmxlIEVudGVyLWtleS5cbiAgaWYgKGNoYXJDb2RlID49IDMyIHx8IGNoYXJDb2RlID09PSAxMykge1xuICAgIHJldHVybiBjaGFyQ29kZTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50Q2hhckNvZGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvZ2V0RXZlbnRDaGFyQ29kZS5qc1xuLy8gbW9kdWxlIGlkID0gNDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIG1vZGlmaWVyIGtleSB0byB0aGUgYXNzb2NpYXRlZCBwcm9wZXJ0eSBpbiB0aGUgZXZlbnQuXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8ja2V5cy1Nb2RpZmllcnNcbiAqL1xuXG52YXIgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gICdBbHQnOiAnYWx0S2V5JyxcbiAgJ0NvbnRyb2wnOiAnY3RybEtleScsXG4gICdNZXRhJzogJ21ldGFLZXknLFxuICAnU2hpZnQnOiAnc2hpZnRLZXknXG59O1xuXG4vLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGdldE1vZGlmaWVyU3RhdGUgc28gd2Ugc2ltcGx5IG1hcCBpdCB0byB0aGUgb25seVxuLy8gbW9kaWZpZXIga2V5cyBleHBvc2VkIGJ5IHRoZSBldmVudCBpdHNlbGYsIGRvZXMgbm90IHN1cHBvcnQgTG9jay1rZXlzLlxuLy8gQ3VycmVudGx5LCBhbGwgbWFqb3IgYnJvd3NlcnMgZXhjZXB0IENocm9tZSBzZWVtcyB0byBzdXBwb3J0IExvY2sta2V5cy5cbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIHZhciBzeW50aGV0aWNFdmVudCA9IHRoaXM7XG4gIHZhciBuYXRpdmVFdmVudCA9IHN5bnRoZXRpY0V2ZW50Lm5hdGl2ZUV2ZW50O1xuICBpZiAobmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSkge1xuICAgIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZyk7XG4gIH1cbiAgdmFyIGtleVByb3AgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddO1xuICByZXR1cm4ga2V5UHJvcCA/ICEhbmF0aXZlRXZlbnRba2V5UHJvcF0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50TW9kaWZpZXJTdGF0ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9nZXRFdmVudE1vZGlmaWVyU3RhdGUuanNcbi8vIG1vZHVsZSBpZCA9IDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cblxuZnVuY3Rpb24gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpIHtcbiAgdmFyIHRhcmdldCA9IG5hdGl2ZUV2ZW50LnRhcmdldCB8fCBuYXRpdmVFdmVudC5zcmNFbGVtZW50IHx8IHdpbmRvdztcblxuICAvLyBOb3JtYWxpemUgU1ZHIDx1c2U+IGVsZW1lbnQgZXZlbnRzICM0OTYzXG4gIGlmICh0YXJnZXQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpIHtcbiAgICB0YXJnZXQgPSB0YXJnZXQuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQ7XG4gIH1cblxuICAvLyBTYWZhcmkgbWF5IGZpcmUgZXZlbnRzIG9uIHRleHQgbm9kZXMgKE5vZGUuVEVYVF9OT0RFIGlzIDMpLlxuICAvLyBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZXZlbnRzX3Byb3BlcnRpZXMuaHRtbFxuICByZXR1cm4gdGFyZ2V0Lm5vZGVUeXBlID09PSAzID8gdGFyZ2V0LnBhcmVudE5vZGUgOiB0YXJnZXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0RXZlbnRUYXJnZXQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvZ2V0RXZlbnRUYXJnZXQuanNcbi8vIG1vZHVsZSBpZCA9IDQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiYgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgaWYgKCFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHwgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvaXNFdmVudFN1cHBvcnRlZC5qc1xuLy8gbW9kdWxlIGlkID0gNDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBET01OYW1lc3BhY2VzID0gcmVxdWlyZSgnLi9ET01OYW1lc3BhY2VzJyk7XG5cbnZhciBXSElURVNQQUNFX1RFU1QgPSAvXlsgXFxyXFxuXFx0XFxmXS87XG52YXIgTk9OVklTSUJMRV9URVNUID0gLzwoIS0tfGxpbmt8bm9zY3JpcHR8bWV0YXxzY3JpcHR8c3R5bGUpWyBcXHJcXG5cXHRcXGZcXC8+XS87XG5cbnZhciBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uJyk7XG5cbi8vIFNWRyB0ZW1wIGNvbnRhaW5lciBmb3IgSUUgbGFja2luZyBpbm5lckhUTUxcbnZhciByZXVzYWJsZVNWR0NvbnRhaW5lcjtcblxuLyoqXG4gKiBTZXQgdGhlIGlubmVySFRNTCBwcm9wZXJ0eSBvZiBhIG5vZGUsIGVuc3VyaW5nIHRoYXQgd2hpdGVzcGFjZSBpcyBwcmVzZXJ2ZWRcbiAqIGV2ZW4gaW4gSUU4LlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgc2V0SW5uZXJIVE1MID0gY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbiAobm9kZSwgaHRtbCkge1xuICAvLyBJRSBkb2VzIG5vdCBoYXZlIGlubmVySFRNTCBmb3IgU1ZHIG5vZGVzLCBzbyBpbnN0ZWFkIHdlIGluamVjdCB0aGVcbiAgLy8gbmV3IG1hcmt1cCBpbiBhIHRlbXAgbm9kZSBhbmQgdGhlbiBtb3ZlIHRoZSBjaGlsZCBub2RlcyBhY3Jvc3MgaW50b1xuICAvLyB0aGUgdGFyZ2V0IG5vZGVcbiAgaWYgKG5vZGUubmFtZXNwYWNlVVJJID09PSBET01OYW1lc3BhY2VzLnN2ZyAmJiAhKCdpbm5lckhUTUwnIGluIG5vZGUpKSB7XG4gICAgcmV1c2FibGVTVkdDb250YWluZXIgPSByZXVzYWJsZVNWR0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICByZXVzYWJsZVNWR0NvbnRhaW5lci5pbm5lckhUTUwgPSAnPHN2Zz4nICsgaHRtbCArICc8L3N2Zz4nO1xuICAgIHZhciBzdmdOb2RlID0gcmV1c2FibGVTVkdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoc3ZnTm9kZS5maXJzdENoaWxkKSB7XG4gICAgICBub2RlLmFwcGVuZENoaWxkKHN2Z05vZGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgfVxufSk7XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gSUU4OiBXaGVuIHVwZGF0aW5nIGEganVzdCBjcmVhdGVkIG5vZGUgd2l0aCBpbm5lckhUTUwgb25seSBsZWFkaW5nXG4gIC8vIHdoaXRlc3BhY2UgaXMgcmVtb3ZlZC4gV2hlbiB1cGRhdGluZyBhbiBleGlzdGluZyBub2RlIHdpdGggaW5uZXJIVE1MXG4gIC8vIHdoaXRlc3BhY2UgaW4gcm9vdCBUZXh0Tm9kZXMgaXMgYWxzbyBjb2xsYXBzZWQuXG4gIC8vIEBzZWUgcXVpcmtzbW9kZS5vcmcvYnVncmVwb3J0cy9hcmNoaXZlcy8yMDA0LzExL2lubmVyaHRtbF9hbmRfdC5odG1sXG5cbiAgLy8gRmVhdHVyZSBkZXRlY3Rpb247IG9ubHkgSUU4IGlzIGtub3duIHRvIGJlaGF2ZSBpbXByb3Blcmx5IGxpa2UgdGhpcy5cbiAgdmFyIHRlc3RFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHRlc3RFbGVtZW50LmlubmVySFRNTCA9ICcgJztcbiAgaWYgKHRlc3RFbGVtZW50LmlubmVySFRNTCA9PT0gJycpIHtcbiAgICBzZXRJbm5lckhUTUwgPSBmdW5jdGlvbiAobm9kZSwgaHRtbCkge1xuICAgICAgLy8gTWFnaWMgdGhlb3J5OiBJRTggc3VwcG9zZWRseSBkaWZmZXJlbnRpYXRlcyBiZXR3ZWVuIGFkZGVkIGFuZCB1cGRhdGVkXG4gICAgICAvLyBub2RlcyB3aGVuIHByb2Nlc3NpbmcgaW5uZXJIVE1MLCBpbm5lckhUTUwgb24gdXBkYXRlZCBub2RlcyBzdWZmZXJzXG4gICAgICAvLyBmcm9tIHdvcnNlIHdoaXRlc3BhY2UgYmVoYXZpb3IuIFJlLWFkZGluZyBhIG5vZGUgbGlrZSB0aGlzIHRyaWdnZXJzXG4gICAgICAvLyB0aGUgaW5pdGlhbCBhbmQgbW9yZSBmYXZvcmFibGUgd2hpdGVzcGFjZSBiZWhhdmlvci5cbiAgICAgIC8vIFRPRE86IFdoYXQgdG8gZG8gb24gYSBkZXRhY2hlZCBub2RlP1xuICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5vZGUsIG5vZGUpO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSBhbHNvIGltcGxlbWVudCBhIHdvcmthcm91bmQgZm9yIG5vbi12aXNpYmxlIHRhZ3MgZGlzYXBwZWFyaW5nIGludG9cbiAgICAgIC8vIHRoaW4gYWlyIG9uIElFOCwgdGhpcyBvbmx5IGhhcHBlbnMgaWYgdGhlcmUgaXMgbm8gdmlzaWJsZSB0ZXh0XG4gICAgICAvLyBpbi1mcm9udCBvZiB0aGUgbm9uLXZpc2libGUgdGFncy4gUGlnZ3liYWNrIG9uIHRoZSB3aGl0ZXNwYWNlIGZpeFxuICAgICAgLy8gYW5kIHNpbXBseSBjaGVjayBpZiBhbnkgbm9uLXZpc2libGUgdGFncyBhcHBlYXIgaW4gdGhlIHNvdXJjZS5cbiAgICAgIGlmIChXSElURVNQQUNFX1RFU1QudGVzdChodG1sKSB8fCBodG1sWzBdID09PSAnPCcgJiYgTk9OVklTSUJMRV9URVNULnRlc3QoaHRtbCkpIHtcbiAgICAgICAgLy8gUmVjb3ZlciBsZWFkaW5nIHdoaXRlc3BhY2UgYnkgdGVtcG9yYXJpbHkgcHJlcGVuZGluZyBhbnkgY2hhcmFjdGVyLlxuICAgICAgICAvLyBcXHVGRUZGIGhhcyB0aGUgcG90ZW50aWFsIGFkdmFudGFnZSBvZiBiZWluZyB6ZXJvLXdpZHRoL2ludmlzaWJsZS5cbiAgICAgICAgLy8gVWdsaWZ5SlMgZHJvcHMgVStGRUZGIGNoYXJzIHdoZW4gcGFyc2luZywgc28gdXNlIFN0cmluZy5mcm9tQ2hhckNvZGVcbiAgICAgICAgLy8gaW4gaG9wZXMgdGhhdCB0aGlzIGlzIHByZXNlcnZlZCBldmVuIGlmIFwiXFx1RkVGRlwiIGlzIHRyYW5zZm9ybWVkIHRvXG4gICAgICAgIC8vIHRoZSBhY3R1YWwgVW5pY29kZSBjaGFyYWN0ZXIgKGJ5IEJhYmVsLCBmb3IgZXhhbXBsZSkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taXNob28vVWdsaWZ5SlMyL2Jsb2IvdjIuNC4yMC9saWIvcGFyc2UuanMjTDIxNlxuICAgICAgICBub2RlLmlubmVySFRNTCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRUZGKSArIGh0bWw7XG5cbiAgICAgICAgLy8gZGVsZXRlRGF0YSBsZWF2ZXMgYW4gZW1wdHkgYFRleHROb2RlYCB3aGljaCBvZmZzZXRzIHRoZSBpbmRleCBvZiBhbGxcbiAgICAgICAgLy8gY2hpbGRyZW4uIERlZmluaXRlbHkgd2FudCB0byBhdm9pZCB0aGlzLlxuICAgICAgICB2YXIgdGV4dE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmICh0ZXh0Tm9kZS5kYXRhLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQodGV4dE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHROb2RlLmRlbGV0ZURhdGEoMCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRlc3RFbGVtZW50ID0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRJbm5lckhUTUw7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvc2V0SW5uZXJIVE1MLmpzXG4vLyBtb2R1bGUgaWQgPSA0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IGVtcHR5RnVuY3Rpb247XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIFRoaXMgdmFsaWRhdGlvbiBjb2RlIHdhcyB3cml0dGVuIGJhc2VkIG9uIHRoZSBIVE1MNSBwYXJzaW5nIHNwZWM6XG4gIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLXNjb3BlXG4gIC8vXG4gIC8vIE5vdGU6IHRoaXMgZG9lcyBub3QgY2F0Y2ggYWxsIGludmFsaWQgbmVzdGluZywgbm9yIGRvZXMgaXQgdHJ5IHRvIChhcyBpdCdzXG4gIC8vIG5vdCBjbGVhciB3aGF0IHByYWN0aWNhbCBiZW5lZml0IGRvaW5nIHNvIHByb3ZpZGVzKTsgaW5zdGVhZCwgd2Ugd2FybiBvbmx5XG4gIC8vIGZvciBjYXNlcyB3aGVyZSB0aGUgcGFyc2VyIHdpbGwgZ2l2ZSBhIHBhcnNlIHRyZWUgZGlmZmVyaW5nIGZyb20gd2hhdCBSZWFjdFxuICAvLyBpbnRlbmRlZC4gRm9yIGV4YW1wbGUsIDxiPjxkaXY+PC9kaXY+PC9iPiBpcyBpbnZhbGlkIGJ1dCB3ZSBkb24ndCB3YXJuXG4gIC8vIGJlY2F1c2UgaXQgc3RpbGwgcGFyc2VzIGNvcnJlY3RseTsgd2UgZG8gd2FybiBmb3Igb3RoZXIgY2FzZXMgbGlrZSBuZXN0ZWRcbiAgLy8gPHA+IHRhZ3Mgd2hlcmUgdGhlIGJlZ2lubmluZyBvZiB0aGUgc2Vjb25kIGVsZW1lbnQgaW1wbGljaXRseSBjbG9zZXMgdGhlXG4gIC8vIGZpcnN0LCBjYXVzaW5nIGEgY29uZnVzaW5nIG1lc3MuXG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjc3BlY2lhbFxuICB2YXIgc3BlY2lhbFRhZ3MgPSBbJ2FkZHJlc3MnLCAnYXBwbGV0JywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdiYXNlJywgJ2Jhc2Vmb250JywgJ2Jnc291bmQnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYXB0aW9uJywgJ2NlbnRlcicsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGQnLCAnZGV0YWlscycsICdkaXInLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2ZyYW1lJywgJ2ZyYW1lc2V0JywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaXNpbmRleCcsICdsaScsICdsaW5rJywgJ2xpc3RpbmcnLCAnbWFpbicsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICduYXYnLCAnbm9lbWJlZCcsICdub2ZyYW1lcycsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAncCcsICdwYXJhbScsICdwbGFpbnRleHQnLCAncHJlJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzb3VyY2UnLCAnc3R5bGUnLCAnc3VtbWFyeScsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZW1wbGF0ZScsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1bCcsICd3YnInLCAneG1wJ107XG5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaGFzLWFuLWVsZW1lbnQtaW4tc2NvcGVcbiAgdmFyIGluU2NvcGVUYWdzID0gWydhcHBsZXQnLCAnY2FwdGlvbicsICdodG1sJywgJ3RhYmxlJywgJ3RkJywgJ3RoJywgJ21hcnF1ZWUnLCAnb2JqZWN0JywgJ3RlbXBsYXRlJyxcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNodG1sLWludGVncmF0aW9uLXBvaW50XG4gIC8vIFRPRE86IERpc3Rpbmd1aXNoIGJ5IG5hbWVzcGFjZSBoZXJlIC0tIGZvciA8dGl0bGU+LCBpbmNsdWRpbmcgaXQgaGVyZVxuICAvLyBlcnJzIG9uIHRoZSBzaWRlIG9mIGZld2VyIHdhcm5pbmdzXG4gICdmb3JlaWduT2JqZWN0JywgJ2Rlc2MnLCAndGl0bGUnXTtcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNoYXMtYW4tZWxlbWVudC1pbi1idXR0b24tc2NvcGVcbiAgdmFyIGJ1dHRvblNjb3BlVGFncyA9IGluU2NvcGVUYWdzLmNvbmNhdChbJ2J1dHRvbiddKTtcblxuICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNnZW5lcmF0ZS1pbXBsaWVkLWVuZC10YWdzXG4gIHZhciBpbXBsaWVkRW5kVGFncyA9IFsnZGQnLCAnZHQnLCAnbGknLCAnb3B0aW9uJywgJ29wdGdyb3VwJywgJ3AnLCAncnAnLCAncnQnXTtcblxuICB2YXIgZW1wdHlBbmNlc3RvckluZm8gPSB7XG4gICAgY3VycmVudDogbnVsbCxcblxuICAgIGZvcm1UYWc6IG51bGwsXG4gICAgYVRhZ0luU2NvcGU6IG51bGwsXG4gICAgYnV0dG9uVGFnSW5TY29wZTogbnVsbCxcbiAgICBub2JyVGFnSW5TY29wZTogbnVsbCxcbiAgICBwVGFnSW5CdXR0b25TY29wZTogbnVsbCxcblxuICAgIGxpc3RJdGVtVGFnQXV0b2Nsb3Npbmc6IG51bGwsXG4gICAgZGxJdGVtVGFnQXV0b2Nsb3Npbmc6IG51bGxcbiAgfTtcblxuICB2YXIgdXBkYXRlZEFuY2VzdG9ySW5mbyA9IGZ1bmN0aW9uIChvbGRJbmZvLCB0YWcsIGluc3RhbmNlKSB7XG4gICAgdmFyIGFuY2VzdG9ySW5mbyA9IF9hc3NpZ24oe30sIG9sZEluZm8gfHwgZW1wdHlBbmNlc3RvckluZm8pO1xuICAgIHZhciBpbmZvID0geyB0YWc6IHRhZywgaW5zdGFuY2U6IGluc3RhbmNlIH07XG5cbiAgICBpZiAoaW5TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZSA9IG51bGw7XG4gICAgfVxuICAgIGlmIChidXR0b25TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZWUgcnVsZXMgZm9yICdsaScsICdkZCcsICdkdCcgc3RhcnQgdGFncyBpblxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHlcbiAgICBpZiAoc3BlY2lhbFRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSAmJiB0YWcgIT09ICdhZGRyZXNzJyAmJiB0YWcgIT09ICdkaXYnICYmIHRhZyAhPT0gJ3AnKSB7XG4gICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBudWxsO1xuICAgIH1cblxuICAgIGFuY2VzdG9ySW5mby5jdXJyZW50ID0gaW5mbztcblxuICAgIGlmICh0YWcgPT09ICdmb3JtJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmZvcm1UYWcgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnYScpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdidXR0b24nKSB7XG4gICAgICBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZSA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdub2JyJykge1xuICAgICAgYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG4gICAgaWYgKHRhZyA9PT0gJ3AnKSB7XG4gICAgICBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGUgPSBpbmZvO1xuICAgIH1cbiAgICBpZiAodGFnID09PSAnbGknKSB7XG4gICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IGluZm87XG4gICAgfVxuICAgIGlmICh0YWcgPT09ICdkZCcgfHwgdGFnID09PSAnZHQnKSB7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBpbmZvO1xuICAgIH1cblxuICAgIHJldHVybiBhbmNlc3RvckluZm87XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlclxuICAgKi9cbiAgdmFyIGlzVGFnVmFsaWRXaXRoUGFyZW50ID0gZnVuY3Rpb24gKHRhZywgcGFyZW50VGFnKSB7XG4gICAgLy8gRmlyc3QsIGxldCdzIGNoZWNrIGlmIHdlJ3JlIGluIGFuIHVudXN1YWwgcGFyc2luZyBtb2RlLi4uXG4gICAgc3dpdGNoIChwYXJlbnRUYWcpIHtcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnNlbGVjdFxuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ29wdGlvbicgfHwgdGFnID09PSAnb3B0Z3JvdXAnIHx8IHRhZyA9PT0gJyN0ZXh0JztcbiAgICAgIGNhc2UgJ29wdGdyb3VwJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ29wdGlvbicgfHwgdGFnID09PSAnI3RleHQnO1xuICAgICAgLy8gU3RyaWN0bHkgc3BlYWtpbmcsIHNlZWluZyBhbiA8b3B0aW9uPiBkb2Vzbid0IG1lYW4gd2UncmUgaW4gYSA8c2VsZWN0PlxuICAgICAgLy8gYnV0XG4gICAgICBjYXNlICdvcHRpb24nOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnI3RleHQnO1xuXG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50ZFxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluY2FwdGlvblxuICAgICAgLy8gTm8gc3BlY2lhbCBiZWhhdmlvciBzaW5jZSB0aGVzZSBydWxlcyBmYWxsIGJhY2sgdG8gXCJpbiBib2R5XCIgbW9kZSBmb3JcbiAgICAgIC8vIGFsbCBleGNlcHQgc3BlY2lhbCB0YWJsZSBub2RlcyB3aGljaCBjYXVzZSBiYWQgcGFyc2luZyBiZWhhdmlvciBhbnl3YXkuXG5cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbnRyXG4gICAgICBjYXNlICd0cic6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICd0aCcgfHwgdGFnID09PSAndGQnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludGJvZHlcbiAgICAgIGNhc2UgJ3Rib2R5JzpcbiAgICAgIGNhc2UgJ3RoZWFkJzpcbiAgICAgIGNhc2UgJ3Rmb290JzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ3RyJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG5cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmNvbGdyb3VwXG4gICAgICBjYXNlICdjb2xncm91cCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdjb2wnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludGFibGVcbiAgICAgIGNhc2UgJ3RhYmxlJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2NhcHRpb24nIHx8IHRhZyA9PT0gJ2NvbGdyb3VwJyB8fCB0YWcgPT09ICd0Ym9keScgfHwgdGFnID09PSAndGZvb3QnIHx8IHRhZyA9PT0gJ3RoZWFkJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG5cbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmhlYWRcbiAgICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnYmFzZScgfHwgdGFnID09PSAnYmFzZWZvbnQnIHx8IHRhZyA9PT0gJ2Jnc291bmQnIHx8IHRhZyA9PT0gJ2xpbmsnIHx8IHRhZyA9PT0gJ21ldGEnIHx8IHRhZyA9PT0gJ3RpdGxlJyB8fCB0YWcgPT09ICdub3NjcmlwdCcgfHwgdGFnID09PSAnbm9mcmFtZXMnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcblxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2VtYW50aWNzLmh0bWwjdGhlLWh0bWwtZWxlbWVudFxuICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdoZWFkJyB8fCB0YWcgPT09ICdib2R5JztcbiAgICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdodG1sJztcbiAgICB9XG5cbiAgICAvLyBQcm9iYWJseSBpbiB0aGUgXCJpbiBib2R5XCIgcGFyc2luZyBtb2RlLCBzbyB3ZSBvdXRsYXcgb25seSB0YWcgY29tYm9zXG4gICAgLy8gd2hlcmUgdGhlIHBhcnNpbmcgcnVsZXMgY2F1c2UgaW1wbGljaXQgb3BlbnMgb3IgY2xvc2VzIHRvIGJlIGFkZGVkLlxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmJvZHlcbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSAnaDEnOlxuICAgICAgY2FzZSAnaDInOlxuICAgICAgY2FzZSAnaDMnOlxuICAgICAgY2FzZSAnaDQnOlxuICAgICAgY2FzZSAnaDUnOlxuICAgICAgY2FzZSAnaDYnOlxuICAgICAgICByZXR1cm4gcGFyZW50VGFnICE9PSAnaDEnICYmIHBhcmVudFRhZyAhPT0gJ2gyJyAmJiBwYXJlbnRUYWcgIT09ICdoMycgJiYgcGFyZW50VGFnICE9PSAnaDQnICYmIHBhcmVudFRhZyAhPT0gJ2g1JyAmJiBwYXJlbnRUYWcgIT09ICdoNic7XG5cbiAgICAgIGNhc2UgJ3JwJzpcbiAgICAgIGNhc2UgJ3J0JzpcbiAgICAgICAgcmV0dXJuIGltcGxpZWRFbmRUYWdzLmluZGV4T2YocGFyZW50VGFnKSA9PT0gLTE7XG5cbiAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgY2FzZSAnY2FwdGlvbic6XG4gICAgICBjYXNlICdjb2wnOlxuICAgICAgY2FzZSAnY29sZ3JvdXAnOlxuICAgICAgY2FzZSAnZnJhbWUnOlxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICBjYXNlICdodG1sJzpcbiAgICAgIGNhc2UgJ3Rib2R5JzpcbiAgICAgIGNhc2UgJ3RkJzpcbiAgICAgIGNhc2UgJ3Rmb290JzpcbiAgICAgIGNhc2UgJ3RoJzpcbiAgICAgIGNhc2UgJ3RoZWFkJzpcbiAgICAgIGNhc2UgJ3RyJzpcbiAgICAgICAgLy8gVGhlc2UgdGFncyBhcmUgb25seSB2YWxpZCB3aXRoIGEgZmV3IHBhcmVudHMgdGhhdCBoYXZlIHNwZWNpYWwgY2hpbGRcbiAgICAgICAgLy8gcGFyc2luZyBydWxlcyAtLSBpZiB3ZSdyZSBkb3duIGhlcmUsIHRoZW4gbm9uZSBvZiB0aG9zZSBtYXRjaGVkIGFuZFxuICAgICAgICAvLyBzbyB3ZSBhbGxvdyBpdCBvbmx5IGlmIHdlIGRvbid0IGtub3cgd2hhdCB0aGUgcGFyZW50IGlzLCBhcyBhbGwgb3RoZXJcbiAgICAgICAgLy8gY2FzZXMgYXJlIGludmFsaWQuXG4gICAgICAgIHJldHVybiBwYXJlbnRUYWcgPT0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyXG4gICAqL1xuICB2YXIgZmluZEludmFsaWRBbmNlc3RvckZvclRhZyA9IGZ1bmN0aW9uICh0YWcsIGFuY2VzdG9ySW5mbykge1xuICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICBjYXNlICdhZGRyZXNzJzpcbiAgICAgIGNhc2UgJ2FydGljbGUnOlxuICAgICAgY2FzZSAnYXNpZGUnOlxuICAgICAgY2FzZSAnYmxvY2txdW90ZSc6XG4gICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgY2FzZSAnZGV0YWlscyc6XG4gICAgICBjYXNlICdkaWFsb2cnOlxuICAgICAgY2FzZSAnZGlyJzpcbiAgICAgIGNhc2UgJ2Rpdic6XG4gICAgICBjYXNlICdkbCc6XG4gICAgICBjYXNlICdmaWVsZHNldCc6XG4gICAgICBjYXNlICdmaWdjYXB0aW9uJzpcbiAgICAgIGNhc2UgJ2ZpZ3VyZSc6XG4gICAgICBjYXNlICdmb290ZXInOlxuICAgICAgY2FzZSAnaGVhZGVyJzpcbiAgICAgIGNhc2UgJ2hncm91cCc6XG4gICAgICBjYXNlICdtYWluJzpcbiAgICAgIGNhc2UgJ21lbnUnOlxuICAgICAgY2FzZSAnbmF2JzpcbiAgICAgIGNhc2UgJ29sJzpcbiAgICAgIGNhc2UgJ3AnOlxuICAgICAgY2FzZSAnc2VjdGlvbic6XG4gICAgICBjYXNlICdzdW1tYXJ5JzpcbiAgICAgIGNhc2UgJ3VsJzpcblxuICAgICAgY2FzZSAncHJlJzpcbiAgICAgIGNhc2UgJ2xpc3RpbmcnOlxuXG4gICAgICBjYXNlICd0YWJsZSc6XG5cbiAgICAgIGNhc2UgJ2hyJzpcblxuICAgICAgY2FzZSAneG1wJzpcblxuICAgICAgY2FzZSAnaDEnOlxuICAgICAgY2FzZSAnaDInOlxuICAgICAgY2FzZSAnaDMnOlxuICAgICAgY2FzZSAnaDQnOlxuICAgICAgY2FzZSAnaDUnOlxuICAgICAgY2FzZSAnaDYnOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlO1xuXG4gICAgICBjYXNlICdmb3JtJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5mb3JtVGFnIHx8IGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZTtcblxuICAgICAgY2FzZSAnbGknOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmxpc3RJdGVtVGFnQXV0b2Nsb3Npbmc7XG5cbiAgICAgIGNhc2UgJ2RkJzpcbiAgICAgIGNhc2UgJ2R0JzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5kbEl0ZW1UYWdBdXRvY2xvc2luZztcblxuICAgICAgY2FzZSAnYnV0dG9uJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlO1xuXG4gICAgICBjYXNlICdhJzpcbiAgICAgICAgLy8gU3BlYyBzYXlzIHNvbWV0aGluZyBhYm91dCBzdG9yaW5nIGEgbGlzdCBvZiBtYXJrZXJzLCBidXQgaXQgc291bmRzXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gdGhpcyBjaGVjay5cbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZTtcblxuICAgICAgY2FzZSAnbm9icic6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8ubm9iclRhZ0luU2NvcGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgaW5zdGFuY2UsIHJldHVybiBhIGxpc3Qgb2YgaXRzIHJlY3Vyc2l2ZVxuICAgKiBvd25lcnMsIHN0YXJ0aW5nIGF0IHRoZSByb290IGFuZCBlbmRpbmcgd2l0aCB0aGUgaW5zdGFuY2UgaXRzZWxmLlxuICAgKi9cbiAgdmFyIGZpbmRPd25lclN0YWNrID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHZhciBzdGFjayA9IFtdO1xuICAgIGRvIHtcbiAgICAgIHN0YWNrLnB1c2goaW5zdGFuY2UpO1xuICAgIH0gd2hpbGUgKGluc3RhbmNlID0gaW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lcik7XG4gICAgc3RhY2sucmV2ZXJzZSgpO1xuICAgIHJldHVybiBzdGFjaztcbiAgfTtcblxuICB2YXIgZGlkV2FybiA9IHt9O1xuXG4gIHZhbGlkYXRlRE9NTmVzdGluZyA9IGZ1bmN0aW9uIChjaGlsZFRhZywgY2hpbGRUZXh0LCBjaGlsZEluc3RhbmNlLCBhbmNlc3RvckluZm8pIHtcbiAgICBhbmNlc3RvckluZm8gPSBhbmNlc3RvckluZm8gfHwgZW1wdHlBbmNlc3RvckluZm87XG4gICAgdmFyIHBhcmVudEluZm8gPSBhbmNlc3RvckluZm8uY3VycmVudDtcbiAgICB2YXIgcGFyZW50VGFnID0gcGFyZW50SW5mbyAmJiBwYXJlbnRJbmZvLnRhZztcblxuICAgIGlmIChjaGlsZFRleHQgIT0gbnVsbCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoY2hpbGRUYWcgPT0gbnVsbCwgJ3ZhbGlkYXRlRE9NTmVzdGluZzogd2hlbiBjaGlsZFRleHQgaXMgcGFzc2VkLCBjaGlsZFRhZyBzaG91bGQgYmUgbnVsbCcpIDogdm9pZCAwO1xuICAgICAgY2hpbGRUYWcgPSAnI3RleHQnO1xuICAgIH1cblxuICAgIHZhciBpbnZhbGlkUGFyZW50ID0gaXNUYWdWYWxpZFdpdGhQYXJlbnQoY2hpbGRUYWcsIHBhcmVudFRhZykgPyBudWxsIDogcGFyZW50SW5mbztcbiAgICB2YXIgaW52YWxpZEFuY2VzdG9yID0gaW52YWxpZFBhcmVudCA/IG51bGwgOiBmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnKGNoaWxkVGFnLCBhbmNlc3RvckluZm8pO1xuICAgIHZhciBwcm9ibGVtYXRpYyA9IGludmFsaWRQYXJlbnQgfHwgaW52YWxpZEFuY2VzdG9yO1xuXG4gICAgaWYgKHByb2JsZW1hdGljKSB7XG4gICAgICB2YXIgYW5jZXN0b3JUYWcgPSBwcm9ibGVtYXRpYy50YWc7XG4gICAgICB2YXIgYW5jZXN0b3JJbnN0YW5jZSA9IHByb2JsZW1hdGljLmluc3RhbmNlO1xuXG4gICAgICB2YXIgY2hpbGRPd25lciA9IGNoaWxkSW5zdGFuY2UgJiYgY2hpbGRJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgdmFyIGFuY2VzdG9yT3duZXIgPSBhbmNlc3Rvckluc3RhbmNlICYmIGFuY2VzdG9ySW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcblxuICAgICAgdmFyIGNoaWxkT3duZXJzID0gZmluZE93bmVyU3RhY2soY2hpbGRPd25lcik7XG4gICAgICB2YXIgYW5jZXN0b3JPd25lcnMgPSBmaW5kT3duZXJTdGFjayhhbmNlc3Rvck93bmVyKTtcblxuICAgICAgdmFyIG1pblN0YWNrTGVuID0gTWF0aC5taW4oY2hpbGRPd25lcnMubGVuZ3RoLCBhbmNlc3Rvck93bmVycy5sZW5ndGgpO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIHZhciBkZWVwZXN0Q29tbW9uID0gLTE7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbWluU3RhY2tMZW47IGkrKykge1xuICAgICAgICBpZiAoY2hpbGRPd25lcnNbaV0gPT09IGFuY2VzdG9yT3duZXJzW2ldKSB7XG4gICAgICAgICAgZGVlcGVzdENvbW1vbiA9IGk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIFVOS05PV04gPSAnKHVua25vd24pJztcbiAgICAgIHZhciBjaGlsZE93bmVyTmFtZXMgPSBjaGlsZE93bmVycy5zbGljZShkZWVwZXN0Q29tbW9uICsgMSkubWFwKGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgICAgIHJldHVybiBpbnN0LmdldE5hbWUoKSB8fCBVTktOT1dOO1xuICAgICAgfSk7XG4gICAgICB2YXIgYW5jZXN0b3JPd25lck5hbWVzID0gYW5jZXN0b3JPd25lcnMuc2xpY2UoZGVlcGVzdENvbW1vbiArIDEpLm1hcChmdW5jdGlvbiAoaW5zdCkge1xuICAgICAgICByZXR1cm4gaW5zdC5nZXROYW1lKCkgfHwgVU5LTk9XTjtcbiAgICAgIH0pO1xuICAgICAgdmFyIG93bmVySW5mbyA9IFtdLmNvbmNhdChcbiAgICAgIC8vIElmIHRoZSBwYXJlbnQgYW5kIGNoaWxkIGluc3RhbmNlcyBoYXZlIGEgY29tbW9uIG93bmVyIGFuY2VzdG9yLCBzdGFydFxuICAgICAgLy8gd2l0aCB0aGF0IC0tIG90aGVyd2lzZSB3ZSBqdXN0IHN0YXJ0IHdpdGggdGhlIHBhcmVudCdzIG93bmVycy5cbiAgICAgIGRlZXBlc3RDb21tb24gIT09IC0xID8gY2hpbGRPd25lcnNbZGVlcGVzdENvbW1vbl0uZ2V0TmFtZSgpIHx8IFVOS05PV04gOiBbXSwgYW5jZXN0b3JPd25lck5hbWVzLCBhbmNlc3RvclRhZyxcbiAgICAgIC8vIElmIHdlJ3JlIHdhcm5pbmcgYWJvdXQgYW4gaW52YWxpZCAobm9uLXBhcmVudCkgYW5jZXN0cnksIGFkZCAnLi4uJ1xuICAgICAgaW52YWxpZEFuY2VzdG9yID8gWycuLi4nXSA6IFtdLCBjaGlsZE93bmVyTmFtZXMsIGNoaWxkVGFnKS5qb2luKCcgPiAnKTtcblxuICAgICAgdmFyIHdhcm5LZXkgPSAhIWludmFsaWRQYXJlbnQgKyAnfCcgKyBjaGlsZFRhZyArICd8JyArIGFuY2VzdG9yVGFnICsgJ3wnICsgb3duZXJJbmZvO1xuICAgICAgaWYgKGRpZFdhcm5bd2FybktleV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGlkV2Fyblt3YXJuS2V5XSA9IHRydWU7XG5cbiAgICAgIHZhciB0YWdEaXNwbGF5TmFtZSA9IGNoaWxkVGFnO1xuICAgICAgdmFyIHdoaXRlc3BhY2VJbmZvID0gJyc7XG4gICAgICBpZiAoY2hpbGRUYWcgPT09ICcjdGV4dCcpIHtcbiAgICAgICAgaWYgKC9cXFMvLnRlc3QoY2hpbGRUZXh0KSkge1xuICAgICAgICAgIHRhZ0Rpc3BsYXlOYW1lID0gJ1RleHQgbm9kZXMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhZ0Rpc3BsYXlOYW1lID0gJ1doaXRlc3BhY2UgdGV4dCBub2Rlcyc7XG4gICAgICAgICAgd2hpdGVzcGFjZUluZm8gPSAnIE1ha2Ugc3VyZSB5b3UgZG9uXFwndCBoYXZlIGFueSBleHRyYSB3aGl0ZXNwYWNlIGJldHdlZW4gdGFncyBvbiAnICsgJ2VhY2ggbGluZSBvZiB5b3VyIHNvdXJjZSBjb2RlLic7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhZ0Rpc3BsYXlOYW1lID0gJzwnICsgY2hpbGRUYWcgKyAnPic7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbnZhbGlkUGFyZW50KSB7XG4gICAgICAgIHZhciBpbmZvID0gJyc7XG4gICAgICAgIGlmIChhbmNlc3RvclRhZyA9PT0gJ3RhYmxlJyAmJiBjaGlsZFRhZyA9PT0gJ3RyJykge1xuICAgICAgICAgIGluZm8gKz0gJyBBZGQgYSA8dGJvZHk+IHRvIHlvdXIgY29kZSB0byBtYXRjaCB0aGUgRE9NIHRyZWUgZ2VuZXJhdGVkIGJ5ICcgKyAndGhlIGJyb3dzZXIuJztcbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ3ZhbGlkYXRlRE9NTmVzdGluZyguLi4pOiAlcyBjYW5ub3QgYXBwZWFyIGFzIGEgY2hpbGQgb2YgPCVzPi4lcyAnICsgJ1NlZSAlcy4lcycsIHRhZ0Rpc3BsYXlOYW1lLCBhbmNlc3RvclRhZywgd2hpdGVzcGFjZUluZm8sIG93bmVySW5mbywgaW5mbykgOiB2b2lkIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ3ZhbGlkYXRlRE9NTmVzdGluZyguLi4pOiAlcyBjYW5ub3QgYXBwZWFyIGFzIGEgZGVzY2VuZGFudCBvZiAnICsgJzwlcz4uIFNlZSAlcy4nLCB0YWdEaXNwbGF5TmFtZSwgYW5jZXN0b3JUYWcsIG93bmVySW5mbykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvID0gdXBkYXRlZEFuY2VzdG9ySW5mbztcblxuICAvLyBGb3IgdGVzdGluZ1xuICB2YWxpZGF0ZURPTU5lc3RpbmcuaXNUYWdWYWxpZEluQ29udGV4dCA9IGZ1bmN0aW9uICh0YWcsIGFuY2VzdG9ySW5mbykge1xuICAgIGFuY2VzdG9ySW5mbyA9IGFuY2VzdG9ySW5mbyB8fCBlbXB0eUFuY2VzdG9ySW5mbztcbiAgICB2YXIgcGFyZW50SW5mbyA9IGFuY2VzdG9ySW5mby5jdXJyZW50O1xuICAgIHZhciBwYXJlbnRUYWcgPSBwYXJlbnRJbmZvICYmIHBhcmVudEluZm8udGFnO1xuICAgIHJldHVybiBpc1RhZ1ZhbGlkV2l0aFBhcmVudCh0YWcsIHBhcmVudFRhZykgJiYgIWZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcodGFnLCBhbmNlc3RvckluZm8pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZhbGlkYXRlRE9NTmVzdGluZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi92YWxpZGF0ZURPTU5lc3RpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3ROb29wVXBkYXRlUXVldWUnKTtcblxudmFyIGNhbkRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9jYW5EZWZpbmVQcm9wZXJ0eScpO1xudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vKipcbiAqIEJhc2UgY2xhc3MgaGVscGVycyBmb3IgdGhlIHVwZGF0aW5nIHN0YXRlIG9mIGEgY29tcG9uZW50LlxuICovXG5mdW5jdGlvbiBSZWFjdENvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAvLyBXZSBpbml0aWFsaXplIHRoZSBkZWZhdWx0IHVwZGF0ZXIgYnV0IHRoZSByZWFsIG9uZSBnZXRzIGluamVjdGVkIGJ5IHRoZVxuICAvLyByZW5kZXJlci5cbiAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbn1cblxuUmVhY3RDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB7fTtcblxuLyoqXG4gKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIHRvIG11dGF0ZVxuICogc3RhdGUuIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBjYWxscyB0byBgc2V0U3RhdGVgIHdpbGwgcnVuIHN5bmNocm9ub3VzbHksXG4gKiBhcyB0aGV5IG1heSBldmVudHVhbGx5IGJlIGJhdGNoZWQgdG9nZXRoZXIuICBZb3UgY2FuIHByb3ZpZGUgYW4gb3B0aW9uYWxcbiAqIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoZSBjYWxsIHRvIHNldFN0YXRlIGlzIGFjdHVhbGx5XG4gKiBjb21wbGV0ZWQuXG4gKlxuICogV2hlbiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHRvIHNldFN0YXRlLCBpdCB3aWxsIGJlIGNhbGxlZCBhdCBzb21lIHBvaW50IGluXG4gKiB0aGUgZnV0dXJlIChub3Qgc3luY2hyb25vdXNseSkuIEl0IHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHVwIHRvIGRhdGVcbiAqIGNvbXBvbmVudCBhcmd1bWVudHMgKHN0YXRlLCBwcm9wcywgY29udGV4dCkuIFRoZXNlIHZhbHVlcyBjYW4gYmUgZGlmZmVyZW50XG4gKiBmcm9tIHRoaXMuKiBiZWNhdXNlIHlvdXIgZnVuY3Rpb24gbWF5IGJlIGNhbGxlZCBhZnRlciByZWNlaXZlUHJvcHMgYnV0IGJlZm9yZVxuICogc2hvdWxkQ29tcG9uZW50VXBkYXRlLCBhbmQgdGhpcyBuZXcgc3RhdGUsIHByb3BzLCBhbmQgY29udGV4dCB3aWxsIG5vdCB5ZXQgYmVcbiAqIGFzc2lnbmVkIHRvIHRoaXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgb3IgZnVuY3Rpb24gdG9cbiAqICAgICAgICBwcm9kdWNlIG5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBjdXJyZW50IHN0YXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICogQGZpbmFsXG4gKiBAcHJvdGVjdGVkXG4gKi9cblJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gICEodHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyB8fCBwYXJ0aWFsU3RhdGUgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnc2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuJykgOiBfcHJvZEludmFyaWFudCgnODUnKSA6IHZvaWQgMDtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUpO1xuICBpZiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrLCAnc2V0U3RhdGUnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAqXG4gKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAqXG4gKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICpcbiAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgdXBkYXRlIGlzIGNvbXBsZXRlLlxuICogQGZpbmFsXG4gKiBAcHJvdGVjdGVkXG4gKi9cblJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5mb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMpO1xuICBpZiAoY2FsbGJhY2spIHtcbiAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrLCAnZm9yY2VVcGRhdGUnKTtcbiAgfVxufTtcblxuLyoqXG4gKiBEZXByZWNhdGVkIEFQSXMuIFRoZXNlIEFQSXMgdXNlZCB0byBleGlzdCBvbiBjbGFzc2ljIFJlYWN0IGNsYXNzZXMgYnV0IHNpbmNlXG4gKiB3ZSB3b3VsZCBsaWtlIHRvIGRlcHJlY2F0ZSB0aGVtLCB3ZSdyZSBub3QgZ29pbmcgdG8gbW92ZSB0aGVtIG92ZXIgdG8gdGhpc1xuICogbW9kZXJuIGJhc2UgY2xhc3MuIEluc3RlYWQsIHdlIGRlZmluZSBhIGdldHRlciB0aGF0IHdhcm5zIGlmIGl0J3MgYWNjZXNzZWQuXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBkZXByZWNhdGVkQVBJcyA9IHtcbiAgICBpc01vdW50ZWQ6IFsnaXNNb3VudGVkJywgJ0luc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCBzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluICcgKyAnY29tcG9uZW50V2lsbFVubW91bnQgdG8gcHJldmVudCBtZW1vcnkgbGVha3MuJ10sXG4gICAgcmVwbGFjZVN0YXRlOiBbJ3JlcGxhY2VTdGF0ZScsICdSZWZhY3RvciB5b3VyIGNvZGUgdG8gdXNlIHNldFN0YXRlIGluc3RlYWQgKHNlZSAnICsgJ2h0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzIzNikuJ11cbiAgfTtcbiAgdmFyIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyA9IGZ1bmN0aW9uIChtZXRob2ROYW1lLCBpbmZvKSB7XG4gICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhY3RDb21wb25lbnQucHJvdG90eXBlLCBtZXRob2ROYW1lLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKSBpcyBkZXByZWNhdGVkIGluIHBsYWluIEphdmFTY3JpcHQgUmVhY3QgY2xhc3Nlcy4gJXMnLCBpbmZvWzBdLCBpbmZvWzFdKSA6IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIGZvciAodmFyIGZuTmFtZSBpbiBkZXByZWNhdGVkQVBJcykge1xuICAgIGlmIChkZXByZWNhdGVkQVBJcy5oYXNPd25Qcm9wZXJ0eShmbk5hbWUpKSB7XG4gICAgICBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcoZm5OYW1lLCBkZXByZWNhdGVkQVBJc1tmbk5hbWVdKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvbGliL1JlYWN0Q29tcG9uZW50LmpzXG4vLyBtb2R1bGUgaWQgPSA0N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gd2Fybk5vb3AocHVibGljSW5zdGFuY2UsIGNhbGxlck5hbWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiAnICsgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4gJyArICdUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjYWxsZXJOYW1lLCBjb25zdHJ1Y3RvciAmJiAoY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgY29uc3RydWN0b3IubmFtZSkgfHwgJ1JlYWN0Q2xhc3MnKSA6IHZvaWQgMDtcbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGFic3RyYWN0IEFQSSBmb3IgYW4gdXBkYXRlIHF1ZXVlLlxuICovXG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSB7XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgcGVuZGluZyB1cGRhdGVzXG4gICAqIGhhdmUgcHJvY2Vzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0byB1c2UgYXMgYHRoaXNgIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2spIHt9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdmb3JjZVVwZGF0ZScpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdyZXBsYWNlU3RhdGUnKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBhIHN1YnNldCBvZiB0aGUgc3RhdGUuIFRoaXMgb25seSBleGlzdHMgYmVjYXVzZSBfcGVuZGluZ1N0YXRlIGlzXG4gICAqIGludGVybmFsLiBUaGlzIHByb3ZpZGVzIGEgbWVyZ2luZyBzdHJhdGVneSB0aGF0IGlzIG5vdCBhdmFpbGFibGUgdG8gZGVlcFxuICAgKiBwcm9wZXJ0aWVzIHdoaWNoIGlzIGNvbmZ1c2luZy4gVE9ETzogRXhwb3NlIHBlbmRpbmdTdGF0ZSBvciBkb24ndCB1c2UgaXRcbiAgICogZHVyaW5nIHRoZSBtZXJnZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsU3RhdGUgTmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIHN0YXRlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ3NldFN0YXRlJyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROb29wVXBkYXRlUXVldWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdE5vb3BVcGRhdGVRdWV1ZS5qc1xuLy8gbW9kdWxlIGlkID0gNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgcHJvcDogJ3Byb3AnLFxuICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanNcbi8vIG1vZHVsZSBpZCA9IDQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhbkRlZmluZVByb3BlcnR5ID0gZmFsc2U7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB0cnkge1xuICAgIC8vICRGbG93Rml4TWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3gnLCB7IGdldDogZnVuY3Rpb24gKCkge30gfSk7XG4gICAgY2FuRGVmaW5lUHJvcGVydHkgPSB0cnVlO1xuICB9IGNhdGNoICh4KSB7XG4gICAgLy8gSUUgd2lsbCBmYWlsIG9uIGRlZmluZVByb3BlcnR5XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW5EZWZpbmVQcm9wZXJ0eTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvbGliL2NhbkRlZmluZVByb3BlcnR5LmpzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBTeW1ib2wgKi9cblxudmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICpcbiAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICpcbiAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAqICAgICAgIC4uLlxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpdGVyYXRvckZuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvbGliL2dldEl0ZXJhdG9yRm4uanNcbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIu+7v3ZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XHJcbnZhciBSZWFjdERPTSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xyXG52YXIgUmVhY3RET01TZXJ2ZXIgPSByZXF1aXJlKCdyZWFjdC1kb20vc2VydmVyJyk7XHJcbnZhciBXaW5KUyA9IHJlcXVpcmUoXCJ3aW5qc1wiKTtcclxuXHJcbi8vXHJcbi8vIEltcGxlbWVudGF0aW9uIE92ZXJ2aWV3XHJcbi8vXHJcbi8vIHJlYWN0LXdpbmpzIGlzIG9yZ2FuaXplZCBhcm91bmQgdGhlIGNvbmNlcHQgb2YgcHJvcCBoYW5kbGVycy4gQSBwcm9wIGhhbmRsZXIgZGVzY3JpYmVzXHJcbi8vIGhvdyBhIHJlYWN0LXdpbmpzIHByb3AgYWZmZWN0cyB0aGUgdW5kZXJseWluZyBXaW5KUyBjb250cm9sLiBQcm9wIGhhbmRsZXJzIGNvbWUgZnJvbSAzIHNvdXJjZXM6XHJcbi8vICAgMS4gSGFuZHdyaXR0ZW4gY29tbW9uIHRvIGFsbCBjb250cm9scy4gVGhlc2UgYXJlIGRlZmluZWQgaW4gYSB2YXJpYWJsZSBjYWxsZWRcclxuLy8gICAgICAqZGVmYXVsdFByb3BIYW5kbGVycyouIFRoZXNlIGFyZSBwcm9wIGhhbmRsZXJzIHdoaWNoIGFwcGVhciBvbiBldmVyeSByZWFjdC13aW5qcyBjb21wb25lbnQuXHJcbi8vICAgMi4gV2luSlMncyBkLnRzIGZpbGUuIE1vc3Qgb2YgdGhlIHByb3AgaGFuZGxlcnMgZm9yIGVhY2ggcmVhY3Qtd2luanMgY29tcG9uZW50IGFyZVxyXG4vLyAgICAgIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGZyb20gV2luSlMncyBkLnRzIGZpbGUuIEluZm9ybWF0aW9uIGZyb20gdGhlIGQudHMgZmlsZSBpcyBzdG9yZWQgaW5cclxuLy8gICAgICBhIHZhcmlhYmxlIGNhbGxlZCAqUmF3Q29udHJvbEFwaXMqLiAqUmF3Q29udHJvbEFwaXMqIGlzIGdlbmVyYXRlZCBieSBydW5uaW5nIHRoZSBkLnRzIGZpbGVcclxuLy8gICAgICB0aHJvdWdoIHRoaXMgdG9vbDogaHR0cHM6Ly9naXRodWIuY29tL3dpbmpzL3dpbmpzLWNvbnRyb2wtYXBpc1xyXG4vLyAgIDMuIEhhbmR3cml0dGVuIGNvbnRyb2wtc3BlY2lmaWMuIFRoZXNlIGFyZSBkZWZpbmVkIGluIGEgdmFyaWFibGUgY2FsbGVkICpDb250cm9sQXBpcyouIFdoZW5cclxuLy8gICAgICBhIHJlYWN0LXdpbmpzIGNvbXBvbmVudCBoYXMgYSBwcm9wIHRoYXQgbmVlZHMgdG8gYmUgZGVmaW5lZCBtYW51YWxseSwgdGhpcyBpcyB3aGVyZSBpdFxyXG4vLyAgICAgIHNob3VsZCBiZSBkZWZpbmVkLiBUaGVyZSBhcmUgYSBudW1iZXIgb2YgdHlwZXMgb2YgYnVpbHRpbiBwcm9wIGhhbmRsZXJzIGRlZmluZWQgaW4gdGhlXHJcbi8vICAgICAgKlByb3BIYW5kbGVycyogdmFyaWFibGUgd2hpY2ggY2FuIGJlIHVzZWQgaGVyZS5cclxuLy9cclxuLy8gV2hlbiByZWFjdC13aW5qcyBidWlsZHMgdGhlIGxpc3Qgb2YgcHJvcCBoYW5kbGVycyBmb3IgYSBjb21wb25lbnQsIGl0IGdhdGhlcnMgdGhlbSBmcm9tIHRoZSBhYm92ZVxyXG4vLyBsaXN0IG9mIHNvdXJjZXMuIElmIG11bHRpcGxlIHNvdXJjZXMgZGVmaW5lIGEgcHJvcCBoYW5kbGVyIHdpdGggdGhlIHNhbWUgbmFtZSwgdGhlIG9uZSBmcm9tIHRoZVxyXG4vLyBzb3VyY2Ugd2hpY2ggYXBwZWFycyBjbG9zZXN0IHRvIHRoZSBib3R0b20gb2YgdGhlIGxpc3QgYWJvdmUgd2lucy5cclxuLy9cclxuLy8gVGhlcmUncyBhIHBhcnRpY3VsYXIgY2F0ZWdvcnkgb2YgV2luSlMgY29udHJvbHMgdGhhdCBob3N0IGNvbnRlbnQgdGhhdCBwcm92ZWQgdG8gYmUgcGFydGljdWxhcmx5XHJcbi8vIGNoYWxsZW5naW5nIHRvIHdyYXAgYXMgUmVhY3QgY29tcG9uZW50cy4gTW9yZSBzcGVjaWZpY2FsbHksIHRoZSBjb250cm9scyBpbiB0aGlzIGNhdGVnb3J5OlxyXG4vLyAgIC0gaG9zdCBjb250ZW50XHJcbi8vICAgLSBtb3ZlIHRoZSBob3N0ZWQgY29udGVudCBhcm91bmQgaW4gdGhlIERPTVxyXG4vLyAgIC0gc3RvcmUgdGhlIGhvc3RlZCBjb250ZW50IGluIGEgQmluZGluZy5MaXN0XHJcbi8vXHJcbi8vIENvbnRyb2xzIHRoYXQgZmFsbCBpbnRvIHRoaXMgY2F0ZWdvcnkgb2YgaG9zdGluZyBjb250ZW50IGluY2x1ZGU6XHJcbi8vICAgLSBBcHBCYXIvVG9vbEJhclxyXG4vLyAgIC0gSHViXHJcbi8vICAgLSBQaXZvdFxyXG4vL1xyXG4vLyBBbmQgdGhlIGNvbnRyb2xzIHRoYXQgZ2V0IGhvc3RlZCBpbmNsdWRlICh0aGVzZSBhcmUgdGhlIG9uZXMgdGhhdCBlbmQgdXAgYmVpbmcgY3JlYXRlZFxyXG4vLyB0aHJvdWdoIFdpbkpTQ2hpbGRDb21wb25lbnQsIGRlc2NyaWJlZCBiZWxvdyk6XHJcbi8vICAgLSBBcHBCYXJDb21tYW5kXHJcbi8vICAgLSBIdWJTZWN0aW9uXHJcbi8vICAgLSBQaXZvdEl0ZW1cclxuLy9cclxuLy8gV2hhdCBtYWRlIHRoaXMgY2hhbGxlbmdpbmcgdG8gc29sdmUgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBmZWF0dXJlcyB0aGF0IGFyZW4ndCBhY2hpZXZhYmxlIGluXHJcbi8vIGEgc3RyYWlnaHQgZm9yd2FyZCB3YXkgdGhyb3VnaCB0aGUgUmVhY3QgQVBJcy4gVG8gc29sdmUgdGhpcywgeW91IHdhbnQgdG8gYmUgYWJsZSB0bzpcclxuLy8gICAtIFJlbmRlciBhIFJlYWN0IGNvbXBvbmVudCAqb250byogYW4gZXhpc3RpbmcgZWxlbWVudC4gUmVhY3RET00ucmVuZGVyIGNhbiBvbmx5IHJlbmRlciAqaW50byogYW5cclxuLy8gICAgIGV4aXN0aW5nIGVsZW1lbnQuIEZvciBleGFtcGxlLCB3aGVuIGNyZWF0aW5nIGEgSHViU2VjdGlvbiB5b3Ugd2FudCB0byBiZSBhYmxlIHRvIGNvbnRyb2xcclxuLy8gICAgIGF0dHJpYnV0ZXMgb2YgdGhlIHdpbi1odWItc2VjdGlvbiBlbGVtZW50IHN1Y2ggYXMgaXRzICpjbGFzcyogYW5kICpzdHlsZSouIFdpdGggUmVhY3RET00ucmVuZGVyLFxyXG4vLyAgICAgeW91J2Qgb25seSBiZSBhYmxlIHRvIHJlbmRlciBpbnRvIHRoZSB3aW4taHViLXNlY3Rpb24gZWxlbWVudCBzbyB0aGUgUmVhY3QgY29tcG9uZW50IHdvdWxkbid0XHJcbi8vICAgICBiZSBhYmxlIHRvIGNvbnRyb2wgYW55IGF0dHJpYnV0ZXMgb2YgdGhlIHdpbi1odWItc2VjdGlvbiBlbGVtZW50LlxyXG4vLyAgIC0gSG9sZCBvbnRvIGEgcmVuZGVyZWQgY29tcG9uZW50IGFuZCBpbnNwZWN0IGl0cyAqdHlwZSogYW5kICprZXkqIHByb3AgbGF0ZXIuIFRoaXMgaW5mb3JtYXRpb25cclxuLy8gICAgIGNvbWVzIGluIGhhbmR5IHdoZW4gZGlmZmluZyBhbiBhcnJheSBvZiBjb21wb25lbnRzIGZyb20gYSBwcmV2aW91cyByZW5kZXIgcGFzcyB3aXRoIGFuIGFycmF5XHJcbi8vICAgICBvZiBjb21wb25lbnRzIGZvciB0aGUgY3VycmVudCByZW5kZXIgcGFzcy4gVGhlIGRpZmYgaW5mb3JtYXRpb24gaXMgdXNlZCB0byBtdXRhdGUgYVxyXG4vLyAgICAgQmluZGluZy5MaXN0IHRvIGdldCBpdCBpbnRvIHRoZSBkZXNpcmVkIHN0YXRlLlxyXG4vL1xyXG4vLyBUaGUgV2luSlNDaGlsZENvbXBvbmVudCBjbGFzcyBwcm92aWRlcyBhIGNvbnZlbmllbnQgQVBJIGZvciBzb2x2aW5nIGJvdGggb2YgdGhlc2UgcHJvYmxlbXMuIFdoZW4gdGhlXHJcbi8vIGNvbnN0cnVjdG9yIHJlY2VpdmVzIGEgY29tcG9uZW50LCBpdCBjcmVhdGVzIHRoZSBlbGVtZW50IChlLmcuIHdpbi1odWItc2VjdGlvbikgdGhhdCB0aGUgY29tcG9uZW50XHJcbi8vIGlzIHJlbmRlcmVkICpvbnRvKi4gVGhlIG93bmluZyBjb250cm9sIChlLmcuIFdpbkpTLlVJLkh1YikgaXMgZnJlZSB0byBtYW5hZ2UgdGhhdCBlbGVtZW50IGFuZCBtb3ZlXHJcbi8vIGl0IGFyb3VuZCB0aGUgRE9NLiBXaW5KU0NoaWxkQ29tcG9uZW50IHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgQVBJczpcclxuLy8gICAtIHVwZGF0ZTogVXBkYXRlcyB0aGUgZWxlbWVudCBiYXNlZCBvbiB0aGUgY29tcG9uZW50IGRlc2NyaXB0aW9uIHRoYXQgaXMgcGFzc2VkIGluLlxyXG4vLyAgIC0gZGlzcG9zZTogRGlzcG9zZXMgdGhlIHJlYWN0LXdpbmpzIGNvbXBvbmVudCBhbmQgaXRzIGFzc29jaWF0ZWQgV2luSlMgY29udHJvbC5cclxuLy8gICAtIGtleTogUmV0dXJucyB0aGUgUmVhY3Qga2V5IGFzc29jaWF0ZWQgd2l0aCB0aGUgY29tcG9uZW50LlxyXG4vLyAgIC0gdHlwZTogUmV0dXJucyB0aGUgUmVhY3QgdHlwZSBhc3NvY2lhdGVkIHdpdGggdGhlIGNvbXBvbmVudC5cclxuLy9cclxuXHJcbi8vIEdlbmVyYXRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS93aW5qcy93aW5qcy1jb250cm9sLWFwaXNcclxudmFyIFJhd0NvbnRyb2xBcGlzID0ge1xyXG4gICAgQXBwQmFyOiB7XHJcbiAgICAgICAgY2xvc2VkRGlzcGxheU1vZGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJlbnVtXCIsXHJcbiAgICAgICAgICAgIHZhbHVlczogW1xyXG4gICAgICAgICAgICAgICAgXCJjb21wYWN0XCIsXHJcbiAgICAgICAgICAgICAgICBcImZ1bGxcIixcclxuICAgICAgICAgICAgICAgIFwibWluaW1hbFwiLFxyXG4gICAgICAgICAgICAgICAgXCJub25lXCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIldpbkpTLkJpbmRpbmcuTGlzdFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5VSS5JQ29tbWFuZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFmdGVyQ2xvc2U6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BZnRlck9wZW46IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25CZWZvcmVDbG9zZToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkJlZm9yZU9wZW46IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3BlbmVkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwbGFjZW1lbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJlbnVtXCIsXHJcbiAgICAgICAgICAgIHZhbHVlczogW1xyXG4gICAgICAgICAgICAgICAgXCJib3R0b21cIixcclxuICAgICAgICAgICAgICAgIFwidG9wXCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBBcHBCYXJDb21tYW5kOiB7XHJcbiAgICAgICAgZGlzYWJsZWQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXh0cmFDbGFzczoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaXJzdEVsZW1lbnRGb2N1czoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBmbHlvdXQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5VSS5GbHlvdXRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGhpZGRlbjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaWNvbjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYWJlbDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYXN0RWxlbWVudEZvY3VzOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2xpY2s6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJpb3JpdHk6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VjdGlvbjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZWxlY3RlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdG9vbHRpcDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0eXBlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgQXV0b1N1Z2dlc3RCb3g6IHtcclxuICAgICAgICBjaG9vc2VTdWdnZXN0aW9uT25FbnRlcjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlzYWJsZWQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25RdWVyeUNoYW5nZWQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25RdWVyeVN1Ym1pdHRlZDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblJlc3VsdFN1Z2dlc3Rpb25DaG9zZW46IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25TdWdnZXN0aW9uc1JlcXVlc3RlZDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwbGFjZWhvbGRlclRleHQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcXVlcnlUZXh0OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlYXJjaEhpc3RvcnlDb250ZXh0OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlYXJjaEhpc3RvcnlEaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBCYWNrQnV0dG9uOiB7XHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIENlbGxTcGFubmluZ0xheW91dDoge1xyXG4gICAgICAgIGdyb3VwSGVhZGVyUG9zaXRpb246IHtcclxuICAgICAgICAgICAgdHlwZTogXCJlbnVtXCIsXHJcbiAgICAgICAgICAgIHZhbHVlczogW1xyXG4gICAgICAgICAgICAgICAgXCJsZWZ0XCIsXHJcbiAgICAgICAgICAgICAgICBcInRvcFwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGdyb3VwSW5mbzoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpdGVtSW5mbzoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXhpbXVtUm93c09yQ29sdW1uczoge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBudW1iZXJPZkl0ZW1zUGVySXRlbXNCbG9jazoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImFueVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvcmllbnRhdGlvbjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImVudW1cIixcclxuICAgICAgICAgICAgdmFsdWVzOiBbXHJcbiAgICAgICAgICAgICAgICBcImhvcml6b250YWxcIixcclxuICAgICAgICAgICAgICAgIFwidmVydGljYWxcIlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIENvbW1hbmQ6IHtcclxuICAgICAgICBkaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRyYUNsYXNzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZpcnN0RWxlbWVudEZvY3VzOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGZseW91dDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIldpbkpTLlVJLkZseW91dFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGlkZGVuOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpY29uOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxhc3RFbGVtZW50Rm9jdXM6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DbGljazoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcmlvcml0eToge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZWN0aW9uOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlbGVjdGVkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b29sdGlwOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHR5cGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBDb250ZW50RGlhbG9nOiB7XHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBoaWRkZW46IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQWZ0ZXJIaWRlOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQWZ0ZXJTaG93OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQmVmb3JlSGlkZToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkJlZm9yZVNob3c6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJpbWFyeUNvbW1hbmREaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJpbWFyeUNvbW1hbmRUZXh0OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlY29uZGFyeUNvbW1hbmREaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2Vjb25kYXJ5Q29tbWFuZFRleHQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGl0bGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBEYXRlUGlja2VyOiB7XHJcbiAgICAgICAgY2FsZW5kYXI6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3VycmVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkRhdGVcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGVQYXR0ZXJuOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRpc2FibGVkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbGVtZW50OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1heFllYXI6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWluWWVhcjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb250aFBhdHRlcm46IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25DaGFuZ2U6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeWVhclBhdHRlcm46IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBGbGlwVmlldzoge1xyXG4gICAgICAgIGN1cnJlbnRQYWdlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXRlbURhdGFTb3VyY2U6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5VSS5JTGlzdERhdGFTb3VyY2VcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidHlwZS1wYXJhbVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGl0ZW1TcGFjaW5nOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGl0ZW1UZW1wbGF0ZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcImFueVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkRhdGFTb3VyY2VDb3VudENoYW5nZWQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25QYWdlQ29tcGxldGVkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uUGFnZVNlbGVjdGVkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uUGFnZVZpc2liaWxpdHlDaGFuZ2VkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9yaWVudGF0aW9uOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgRmx5b3V0OiB7XHJcbiAgICAgICAgYWxpZ25tZW50OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFuY2hvcjoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBoaWRkZW46IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQWZ0ZXJIaWRlOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQWZ0ZXJTaG93OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQmVmb3JlSGlkZToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkJlZm9yZVNob3c6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGxhY2VtZW50OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgR3JpZExheW91dDoge1xyXG4gICAgICAgIGJhY2tkcm9wQ29sb3I6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlzYWJsZUJhY2tkcm9wOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBncm91cEhlYWRlclBvc2l0aW9uOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiZW51bVwiLFxyXG4gICAgICAgICAgICB2YWx1ZXM6IFtcclxuICAgICAgICAgICAgICAgIFwibGVmdFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0b3BcIlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBncm91cEluZm86IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXRlbUluZm86IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF4Um93czoge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXhpbXVtUm93c09yQ29sdW1uczoge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBudW1iZXJPZkl0ZW1zUGVySXRlbXNCbG9jazoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImFueVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvcmllbnRhdGlvbjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImVudW1cIixcclxuICAgICAgICAgICAgdmFsdWVzOiBbXHJcbiAgICAgICAgICAgICAgICBcImhvcml6b250YWxcIixcclxuICAgICAgICAgICAgICAgIFwidmVydGljYWxcIlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIEh1Yjoge1xyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGVhZGVyVGVtcGxhdGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJhbnlcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5kZXhPZkZpcnN0VmlzaWJsZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmRleE9mTGFzdFZpc2libGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG9hZGluZ1N0YXRlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiZW51bVwiLFxyXG4gICAgICAgICAgICB2YWx1ZXM6IFtcclxuICAgICAgICAgICAgICAgIFwiY29tcGxldGVcIixcclxuICAgICAgICAgICAgICAgIFwibG9hZGluZ1wiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ29udGVudEFuaW1hdGluZzoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkhlYWRlckludm9rZWQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Mb2FkaW5nU3RhdGVDaGFuZ2VkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9yaWVudGF0aW9uOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiZW51bVwiLFxyXG4gICAgICAgICAgICB2YWx1ZXM6IFtcclxuICAgICAgICAgICAgICAgIFwiaG9yaXpvbnRhbFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ2ZXJ0aWNhbFwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNjcm9sbFBvc2l0aW9uOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlY3Rpb25PblNjcmVlbjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZWN0aW9uczoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIldpbkpTLkJpbmRpbmcuTGlzdFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5VSS5IdWJTZWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB6b29tYWJsZVZpZXc6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5VSS5JWm9vbWFibGVWaWV3XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFueVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgSHViU2VjdGlvbjoge1xyXG4gICAgICAgIGNvbnRlbnRFbGVtZW50OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGVhZGVyOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzSGVhZGVyU3RhdGljOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIEl0ZW1Db250YWluZXI6IHtcclxuICAgICAgICBkcmFnZ2FibGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25JbnZva2VkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlZDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblNlbGVjdGlvbkNoYW5naW5nOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlbGVjdGVkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZWxlY3Rpb25EaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3dpcGVCZWhhdmlvcjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImVudW1cIixcclxuICAgICAgICAgICAgdmFsdWVzOiBbXHJcbiAgICAgICAgICAgICAgICBcIm5vbmVcIixcclxuICAgICAgICAgICAgICAgIFwic2VsZWN0XCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3dpcGVPcmllbnRhdGlvbjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImVudW1cIixcclxuICAgICAgICAgICAgdmFsdWVzOiBbXHJcbiAgICAgICAgICAgICAgICBcImhvcml6b250YWxcIixcclxuICAgICAgICAgICAgICAgIFwidmVydGljYWxcIlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0YXBCZWhhdmlvcjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImVudW1cIixcclxuICAgICAgICAgICAgdmFsdWVzOiBbXHJcbiAgICAgICAgICAgICAgICBcImRpcmVjdFNlbGVjdFwiLFxyXG4gICAgICAgICAgICAgICAgXCJpbnZva2VPbmx5XCIsXHJcbiAgICAgICAgICAgICAgICBcIm5vbmVcIixcclxuICAgICAgICAgICAgICAgIFwidG9nZ2xlU2VsZWN0XCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBMaXN0TGF5b3V0OiB7XHJcbiAgICAgICAgYmFja2Ryb3BDb2xvcjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNhYmxlQmFja2Ryb3A6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdyb3VwSGVhZGVyUG9zaXRpb246IHtcclxuICAgICAgICAgICAgdHlwZTogXCJlbnVtXCIsXHJcbiAgICAgICAgICAgIHZhbHVlczogW1xyXG4gICAgICAgICAgICAgICAgXCJsZWZ0XCIsXHJcbiAgICAgICAgICAgICAgICBcInRvcFwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG51bWJlck9mSXRlbXNQZXJJdGVtc0Jsb2NrOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYW55XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9yaWVudGF0aW9uOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiZW51bVwiLFxyXG4gICAgICAgICAgICB2YWx1ZXM6IFtcclxuICAgICAgICAgICAgICAgIFwiaG9yaXpvbnRhbFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ2ZXJ0aWNhbFwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgTGlzdFZpZXc6IHtcclxuICAgICAgICBhdXRvbWF0aWNhbGx5TG9hZFBhZ2VzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjdXJyZW50SXRlbToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIldpbkpTLlVJLklMaXN0Vmlld0l0ZW1cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZm9vdGVyOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGdyb3VwRGF0YVNvdXJjZToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIldpbkpTLlVJLklMaXN0RGF0YVNvdXJjZVwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0eXBlLXBhcmFtXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ3JvdXBIZWFkZXJUYXBCZWhhdmlvcjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImVudW1cIixcclxuICAgICAgICAgICAgdmFsdWVzOiBbXHJcbiAgICAgICAgICAgICAgICBcImludm9rZVwiLFxyXG4gICAgICAgICAgICAgICAgXCJub25lXCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ3JvdXBIZWFkZXJUZW1wbGF0ZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcImFueVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBoZWFkZXI6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5kZXhPZkZpcnN0VmlzaWJsZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmRleE9mTGFzdFZpc2libGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXRlbURhdGFTb3VyY2U6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5VSS5JTGlzdERhdGFTb3VyY2VcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidHlwZS1wYXJhbVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGl0ZW1UZW1wbGF0ZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcImFueVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpdGVtc0RyYWdnYWJsZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXRlbXNSZW9yZGVyYWJsZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGF5b3V0OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiV2luSlMuVUkuSUxheW91dDJcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvYWRpbmdCZWhhdmlvcjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsb2FkaW5nU3RhdGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF4RGVmZXJyZWRJdGVtQ2xlYW51cDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXhMZWFkaW5nUGFnZXM6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF4VHJhaWxpbmdQYWdlczoge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFjY2Vzc2liaWxpdHlBbm5vdGF0aW9uQ29tcGxldGU6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Db250ZW50QW5pbWF0aW5nOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRm9vdGVyVmlzaWJpbGl0eUNoYW5nZWQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Hcm91cEhlYWRlckludm9rZWQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25IZWFkZXJWaXNpYmlsaXR5Q2hhbmdlZDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkl0ZW1EcmFnQmV0d2Vlbjoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkl0ZW1EcmFnQ2hhbmdlZDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkl0ZW1EcmFnRHJvcDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkl0ZW1EcmFnRW5kOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uSXRlbURyYWdFbnRlcjoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkl0ZW1EcmFnTGVhdmU6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25JdGVtRHJhZ1N0YXJ0OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uSXRlbUludm9rZWQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25LZXlib2FyZE5hdmlnYXRpbmc6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Mb2FkaW5nU3RhdGVDaGFuZ2VkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlZDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblNlbGVjdGlvbkNoYW5naW5nOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHBhZ2VzVG9Mb2FkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBhZ2VzVG9Mb2FkVGhyZXNob2xkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNjcm9sbFBvc2l0aW9uOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlbGVjdGlvbjoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIldpbkpTLlVJLklTZWxlY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwidHlwZS1wYXJhbVwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlbGVjdGlvbk1vZGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJlbnVtXCIsXHJcbiAgICAgICAgICAgIHZhbHVlczogW1xyXG4gICAgICAgICAgICAgICAgXCJtdWx0aVwiLFxyXG4gICAgICAgICAgICAgICAgXCJub25lXCIsXHJcbiAgICAgICAgICAgICAgICBcInNpbmdsZVwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHN3aXBlQmVoYXZpb3I6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJlbnVtXCIsXHJcbiAgICAgICAgICAgIHZhbHVlczogW1xyXG4gICAgICAgICAgICAgICAgXCJub25lXCIsXHJcbiAgICAgICAgICAgICAgICBcInNlbGVjdFwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRhcEJlaGF2aW9yOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiZW51bVwiLFxyXG4gICAgICAgICAgICB2YWx1ZXM6IFtcclxuICAgICAgICAgICAgICAgIFwiZGlyZWN0U2VsZWN0XCIsXHJcbiAgICAgICAgICAgICAgICBcImludm9rZU9ubHlcIixcclxuICAgICAgICAgICAgICAgIFwibm9uZVwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0b2dnbGVTZWxlY3RcIlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB6b29tYWJsZVZpZXc6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5VSS5JWm9vbWFibGVWaWV3XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIldpbkpTLlVJLkxpc3RWaWV3XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0eXBlLXBhcmFtXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBNZW51OiB7XHJcbiAgICAgICAgYWxpZ25tZW50OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFuY2hvcjoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21tYW5kczoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkFycmF5XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIldpbkpTLlVJLk1lbnVDb21tYW5kXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBoaWRkZW46IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQWZ0ZXJIaWRlOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQWZ0ZXJTaG93OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQmVmb3JlSGlkZToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkJlZm9yZVNob3c6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGxhY2VtZW50OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgTWVudUNvbW1hbmQ6IHtcclxuICAgICAgICBkaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRyYUNsYXNzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZseW91dDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIldpbkpTLlVJLkZseW91dFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGlkZGVuOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYWJlbDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNsaWNrOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlbGVjdGVkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0eXBlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgTmF2QmFyOiB7XHJcbiAgICAgICAgY2xvc2VkRGlzcGxheU1vZGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29tbWFuZHM6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5VSS5BcHBCYXJDb21tYW5kXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbGVtZW50OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGhpZGRlbjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BZnRlckNsb3NlOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQWZ0ZXJPcGVuOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQmVmb3JlQ2xvc2U6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25CZWZvcmVPcGVuOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2hpbGRyZW5Qcm9jZXNzZWQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3BlbmVkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwbGFjZW1lbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBOYXZCYXJDb21tYW5kOiB7XHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpY29uOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvY2F0aW9uOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYW55XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uSW52b2tlZDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzcGxpdEJ1dHRvbjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3BsaXRPcGVuZWQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0YXRlOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYW55XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBOYXZCYXJDb250YWluZXI6IHtcclxuICAgICAgICBjdXJyZW50SW5kZXg6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIldpbkpTLkJpbmRpbmcuTGlzdFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5VSS5OYXZCYXJDb21tYW5kXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbGVtZW50OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGZpeGVkU2l6ZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGF5b3V0OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiZW51bVwiLFxyXG4gICAgICAgICAgICB2YWx1ZXM6IFtcclxuICAgICAgICAgICAgICAgIFwiaG9yaXpvbnRhbFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ2ZXJ0aWNhbFwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG1heFJvd3M6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25JbnZva2VkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uU3BsaXRUb2dnbGU6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGVtcGxhdGU6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5CaW5kaW5nLlRlbXBsYXRlXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFBpdm90OiB7XHJcbiAgICAgICAgY3VzdG9tTGVmdEhlYWRlcjoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjdXN0b21SaWdodEhlYWRlcjoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbGVtZW50OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGl0ZW1zOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiV2luSlMuQmluZGluZy5MaXN0XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIldpbkpTLlVJLlBpdm90SXRlbVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG9ja2VkOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwiYm9vbGVhblwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkl0ZW1BbmltYXRpb25FbmQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25JdGVtQW5pbWF0aW9uU3RhcnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25TZWxlY3Rpb25DaGFuZ2VkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNlbGVjdGVkSW5kZXg6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2VsZWN0ZWRJdGVtOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiV2luSlMuVUkuUGl2b3RJdGVtXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFBpdm90SXRlbToge1xyXG4gICAgICAgIGNvbnRlbnRFbGVtZW50OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGVhZGVyOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgUmF0aW5nOiB7XHJcbiAgICAgICAgYXZlcmFnZVJhdGluZzoge1xyXG4gICAgICAgICAgICB0eXBlOiBcIm51bWJlclwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmFibGVDbGVhcjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWF4UmF0aW5nOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2FuY2VsOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2hhbmdlOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uUHJldmlld0NoYW5nZToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0b29sdGlwU3RyaW5nczoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkFycmF5XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHVzZXJSYXRpbmc6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBTZWFyY2hCb3g6IHtcclxuICAgICAgICBjaG9vc2VTdWdnZXN0aW9uT25FbnRlcjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlzYWJsZWQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZm9jdXNPbktleWJvYXJkSW5wdXQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uUXVlcnlDaGFuZ2VkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uUXVlcnlTdWJtaXR0ZWQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25SZXN1bHRTdWdnZXN0aW9uQ2hvc2VuOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uU3VnZ2VzdGlvbnNSZXF1ZXN0ZWQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGxhY2Vob2xkZXJUZXh0OiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHF1ZXJ5VGV4dDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZWFyY2hIaXN0b3J5Q29udGV4dDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZWFyY2hIaXN0b3J5RGlzYWJsZWQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgU2VtYW50aWNab29tOiB7XHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmFibGVCdXR0b246IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvY2tlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25ab29tQ2hhbmdlZDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB6b29tRmFjdG9yOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwibnVtYmVyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHpvb21lZE91dDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBTcGxpdFZpZXc6IHtcclxuICAgICAgICBjbG9zZWREaXNwbGF5TW9kZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcImVudW1cIixcclxuICAgICAgICAgICAgdmFsdWVzOiBbXHJcbiAgICAgICAgICAgICAgICBcImlubGluZVwiLFxyXG4gICAgICAgICAgICAgICAgXCJub25lXCJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY29udGVudEVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkFmdGVyQ2xvc2U6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BZnRlck9wZW46IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25CZWZvcmVDbG9zZToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkJlZm9yZU9wZW46IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3BlbmVkRGlzcGxheU1vZGU6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJlbnVtXCIsXHJcbiAgICAgICAgICAgIHZhbHVlczogW1xyXG4gICAgICAgICAgICAgICAgXCJpbmxpbmVcIixcclxuICAgICAgICAgICAgICAgIFwib3ZlcmxheVwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHBhbmVFbGVtZW50OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHBhbmVPcGVuZWQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBhbmVQbGFjZW1lbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJlbnVtXCIsXHJcbiAgICAgICAgICAgIHZhbHVlczogW1xyXG4gICAgICAgICAgICAgICAgXCJib3R0b21cIixcclxuICAgICAgICAgICAgICAgIFwibGVmdFwiLFxyXG4gICAgICAgICAgICAgICAgXCJyaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0b3BcIlxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFNwbGl0Vmlld0NvbW1hbmQ6IHtcclxuICAgICAgICBlbGVtZW50OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIGljb246IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGFiZWw6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25JbnZva2VkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBTcGxpdFZpZXdQYW5lVG9nZ2xlOiB7XHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxCdXR0b25FbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkludm9rZWQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc3BsaXRWaWV3OiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiSFRNTEVsZW1lbnRcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgVGltZVBpY2tlcjoge1xyXG4gICAgICAgIGNsb2NrOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGN1cnJlbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJEYXRlXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkaXNhYmxlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBob3VyUGF0dGVybjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtaW51dGVJbmNyZW1lbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJudW1iZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWludXRlUGF0dGVybjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNoYW5nZToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwZXJpb2RQYXR0ZXJuOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgVG9nZ2xlU3dpdGNoOiB7XHJcbiAgICAgICAgY2hlY2tlZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGlzYWJsZWQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGFiZWxPZmY6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGFiZWxPbjoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNoYW5nZToge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0aXRsZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFRvb2xCYXI6IHtcclxuICAgICAgICBjbG9zZWREaXNwbGF5TW9kZToge1xyXG4gICAgICAgICAgICB0eXBlOiBcImVudW1cIixcclxuICAgICAgICAgICAgdmFsdWVzOiBbXHJcbiAgICAgICAgICAgICAgICBcImNvbXBhY3RcIixcclxuICAgICAgICAgICAgICAgIFwiZnVsbFwiXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJXaW5KUy5CaW5kaW5nLkxpc3RcIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiV2luSlMuVUkuSUNvbW1hbmRcIixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25BZnRlckNsb3NlOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQWZ0ZXJPcGVuOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQmVmb3JlQ2xvc2U6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJGdW5jdGlvblwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25CZWZvcmVPcGVuOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9wZW5lZDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcImJvb2xlYW5cIlxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBUb29sdGlwOiB7XHJcbiAgICAgICAgY29udGVudEVsZW1lbnQ6IHtcclxuICAgICAgICAgICAgbmFtZTogXCJIVE1MRWxlbWVudFwiLFxyXG4gICAgICAgICAgICB0eXBlOiBcInJlZmVyZW5jZVwiLFxyXG4gICAgICAgICAgICB0eXBlQXJndW1lbnRzOiBbXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkhUTUxFbGVtZW50XCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBleHRyYUNsYXNzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGluZm90aXA6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJib29sZWFuXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlubmVySFRNTDoge1xyXG4gICAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkJlZm9yZUNsb3NlOiB7XHJcbiAgICAgICAgICAgIG5hbWU6IFwiRnVuY3Rpb25cIixcclxuICAgICAgICAgICAgdHlwZTogXCJyZWZlcmVuY2VcIixcclxuICAgICAgICAgICAgdHlwZUFyZ3VtZW50czogW11cclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQmVmb3JlT3Blbjoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNsb3NlZDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbk9wZW5lZDoge1xyXG4gICAgICAgICAgICBuYW1lOiBcIkZ1bmN0aW9uXCIsXHJcbiAgICAgICAgICAgIHR5cGU6IFwicmVmZXJlbmNlXCIsXHJcbiAgICAgICAgICAgIHR5cGVBcmd1bWVudHM6IFtdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwbGFjZW1lbnQ6IHtcclxuICAgICAgICAgICAgdHlwZTogXCJzdHJpbmdcIlxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbnZhciBzZXRJbW1lZGlhdGU7XHJcbnZhciBjbGVhckltbWVkaWF0ZTtcclxuaWYgKHdpbmRvdy5zZXRJbW1lZGlhdGUgJiYgd2luZG93LmNsZWFySW1tZWRpYXRlKSB7XHJcbiAgICBzZXRJbW1lZGlhdGUgPSB3aW5kb3cuc2V0SW1tZWRpYXRlO1xyXG4gICAgY2xlYXJJbW1lZGlhdGUgPSB3aW5kb3cuY2xlYXJJbW1lZGlhdGU7XHJcbn0gZWxzZSB7XHJcbiAgICBzZXRJbW1lZGlhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7XHJcbiAgICB9O1xyXG4gICAgY2xlYXJJbW1lZGlhdGUgPSB3aW5kb3cuY2xlYXJUaW1lb3V0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0V2ZW50KHByb3BOYW1lKSB7XHJcbiAgICByZXR1cm4gcHJvcE5hbWVbMF0gPT09IFwib1wiICYmIHByb3BOYW1lWzFdID09PSBcIm5cIjtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFwT2JqZWN0KG9iaiwgY2FsbGJhY2spIHtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gY2FsbGJhY2soa2V5LCBvYmpba2V5XSk7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsb25lT2JqZWN0KG9iaikge1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgayBpbiBvYmopIHsgcmVzdWx0W2tdID0gb2JqW2tdOyB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmpzICovKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgdmFyIG9iaiA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBpZiAob2JqKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7IHJlc3VsdFtrXSA9IG9ialtrXTsgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuZHNXaXRoKHMsIHN1ZmZpeCkge1xyXG4gICAgcmV0dXJuIHMubGVuZ3RoID49IHN1ZmZpeC5sZW5ndGggJiYgcy5zdWJzdHIoLXN1ZmZpeC5sZW5ndGgpID09PSBzdWZmaXg7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFycmF5c1NoYWxsb3dFcXVhbChhLCBiKSB7XHJcbiAgICBpZiAoYSA9PT0gYikge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBlbHNlIGlmIChhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5lc3RlZFNldChvYmosIHBhdGgsIHZhbHVlKSB7XHJcbiAgICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KFwiLlwiKTtcclxuICAgIHZhciBhbGxCdXRMYXN0ID0gcGFydHMuc2xpY2UoMCwgcGFydHMubGVuZ3RoIC0gMSk7XHJcbiAgICB2YXIgbGFzdCA9IHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdO1xyXG4gICAgdmFyIGZpbmFsT2JqID0gYWxsQnV0TGFzdC5yZWR1Y2UoZnVuY3Rpb24gKGN1cnJlbnQsIGtleSkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50W2tleV07XHJcbiAgICB9LCBvYmopO1xyXG4gICAgZmluYWxPYmpbbGFzdF0gPSB2YWx1ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVwYXJlbnQoZWxlbWVudCkge1xyXG4gICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcclxuICAgIHBhcmVudCAmJiBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpcmVFdmVudChlbGVtZW50LCBldmVudE5hbWUpIHtcclxuICAgIHZhciBldmVudE9iamVjdCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XHJcbiAgICBldmVudE9iamVjdC5pbml0Q3VzdG9tRXZlbnQoXHJcbiAgICAgICAgZXZlbnROYW1lLFxyXG4gICAgICAgIHRydWUsICAvLyBidWJibGVzXHJcbiAgICAgICAgZmFsc2UsIC8vIGNhbmNlbGFibGVcclxuICAgICAgICBudWxsICAgLy8gZGV0YWlsXHJcbiAgICApO1xyXG4gICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50T2JqZWN0KTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFrZUNsYXNzU2V0KGNsYXNzTmFtZSkge1xyXG4gICAgdmFyIGNsYXNzU2V0ID0ge307XHJcbiAgICBjbGFzc05hbWUgJiYgY2xhc3NOYW1lLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChhQ2xhc3MpIHtcclxuICAgICAgICBpZiAoYUNsYXNzKSB7XHJcbiAgICAgICAgICAgIGNsYXNzU2V0W2FDbGFzc10gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNsYXNzU2V0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRJbihvYmplY3QsIHBhdGgpIHtcclxuICAgIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoXCIuXCIpO1xyXG4gICAgcmV0dXJuIHBhcnRzLnJlZHVjZShmdW5jdGlvbiAoY3VycmVudCwgbmFtZSkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50ICYmIGN1cnJlbnRbbmFtZV07XHJcbiAgICB9LCBvYmplY3QpO1xyXG59XHJcblxyXG4vLyBHaXZlbiBhIHR5cGUgZnJvbSBSYXdDb250cm9sQXBpcyByZXR1cm5zIGEgUmVhY3QgcHJvcFR5cGUuXHJcbmZ1bmN0aW9uIHR5cGVUb1Byb3BUeXBlKHR5cGVJbmZvKSB7XHJcbiAgICBpZiAodHlwZUluZm8udHlwZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIHJldHVybiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlSW5mby50eXBlID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgIHJldHVybiBSZWFjdC5Qcm9wVHlwZXMuYm9vbDtcclxuICAgIH0gZWxzZSBpZiAodHlwZUluZm8udHlwZSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHJldHVybiBSZWFjdC5Qcm9wVHlwZXMubnVtYmVyO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlSW5mby50eXBlID09PSBcImVudW1cIikge1xyXG4gICAgICAgIHJldHVybiBSZWFjdC5Qcm9wVHlwZXMub25lT2YodHlwZUluZm8udmFsdWVzKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZUluZm8udHlwZSA9PT0gXCJhbnlcIikge1xyXG4gICAgICAgIHJldHVybiBSZWFjdC5Qcm9wVHlwZXMuYW55O1xyXG4gICAgfSBlbHNlIGlmICh0eXBlSW5mby50eXBlID09PSBcInJlZmVyZW5jZVwiKSB7XHJcbiAgICAgICAgaWYgKHR5cGVJbmZvLm5hbWUgPT09IFwiRnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuUHJvcFR5cGVzLmZ1bmM7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlSW5mby5uYW1lID09PSBcIkFycmF5XCIpIHtcclxuICAgICAgICAgICAgdmFyIGl0ZW1Qcm9wVHlwZSA9IHR5cGVUb1Byb3BUeXBlKHR5cGVJbmZvLnR5cGVBcmd1bWVudHNbMF0pO1xyXG4gICAgICAgICAgICByZXR1cm4gaXRlbVByb3BUeXBlID8gUmVhY3QuUHJvcFR5cGVzLmFycmF5T2YoaXRlbVByb3BUeXBlKSA6IFJlYWN0LlByb3BUeXBlcy5hcnJheTtcclxuICAgICAgICB9IGVsc2UgaWYgKGdldEluKHdpbmRvdywgdHlwZUluZm8ubmFtZSkpIHtcclxuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZ2V0SW4od2luZG93LCB0eXBlSW5mby5uYW1lKTtcclxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LlByb3BUeXBlcy5pbnN0YW5jZU9mKGluc3RhbmNlKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUud2FybihcInJlYWN0LXdpbmpzIHR5cGVUb1Byb3BUeXBlOiB1bmFibGUgdG8gZmluZCBwcm9wVHlwZSBmb3IgdHlwZTogXCIgKyBKU09OLnN0cmluZ2lmeSh0eXBlSW5mbywgbnVsbCwgMikpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBUT0RPOiBSZXZpc2l0IGFsbCBvZiB0aGlzIGRpZmZpbmcgc3R1ZmY6XHJcbi8vICAgLSBNYWtlIGl0IG1vcmUgZWZmaWNpZW50XHJcbi8vICAgLSBJdCdzIGN1cnJlbnRseSBoYXJkIHRvIHVuZGVyc3RhbmQgYmVjYXVzZSBpdCBtYWtlcyBhZ2dyZXNzaXZlXHJcbi8vICAgICBhc3N1bXB0aW9ucyAoZS5nLiBlYWNoIGl0ZW0gaGFzIGEga2V5IGFuZCBlYWNoIGl0ZW0gaGFzIGEgd2luQ29udHJvbClcclxuLy8gICAtIElzIGl0IGNvcnJlY3Q/XHJcbi8vICAgLSBTaG91bGQgd2UganVzdCBzeW5jIGFuIGFycmF5IHdpdGggYSBiaW5kaW5nIGxpc3QgaW5zdGVhZCBvZiBjb21wdXRpbmdcclxuLy8gICAgIGVkaXRzIGJhc2VkIG9uIDIgYXJyYXlzIGFuZCB0aGVuIGFwcGx5aW5nIHRoZW0gdG8gYSBiaW5kaW5nIGxpc3Q/XHJcbmZ1bmN0aW9uIGJ1aWxkSW5kZXgoYXJyYXkpIHtcclxuICAgIHZhciBpbmRleCA9IHt9O1xyXG4gICAgYXJyYXkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaSkge1xyXG4gICAgICAgIGluZGV4W2l0ZW0ua2V5XSA9IGk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBpbmRleDtcclxufVxyXG5mdW5jdGlvbiBpbmRleE9mS2V5KGFycmF5LCBrZXkpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAoYXJyYXlbaV0ua2V5ID09PSBrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIC0xO1xyXG59XHJcbmZ1bmN0aW9uIGRpZmZBcnJheXNCeUtleShvbGQsIGxhdGVzdCkge1xyXG4gICAgb2xkID0gb2xkLnNsaWNlKDApO1xyXG4gICAgdmFyIG9sZEluZGV4ID0gYnVpbGRJbmRleChvbGQpO1xyXG4gICAgdmFyIGxhdGVzdEluZGV4ID0gYnVpbGRJbmRleChsYXRlc3QpO1xyXG4gICAgdmFyIGVkaXRzID0gW107XHJcblxyXG4gICAgLy8gSGFuZGxlIHJlbW92YWxzXHJcbiAgICBmb3IgKHZhciBpID0gb2xkLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgdmFyIGl0ZW0gPSBvbGRbaV07XHJcbiAgICAgICAgaWYgKCFsYXRlc3RJbmRleC5oYXNPd25Qcm9wZXJ0eShpdGVtLmtleSkpIHtcclxuICAgICAgICAgICAgZWRpdHMucHVzaCh7IHR5cGU6IFwiZGVsZXRlXCIsIGluZGV4OiBpIH0pO1xyXG4gICAgICAgICAgICBvbGQuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBIYW5kbGUgaW5zZXJ0aW9ucyBhbmQgbW92ZXNcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGF0ZXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGl0ZW0gPSBsYXRlc3RbaV07XHJcbiAgICAgICAgaWYgKCFvbGRJbmRleC5oYXNPd25Qcm9wZXJ0eShpdGVtLmtleSkpIHtcclxuICAgICAgICAgICAgLy8gSW5zZXJ0aW9uXHJcbiAgICAgICAgICAgIGVkaXRzLnB1c2goeyB0eXBlOiBcImluc2VydFwiLCBpbmRleDogaSwgdmFsdWU6IGl0ZW0gfSk7XHJcbiAgICAgICAgICAgIG9sZC5zcGxpY2UoaSwgMCwgaXRlbSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChvbGRbaV0ua2V5ICE9PSBpdGVtLmtleSkge1xyXG4gICAgICAgICAgICAvLyBNb3ZlXHJcbiAgICAgICAgICAgIC8vZWRpdHMucHVzaCh7IHR5cGU6IFwibW92ZVwiLCBmcm9tOiBvbGRJbmRleFtpdGVtLmtleV0sIHRvOiBpIH0pO1xyXG4gICAgICAgICAgICAvL29sZC5zcGxpY2Uob2xkSW5kZXhbaXRlbS5rZXldLCAxKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBmcm9tSW5kZXggPSBpbmRleE9mS2V5KG9sZCwgaXRlbS5rZXkpO1xyXG4gICAgICAgICAgICBlZGl0cy5wdXNoKHsgdHlwZTogXCJtb3ZlXCIsIGZyb206IGZyb21JbmRleCwgdG86IGkgfSk7XHJcbiAgICAgICAgICAgIG9sZC5zcGxpY2UoZnJvbUluZGV4LCAxKTtcclxuICAgICAgICAgICAgb2xkLnNwbGljZShpLCAwLCBpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVkaXRzO1xyXG59XHJcbmZ1bmN0aW9uIGFwcGx5RWRpdHNUb0JpbmRpbmdMaXN0KGxpc3QsIGVkaXRzKSB7XHJcbiAgICBlZGl0cy5mb3JFYWNoKGZ1bmN0aW9uIChlZGl0KSB7XHJcbiAgICAgICAgaWYgKGVkaXQudHlwZSA9PT0gXCJkZWxldGVcIikge1xyXG4gICAgICAgICAgICBsaXN0LnNwbGljZShlZGl0LmluZGV4LCAxKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGVkaXQudHlwZSA9PT0gXCJpbnNlcnRcIikge1xyXG4gICAgICAgICAgICBsaXN0LnNwbGljZShlZGl0LmluZGV4LCAwLCBlZGl0LnZhbHVlLndpbkNvbnRyb2wpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZWRpdC50eXBlID09PSBcIm1vdmVcIikge1xyXG4gICAgICAgICAgICBsaXN0Lm1vdmUoZWRpdC5mcm9tLCBlZGl0LnRvKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBcIlVuc3VwcG9ydGVkIGVkaXQgdHlwZTogXCIgKyBlZGl0LnR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgdGhpcyk7XHJcbn1cclxuXHJcbi8vIGludGVyZmFjZSBJV2luSlNDb21wb25lbnQge1xyXG4vLyAgICAgd2luQ29udHJvbFxyXG4vLyAgICAgZWxlbWVudFxyXG4vLyAgICAgZGF0YVxyXG4vLyAgICAgZGlzcGxheU5hbWVcclxuLy8gfVxyXG5cclxuLy8gaW50ZXJmYWNlIElXaW5KU0NoaWxkQ29tcG9uZW50IGV4dGVuZHMgSVdpbkpTQ29tcG9uZW50IHtcclxuLy8gICAgIGtleVxyXG4vLyAgICAgdHlwZVxyXG4vLyB9XHJcblxyXG4vLyBSZXR1cm5zIGEgV2luSlNDaGlsZENvbXBvbmVudCBmb3IgZWFjaCBjb21wb25lbnQgaW4gKmNoaWxkcmVuKi4gUmV1c2VzXHJcbi8vIFdpbkpTQ2hpbGRDb21wb25lbnRzIGZyb20gKmNoaWxkQ29tcG9uZW50c01hcCogd2hlbiBwb3NzaWJsZS4gRGlzcG9zZXMgbWVtYmVycyBvZlxyXG4vLyAqY2hpbGRDb21wb25lbnRzTWFwKiBpZiB0aGV5IGFyZSBubyBsb25nZXIgbmVlZGVkLlxyXG5mdW5jdGlvbiBwcm9jZXNzQ2hpbGRyZW4oY29tcG9uZW50RGlzcGxheU5hbWUsIGNoaWxkcmVuLCBjaGlsZENvbXBvbmVudHNNYXApIHtcclxuICAgIHZhciBuZXdDaGlsZENvbXBvbmVudHMgPSBbXTtcclxuICAgIHZhciBuZXdDaGlsZENvbXBvbmVudHNNYXAgPSB7fTtcclxuXHJcbiAgICAvLyBBIGNvbXBvbmVudCdzICprZXkqIHJlcHJlc2VudHMgaXRzIGlkZW50aXR5LiBJZiBhIGNvbXBvbmVudCBpbiAqY2hpbGRyZW4qIGFuZCBhXHJcbiAgICAvLyBjb21wb25lbnQgaW4gKmNoaWxkQ29tcG9uZW50c01hcCogaGF2ZSB0aGUgc2FtZSAqa2V5KiwgdGhlbiB0aGV5IGFyZSBhc3N1bWVkIHRvXHJcbiAgICAvLyByZXByZXNlbnQgdGhlIHNhbWUgY29tcG9uZW50LlxyXG5cclxuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjb21wb25lbnQpIHtcclxuICAgICAgICBpZiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQucmVmKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXHJcbiAgICAgICAgICAgICAgICAgICAgXCJyZWYgcHJvcCAoXCIgKyBjb21wb25lbnQucmVmICsgXCIpIHdpbGwgbm90IHdvcmsgb24gXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudC50eXBlLmRpc3BsYXlOYW1lICsgXCIgY29tcG9uZW50IGJlY2F1c2UgaXQgaXMgaW5zaWRlIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcIm9mIGEgXCIgKyBjb21wb25lbnREaXNwbGF5TmFtZSArIFwiIGNvbXBvbmVudFwiXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoY29tcG9uZW50LmtleSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcclxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQudHlwZS5kaXNwbGF5TmFtZSArIFwiIGNvbXBvbmVudCByZXF1aXJlcyBhIGtleSBcIiArXHJcbiAgICAgICAgICAgICAgICAgICAgXCJ3aGVuIGluc2lkZSBvZiBhIFwiICsgY29tcG9uZW50RGlzcGxheU5hbWUgKyBcIiBjb21wb25lbnRcIlxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB3aW5qc0NoaWxkQ29tcG9uZW50ID0gY2hpbGRDb21wb25lbnRzTWFwW2NvbXBvbmVudC5rZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHdpbmpzQ2hpbGRDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAod2luanNDaGlsZENvbXBvbmVudC50eXBlID09PSBjb21wb25lbnQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5qc0NoaWxkQ29tcG9uZW50LnVwZGF0ZShjb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGEgY29tcG9uZW50J3MgKnR5cGUqIGhhcyBjaGFuZ2VkIHRoZW4gdGhlIGNvbXBvbmVudCBtdXN0IGJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlY3JlYXRlZCBmcm9tIHNjcmF0Y2ggcmF0aGVyIHRoYW4gdXBkYXRlZC4gVGhlIHJlYXNvbiBpcyB0aGF0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSB0YWdOYW1lIG9mIHRoZSB1bmRlcmx5aW5nIERPTSBlbGVtZW50IG1heSBoYXZlIGNoYW5nZWQuIFRoZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIHRhZ05hbWUgb2YgdGhlIHVuZGVybHlpbmcgRE9NIGVsZW1lbnQgaXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gaW5zdGFudGlhdGUgYSBuZXcgcmVhY3Qtd2luanMgY29tcG9uZW50LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5qc0NoaWxkQ29tcG9uZW50LmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luanNDaGlsZENvbXBvbmVudCA9IG5ldyBXaW5KU0NoaWxkQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5qc0NoaWxkQ29tcG9uZW50ID0gbmV3IFdpbkpTQ2hpbGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5ld0NoaWxkQ29tcG9uZW50cy5wdXNoKHdpbmpzQ2hpbGRDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRDb21wb25lbnRzTWFwW2NvbXBvbmVudC5rZXldID0gd2luanNDaGlsZENvbXBvbmVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5rZXlzKGNoaWxkQ29tcG9uZW50c01hcCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgaWYgKCFuZXdDaGlsZENvbXBvbmVudHNNYXAuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBjaGlsZENvbXBvbmVudHNNYXBba2V5XS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjaGlsZENvbXBvbmVudHM6IG5ld0NoaWxkQ29tcG9uZW50cyxcclxuICAgICAgICBjaGlsZENvbXBvbmVudHNNYXA6IG5ld0NoaWxkQ29tcG9uZW50c01hcFxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gcHJlZml4ZWRQcm9wZXJ0eShwcmVmaXgsIHByb3BlcnR5KSB7XHJcbiAgICByZXR1cm4gcHJlZml4ICsgcHJvcGVydHlbMF0udG9VcHBlckNhc2UoKSArIHByb3BlcnR5LnN1YnN0cigxKTtcclxufVxyXG5cclxudmFyIGlzVW5pdGxlc3NQcm9wZXJ0eSA9IHtcclxuICAgIGZsZXg6IHRydWUsXHJcbiAgICBmbGV4R3JvdzogdHJ1ZSxcclxuICAgIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcclxuICAgIGZsZXhTaHJpbms6IHRydWUsXHJcbiAgICBmbGV4TmVnYXRpdmU6IHRydWUsXHJcbiAgICBmb250V2VpZ2h0OiB0cnVlLFxyXG4gICAgbGluZUNsYW1wOiB0cnVlLFxyXG4gICAgbGluZUhlaWdodDogdHJ1ZSxcclxuICAgIG9wYWNpdHk6IHRydWUsXHJcbiAgICBvcmRlcjogdHJ1ZSxcclxuICAgIG9ycGhhbnM6IHRydWUsXHJcbiAgICB3aWRvd3M6IHRydWUsXHJcbiAgICB6SW5kZXg6IHRydWUsXHJcbiAgICB6b29tOiB0cnVlXHJcbn07XHJcbnZhciB2ZW5kb3JQcmVmaXhlcyA9IFtcIk1velwiLCBcIm1zXCIsIFwiV2Via2l0XCJdO1xyXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzUHJvcGVydHkpLmZvckVhY2goZnVuY3Rpb24gKHByb3BlcnR5KSB7XHJcbiAgICB2ZW5kb3JQcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcclxuICAgICAgICBpc1VuaXRsZXNzUHJvcGVydHlbcHJlZml4ZWRQcm9wZXJ0eShwcmVmaXgsIHByb3BlcnR5KV0gPSB0cnVlO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuLy8gQ29udmVydHMgdGhlIHZhbHVlIG9mIGEgQ1NTIGF0dHJpYnV0ZSB0byBhIHN0cmluZy4gV2hlbiBjZXJ0YWluIGF0dHJpYnV0ZXNcclxuLy8gKGUuZy4gd2lkdGgsIGhlaWdodCkgYXJlIHNwZWNpZmllZCBhcyBudW1iZXJzLCB0aGlzIG1lYW5zIGFkZGluZyBcInB4XCIgdG8gdGhlXHJcbi8vIGVuZCBvZiB0aGUgc3RyaW5nIHZhbHVlLlxyXG5mdW5jdGlvbiByZXNvbHZlU3R5bGVWYWx1ZShjc3NQcm9wZXJ0eSwgdmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICByZXR1cm4gaXNVbml0bGVzc1Byb3BlcnR5W2Nzc1Byb3BlcnR5XSB8fCB2YWx1ZSA9PT0gMCA/XHJcbiAgICAgICAgICAgIChcIlwiICsgdmFsdWUpIDpcclxuICAgICAgICAgICAgKHZhbHVlICsgXCJweFwiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID8gKFwiXCIgKyB2YWx1ZSkgOiBcIlwiO1xyXG4gICAgfVxyXG59XHJcblxyXG52YXIgUHJvcEhhbmRsZXJzID0ge1xyXG4gICAgLy8gTWFwcyB0byBhIHByb3BlcnR5IG9uIHRoZSB3aW5Db250cm9sLlxyXG4gICAgcHJvcGVydHk6IGZ1bmN0aW9uIChwcm9wVHlwZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHByb3BUeXBlOiBwcm9wVHlwZSxcclxuICAgICAgICAgICAgcHJlQ3RvckluaXQ6IGZ1bmN0aW9uIHByb3BlcnR5X3ByZUN0b3JJbml0KGVsZW1lbnQsIG9wdGlvbnMsIGRhdGEsIGRpc3BsYXlOYW1lLCBwcm9wTmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnNbcHJvcE5hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gcHJvcGVydHlfdXBkYXRlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luanNDb21wb25lbnQud2luQ29udHJvbFtwcm9wTmFtZV0gPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIE1hcHMgdG8gYSBwcm9wZXJ0eSBvbiB0aGUgd2luQ29udHJvbCB3aGljaCBpbnZvbHZlcyBzZXR0aW5nIGZvY3VzLiBTdWNoIHByb3BlcnRpZXNcclxuICAgIC8vIGFyZSBzZXQgb3V0c2lkZSBvZiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIHRvIHByZXZlbnQgUmVhY3QgZnJvbSB1bmRvaW5nIHRoZVxyXG4gICAgLy8gZm9jdXMgbW92ZS5cclxuICAgIGZvY3VzUHJvcGVydHk6IGZ1bmN0aW9uIChwcm9wVHlwZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHByb3BUeXBlOiBwcm9wVHlwZSxcclxuICAgICAgICAgICAgcHJlQ3RvckluaXQ6IGZ1bmN0aW9uIGZvY3VzUHJvcGVydHlfcHJlQ3RvckluaXQoZWxlbWVudCwgb3B0aW9ucywgZGF0YSwgZGlzcGxheU5hbWUsIHByb3BOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uc1twcm9wTmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiBmb2N1c1Byb3BlcnR5X3VwZGF0ZSh3aW5qc0NvbXBvbmVudCwgcHJvcE5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhc3luY1Rva2VuID0gd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNUb2tlbiAmJiBjbGVhckltbWVkaWF0ZShhc3luY1Rva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICBhc3luY1Rva2VuID0gc2V0SW1tZWRpYXRlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5qc0NvbXBvbmVudC53aW5Db250cm9sW3Byb3BOYW1lXSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiBmb2N1c1Byb3BlcnR5X2Rpc3Bvc2Uod2luanNDb21wb25lbnQsIHByb3BOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXN5bmNUb2tlbiA9IHdpbmpzQ29tcG9uZW50LmRhdGFbcHJvcE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgYXN5bmNUb2tlbiAmJiBjbGVhckltbWVkaWF0ZShhc3luY1Rva2VuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIE1hcHMgdG8gYSBwcm9wZXJ0eSBvbiB0aGUgd2luQ29udHJvbCdzIGVsZW1lbnQuXHJcbiAgICBkb21Qcm9wZXJ0eTogZnVuY3Rpb24gKHByb3BUeXBlKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJvcFR5cGU6IHByb3BUeXBlLFxyXG4gICAgICAgICAgICBwcmVDdG9ySW5pdDogZnVuY3Rpb24gZG9tUHJvcGVydHlfcHJlQ3RvckluaXQoZWxlbWVudCwgb3B0aW9ucywgZGF0YSwgZGlzcGxheU5hbWUsIHByb3BOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudFtwcm9wTmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiBkb21Qcm9wZXJ0eV91cGRhdGUod2luanNDb21wb25lbnQsIHByb3BOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5qc0NvbXBvbmVudC5lbGVtZW50W3Byb3BOYW1lXSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gTWFwcyB0byBhbiBhdHRyaWJ1dGUgb24gdGhlIHdpbkNvbnRyb2wncyBlbGVtZW50LlxyXG4gICAgZG9tQXR0cmlidXRlOiBmdW5jdGlvbiAocHJvcFR5cGUpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwcm9wVHlwZTogcHJvcFR5cGUsXHJcbiAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gZG9tQXR0cmlidXRlX3VwZGF0ZSh3aW5qc0NvbXBvbmVudCwgcHJvcE5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gbnVsbCAmJiBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmpzQ29tcG9uZW50LmVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3BOYW1lLCBcIlwiICsgbmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmpzQ29tcG9uZW50LmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKHByb3BOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBNYXBzIHRvIGFuIGV2ZW50IG9uIHRoZSB3aW5Db250cm9sLlxyXG4gICAgZXZlbnQ6IHtcclxuICAgICAgICBwcm9wVHlwZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICAgICAgLy8gQ2FuJ3Qgc2V0IG9wdGlvbnMgaW4gcHJlQ3RvckluaXQgZm9yIGV2ZW50cy4gVGhlIHByb2JsZW0gaXMgV2luSlMgY29udHJvbCBvcHRpb25zXHJcbiAgICAgICAgLy8gdXNlIGEgZGlmZmVyZW50IGNvZGUgcGF0aCB0byBob29rIHVwIGV2ZW50cyB0aGFuIHRoZSBldmVudCBwcm9wZXJ0eSBzZXR0ZXJzLlxyXG4gICAgICAgIC8vIENvbnNlcXVlbnRseSwgc2V0dGluZyBhbiBldmVudCBwcm9wZXJ0eSB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHVuaG9vayB0aGUgZXZlbnRcclxuICAgICAgICAvLyBsaXN0ZW5lciB0aGF0IHdhcyBzcGVjaWZpZWQgaW4gdGhlIG9wdGlvbnMgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBUbyBhdm9pZCB0aGlzXHJcbiAgICAgICAgLy8gcHJvYmxlbSwgYWx3YXlzIGdvIHRocnUgdGhlIGV2ZW50IHByb3BlcnR5IHNldHRlcnMuXHJcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiBldmVudF91cGRhdGUod2luanNDb21wb25lbnQsIHByb3BOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgd2luanNDb21wb25lbnQud2luQ29udHJvbFtwcm9wTmFtZS50b0xvd2VyQ2FzZSgpXSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBNYXBzIHRvIGFuIGV2ZW50IG9uIHRoZSB3aW5Db250cm9sJ3MgZWxlbWVudC5cclxuICAgIGRvbUV2ZW50OiB7XHJcbiAgICAgICAgcHJvcFR5cGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLFxyXG4gICAgICAgIHByZUN0b3JJbml0OiBmdW5jdGlvbiBkb21FdmVudF9wcmVDdG9ySW5pdChlbGVtZW50LCBvcHRpb25zLCBkYXRhLCBkaXNwbGF5TmFtZSwgcHJvcE5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnRbcHJvcE5hbWUudG9Mb3dlckNhc2UoKV0gPSB2YWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gZG9tRXZlbnRfdXBkYXRlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHdpbmpzQ29tcG9uZW50LmVsZW1lbnRbcHJvcE5hbWUudG9Mb3dlckNhc2UoKV0gPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gIEVuYWJsZSB0aGUgYWRkaXRpb24gYW5kIHJlbW92YWwgb2YgQ1NTIGNsYXNzZXMgb24gdGhlIHJvb3Qgb2YgdGhlIHdpbkNvbnRyb2xcclxuICAgIC8vICBidXQgZG9uJ3QgY2xvYmJlciB3aGF0ZXZlciBDU1MgY2xhc3NlcyB0aGUgdW5kZXJseWluZyBjb250cm9sIG1heSBoYXZlIGFkZGVkXHJcbiAgICAvLyAgKGUuZy4gZG9uJ3QgY2xvYmJlciB3aW4tbGlzdHZpZXcpLlxyXG4gICAgd2luQ29udHJvbENsYXNzTmFtZToge1xyXG4gICAgICAgIHByb3BUeXBlOiBSZWFjdC5Qcm9wVHlwZXMuc3RyaW5nLFxyXG4gICAgICAgIHByZUN0b3JJbml0OiBmdW5jdGlvbiB3aW5Db250cm9sQ2xhc3NOYW1lX3ByZUN0b3JJbml0KGVsZW1lbnQsIG9wdGlvbnMsIGRhdGEsIGRpc3BsYXlOYW1lLCBwcm9wTmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRhdGFbcHJvcE5hbWVdID0gbWFrZUNsYXNzU2V0KHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gd2luQ29udHJvbENsYXNzTmFtZV91cGRhdGUod2luanNDb21wb25lbnQsIHByb3BOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9sZENsYXNzU2V0ID0gd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV0gfHwge307XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q2xhc3NTZXQgPSBtYWtlQ2xhc3NTZXQobmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnRDbGFzc0xpc3QgPSB3aW5qc0NvbXBvbmVudC53aW5Db250cm9sLmVsZW1lbnQuY2xhc3NMaXN0O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgY2xhc3NOYW1lIGluIG9sZENsYXNzU2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdDbGFzc1NldFtjbGFzc05hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRDbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgY2xhc3NOYW1lIGluIG5ld0NsYXNzU2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvbGRDbGFzc1NldFtjbGFzc05hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRDbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV0gPSBuZXdDbGFzc1NldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gIEVuYWJsZSB0aGUgYWRkaXRpb24gYW5kIHJlbW92YWwgb2YgaW5saW5lIHN0eWxlcyBvbiB0aGUgcm9vdCBvZiB0aGUgd2luQ29udHJvbFxyXG4gICAgLy8gIGJ1dCBkb24ndCBjbG9iYmVyIHdoYXRldmVyIGlubGluZSBzdHlsZXMgdGhlIHVuZGVybHlpbmcgY29udHJvbCBtYXkgaGF2ZSBhZGRlZC5cclxuICAgIHdpbkNvbnRyb2xTdHlsZToge1xyXG4gICAgICAgIHByb3BUeXBlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LFxyXG4gICAgICAgIHByZUN0b3JJbml0OiBmdW5jdGlvbiB3aW5Db250cm9sU3R5bGVfcHJlQ3RvckluaXQoZWxlbWVudCwgb3B0aW9ucywgZGF0YSwgZGlzcGxheU5hbWUsIHByb3BOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgZWxlbWVudFN0eWxlID0gZWxlbWVudC5zdHlsZTtcclxuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSB8fCB7fTtcclxuICAgICAgICAgICAgZm9yICh2YXIgY3NzUHJvcGVydHkgaW4gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnRTdHlsZVtjc3NQcm9wZXJ0eV0gPSByZXNvbHZlU3R5bGVWYWx1ZShjc3NQcm9wZXJ0eSwgdmFsdWVbY3NzUHJvcGVydHldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiB3aW5Db250cm9sU3R5bGVfdXBkYXRlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gb2xkVmFsdWUgfHwge307XHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IG5ld1ZhbHVlIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYod2luanNDb21wb25lbnQud2luQ29udHJvbCAmJiB3aW5qc0NvbXBvbmVudC53aW5Db250cm9sLmVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudFN0eWxlID0gd2luanNDb21wb25lbnQud2luQ29udHJvbC5lbGVtZW50LnN0eWxlO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGNzc1Byb3BlcnR5IGluIG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbmV3VmFsdWUuaGFzT3duUHJvcGVydHkoY3NzUHJvcGVydHkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50U3R5bGVbY3NzUHJvcGVydHldID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjc3NQcm9wZXJ0eSBpbiBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2xkVmFsdWVbY3NzUHJvcGVydHldICE9PSBuZXdWYWx1ZVtjc3NQcm9wZXJ0eV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRTdHlsZVtjc3NQcm9wZXJ0eV0gPSByZXNvbHZlU3R5bGVWYWx1ZShjc3NQcm9wZXJ0eSwgbmV3VmFsdWVbY3NzUHJvcGVydHldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gRW1pdHMgYSB3YXJuaW5nIHRvIHRoZSBjb25zb2xlIHdoZW5ldmVyIHByb3AgZ2V0cyB1c2VkLlxyXG4gICAgd2FybjogZnVuY3Rpb24gUHJvcEhhbmRsZXJzX3dhcm4od2Fybk1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAvLyBEb24ndCBuZWVkIHByZUN0b3JJbml0IGJlY2F1c2UgdGhpcyBwcm9wIGhhbmRsZXIgZG9lc24ndCBoYXZlIGFueSBzaWRlXHJcbiAgICAgICAgICAgIC8vIGVmZmVjdHMgb24gdGhlIFdpbkpTIGNvbnRyb2wuIHVwZGF0ZSBhbHNvIHJ1bnMgZHVyaW5nIGluaXRpYWxpemF0aW9uIHNvXHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBpcyBqdXN0IGFzIGdvb2QgYXMgcHJlQ3RvckluaXQgZm9yIG91ciB1c2UgY2FzZS5cclxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiB3YXJuX3VwZGF0ZSh3aW5qc0NvbXBvbmVudCwgcHJvcE5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKHdpbmpzQ29tcG9uZW50LmRpc3BsYXlOYW1lICsgXCI6IFwiICsgd2Fybk1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ3JlYXRlcyBhIERPTSBlbGVtZW50IGFuZCBtb3VudHMgYSBSZWFjdCBjb21wb25lbnQgb24gaXQuIEdpdmVzIHRoaXMgRE9NXHJcbiAgICAvLyBlbGVtZW50IHRvIHRoZSAqd2luQ29udHJvbFByb3BlcnR5KiBwcm9wZXJ0eSBvZiB0aGUgd2luQ29udHJvbC5cclxuICAgIHByb3BlcnR5V2l0aE1vdW50OiBmdW5jdGlvbiBQcm9wSGFuZGxlcnNfcHJvcGVydHlXaXRoTW91bnQod2luQ29udHJvbFByb3BlcnR5KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJvcFR5cGU6IFJlYWN0LlByb3BUeXBlcy5lbGVtZW50LFxyXG4gICAgICAgICAgICBwcmVDdG9ySW5pdDogZnVuY3Rpb24gcHJvcGVydHlXaXRoTW91bnRfcHJlQ3RvckluaXQoZWxlbWVudCwgb3B0aW9ucywgZGF0YSwgZGlzcGxheU5hbWUsIHByb3BOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YVtwcm9wTmFtZV0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIFJlYWN0RE9NLnJlbmRlcih2YWx1ZSwgZGF0YVtwcm9wTmFtZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbd2luQ29udHJvbFByb3BlcnR5XSA9IGRhdGFbcHJvcE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIHByb3BlcnR5V2l0aE1vdW50X3VwZGF0ZSh3aW5qc0NvbXBvbmVudCwgcHJvcE5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdpbkNvbnRyb2wgPSB3aW5qc0NvbXBvbmVudC53aW5Db250cm9sO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB3aW5qc0NvbXBvbmVudC5kYXRhW3Byb3BOYW1lXTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV0gPSBlbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBSZWFjdERPTS5yZW5kZXIobmV3VmFsdWUsIGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5Db250cm9sW3dpbkNvbnRyb2xQcm9wZXJ0eV0gIT09IGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luQ29udHJvbFt3aW5Db250cm9sUHJvcGVydHldID0gZWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudCAmJiBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbkNvbnRyb2xbd2luQ29udHJvbFByb3BlcnR5XSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIHByb3BlcnR5V2l0aE1vdW50X2Rpc3Bvc2Uod2luanNDb21wb25lbnQsIHByb3BOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHdpbmpzQ29tcG9uZW50LmRhdGFbcHJvcE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudCAmJiBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcblxyXG5cclxuICAgIC8vIE1vdW50cyBhIFJlYWN0IGNvbXBvbmVudCBvbiB3aGF0ZXZlciBlbGVtZW50IGdldHMgcmV0dXJuZWQgYnkgZ2V0TW91bnRQb2ludC5cclxuICAgIG1vdW50VG86IGZ1bmN0aW9uIFByb3BIYW5kbGVyc19tb3VudFRvKGdldE1vdW50UG9pbnQpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwcm9wVHlwZTogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXHJcbiAgICAgICAgICAgIC8vIENhbid0IHVzZSBwcmVDdG9ySW5pdCBiZWNhdXNlIHRoZSBtb3VudCBwb2ludCBtYXkgbm90IGV4aXN0IHVudGlsIHRoZVxyXG4gICAgICAgICAgICAvLyBjb25zdHJ1Y3RvciBoYXMgcnVuLlxyXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIG1vdW50VG9fdXBkYXRlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHdpbmpzQ29tcG9uZW50LmRhdGFbcHJvcE5hbWVdIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIHZlcnNpb24gPSAoZGF0YS52ZXJzaW9uIHx8IDApICsgMTtcclxuICAgICAgICAgICAgICAgIHdpbmpzQ29tcG9uZW50LmRhdGFbcHJvcE5hbWVdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICptb3VudENvbXBvbmVudCogbWF5IHJ1biBhc3luY2hyb25vdXNseSBhbmQgd2UgbWF5IHF1ZXVlIGl0IG11bHRpcGxlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGltZXMgYmVmb3JlIGl0IHJ1bnMuICp2ZXJzaW9uKiBhbGxvd3MgdXMgdG8gZW5zdXJlIG9ubHkgdGhlIGxhdGVzdFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZlcnNpb24gcnVucyBhbmQgdGhlIG90aGVycyBhcmUgbm8gb3BzLlxyXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246IHZlcnNpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gKmVsZW1lbnQqIGlzIHRoZSBlbGVtZW50IHRvIHdoaWNoIHdlIGxhc3QgbW91bnRlZCB0aGUgY29tcG9uZW50LlxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ6IGRhdGEuZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbW91bnRDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlcnNpb24gPT09IHdpbmpzQ29tcG9uZW50LmRhdGFbcHJvcE5hbWVdLnZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZEVsZW1lbnQgPSB3aW5qc0NvbXBvbmVudC5kYXRhW3Byb3BOYW1lXS5lbGVtZW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IGdldE1vdW50UG9pbnQod2luanNDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZEVsZW1lbnQgJiYgb2xkRWxlbWVudCAhPT0gbmV3RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUob2xkRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVhY3RET00ucmVuZGVyKG5ld1ZhbHVlLCBuZXdFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmpzQ29tcG9uZW50LmRhdGFbcHJvcE5hbWVdLmVsZW1lbnQgPSBuZXdFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbGRFbGVtZW50ICYmIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUob2xkRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5qc0NvbXBvbmVudC5kYXRhW3Byb3BOYW1lXS5lbGVtZW50ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gKmlzRGVjbGFyYXRpdmVDb250cm9sQ29udGFpbmVyKiBpcyBhIGhvb2sgc29tZSBXaW5KUyBjb250cm9scyBwcm92aWRlXHJcbiAgICAgICAgICAgICAgICAvLyAoZS5nLiBIdWJTZWN0aW9uLCBQaXZvdEl0ZW0pIHRvIGVuc3VyZSB0aGF0IHByb2Nlc3NpbmcgcnVucyBvbiB0aGVcclxuICAgICAgICAgICAgICAgIC8vIGNvbnRyb2wgb25seSB3aGVuIHRoZSBjb250cm9sIGlzIHJlYWR5IGZvciBpdC4gVGhpcyBlbmFibGVzIGxhenkgbG9hZGluZ1xyXG4gICAgICAgICAgICAgICAgLy8gb2YgSHViU2VjdGlvbnMvUGl2b3RJdGVtcyAoZS5nLiBsb2FkIG9mZiBzY3JlZW4gaXRlbXMgYXN5bmNocm9ub3VzbHkgaW5cclxuICAgICAgICAgICAgICAgIC8vIGJhdGNoZXMpLiBBZGRpdGlvbmFsbHksIGRvaW5nIHByb2Nlc3NpbmcgdGhydSB0aGlzIGhvb2sgZ3VhcmFudGVlcyB0aGF0XHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgcHJvY2Vzc2luZyB3b24ndCBydW4gdW50aWwgdGhlIGNvbnRyb2wgaXMgaW4gdGhlIERPTS5cclxuICAgICAgICAgICAgICAgIHZhciB3aW5Db250cm9sID0gd2luanNDb21wb25lbnQud2luQ29udHJvbDtcclxuICAgICAgICAgICAgICAgIHZhciBxdWV1ZVByb2Nlc3NpbmcgPSB3aW5Db250cm9sLmNvbnN0cnVjdG9yLmlzRGVjbGFyYXRpdmVDb250cm9sQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1ZXVlUHJvY2Vzc2luZyAmJiB0eXBlb2YgcXVldWVQcm9jZXNzaW5nID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBxdWV1ZVByb2Nlc3Npbmcod2luQ29udHJvbCwgbW91bnRDb21wb25lbnQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBtb3VudENvbXBvbmVudCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiBtb3VudFRvX2Rpc3Bvc2Uod2luanNDb21wb25lbnQsIHByb3BOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHdpbmpzQ29tcG9uZW50LmRhdGFbcHJvcE5hbWVdIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBkYXRhLmVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50ICYmIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBVc2VzIHRoZSBCaW5kaW5nLkxpc3QncyBlZGl0aW5nIEFQSXMgdG8gbWFrZSBpdCBtYXRjaCB0aGUgY2hpbGRyZW4gcHJvcC4gRG9lcyB0aGlzIHRvXHJcbiAgICAvLyB0aGUgQmluZGluZy5MaXN0IHN0b3JlZCBpbiB0aGUgd2luQ29udHJvbCdzIHByb3BlcnR5IGNhbGxlZCBiaW5kaW5nTGlzdE5hbWUuXHJcbiAgICBzeW5jQ2hpbGRyZW5XaXRoQmluZGluZ0xpc3Q6IGZ1bmN0aW9uIFByb3BIYW5kbGVyc19zeW5jQ2hpbGRyZW5XaXRoQmluZGluZ0xpc3QoYmluZGluZ0xpc3ROYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJlQ3RvckluaXQ6IGZ1bmN0aW9uIHN5bmNDaGlsZHJlbldpdGhCaW5kaW5nTGlzdF9wcmVDdG9ySW5pdChlbGVtZW50LCBvcHRpb25zLCBkYXRhLCBkaXNwbGF5TmFtZSwgcHJvcE5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0ZXN0ID0gcHJvY2Vzc0NoaWxkcmVuKGRpc3BsYXlOYW1lLCB2YWx1ZSwge30pO1xyXG4gICAgICAgICAgICAgICAgZGF0YVtwcm9wTmFtZV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luanNDaGlsZENvbXBvbmVudHM6IGxhdGVzdC5jaGlsZENvbXBvbmVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgd2luanNDaGlsZENvbXBvbmVudHNNYXA6IGxhdGVzdC5jaGlsZENvbXBvbmVudHNNYXBcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgb3B0aW9uc1tiaW5kaW5nTGlzdE5hbWVdID0gbmV3IFdpbkpTLkJpbmRpbmcuTGlzdChcclxuICAgICAgICAgICAgICAgICAgICBsYXRlc3QuY2hpbGRDb21wb25lbnRzLm1hcChmdW5jdGlvbiAod2luanNDaGlsZENvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2luanNDaGlsZENvbXBvbmVudC53aW5Db250cm9sO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIHN5bmNDaGlsZHJlbldpdGhCaW5kaW5nTGlzdF91cGRhdGUod2luanNDb21wb25lbnQsIHByb3BOYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV0gfHwge307XHJcbiAgICAgICAgICAgICAgICB2YXIgb2xkQ2hpbGRDb21wb25lbnRzID0gZGF0YS53aW5qc0NoaWxkQ29tcG9uZW50cyB8fCBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBvbGRDaGlsZENvbXBvbmVudHNNYXAgPSBkYXRhLndpbmpzQ2hpbGRDb21wb25lbnRzTWFwIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhdGVzdCA9IHByb2Nlc3NDaGlsZHJlbih3aW5qc0NvbXBvbmVudC5kaXNwbGF5TmFtZSwgbmV3VmFsdWUsIG9sZENoaWxkQ29tcG9uZW50c01hcCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGJpbmRpbmdMaXN0ID0gd2luanNDb21wb25lbnQud2luQ29udHJvbFtiaW5kaW5nTGlzdE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwbHlFZGl0c1RvQmluZGluZ0xpc3QoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRpbmdMaXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaWZmQXJyYXlzQnlLZXkob2xkQ2hpbGRDb21wb25lbnRzLCBsYXRlc3QuY2hpbGRDb21wb25lbnRzKVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmpzQ29tcG9uZW50LndpbkNvbnRyb2xbYmluZGluZ0xpc3ROYW1lXSA9IG5ldyBXaW5KUy5CaW5kaW5nLkxpc3QobGF0ZXN0LmNoaWxkQ29tcG9uZW50cy5tYXAoZnVuY3Rpb24gKHdpbmpzQ2hpbGRDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdpbmpzQ2hpbGRDb21wb25lbnQud2luQ29udHJvbDtcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2luanNDaGlsZENvbXBvbmVudHM6IGxhdGVzdC5jaGlsZENvbXBvbmVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgd2luanNDaGlsZENvbXBvbmVudHNNYXA6IGxhdGVzdC5jaGlsZENvbXBvbmVudHNNYXBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uIHN5bmNDaGlsZHJlbldpdGhCaW5kaW5nTGlzdF9kaXNwb3NlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB3aW5qc0NvbXBvbmVudC5kYXRhW3Byb3BOYW1lXSB8fCB7fTtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZENvbXBvbmVudHMgPSBkYXRhLndpbmpzQ2hpbGRDb21wb25lbnRzIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgY2hpbGRDb21wb25lbnRzLmZvckVhY2goZnVuY3Rpb24gKHdpbmpzQ2hpbGRDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aW5qc0NoaWxkQ29tcG9uZW50LmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gZGVmaW5lQ29udHJvbChvcHRpb25zKSB7XHJcbiAgICAvLyBSZXF1aXJlZFxyXG4gICAgdmFyIHdpbmpzQ29udHJvbCA9IG9wdGlvbnMud2luanNDb250cm9sO1xyXG5cclxuICAgIC8vIE9wdGlvbmFsXHJcbiAgICB2YXIgd2luQ29udHJvbE9wdGlvbnMgPSBvcHRpb25zLndpbkNvbnRyb2xPcHRpb25zIHx8IHt9O1xyXG4gICAgdmFyIHByZUN0b3JJbml0ID0gb3B0aW9ucy5wcmVDdG9ySW5pdCB8fCBmdW5jdGlvbiAoKSB7IH07XHJcbiAgICB2YXIgcHJvcEhhbmRsZXJzID0gb3B0aW9ucy5wcm9wSGFuZGxlcnMgfHwge307XHJcbiAgICB2YXIgcmVuZGVyID0gb3B0aW9ucy5yZW5kZXIgfHwgZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgIHJldHVybiBSZWFjdC5ET00uZGl2KCk7XHJcbiAgICB9O1xyXG4gICAgdmFyIGRpc3BsYXlOYW1lID0gb3B0aW9ucy5kaXNwbGF5TmFtZTtcclxuXHJcbiAgICBmdW5jdGlvbiBpbml0V2luSlNDb21wb25lbnQod2luanNDb21wb25lbnQsIGVsZW1lbnQsIHByb3BzKSB7XHJcbiAgICAgICAgd2luanNDb21wb25lbnQuZGF0YSA9IHt9O1xyXG4gICAgICAgIHdpbmpzQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XHJcbiAgICAgICAgd2luanNDb21wb25lbnQuZWxlbWVudCA9IGVsZW1lbnQ7XHJcblxyXG4gICAgICAgIC8vIEdpdmUgcHJvcEhhbmRsZXJzIHRoYXQgaW1wbGVtZW50IHByZUN0b3JJbml0IHRoZSBvcHBvcnR1bml0eSB0byBydW4gYmVmb3JlXHJcbiAgICAgICAgLy8gaW5zdGFudGlhdGluZyB0aGUgd2luQ29udHJvbC5cclxuICAgICAgICB2YXIgb3B0aW9ucyA9IGNsb25lT2JqZWN0KHdpbkNvbnRyb2xPcHRpb25zKTtcclxuICAgICAgICBwcmVDdG9ySW5pdChlbGVtZW50LCBvcHRpb25zLCB3aW5qc0NvbXBvbmVudC5kYXRhLCBkaXNwbGF5TmFtZSk7XHJcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gcHJvcEhhbmRsZXJzW3Byb3BOYW1lXTtcclxuICAgICAgICAgICAgaWYgKGhhbmRsZXIgJiYgaGFuZGxlci5wcmVDdG9ySW5pdCkge1xyXG4gICAgICAgICAgICAgICAgaGFuZGxlci5wcmVDdG9ySW5pdChlbGVtZW50LCBvcHRpb25zLCB3aW5qc0NvbXBvbmVudC5kYXRhLCBkaXNwbGF5TmFtZSwgcHJvcE5hbWUsIHByb3BzW3Byb3BOYW1lXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB3aW5qc0NvbXBvbmVudC53aW5Db250cm9sID0gbmV3IHdpbmpzQ29udHJvbChlbGVtZW50LCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgLy8gUHJvY2VzcyBwcm9wSGFuZGxlcnMgdGhhdCBkb24ndCBpbXBsZW1lbnQgcHJlQ3RvckluaXQuXHJcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gcHJvcEhhbmRsZXJzW3Byb3BOYW1lXTtcclxuICAgICAgICAgICAgaWYgKGhhbmRsZXIgJiYgIWhhbmRsZXIucHJlQ3RvckluaXQpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIudXBkYXRlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSwgdW5kZWZpbmVkLCBwcm9wc1twcm9wTmFtZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdXBkYXRlV2luSlNDb21wb25lbnQod2luanNDb21wb25lbnQsIHByZXZQcm9wcywgbmV4dFByb3BzKSB7XHJcbiAgICAgICAgLy8gSGFuZGxlIHByb3BzIHRoYXQgd2VyZSBhZGRlZCBvciBjaGFuZ2VkXHJcbiAgICAgICAgT2JqZWN0LmtleXMobmV4dFByb3BzKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wTmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IHByb3BIYW5kbGVyc1twcm9wTmFtZV07XHJcbiAgICAgICAgICAgIGlmIChoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyLnVwZGF0ZSh3aW5qc0NvbXBvbmVudCwgcHJvcE5hbWUsIHByZXZQcm9wc1twcm9wTmFtZV0sIG5leHRQcm9wc1twcm9wTmFtZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEhhbmRsZSBwcm9wcyB0aGF0IHdlcmUgcmVtb3ZlZFxyXG4gICAgICAgIE9iamVjdC5rZXlzKHByZXZQcm9wcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKCFuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlciA9IHByb3BIYW5kbGVyc1twcm9wTmFtZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIudXBkYXRlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSwgcHJldlByb3BzW3Byb3BOYW1lXSwgdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGRpc3Bvc2VXaW5KU0NvbXBvbmVudCh3aW5qc0NvbXBvbmVudCkge1xyXG4gICAgICAgIHdpbmpzQ29tcG9uZW50LndpbkNvbnRyb2wuZGlzcG9zZSAmJiB3aW5qc0NvbXBvbmVudC53aW5Db250cm9sLmRpc3Bvc2UoKTtcclxuICAgICAgICBPYmplY3Qua2V5cyhwcm9wSGFuZGxlcnMpLmZvckVhY2goZnVuY3Rpb24gKHByb3BOYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gcHJvcEhhbmRsZXJzW3Byb3BOYW1lXTtcclxuICAgICAgICAgICAgaGFuZGxlci5kaXNwb3NlICYmIGhhbmRsZXIuZGlzcG9zZSh3aW5qc0NvbXBvbmVudCwgcHJvcE5hbWUpO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuICAgICAgICBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUsXHJcbiAgICAgICAgc3RhdGljczoge1xyXG4gICAgICAgICAgICBpbml0V2luSlNDb21wb25lbnQ6IGluaXRXaW5KU0NvbXBvbmVudCxcclxuICAgICAgICAgICAgdXBkYXRlV2luSlNDb21wb25lbnQ6IHVwZGF0ZVdpbkpTQ29tcG9uZW50LFxyXG4gICAgICAgICAgICBkaXNwb3NlV2luSlNDb21wb25lbnQ6IGRpc3Bvc2VXaW5KU0NvbXBvbmVudFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvcFR5cGVzOiBtYXBPYmplY3QocHJvcEhhbmRsZXJzLCBmdW5jdGlvbiAocHJvcE5hbWUsIHByb3BIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9wSGFuZGxlci5wcm9wVHlwZTtcclxuICAgICAgICB9KSxcclxuICAgICAgICBzaG91bGRDb21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLy8gSWYgY2hvb3NpbmcgdG8gaW1wbGVtZW50IGNvbXBvbmVudFdpbGxNb3VudCwgYmUgYXdhcmUgdGhhdCBjb21wb25lbnRXaWxsTW91bnRcclxuICAgICAgICAvLyB3aWxsIHJ1biB3aGVuIFdpbkpTQ2hpbGRDb21wb25lbnQgcmVuZGVycyB0aGUgY29tcG9uZW50IHRvIGEgc3RyaW5nIHZpYVxyXG4gICAgICAgIC8vIHJlbmRlclJvb3RsZXNzQ29tcG9uZW50LlxyXG4gICAgICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGluaXRXaW5KU0NvbXBvbmVudCh0aGlzLCBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgdGhpcy5wcm9wcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wb25lbnRXaWxsVW5tb3VudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBkaXNwb3NlV2luSlNDb21wb25lbnQodGhpcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbiAobmV4dFByb3BzKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVdpbkpTQ29tcG9uZW50KHRoaXMsIHRoaXMucHJvcHMsIG5leHRQcm9wcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVuZGVyKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG52YXIgaG9zdEVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuZnVuY3Rpb24gcmVuZGVyUm9vdGxlc3NDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICB2YXIgaHRtbCA9IFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RhdGljTWFya3VwKGNvbXBvbmVudCk7XHJcbiAgICBob3N0RWwuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgIHZhciBlbGVtZW50ID0gaG9zdEVsLmZpcnN0RWxlbWVudENoaWxkO1xyXG4gICAgaG9zdEVsLnJlbW92ZUNoaWxkKGVsZW1lbnQpO1xyXG4gICAgcmV0dXJuIGVsZW1lbnQ7XHJcbn1cclxuXHJcbi8vIFRPRE86IElzIHRoZXJlIGEgYmV0dGVyIHdheSB0byBzb2x2ZSB0aGlzIHByb2JsZW0gdGhhdCBXaW5KU0NoaWxkQ29tcG9uZW50IHNvbHZlcz9cclxuLy8gVE9ETzogQmVjYXVzZSB3ZSdyZSBub3QgZ29pbmcgdGhydSBSZWFjdCdzIGxpZmVjeWNsZSwgd2UncmUgbWlzc2luZyBvdXQgb25cclxuLy8gdmFsaWRhdGlvbiBvZiBwcm9wVHlwZXMuXHJcbi8vIFRPRE86IHJlZiBkb2Vzbid0IHdvcmsgb24gV2luSlNDaGlsZENvbXBvbmVudHMuIFRoZSByZWFzb24gaXMgdGhhdCBkdXJpbmcgdXBkYXRlcywgd2VcclxuLy8gZG9uJ3QgY2FsbCBSZWFjdERPTS5yZW5kZXIuIEJlY2F1c2Ugb2YgdGhpcywgcmVmcyB3b3VsZCBnbyBzdGFsZSBhbmQgb25seSByZWZsZWN0IHRoZVxyXG4vLyBzdGF0ZSBvZiB0aGUgY29tcG9uZW50IGFmdGVyIGl0cyBmaXJzdCByZW5kZXIuIENvbnNlcXVlbnRseSwgd2UgY2xvbmUgdGhlIGNvbXBvbmVudFxyXG4vLyBkdXJpbmcgaXRzIGZpcnN0IHJlbmRlciBzbyBpdCBuZXZlciBzaG93cyB1cCBpbiByZWZzLiBUaGlzIHNob3VsZCBtYWtlIGl0IGNsZWFyZXJcclxuLy8gdGhhdCByZWZzIGRvbid0IHdvcmsgdGhhbiBnZW5lcmF0aW5nIHN0YWxlIHJlZnMuXHJcbmZ1bmN0aW9uIFdpbkpTQ2hpbGRDb21wb25lbnQoY29tcG9uZW50KSB7IC8vIGltcGxlbWVudHMgSVdpbkpTQ2hpbGRDb21wb25lbnRcclxuICAgIC8vIENsb25lIHRoZSBjb21wb25lbnQgc28gYSByZWYgaXNuJ3QgZ2VuZXJhdGVkLlxyXG4gICAgdmFyIGNsb25lZENvbXBvbmVudCA9IFJlYWN0LmNsb25lRWxlbWVudChjb21wb25lbnQsIHsgcmVmOiBudWxsIH0pO1xyXG4gICAgdmFyIGVsZW1lbnQgPSByZW5kZXJSb290bGVzc0NvbXBvbmVudChjbG9uZWRDb21wb25lbnQpO1xyXG4gICAgY29tcG9uZW50LnR5cGUuaW5pdFdpbkpTQ29tcG9uZW50KHRoaXMsIGVsZW1lbnQsIGNvbXBvbmVudC5wcm9wcyk7XHJcbiAgICB0aGlzLmtleSA9IGNvbXBvbmVudC5rZXk7XHJcbiAgICB0aGlzLnR5cGUgPSBjb21wb25lbnQudHlwZTtcclxuICAgIHRoaXMuX3Byb3BzID0gY29tcG9uZW50LnByb3BzO1xyXG4gICAgdGhpcy5fZGlzcG9zZVdpbkpTQ29tcG9uZW50ID0gY29tcG9uZW50LnR5cGUuZGlzcG9zZVdpbkpTQ29tcG9uZW50O1xyXG59O1xyXG5XaW5KU0NoaWxkQ29tcG9uZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICBjb21wb25lbnQudHlwZS51cGRhdGVXaW5KU0NvbXBvbmVudCh0aGlzLCB0aGlzLl9wcm9wcywgY29tcG9uZW50LnByb3BzKTtcclxuICAgIHRoaXMuX3Byb3BzID0gY29tcG9uZW50LnByb3BzO1xyXG59O1xyXG5XaW5KU0NoaWxkQ29tcG9uZW50LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5fZGlzcG9zZVdpbkpTQ29tcG9uZW50KHRoaXMpO1xyXG59O1xyXG5cclxuXHJcbi8vIFByb3AgaGFuZGxlcnMgdGhhdCBhcmUgY29tbW9uIHRvIGV2ZXJ5IFdpbkpTIGNvbnRyb2wuXHJcbnZhciBkZWZhdWx0UHJvcEhhbmRsZXJzID0ge1xyXG4gICAgY2xhc3NOYW1lOiBQcm9wSGFuZGxlcnMud2luQ29udHJvbENsYXNzTmFtZSxcclxuICAgIHN0eWxlOiBQcm9wSGFuZGxlcnMud2luQ29udHJvbFN0eWxlLFxyXG5cclxuICAgIC8vIFRPRE86IEluc3RlYWQgb2Ygc3BlY2lhbCBjYXNpbmcgdGhlc2UsIHN1cHBvcnQgRE9NIGF0dHJpYnV0ZXNcclxuICAgIC8vIG1vcmUgZ2VuZXJpY2FsbHkuXHJcbiAgICBpZDogUHJvcEhhbmRsZXJzLmRvbVByb3BlcnR5KFJlYWN0LlByb3BUeXBlcy5zdHJpbmcpLFxyXG4gICAgXCJhcmlhLWNvbnRyb2xzXCI6IFByb3BIYW5kbGVycy5kb21BdHRyaWJ1dGUoUmVhY3QuUHJvcFR5cGVzLmFueSksXHJcbiAgICBcImFyaWEtZXhwYW5kZWRcIjogUHJvcEhhbmRsZXJzLmRvbUF0dHJpYnV0ZShSZWFjdC5Qcm9wVHlwZXMuYW55KVxyXG59O1xyXG5cclxuLy8gQ29udHJvbC1zcGVjaWZpYyBwcm9wIGhhbmRsZXJzIGRlcml2ZWQgZnJvbSBSYXdDb250cm9sQXBpc1xyXG52YXIgRGVmYXVsdENvbnRyb2xQcm9wSGFuZGxlcnMgPSAoZnVuY3Rpb24gcHJvY2Vzc1Jhd0FwaXMoKSB7XHJcbiAgICB2YXIga2VlcFByb3BlcnR5ID0gZnVuY3Rpb24ga2VlcFByb3BlcnR5KHByb3BlcnR5TmFtZSkge1xyXG4gICAgICAgIHJldHVybiAhZW5kc1dpdGgocHJvcGVydHlOYW1lLnRvTG93ZXJDYXNlKCksIFwiZWxlbWVudFwiKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG1hcE9iamVjdChSYXdDb250cm9sQXBpcywgZnVuY3Rpb24gKGNvbnRyb2xOYW1lLCBjb250cm9sQXBpcykge1xyXG4gICAgICAgIHZhciBwcm9wSGFuZGxlcnMgPSB7fTtcclxuICAgICAgICBPYmplY3Qua2V5cyhjb250cm9sQXBpcykuZm9yRWFjaChmdW5jdGlvbiAocHJvcE5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKGlzRXZlbnQocHJvcE5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wSGFuZGxlcnNbcHJvcE5hbWVdID0gUHJvcEhhbmRsZXJzLmV2ZW50O1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtlZXBQcm9wZXJ0eShwcm9wTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0eXBlSW5mbyA9IGNvbnRyb2xBcGlzW3Byb3BOYW1lXTtcclxuICAgICAgICAgICAgICAgIHZhciBwcm9wVHlwZSA9IHR5cGVUb1Byb3BUeXBlKHR5cGVJbmZvKTtcclxuICAgICAgICAgICAgICAgIHByb3BIYW5kbGVyc1twcm9wTmFtZV0gPSBQcm9wSGFuZGxlcnMucHJvcGVydHkocHJvcFR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHByb3BIYW5kbGVycztcclxuICAgIH0pO1xyXG59KSgpO1xyXG5cclxuLy8gRWFjaCBlbnRyeSBpbiBjb250cm9sQXBpcyBoYXMgdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBhcmd1bWVudCB0byBkZWZpbmVDb250cm9sIGV4Y2VwdFxyXG4vLyB1cGRhdGVXaXRoRGVmYXVsdHMgYXV0b21hdGljYWxseSBwcm92aWRlczpcclxuLy8gICAtIHdpbmpzQ29udHJvbFxyXG4vLyAgIC0gZGlzcGxheU5hbWVcclxuLy8gICAtIHByb3BIYW5kbGVyc1xyXG4vLyBhbmQgdXBkYXRlV2l0aERlZmF1bHRzIGltcGxlbWVudHMgYW4gZXh0cmEgb3B0aW9uOlxyXG4vLyAgIC0gdW5kZXJseWluZ0NvbnRyb2xOYW1lXHJcbi8vIEJ5IGRlZmF1bHQsIHdpbmpzQ29udHJvbCwgZGlzcGxheU5hbWUsIGFuZCBwcm9wSGFuZGVycyBhcmUgaW5mZXJyZWQgZnJvbSB0aGUgZW50cnkncyBrZXlcclxuLy8gaW4gY29udHJvbEFwaXMuIElmIHVuZGVybHlpbmdDb250cm9sTmFtZSBpcyBwcm92aWRlZCwgdGhleSB3aWxsIGluc3RlYWQgYmUgaW5mZXJyZWQgZnJvbVxyXG4vLyB0aGF0IG5hbWUuXHJcbmZ1bmN0aW9uIHVwZGF0ZVdpdGhEZWZhdWx0cyhjb250cm9sQXBpcykge1xyXG4gICAgT2JqZWN0LmtleXMoY29udHJvbEFwaXMpLmZvckVhY2goZnVuY3Rpb24gKGNvbnRyb2xOYW1lKSB7XHJcbiAgICAgICAgdmFyIHNwZWMgPSBjb250cm9sQXBpc1tjb250cm9sTmFtZV07XHJcbiAgICAgICAgdmFyIHdpbmpzQ29udHJvbE5hbWUgPSBzcGVjLnVuZGVybHlpbmdDb250cm9sTmFtZSB8fCBjb250cm9sTmFtZTtcclxuICAgICAgICBzcGVjLndpbmpzQ29udHJvbCA9IHNwZWMud2luanNDb250cm9sIHx8IFdpbkpTLlVJW3dpbmpzQ29udHJvbE5hbWVdO1xyXG4gICAgICAgIHNwZWMuZGlzcGxheU5hbWUgPSBzcGVjLmRpc3BsYXlOYW1lIHx8IHdpbmpzQ29udHJvbE5hbWU7XHJcbiAgICAgICAgc3BlYy5wcm9wSGFuZGxlcnMgPSBtZXJnZShcclxuICAgICAgICAgICAgZGVmYXVsdFByb3BIYW5kbGVycywgLy8gQ29tbW9uIHRvIGFsbCBXaW5KUyBjb250cm9sc1xyXG4gICAgICAgICAgICBEZWZhdWx0Q29udHJvbFByb3BIYW5kbGVyc1t3aW5qc0NvbnRyb2xOYW1lXSwgLy8gQ29udHJvbC1zcGVjaWZpYyBkZXJpdmVkIGZyb20gUmF3Q29udHJvbEFwaXNcclxuICAgICAgICAgICAgc3BlYy5wcm9wSGFuZGxlcnMgLy8gQ29udHJvbC1zcGVjaWZpYyBoYW5kd3JpdHRlblxyXG4gICAgICAgICk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBjb250cm9sQXBpcztcclxufVxyXG5cclxudmFyIHR5cGVXYXJuUHJvcEhhbmRsZXIgPSBQcm9wSGFuZGxlcnMud2FybihcIkludmFsaWQgcHJvcCAndHlwZScuIEluc3RlYWQsIHRoZSBjb21tYW5kIHR5cGUgaXNcIiArXHJcbiAgICBcIiBkZXRlcm1pbmVkIGJ5IHRoZSBjb21wb25lbnQ6IEJ1dHRvbiwgVG9nZ2xlLCBTZXBhcmF0b3IsIENvbnRlbnRDb21tYW5kLCBGbHlvdXRDb21tYW5kLlwiKTtcclxudmFyIENvbW1hbmRTcGVjcyA9IHtcclxuICAgIEJ1dHRvbjoge1xyXG4gICAgICAgIHVuZGVybHlpbmdDb250cm9sTmFtZTogXCJBcHBCYXJDb21tYW5kXCIsXHJcbiAgICAgICAgd2luQ29udHJvbE9wdGlvbnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxyXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuRE9NLmJ1dHRvbigpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvcEhhbmRsZXJzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGVXYXJuUHJvcEhhbmRsZXIsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFRvZ2dsZToge1xyXG4gICAgICAgIHVuZGVybHlpbmdDb250cm9sTmFtZTogXCJBcHBCYXJDb21tYW5kXCIsXHJcbiAgICAgICAgd2luQ29udHJvbE9wdGlvbnM6IHsgdHlwZTogXCJ0b2dnbGVcIiB9LFxyXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuRE9NLmJ1dHRvbigpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHJvcEhhbmRsZXJzOiB7XHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGVXYXJuUHJvcEhhbmRsZXJcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgU2VwYXJhdG9yOiB7XHJcbiAgICAgICAgdW5kZXJseWluZ0NvbnRyb2xOYW1lOiBcIkFwcEJhckNvbW1hbmRcIixcclxuICAgICAgICB3aW5Db250cm9sT3B0aW9uczogeyB0eXBlOiBcInNlcGFyYXRvclwiIH0sXHJcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5ET00uaHIoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHByb3BIYW5kbGVyczoge1xyXG4gICAgICAgICAgICB0eXBlOiB0eXBlV2FyblByb3BIYW5kbGVyXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIENvbnRlbnRDb21tYW5kOiB7XHJcbiAgICAgICAgdW5kZXJseWluZ0NvbnRyb2xOYW1lOiBcIkFwcEJhckNvbW1hbmRcIixcclxuICAgICAgICB3aW5Db250cm9sT3B0aW9uczogeyB0eXBlOiBcImNvbnRlbnRcIiB9LFxyXG4gICAgICAgIHByb3BIYW5kbGVyczoge1xyXG4gICAgICAgICAgICB0eXBlOiB0eXBlV2FyblByb3BIYW5kbGVyLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogUHJvcEhhbmRsZXJzLm1vdW50VG8oZnVuY3Rpb24gKHdpbmpzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luanNDb21wb25lbnQud2luQ29udHJvbC5lbGVtZW50O1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBGbHlvdXRDb21tYW5kOiB7XHJcbiAgICAgICAgdW5kZXJseWluZ0NvbnRyb2xOYW1lOiBcIkFwcEJhckNvbW1hbmRcIixcclxuICAgICAgICB3aW5Db250cm9sT3B0aW9uczogeyB0eXBlOiBcImZseW91dFwiIH0sXHJcbiAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5ET00uYnV0dG9uKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcm9wSGFuZGxlcnM6IHtcclxuICAgICAgICAgICAgdHlwZTogdHlwZVdhcm5Qcm9wSGFuZGxlcixcclxuICAgICAgICAgICAgZmx5b3V0Q29tcG9uZW50OiB7XHJcbiAgICAgICAgICAgICAgICBwcm9wVHlwZTogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uIEZseW91dENvbW1hbmRfZmx5b3V0Q29tcG9uZW50X3VwZGF0ZSh3aW5qc0NvbXBvbmVudCwgcHJvcE5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmbHlvdXRIb3N0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmx5b3V0SG9zdC5jbGFzc05hbWUgPSBcIndpbi1yZWFjdC1mbHlvdXQtaG9zdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZseW91dEhvc3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5qc0NvbXBvbmVudC5kYXRhW3Byb3BOYW1lXSA9IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbHlvdXRIb3N0OiBmbHlvdXRIb3N0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmx5b3V0Q29tcG9uZW50OiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRXaW5Db250cm9sID0gZGF0YS5mbHlvdXRDb21wb25lbnQgJiYgZGF0YS5mbHlvdXRDb21wb25lbnQud2luQ29udHJvbDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBSZWFjdERPTS5yZW5kZXIobmV3VmFsdWUsIGRhdGEuZmx5b3V0SG9zdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFdpbkNvbnRyb2wgIT09IGluc3RhbmNlLndpbkNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luanNDb21wb25lbnQud2luQ29udHJvbC5mbHlvdXQgPSBpbnN0YW5jZS53aW5Db250cm9sO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB3aW5qc0NvbXBvbmVudC5kYXRhW3Byb3BOYW1lXS5mbHlvdXRDb21wb25lbnQgPSBpbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiBGbHlvdXRDb21tYW5kX2ZseW91dENvbXBvbmVudF9kaXNwb3NlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5mbHlvdXRIb3N0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoZGF0YS5mbHlvdXRIb3N0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwYXJlbnQoZGF0YS5mbHlvdXRIb3N0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG52YXIgQ29udHJvbEFwaXMgPSB1cGRhdGVXaXRoRGVmYXVsdHMoe1xyXG4gICAgQXBwQmFyOiB7XHJcbiAgICAgICAgcHJvcEhhbmRsZXJzOiB7XHJcbiAgICAgICAgICAgIG9wZW5lZDogUHJvcEhhbmRsZXJzLmZvY3VzUHJvcGVydHkoUmVhY3QuUHJvcFR5cGVzLmJvb2wpLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogUHJvcEhhbmRsZXJzLnN5bmNDaGlsZHJlbldpdGhCaW5kaW5nTGlzdChcImRhdGFcIilcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJBcHBCYXIuQnV0dG9uXCI6IENvbW1hbmRTcGVjcy5CdXR0b24sXHJcbiAgICBcIkFwcEJhci5Ub2dnbGVcIjogQ29tbWFuZFNwZWNzLlRvZ2dsZSxcclxuICAgIFwiQXBwQmFyLlNlcGFyYXRvclwiOiBDb21tYW5kU3BlY3MuU2VwYXJhdG9yLFxyXG4gICAgXCJBcHBCYXIuQ29udGVudENvbW1hbmRcIjogQ29tbWFuZFNwZWNzLkNvbnRlbnRDb21tYW5kLFxyXG4gICAgXCJBcHBCYXIuRmx5b3V0Q29tbWFuZFwiOiBDb21tYW5kU3BlY3MuRmx5b3V0Q29tbWFuZCxcclxuICAgIEF1dG9TdWdnZXN0Qm94OiB7fSxcclxuICAgIEJhY2tCdXR0b246IHtcclxuICAgICAgICBwcmVDdG9ySW5pdDogZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMsIGRhdGEsIGRpc3BsYXlOYW1lKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChldmVudE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCBSZWFjdCBmcm9tIHNlZWluZyB0aGUgXCJjbGlja1wiIGV2ZW50IHRvIHdvcmthcm91bmQgdGhpcyBSZWFjdFxyXG4gICAgICAgICAgICAgICAgLy8gYnVnOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzM3OTBcclxuICAgICAgICAgICAgICAgIGV2ZW50T2JqZWN0LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuRE9NLmJ1dHRvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyBDZWxsU3Bhbm5pbmdMYXlvdXQ6IE5vdCBhIGNvbXBvbmVudCBzbyBqdXN0IHVzZSBvZmYgb2YgV2luSlMuVUk/XHJcbiAgICBDb250ZW50RGlhbG9nOiB7XHJcbiAgICAgICAgcHJvcEhhbmRsZXJzOiB7XHJcbiAgICAgICAgICAgIGhpZGRlbjogUHJvcEhhbmRsZXJzLmZvY3VzUHJvcGVydHkoUmVhY3QuUHJvcFR5cGVzLmJvb2wpLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogUHJvcEhhbmRsZXJzLm1vdW50VG8oZnVuY3Rpb24gKHdpbmpzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luanNDb21wb25lbnQud2luQ29udHJvbC5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud2luLWNvbnRlbnRkaWFsb2ctY29udGVudFwiKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgRGF0ZVBpY2tlcjoge30sXHJcbiAgICBGbGlwVmlldzoge30sXHJcbiAgICBGbHlvdXQ6IHtcclxuICAgICAgICAvLyBUaGUgV2luSlMgRmx5b3V0IGNvbnRyb2wgZG9lc24ndCBjb21lIHdpdGggYSBnb29kIG1vdW50IHBvaW50LlxyXG4gICAgICAgIC8vIEFwcCBjb250ZW50IGFuZCBjb250cm9sIGNvbnRlbnQgYXJlIHNpYmxpbmdzIGluIEZseW91dC5lbGVtZW50LlxyXG4gICAgICAgIC8vIENvbnNlcXVlbnRseSwgaWYgUmVhY3QgcmVuZGVyZWQgdG8gRmx5b3V0LmVsZW1lbnQsIGl0IHdvdWxkIGRlc3Ryb3lcclxuICAgICAgICAvLyBzb21lIG9mIEZseW91dCdzIGVsZW1lbnRzLiBUbyBmaXggdGhpcywgd2UgZ2l2ZSBGbHlvdXQgYSBkaXZcclxuICAgICAgICAvLyAoY2xhc3NOYW1lPVwid2luLXJlYWN0LWZseW91dC1tb3VudC1wb2ludFwiKSB3aGljaCB3aWxsIGNvbnRhaW4gb25seVxyXG4gICAgICAgIC8vIGFwcCBjb250ZW50LiBUaGUgUmVhY3QgY29tcG9uZW50IHJlbmRlcnMgaW50byB0aGlzIGRpdiBzbyBpdCBkb2Vzbid0XHJcbiAgICAgICAgLy8gZGVzdHJveSBhbnkgY29udHJvbCBjb250ZW50LlxyXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUmVhY3QuRE9NLmRpdihudWxsLCBSZWFjdC5ET00uZGl2KHsgY2xhc3NOYW1lOiBcIndpbi1yZWFjdC1mbHlvdXQtbW91bnQtcG9pbnRcIiB9KSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcm9wSGFuZGxlcnM6IHtcclxuICAgICAgICAgICAgaGlkZGVuOiBQcm9wSGFuZGxlcnMuZm9jdXNQcm9wZXJ0eShSZWFjdC5Qcm9wVHlwZXMuYm9vbCksXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBQcm9wSGFuZGxlcnMubW91bnRUbyhmdW5jdGlvbiAod2luanNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB3aW5qc0NvbXBvbmVudC53aW5Db250cm9sLmVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi53aW4tcmVhY3QtZmx5b3V0LW1vdW50LXBvaW50XCIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyBHcmlkTGF5b3V0OiBOb3QgYSBjb21wb25lbnQgc28ganVzdCB1c2Ugb2ZmIG9mIFdpbkpTLlVJP1xyXG4gICAgSHViOiB7XHJcbiAgICAgICAgcHJvcEhhbmRsZXJzOiB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBQcm9wSGFuZGxlcnMuc3luY0NoaWxkcmVuV2l0aEJpbmRpbmdMaXN0KFwic2VjdGlvbnNcIilcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJIdWIuU2VjdGlvblwiOiB7XHJcbiAgICAgICAgdW5kZXJseWluZ0NvbnRyb2xOYW1lOiBcIkh1YlNlY3Rpb25cIixcclxuICAgICAgICBwcm9wSGFuZGxlcnM6IHtcclxuICAgICAgICAgICAgY2hpbGRyZW46IFByb3BIYW5kbGVycy5tb3VudFRvKGZ1bmN0aW9uICh3aW5qc0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmpzQ29tcG9uZW50LndpbkNvbnRyb2wuY29udGVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIEl0ZW1Db250YWluZXI6IHtcclxuICAgICAgICBwcm9wSGFuZGxlcnM6IHtcclxuICAgICAgICAgICAgY2hpbGRyZW46IFByb3BIYW5kbGVycy5tb3VudFRvKGZ1bmN0aW9uICh3aW5qc0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmpzQ29tcG9uZW50LndpbkNvbnRyb2wuZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLndpbi1pdGVtXCIpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICAvLyBMaXN0TGF5b3V0OiBOb3QgYSBjb21wb25lbnQgc28ganVzdCB1c2Ugb2ZmIG9mIFdpbkpTLlVJP1xyXG4gICAgTGlzdFZpZXc6IHtcclxuICAgICAgICBwcm9wSGFuZGxlcnM6IHtcclxuICAgICAgICAgICAgY3VycmVudEl0ZW06IFByb3BIYW5kbGVycy5mb2N1c1Byb3BlcnR5KFJlYWN0LlByb3BUeXBlcy5hbnkpLFxyXG4gICAgICAgICAgICBoZWFkZXJDb21wb25lbnQ6IFByb3BIYW5kbGVycy5wcm9wZXJ0eVdpdGhNb3VudChcImhlYWRlclwiKSxcclxuICAgICAgICAgICAgZm9vdGVyQ29tcG9uZW50OiBQcm9wSGFuZGxlcnMucHJvcGVydHlXaXRoTW91bnQoXCJmb290ZXJcIiksXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8vIFRPRE86IEtleWJvYXJkaW5nIGRvZXNuJ3Qgd29yayBpbiBNZW51IHByb2JhYmx5IGJlY2F1c2UgTWVudUNvbW1hbmRzIGFyZSBub3QgZGlyZWN0XHJcbiAgICAvLyBjaGlsZHJlbiBvZiB0aGUgTWVudS5cclxuICAgIE1lbnU6IHtcclxuICAgICAgICBwcm9wSGFuZGxlcnM6IHtcclxuICAgICAgICAgICAgaGlkZGVuOiBQcm9wSGFuZGxlcnMuZm9jdXNQcm9wZXJ0eShSZWFjdC5Qcm9wVHlwZXMuYm9vbCksXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiB7XHJcbiAgICAgICAgICAgICAgICAvLyBjaGlsZHJlbiBwcm9wSGFuZGxlciBsb29rcyBsaWtlIHRoaXMgcmF0aGVyIHRoYW4gdXNpbmcgbW91bnRUbyBvblxyXG4gICAgICAgICAgICAgICAgLy8gd2luQ29udHJvbC5lbGVtZW50IGJlY2F1c2UgdGhpcyBlbmFibGVzIHByb3BzLmNoaWxkcmVuIHRvIGhhdmVcclxuICAgICAgICAgICAgICAgIC8vIG11bHRpcGxlIGNvbXBvbmVudHMgd2hlcmVhcyB0aGUgb3RoZXIgdGVjaG5pcXVlIHJlc3RyaWN0cyBpdCB0byBvbmUuXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uICh3aW5qc0NvbXBvbmVudCwgcHJvcE5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IGRpc3Bvc2VcclxuICAgICAgICAgICAgICAgICAgICBSZWFjdERPTS5yZW5kZXIoUmVhY3QuRE9NLmRpdihudWxsLCBuZXdWYWx1ZSksIHdpbmpzQ29tcG9uZW50LndpbkNvbnRyb2wuZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJNZW51LkJ1dHRvblwiOiBtZXJnZShDb21tYW5kU3BlY3MuQnV0dG9uLCB7XHJcbiAgICAgICAgdW5kZXJseWluZ0NvbnRyb2xOYW1lOiBcIk1lbnVDb21tYW5kXCJcclxuICAgIH0pLFxyXG4gICAgXCJNZW51LlRvZ2dsZVwiOiBtZXJnZShDb21tYW5kU3BlY3MuVG9nZ2xlLCB7XHJcbiAgICAgICAgdW5kZXJseWluZ0NvbnRyb2xOYW1lOiBcIk1lbnVDb21tYW5kXCJcclxuICAgIH0pLFxyXG4gICAgXCJNZW51LlNlcGFyYXRvclwiOiBtZXJnZShDb21tYW5kU3BlY3MuU2VwYXJhdG9yLCB7XHJcbiAgICAgICAgdW5kZXJseWluZ0NvbnRyb2xOYW1lOiBcIk1lbnVDb21tYW5kXCJcclxuICAgIH0pLFxyXG4gICAgXCJNZW51LkZseW91dENvbW1hbmRcIjogbWVyZ2UoQ29tbWFuZFNwZWNzLkZseW91dENvbW1hbmQsIHtcclxuICAgICAgICB1bmRlcmx5aW5nQ29udHJvbE5hbWU6IFwiTWVudUNvbW1hbmRcIlxyXG4gICAgfSksXHJcbiAgICBQaXZvdDoge1xyXG4gICAgICAgIHByb3BIYW5kbGVyczoge1xyXG4gICAgICAgICAgICBjaGlsZHJlbjogUHJvcEhhbmRsZXJzLnN5bmNDaGlsZHJlbldpdGhCaW5kaW5nTGlzdChcIml0ZW1zXCIpLFxyXG4gICAgICAgICAgICBjdXN0b21MZWZ0SGVhZGVyQ29tcG9uZW50OiBQcm9wSGFuZGxlcnMucHJvcGVydHlXaXRoTW91bnQoXCJjdXN0b21MZWZ0SGVhZGVyXCIpLFxyXG4gICAgICAgICAgICBjdXN0b21SaWdodEhlYWRlckNvbXBvbmVudDogUHJvcEhhbmRsZXJzLnByb3BlcnR5V2l0aE1vdW50KFwiY3VzdG9tUmlnaHRIZWFkZXJcIilcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJQaXZvdC5JdGVtXCI6IHtcclxuICAgICAgICB1bmRlcmx5aW5nQ29udHJvbE5hbWU6IFwiUGl2b3RJdGVtXCIsXHJcbiAgICAgICAgcHJvcEhhbmRsZXJzOiB7XHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiBQcm9wSGFuZGxlcnMubW91bnRUbyhmdW5jdGlvbiAod2luanNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB3aW5qc0NvbXBvbmVudC53aW5Db250cm9sLmNvbnRlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBSYXRpbmc6IHt9LFxyXG4gICAgU2VtYW50aWNab29tOiB7XHJcbiAgICAgICAgcHJvcEhhbmRsZXJzOiB7XHJcbiAgICAgICAgICAgIHpvb21lZEluQ29tcG9uZW50OiB7XHJcbiAgICAgICAgICAgICAgICBwcm9wVHlwZTogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICBwcmVDdG9ySW5pdDogZnVuY3Rpb24gem9vbWVkSW5Db21wb25lbnRfcHJlQ3RvckluaXQoZWxlbWVudCwgb3B0aW9ucywgZGF0YSwgZGlzcGxheU5hbWUsIHByb3BOYW1lLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IG5ldyBXaW5KU0NoaWxkQ29tcG9uZW50KHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBab29tZWQgaW4gY29tcG9uZW50IHNob3VsZCBiZSB0aGUgZmlyc3QgY2hpbGQuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQud2luQ29udHJvbC5lbGVtZW50LCBlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhW3Byb3BOYW1lXSA9IGNoaWxkO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gem9vbWVkSW5Db21wb25lbnRfdXBkYXRlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IG5ld1ZhbHVlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQudXBkYXRlKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJTZW1hbnRpY1pvb206IHpvb21lZEluQ29tcG9uZW50J3MgY29tcG9uZW50IHR5cGUgY2FuJ3QgY2hhbmdlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiB6b29tZWRJbkNvbXBvbmVudF9kaXNwb3NlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHdpbmpzQ29tcG9uZW50LmRhdGFbcHJvcE5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkICYmIGNoaWxkLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgem9vbWVkT3V0Q29tcG9uZW50OiB7XHJcbiAgICAgICAgICAgICAgICBwcm9wVHlwZTogUmVhY3QuUHJvcFR5cGVzLmVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICBwcmVDdG9ySW5pdDogZnVuY3Rpb24gem9vbWVkT3V0Q29tcG9uZW50X3ByZUN0b3JJbml0KGVsZW1lbnQsIG9wdGlvbnMsIGRhdGEsIGRpc3BsYXlOYW1lLCBwcm9wTmFtZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBuZXcgV2luSlNDaGlsZENvbXBvbmVudCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gWm9vbWVkIG91dCBjb21wb25lbnQgc2hvdWxkIGJlIHRoZSBzZWNvbmQgY2hpbGQuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZC53aW5Db250cm9sLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbcHJvcE5hbWVdID0gY2hpbGQ7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiB6b29tZWRPdXRDb21wb25lbnRfdXBkYXRlKHdpbmpzQ29tcG9uZW50LCBwcm9wTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09IG5ld1ZhbHVlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQudXBkYXRlKG5ld1ZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJTZW1hbnRpY1pvb206IHpvb21lZE91dENvbXBvbmVudCdzIGNvbXBvbmVudCB0eXBlIGNhbid0IGNoYW5nZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gem9vbWVkT3V0Q29tcG9uZW50X2Rpc3Bvc2Uod2luanNDb21wb25lbnQsIHByb3BOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGQgJiYgY2hpbGQuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFNwbGl0Vmlldzoge1xyXG4gICAgICAgIHByb3BIYW5kbGVyczoge1xyXG4gICAgICAgICAgICBwYW5lT3BlbmVkOiBQcm9wSGFuZGxlcnMuZm9jdXNQcm9wZXJ0eShSZWFjdC5Qcm9wVHlwZXMuYm9vbCksXHJcbiAgICAgICAgICAgIHBhbmVDb21wb25lbnQ6IFByb3BIYW5kbGVycy5tb3VudFRvKGZ1bmN0aW9uICh3aW5qc0NvbXBvbmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmpzQ29tcG9uZW50LndpbkNvbnRyb2wucGFuZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBjb250ZW50Q29tcG9uZW50OiBQcm9wSGFuZGxlcnMubW91bnRUbyhmdW5jdGlvbiAod2luanNDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB3aW5qc0NvbXBvbmVudC53aW5Db250cm9sLmNvbnRlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcIlNwbGl0Vmlldy5Db21tYW5kXCI6IHtcclxuICAgICAgICB1bmRlcmx5aW5nQ29udHJvbE5hbWU6IFwiU3BsaXRWaWV3Q29tbWFuZFwiLFxyXG4gICAgfSxcclxuICAgIFNwbGl0Vmlld1BhbmVUb2dnbGU6IHtcclxuICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIChjb21wb25lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LkRPTS5idXR0b24oKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHByb3BIYW5kbGVyczoge1xyXG4gICAgICAgICAgICAvLyBwYW5lT3BlbmVkIHByb3ZpZGVzIGEgUmVhY3QtZnJpZW5kbHkgaW50ZXJmYWNlIGZvciBtYWtpbmcgdGhlIFNwbGl0Vmlld1BhbmVUb2dnbGUgYWNjZXNzaWJsZS5cclxuICAgICAgICAgICAgLy8gV2hlbiBwYW5lT3BlbmVkIGlzIHNwZWNpZmllZCwgaXMgbm90IHVuZGVmaW5lZCwgYW5kIGlzIG5vdCBudWxsLCBpdDpcclxuICAgICAgICAgICAgLy8gIC0gU2V0cyBTcGxpdFZpZXdQYW5lVG9nZ2xlJ3MgYXJpYS1leHBhbmRlZCBhdHRyaWJ1dGUgdG8gbWF0Y2ggcGFuZU9wZW5lZFxyXG4gICAgICAgICAgICAvLyAgLSBGaXJlcyBTcGxpdFZpZXdQYW5lVG9nZ2xlJ3MgXCJpbnZva2VkXCIgZXZlbnQgd2hlbiBhcmlhLWV4cGFuZGVkIGlzIG11dGF0ZWRcclxuICAgICAgICAgICAgcGFuZU9wZW5lZDoge1xyXG4gICAgICAgICAgICAgICAgcHJvcFR5cGU6IFJlYWN0LlByb3BUeXBlcy5ib29sLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbiBwYW5lT3BlbmVkX3VwZGF0ZSh3aW5qc0NvbXBvbmVudCwgcHJvcE5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXaW5KUy5VSS5TcGxpdFZpZXdQYW5lVG9nZ2xlIGRlcGVuZHMgb24gV2luSlMuVXRpbGl0aWVzLl9NdXRhdGlvbk9ic2VydmVyIHNvIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBzYWZlIHRvIHVzZSBpdCBoZXJlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYUV4cGFuZGVkTXV0YXRpb25PYnNlcnZlcjogbmV3IFdpbkpTLlV0aWxpdGllcy5fTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB3aW5qc0NvbXBvbmVudC5lbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmlhRXhwYW5kZWQgPSAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIpID09PSBcInRydWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFyaWFFeHBhbmRlZCAhPT0gd2luanNDb21wb25lbnQuZGF0YVtwcm9wTmFtZV0udmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KGVsZW1lbnQsIFwiaW52b2tlZFwiKTsgLy8gRmlyZSBXaW5KUy5VSS5TcGxpdFZpZXdQYW5lVG9nZ2xlJ3MgaW52b2tlZCBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2aW5nOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuZXdWYWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5qc0NvbXBvbmVudC5kYXRhW3Byb3BOYW1lXSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gbnVsbCAmJiBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5qc0NvbXBvbmVudC5lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwgbmV3VmFsdWUgPyBcInRydWVcIiA6IFwiZmFsc2VcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEub2JzZXJ2aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5vYnNlcnZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYXJpYUV4cGFuZGVkTXV0YXRpb25PYnNlcnZlci5vYnNlcnZlKHdpbmpzQ29tcG9uZW50LmVsZW1lbnQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlRmlsdGVyOiBbXCJhcmlhLWV4cGFuZGVkXCJdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5qc0NvbXBvbmVudC5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5vYnNlcnZpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm9ic2VydmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuYXJpYUV4cGFuZGVkTXV0YXRpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkaXNwb3NlOiBmdW5jdGlvbiBwYW5lT3BlbmVkX2Rpc3Bvc2Uod2luanNDb21wb25lbnQsIHByb3BOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB3aW5qc0NvbXBvbmVudC5kYXRhW3Byb3BOYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLm9ic2VydmluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmFyaWFFeHBhbmRlZE11dGF0aW9uT2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBUaW1lUGlja2VyOiB7fSxcclxuICAgIFRvZ2dsZVN3aXRjaDoge30sXHJcbiAgICBUb29sQmFyOiB7XHJcbiAgICAgICAgcHJvcEhhbmRsZXJzOiB7XHJcbiAgICAgICAgICAgIG9wZW5lZDogUHJvcEhhbmRsZXJzLmZvY3VzUHJvcGVydHkoUmVhY3QuUHJvcFR5cGVzLmJvb2wpLFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogUHJvcEhhbmRsZXJzLnN5bmNDaGlsZHJlbldpdGhCaW5kaW5nTGlzdChcImRhdGFcIilcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXCJUb29sQmFyLkJ1dHRvblwiOiBDb21tYW5kU3BlY3MuQnV0dG9uLFxyXG4gICAgXCJUb29sQmFyLlRvZ2dsZVwiOiBDb21tYW5kU3BlY3MuVG9nZ2xlLFxyXG4gICAgXCJUb29sQmFyLlNlcGFyYXRvclwiOiBDb21tYW5kU3BlY3MuU2VwYXJhdG9yLFxyXG4gICAgXCJUb29sQmFyLkNvbnRlbnRDb21tYW5kXCI6IENvbW1hbmRTcGVjcy5Db250ZW50Q29tbWFuZCxcclxuICAgIFwiVG9vbEJhci5GbHlvdXRDb21tYW5kXCI6IENvbW1hbmRTcGVjcy5GbHlvdXRDb21tYW5kLFxyXG4gICAgVG9vbHRpcDoge1xyXG4gICAgICAgIHByb3BIYW5kbGVyczoge1xyXG4gICAgICAgICAgICBjaGlsZHJlbjogUHJvcEhhbmRsZXJzLm1vdW50VG8oZnVuY3Rpb24gKHdpbmpzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luanNDb21wb25lbnQud2luQ29udHJvbC5lbGVtZW50O1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgY29udGVudENvbXBvbmVudDogUHJvcEhhbmRsZXJzLnByb3BlcnR5V2l0aE1vdW50KFwiY29udGVudEVsZW1lbnRcIilcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLy9cclxuLy8gUHVibGlzaFxyXG4vL1xyXG5cclxudmFyIFJlYWN0V2luSlMgPSB7fTtcclxuXHJcbi8vIENvbnRyb2xzXHJcbi8vXHJcblxyXG4vLyBTb3J0IHRvIGVuc3VyZSB0aGF0IGNvbnRyb2xzIGNvbWUgYmVmb3JlIHRoZWlyIHN1YmNvbnRyb2xzXHJcbi8vIChlLmcuIEFwcEJhciBjb21lcyBiZWZvcmUgQXBwQmFyLlRvZ2dsZSkuXHJcbk9iamVjdC5rZXlzKENvbnRyb2xBcGlzKS5zb3J0KCkuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbE5hbWUpIHtcclxuICAgIG5lc3RlZFNldChSZWFjdFdpbkpTLCBjb250cm9sTmFtZSwgZGVmaW5lQ29udHJvbChDb250cm9sQXBpc1tjb250cm9sTmFtZV0pKTtcclxufSk7XHJcblxyXG4vLyBVdGlsaXRlc1xyXG4vL1xyXG5cclxuLy8gR2l2ZW4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBSZWFjdCBjb21wb25lbnQsXHJcbi8vIHJldHVybnMgYW4gaXRlbSByZW5kZXJlciBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkXHJcbi8vIHdpdGggV2luSlMgY29udHJvbHMuIFVzZWZ1bCBmb3IgZGVzY3JpYmluZyBGbGlwVmlld1xyXG4vLyBhbmQgTGlzdFZpZXcgaXRlbSB0ZW1wbGF0ZXMgYXMgUmVhY3QgY29tcG9uZW50cy5cclxuUmVhY3RXaW5KUy5yZWFjdFJlbmRlcmVyID0gZnVuY3Rpb24gcmVhY3RSZW5kZXJlcihjb21wb25lbnRGdW5jdGlvbikge1xyXG4gICAgdmFyIGNvbXBvbmVudEZ1bmN0aW9uQm91bmQ7XHJcbiAgICB2YXIgcmVuZGVySXRlbSA9IGZ1bmN0aW9uIHJlbmRlckl0ZW0oaXRlbSkge1xyXG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IFwid2luLXJlYWN0LXJlbmRlcmVyLWhvc3RcIjtcclxuICAgICAgICBSZWFjdERPTS5yZW5kZXIoY29tcG9uZW50RnVuY3Rpb25Cb3VuZChpdGVtKSwgZWxlbWVudCk7XHJcbiAgICAgICAgV2luSlMuVXRpbGl0aWVzLm1hcmtEaXNwb3NhYmxlKGVsZW1lbnQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZShlbGVtZW50KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGl0ZW1SZW5kZXJlcihpdGVtT3JJdGVtUHJvbWlzZSkge1xyXG4gICAgICAgIGlmICghY29tcG9uZW50RnVuY3Rpb25Cb3VuZCkge1xyXG4gICAgICAgICAgICBjb21wb25lbnRGdW5jdGlvbkJvdW5kID0gY29tcG9uZW50RnVuY3Rpb24uYmluZCh0aGlzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBXaW5KUy5Qcm9taXNlLmlzKGl0ZW1Pckl0ZW1Qcm9taXNlKSA/XHJcbiAgICAgICAgICAgIGl0ZW1Pckl0ZW1Qcm9taXNlLnRoZW4ocmVuZGVySXRlbSkgOlxyXG4gICAgICAgICAgICByZW5kZXJJdGVtKGl0ZW1Pckl0ZW1Qcm9taXNlKTtcclxuICAgIH1cclxufTtcclxuXHJcblxyXG4vLyBMb3ctbGV2ZWwgdXRpbGl0aWVzIGZvciB3cmFwcGluZyBjdXN0b20gV2luSlMtc3R5bGUgY29udHJvbHNcclxuLy9cclxuXHJcblJlYWN0V2luSlMuZGVmaW5lQ29udHJvbCA9IGRlZmluZUNvbnRyb2w7XHJcblJlYWN0V2luSlMuUHJvcEhhbmRsZXJzID0gUHJvcEhhbmRsZXJzO1xyXG5SZWFjdFdpbkpTLmRlZmF1bHRQcm9wSGFuZGxlcnMgPSBkZWZhdWx0UHJvcEhhbmRsZXJzO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFdpbkpTO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3Qtd2luanMvcmVhY3Qtd2luanMuanNcbi8vIG1vZHVsZSBpZCA9IDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJSZWFjdERPTVwiXG4vLyBtb2R1bGUgaWQgPSA1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuXG4vKipcbiAqIFVwc3RyZWFtIHZlcnNpb24gb2YgZXZlbnQgbGlzdGVuZXIuIERvZXMgbm90IHRha2UgaW50byBhY2NvdW50IHNwZWNpZmljXG4gKiBuYXR1cmUgb2YgcGxhdGZvcm0uXG4gKi9cbnZhciBFdmVudExpc3RlbmVyID0ge1xuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBidWJibGUgcGhhc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRXZlbnRUYXJnZXR9IHRhcmdldCBET00gZWxlbWVudCB0byByZWdpc3RlciBsaXN0ZW5lciBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50VHlwZSBFdmVudCB0eXBlLCBlLmcuICdjbGljaycgb3IgJ21vdXNlb3ZlcicuXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IE9iamVjdCB3aXRoIGEgYHJlbW92ZWAgbWV0aG9kLlxuICAgKi9cbiAgbGlzdGVuOiBmdW5jdGlvbiBsaXN0ZW4odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuYXR0YWNoRXZlbnQpIHtcbiAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgICAgICB0YXJnZXQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogTGlzdGVuIHRvIERPTSBldmVudHMgZHVyaW5nIHRoZSBjYXB0dXJlIHBoYXNlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUV2ZW50VGFyZ2V0fSB0YXJnZXQgRE9NIGVsZW1lbnQgdG8gcmVnaXN0ZXIgbGlzdGVuZXIgb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgRXZlbnQgdHlwZSwgZS5nLiAnY2xpY2snIG9yICdtb3VzZW92ZXInLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCBhIGByZW1vdmVgIG1ldGhvZC5cbiAgICovXG4gIGNhcHR1cmU6IGZ1bmN0aW9uIGNhcHR1cmUodGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICsgJ2Jyb3dzZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjYXB0dXJlIHBoYXNlLiBZb3VyIGFwcGxpY2F0aW9uICcgKyAnd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy4nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlbW92ZTogZW1wdHlGdW5jdGlvblxuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgcmVnaXN0ZXJEZWZhdWx0OiBmdW5jdGlvbiByZWdpc3RlckRlZmF1bHQoKSB7fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudExpc3RlbmVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9FdmVudExpc3RlbmVyLmpzXG4vLyBtb2R1bGUgaWQgPSA1NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGUgaW5wdXQvdGV4dGFyZWEgdG8gZm9jdXNcbiAqL1xuXG5mdW5jdGlvbiBmb2N1c05vZGUobm9kZSkge1xuICAvLyBJRTggY2FuIHRocm93IFwiQ2FuJ3QgbW92ZSBmb2N1cyB0byB0aGUgY29udHJvbCBiZWNhdXNlIGl0IGlzIGludmlzaWJsZSxcbiAgLy8gbm90IGVuYWJsZWQsIG9yIG9mIGEgdHlwZSB0aGF0IGRvZXMgbm90IGFjY2VwdCB0aGUgZm9jdXMuXCIgZm9yIGFsbCBraW5kcyBvZlxuICAvLyByZWFzb25zIHRoYXQgYXJlIHRvbyBleHBlbnNpdmUgYW5kIGZyYWdpbGUgdG8gdGVzdC5cbiAgdHJ5IHtcbiAgICBub2RlLmZvY3VzKCk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9jdXNOb2RlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9mb2N1c05vZGUuanNcbi8vIG1vZHVsZSBpZCA9IDU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RPTURvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4gez9ET01FbGVtZW50fVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYykgLyo/RE9NRWxlbWVudCove1xuICBkb2MgPSBkb2MgfHwgZ2xvYmFsLmRvY3VtZW50O1xuICBpZiAodHlwZW9mIGRvYyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB0cnkge1xuICAgIHJldHVybiBkb2MuYWN0aXZlRWxlbWVudCB8fCBkb2MuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2MuYm9keTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFjdGl2ZUVsZW1lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDU2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ1NTIHByb3BlcnRpZXMgd2hpY2ggYWNjZXB0IG51bWJlcnMgYnV0IGFyZSBub3QgaW4gdW5pdHMgb2YgXCJweFwiLlxuICovXG5cbnZhciBpc1VuaXRsZXNzTnVtYmVyID0ge1xuICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IHRydWUsXG4gIGJvcmRlckltYWdlU2xpY2U6IHRydWUsXG4gIGJvcmRlckltYWdlV2lkdGg6IHRydWUsXG4gIGJveEZsZXg6IHRydWUsXG4gIGJveEZsZXhHcm91cDogdHJ1ZSxcbiAgYm94T3JkaW5hbEdyb3VwOiB0cnVlLFxuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICBmbGV4T3JkZXI6IHRydWUsXG4gIGdyaWRSb3c6IHRydWUsXG4gIGdyaWRDb2x1bW46IHRydWUsXG4gIGZvbnRXZWlnaHQ6IHRydWUsXG4gIGxpbmVDbGFtcDogdHJ1ZSxcbiAgbGluZUhlaWdodDogdHJ1ZSxcbiAgb3BhY2l0eTogdHJ1ZSxcbiAgb3JkZXI6IHRydWUsXG4gIG9ycGhhbnM6IHRydWUsXG4gIHRhYlNpemU6IHRydWUsXG4gIHdpZG93czogdHJ1ZSxcbiAgekluZGV4OiB0cnVlLFxuICB6b29tOiB0cnVlLFxuXG4gIC8vIFNWRy1yZWxhdGVkIHByb3BlcnRpZXNcbiAgZmlsbE9wYWNpdHk6IHRydWUsXG4gIGZsb29kT3BhY2l0eTogdHJ1ZSxcbiAgc3RvcE9wYWNpdHk6IHRydWUsXG4gIHN0cm9rZURhc2hhcnJheTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaG9mZnNldDogdHJ1ZSxcbiAgc3Ryb2tlTWl0ZXJsaW1pdDogdHJ1ZSxcbiAgc3Ryb2tlT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlV2lkdGg6IHRydWVcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCB2ZW5kb3Itc3BlY2lmaWMgcHJlZml4LCBlZzogV2Via2l0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHN0eWxlIG5hbWUsIGVnOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAqIEByZXR1cm4ge3N0cmluZ30gc3R5bGUgbmFtZSBwcmVmaXhlZCB3aXRoIGBwcmVmaXhgLCBwcm9wZXJseSBjYW1lbENhc2VkLCBlZzpcbiAqIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvblxuICovXG5mdW5jdGlvbiBwcmVmaXhLZXkocHJlZml4LCBrZXkpIHtcbiAgcmV0dXJuIHByZWZpeCArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHJpbmcoMSk7XG59XG5cbi8qKlxuICogU3VwcG9ydCBzdHlsZSBuYW1lcyB0aGF0IG1heSBjb21lIHBhc3NlZCBpbiBwcmVmaXhlZCBieSBhZGRpbmcgcGVybXV0YXRpb25zXG4gKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ21zJywgJ01veicsICdPJ107XG5cbi8vIFVzaW5nIE9iamVjdC5rZXlzIGhlcmUsIG9yIGVsc2UgdGhlIHZhbmlsbGEgZm9yLWluIGxvb3AgbWFrZXMgSUU4IGdvIGludG8gYW5cbi8vIGluZmluaXRlIGxvb3AsIGJlY2F1c2UgaXQgaXRlcmF0ZXMgb3ZlciB0aGUgbmV3bHkgYWRkZWQgcHJvcHMgdG9vLlxuT2JqZWN0LmtleXMoaXNVbml0bGVzc051bWJlcikuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBwcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG5cbi8qKlxuICogTW9zdCBzdHlsZSBwcm9wZXJ0aWVzIGNhbiBiZSB1bnNldCBieSBkb2luZyAuc3R5bGVbcHJvcF0gPSAnJyBidXQgSUU4XG4gKiBkb2Vzbid0IGxpa2UgZG9pbmcgdGhhdCB3aXRoIHNob3J0aGFuZCBwcm9wZXJ0aWVzIHNvIGZvciB0aGUgcHJvcGVydGllcyB0aGF0XG4gKiBJRTggYnJlYWtzIG9uLCB3aGljaCBhcmUgbGlzdGVkIGhlcmUsIHdlIGluc3RlYWQgdW5zZXQgZWFjaCBvZiB0aGVcbiAqIGluZGl2aWR1YWwgcHJvcGVydGllcy4gU2VlIGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEyMzg1LlxuICogVGhlIDQtdmFsdWUgJ2Nsb2NrJyBwcm9wZXJ0aWVzIGxpa2UgbWFyZ2luLCBwYWRkaW5nLCBib3JkZXItd2lkdGggc2VlbSB0b1xuICogYmVoYXZlIHdpdGhvdXQgYW55IHByb2JsZW1zLiBDdXJpb3VzbHksIGxpc3Qtc3R5bGUgd29ya3MgdG9vIHdpdGhvdXQgYW55XG4gKiBzcGVjaWFsIHByb2RkaW5nLlxuICovXG52YXIgc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zID0ge1xuICBiYWNrZ3JvdW5kOiB7XG4gICAgYmFja2dyb3VuZEF0dGFjaG1lbnQ6IHRydWUsXG4gICAgYmFja2dyb3VuZENvbG9yOiB0cnVlLFxuICAgIGJhY2tncm91bmRJbWFnZTogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25YOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IHRydWUsXG4gICAgYmFja2dyb3VuZFJlcGVhdDogdHJ1ZVxuICB9LFxuICBiYWNrZ3JvdW5kUG9zaXRpb246IHtcbiAgICBiYWNrZ3JvdW5kUG9zaXRpb25YOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblk6IHRydWVcbiAgfSxcbiAgYm9yZGVyOiB7XG4gICAgYm9yZGVyV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyQm90dG9tOiB7XG4gICAgYm9yZGVyQm90dG9tV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyTGVmdDoge1xuICAgIGJvcmRlckxlZnRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyTGVmdENvbG9yOiB0cnVlXG4gIH0sXG4gIGJvcmRlclJpZ2h0OiB7XG4gICAgYm9yZGVyUmlnaHRXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJSaWdodFN0eWxlOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyVG9wOiB7XG4gICAgYm9yZGVyVG9wV2lkdGg6IHRydWUsXG4gICAgYm9yZGVyVG9wU3R5bGU6IHRydWUsXG4gICAgYm9yZGVyVG9wQ29sb3I6IHRydWVcbiAgfSxcbiAgZm9udDoge1xuICAgIGZvbnRTdHlsZTogdHJ1ZSxcbiAgICBmb250VmFyaWFudDogdHJ1ZSxcbiAgICBmb250V2VpZ2h0OiB0cnVlLFxuICAgIGZvbnRTaXplOiB0cnVlLFxuICAgIGxpbmVIZWlnaHQ6IHRydWUsXG4gICAgZm9udEZhbWlseTogdHJ1ZVxuICB9LFxuICBvdXRsaW5lOiB7XG4gICAgb3V0bGluZVdpZHRoOiB0cnVlLFxuICAgIG91dGxpbmVTdHlsZTogdHJ1ZSxcbiAgICBvdXRsaW5lQ29sb3I6IHRydWVcbiAgfVxufTtcblxudmFyIENTU1Byb3BlcnR5ID0ge1xuICBpc1VuaXRsZXNzTnVtYmVyOiBpc1VuaXRsZXNzTnVtYmVyLFxuICBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnM6IHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uc1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDU1NQcm9wZXJ0eTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9DU1NQcm9wZXJ0eS5qc1xuLy8gbW9kdWxlIGlkID0gNTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHBzZXVkby1ldmVudCBtb2R1bGUgdG8gaGVscCBrZWVwIHRyYWNrIG9mIGNvbXBvbmVudHMgd2FpdGluZyB0b1xuICogYmUgbm90aWZpZWQgd2hlbiB0aGVpciBET00gcmVwcmVzZW50YXRpb25zIGFyZSBhdmFpbGFibGUgZm9yIHVzZS5cbiAqXG4gKiBUaGlzIGltcGxlbWVudHMgYFBvb2xlZENsYXNzYCwgc28geW91IHNob3VsZCBuZXZlciBuZWVkIHRvIGluc3RhbnRpYXRlIHRoaXMuXG4gKiBJbnN0ZWFkLCB1c2UgYENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKClgLlxuICpcbiAqIEBjbGFzcyBSZWFjdE1vdW50UmVhZHlcbiAqIEBpbXBsZW1lbnRzIFBvb2xlZENsYXNzXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG52YXIgQ2FsbGJhY2tRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQ2FsbGJhY2tRdWV1ZShhcmcpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2FsbGJhY2tRdWV1ZSk7XG5cbiAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgICB0aGlzLl9hcmcgPSBhcmc7XG4gIH1cblxuICAvKipcbiAgICogRW5xdWV1ZXMgYSBjYWxsYmFjayB0byBiZSBpbnZva2VkIHdoZW4gYG5vdGlmeUFsbGAgaXMgaW52b2tlZC5cbiAgICpcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgSW52b2tlZCB3aGVuIGBub3RpZnlBbGxgIGlzIGludm9rZWQuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gY29udGV4dCBDb250ZXh0IHRvIGNhbGwgYGNhbGxiYWNrYCB3aXRoLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cblxuICBDYWxsYmFja1F1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlID0gZnVuY3Rpb24gZW5xdWV1ZShjYWxsYmFjaywgY29udGV4dCkge1xuICAgIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCBbXTtcbiAgICB0aGlzLl9jYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgdGhpcy5fY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cyB8fCBbXTtcbiAgICB0aGlzLl9jb250ZXh0cy5wdXNoKGNvbnRleHQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbnZva2VzIGFsbCBlbnF1ZXVlZCBjYWxsYmFja3MgYW5kIGNsZWFycyB0aGUgcXVldWUuIFRoaXMgaXMgaW52b2tlZCBhZnRlclxuICAgKiB0aGUgRE9NIHJlcHJlc2VudGF0aW9uIG9mIGEgY29tcG9uZW50IGhhcyBiZWVuIGNyZWF0ZWQgb3IgdXBkYXRlZC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuXG5cbiAgQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUubm90aWZ5QWxsID0gZnVuY3Rpb24gbm90aWZ5QWxsKCkge1xuICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3M7XG4gICAgdmFyIGNvbnRleHRzID0gdGhpcy5fY29udGV4dHM7XG4gICAgdmFyIGFyZyA9IHRoaXMuX2FyZztcbiAgICBpZiAoY2FsbGJhY2tzICYmIGNvbnRleHRzKSB7XG4gICAgICAhKGNhbGxiYWNrcy5sZW5ndGggPT09IGNvbnRleHRzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnTWlzbWF0Y2hlZCBsaXN0IG9mIGNvbnRleHRzIGluIGNhbGxiYWNrIHF1ZXVlJykgOiBfcHJvZEludmFyaWFudCgnMjQnKSA6IHZvaWQgMDtcbiAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gICAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsYmFja3NbaV0uY2FsbChjb250ZXh0c1tpXSwgYXJnKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgICAgY29udGV4dHMubGVuZ3RoID0gMDtcbiAgICB9XG4gIH07XG5cbiAgQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUuY2hlY2twb2ludCA9IGZ1bmN0aW9uIGNoZWNrcG9pbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrcyA/IHRoaXMuX2NhbGxiYWNrcy5sZW5ndGggOiAwO1xuICB9O1xuXG4gIENhbGxiYWNrUXVldWUucHJvdG90eXBlLnJvbGxiYWNrID0gZnVuY3Rpb24gcm9sbGJhY2sobGVuKSB7XG4gICAgaWYgKHRoaXMuX2NhbGxiYWNrcyAmJiB0aGlzLl9jb250ZXh0cykge1xuICAgICAgdGhpcy5fY2FsbGJhY2tzLmxlbmd0aCA9IGxlbjtcbiAgICAgIHRoaXMuX2NvbnRleHRzLmxlbmd0aCA9IGxlbjtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB0aGUgaW50ZXJuYWwgcXVldWUuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cblxuXG4gIENhbGxiYWNrUXVldWUucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIGBQb29sZWRDbGFzc2AgbG9va3MgZm9yIHRoaXMuXG4gICAqL1xuXG5cbiAgQ2FsbGJhY2tRdWV1ZS5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uIGRlc3RydWN0b3IoKSB7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9O1xuXG4gIHJldHVybiBDYWxsYmFja1F1ZXVlO1xufSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9DYWxsYmFja1F1ZXVlLmpzXG4vLyBtb2R1bGUgaWQgPSA1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcblxudmFyIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCA9IG5ldyBSZWdFeHAoJ15bJyArIERPTVByb3BlcnR5LkFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgKyAnXVsnICsgRE9NUHJvcGVydHkuQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcbnZhciBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlID0ge307XG52YXIgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlID0ge307XG5cbmZ1bmN0aW9uIGlzQXR0cmlidXRlTmFtZVNhZmUoYXR0cmlidXRlTmFtZSkge1xuICBpZiAodmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlTmFtZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKFZBTElEX0FUVFJJQlVURV9OQU1FX1JFR0VYLnRlc3QoYXR0cmlidXRlTmFtZSkpIHtcbiAgICB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSB0cnVlO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgYXR0cmlidXRlIG5hbWU6IGAlc2AnLCBhdHRyaWJ1dGVOYW1lKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzaG91bGRJZ25vcmVWYWx1ZShwcm9wZXJ0eUluZm8sIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsIHx8IHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgJiYgIXZhbHVlIHx8IHByb3BlcnR5SW5mby5oYXNOdW1lcmljVmFsdWUgJiYgaXNOYU4odmFsdWUpIHx8IHByb3BlcnR5SW5mby5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZSAmJiB2YWx1ZSA8IDEgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IGZhbHNlO1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBET00gcHJvcGVydGllcy5cbiAqL1xudmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogQ3JlYXRlcyBtYXJrdXAgZm9yIHRoZSBJRCBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFVuZXNjYXBlZCBJRC5cbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgc3RyaW5nLlxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9ySUQ6IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKGlkKTtcbiAgfSxcblxuICBzZXRBdHRyaWJ1dGVGb3JJRDogZnVuY3Rpb24gKG5vZGUsIGlkKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUUsIGlkKTtcbiAgfSxcblxuICBjcmVhdGVNYXJrdXBGb3JSb290OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIERPTVByb3BlcnR5LlJPT1RfQVRUUklCVVRFX05BTUUgKyAnPVwiXCInO1xuICB9LFxuXG4gIHNldEF0dHJpYnV0ZUZvclJvb3Q6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoRE9NUHJvcGVydHkuUk9PVF9BVFRSSUJVVEVfTkFNRSwgJycpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgYSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfSBNYXJrdXAgc3RyaW5nLCBvciBudWxsIGlmIHRoZSBwcm9wZXJ0eSB3YXMgaW52YWxpZC5cbiAgICovXG4gIGNyZWF0ZU1hcmt1cEZvclByb3BlcnR5OiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgIGlmIChwcm9wZXJ0eUluZm8pIHtcbiAgICAgIGlmIChzaG91bGRJZ25vcmVWYWx1ZShwcm9wZXJ0eUluZm8sIHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lO1xuICAgICAgaWYgKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgKyAnPVwiXCInO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgYSBjdXN0b20gcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHJldHVybiB7c3RyaW5nfSBNYXJrdXAgc3RyaW5nLCBvciBlbXB0eSBzdHJpbmcgaWYgdGhlIHByb3BlcnR5IHdhcyBpbnZhbGlkLlxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9yQ3VzdG9tQXR0cmlidXRlOiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoIWlzQXR0cmlidXRlTmFtZVNhZmUobmFtZSkgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgZm9yIGEgcHJvcGVydHkgb24gYSBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKi9cbiAgc2V0VmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24gKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIHByb3BlcnR5SW5mbyA9IERPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgPyBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW25hbWVdIDogbnVsbDtcbiAgICBpZiAocHJvcGVydHlJbmZvKSB7XG4gICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBwcm9wZXJ0eUluZm8ubXV0YXRpb25NZXRob2Q7XG4gICAgICBpZiAobXV0YXRpb25NZXRob2QpIHtcbiAgICAgICAgbXV0YXRpb25NZXRob2Qobm9kZSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChzaG91bGRJZ25vcmVWYWx1ZShwcm9wZXJ0eUluZm8sIHZhbHVlKSkge1xuICAgICAgICB0aGlzLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLm11c3RVc2VQcm9wZXJ0eSkge1xuICAgICAgICAvLyBDb250cmFyeSB0byBgc2V0QXR0cmlidXRlYCwgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHByb3Blcmx5XG4gICAgICAgIC8vIGB0b1N0cmluZ2BlZCBieSBJRTgvOS5cbiAgICAgICAgbm9kZVtwcm9wZXJ0eUluZm8ucHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZTtcbiAgICAgICAgdmFyIG5hbWVzcGFjZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lc3BhY2U7XG4gICAgICAgIC8vIGBzZXRBdHRyaWJ1dGVgIHdpdGggb2JqZWN0cyBiZWNvbWVzIG9ubHkgYFtvYmplY3RdYCBpbiBJRTgvOSxcbiAgICAgICAgLy8gKCcnICsgdmFsdWUpIG1ha2VzIGl0IG91dHB1dCB0aGUgY29ycmVjdCB0b1N0cmluZygpLXZhbHVlLlxuICAgICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyhuYW1lc3BhY2UsIGF0dHJpYnV0ZU5hbWUsICcnICsgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCAnJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JBdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgcGF5bG9hZCA9IHt9O1xuICAgICAgcGF5bG9hZFtuYW1lXSA9IHZhbHVlO1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgIGluc3RhbmNlSUQ6IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG5vZGUpLl9kZWJ1Z0lELFxuICAgICAgICB0eXBlOiAndXBkYXRlIGF0dHJpYnV0ZScsXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICBzZXRWYWx1ZUZvckF0dHJpYnV0ZTogZnVuY3Rpb24gKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKCFpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBwYXlsb2FkID0ge307XG4gICAgICBwYXlsb2FkW25hbWVdID0gdmFsdWU7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Ib3N0T3BlcmF0aW9uKHtcbiAgICAgICAgaW5zdGFuY2VJRDogUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkuX2RlYnVnSUQsXG4gICAgICAgIHR5cGU6ICd1cGRhdGUgYXR0cmlidXRlJyxcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZFxuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBEZWxldGVzIGFuIGF0dHJpYnV0ZXMgZnJvbSBhIG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKi9cbiAgZGVsZXRlVmFsdWVGb3JBdHRyaWJ1dGU6IGZ1bmN0aW9uIChub2RlLCBuYW1lKSB7XG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICBpbnN0YW5jZUlEOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKS5fZGVidWdJRCxcbiAgICAgICAgdHlwZTogJ3JlbW92ZSBhdHRyaWJ1dGUnLFxuICAgICAgICBwYXlsb2FkOiBuYW1lXG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqL1xuICBkZWxldGVWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbiAobm9kZSwgbmFtZSkge1xuICAgIHZhciBwcm9wZXJ0eUluZm8gPSBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpID8gRE9NUHJvcGVydHkucHJvcGVydGllc1tuYW1lXSA6IG51bGw7XG4gICAgaWYgKHByb3BlcnR5SW5mbykge1xuICAgICAgdmFyIG11dGF0aW9uTWV0aG9kID0gcHJvcGVydHlJbmZvLm11dGF0aW9uTWV0aG9kO1xuICAgICAgaWYgKG11dGF0aW9uTWV0aG9kKSB7XG4gICAgICAgIG11dGF0aW9uTWV0aG9kKG5vZGUsIHVuZGVmaW5lZCk7XG4gICAgICB9IGVsc2UgaWYgKHByb3BlcnR5SW5mby5tdXN0VXNlUHJvcGVydHkpIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZTtcbiAgICAgICAgaWYgKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUpIHtcbiAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uSG9zdE9wZXJhdGlvbih7XG4gICAgICAgIGluc3RhbmNlSUQ6IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG5vZGUpLl9kZWJ1Z0lELFxuICAgICAgICB0eXBlOiAncmVtb3ZlIGF0dHJpYnV0ZScsXG4gICAgICAgIHBheWxvYWQ6IG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IERPTVByb3BlcnR5T3BlcmF0aW9ucztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdERPTUNvbXBvbmVudEZsYWdzID0ge1xuICBoYXNDYWNoZWRDaGlsZE5vZGVzOiAxIDw8IDBcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db21wb25lbnRGbGFncztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTUNvbXBvbmVudEZsYWdzLmpzXG4vLyBtb2R1bGUgaWQgPSA2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIExpbmtlZFZhbHVlVXRpbHMgPSByZXF1aXJlKCcuL0xpbmtlZFZhbHVlVXRpbHMnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgZGlkV2FyblZhbHVlTGluayA9IGZhbHNlO1xudmFyIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IGZhbHNlO1xuXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zSWZQZW5kaW5nVXBkYXRlQW5kTW91bnRlZCgpIHtcbiAgaWYgKHRoaXMuX3Jvb3ROb2RlSUQgJiYgdGhpcy5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGUpIHtcbiAgICB0aGlzLl93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuXG4gICAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG5cbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgdXBkYXRlT3B0aW9ucyh0aGlzLCBCb29sZWFuKHByb3BzLm11bHRpcGxlKSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpIHtcbiAgaWYgKG93bmVyKSB7XG4gICAgdmFyIG5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxudmFyIHZhbHVlUHJvcE5hbWVzID0gWyd2YWx1ZScsICdkZWZhdWx0VmFsdWUnXTtcblxuLyoqXG4gKiBWYWxpZGF0aW9uIGZ1bmN0aW9uIGZvciBgdmFsdWVgIGFuZCBgZGVmYXVsdFZhbHVlYC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNoZWNrU2VsZWN0UHJvcFR5cGVzKGluc3QsIHByb3BzKSB7XG4gIHZhciBvd25lciA9IGluc3QuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgTGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcygnc2VsZWN0JywgcHJvcHMsIG93bmVyKTtcblxuICBpZiAocHJvcHMudmFsdWVMaW5rICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZUxpbmspIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2B2YWx1ZUxpbmtgIHByb3Agb24gYHNlbGVjdGAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICBkaWRXYXJuVmFsdWVMaW5rID0gdHJ1ZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVQcm9wTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcHJvcE5hbWUgPSB2YWx1ZVByb3BOYW1lc1tpXTtcbiAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKTtcbiAgICBpZiAocHJvcHMubXVsdGlwbGUgJiYgIWlzQXJyYXkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnVGhlIGAlc2AgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGFuIGFycmF5IGlmICcgKyAnYG11bHRpcGxlYCBpcyB0cnVlLiVzJywgcHJvcE5hbWUsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikpIDogdm9pZCAwO1xuICAgIH0gZWxzZSBpZiAoIXByb3BzLm11bHRpcGxlICYmIGlzQXJyYXkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnVGhlIGAlc2AgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGEgc2NhbGFyICcgKyAndmFsdWUgaWYgYG11bHRpcGxlYCBpcyBmYWxzZS4lcycsIHByb3BOYW1lLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWN0RE9NQ29tcG9uZW50fSBpbnN0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IG11bHRpcGxlXG4gKiBAcGFyYW0geyp9IHByb3BWYWx1ZSBBIHN0cmluZ2FibGUgKHdpdGggYG11bHRpcGxlYCwgYSBsaXN0IG9mIHN0cmluZ2FibGVzKS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoaW5zdCwgbXVsdGlwbGUsIHByb3BWYWx1ZSkge1xuICB2YXIgc2VsZWN0ZWRWYWx1ZSwgaTtcbiAgdmFyIG9wdGlvbnMgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KS5vcHRpb25zO1xuXG4gIGlmIChtdWx0aXBsZSkge1xuICAgIHNlbGVjdGVkVmFsdWUgPSB7fTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzZWxlY3RlZFZhbHVlWycnICsgcHJvcFZhbHVlW2ldXSA9IHRydWU7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc2VsZWN0ZWQgPSBzZWxlY3RlZFZhbHVlLmhhc093blByb3BlcnR5KG9wdGlvbnNbaV0udmFsdWUpO1xuICAgICAgaWYgKG9wdGlvbnNbaV0uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbnNbaV0uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRG8gbm90IHNldCBgc2VsZWN0LnZhbHVlYCBhcyBleGFjdCBiZWhhdmlvciBpc24ndCBjb25zaXN0ZW50IGFjcm9zcyBhbGxcbiAgICAvLyBicm93c2VycyBmb3IgYWxsIGNhc2VzLlxuICAgIHNlbGVjdGVkVmFsdWUgPSAnJyArIHByb3BWYWx1ZTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG9wdGlvbnNbaV0udmFsdWUgPT09IHNlbGVjdGVkVmFsdWUpIHtcbiAgICAgICAgb3B0aW9uc1tpXS5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICBvcHRpb25zWzBdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHNlbGVjdD4gaG9zdCBjb21wb25lbnQgdGhhdCBhbGxvd3Mgb3B0aW9uYWxseSBzZXR0aW5nIHRoZVxuICogcHJvcHMgYHZhbHVlYCBhbmQgYGRlZmF1bHRWYWx1ZWAuIElmIGBtdWx0aXBsZWAgaXMgZmFsc2UsIHRoZSBwcm9wIG11c3QgYmUgYVxuICogc3RyaW5nYWJsZS4gSWYgYG11bHRpcGxlYCBpcyB0cnVlLCB0aGUgcHJvcCBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ2FibGVzLlxuICpcbiAqIElmIGB2YWx1ZWAgaXMgbm90IHN1cHBsaWVkIChvciBudWxsL3VuZGVmaW5lZCksIHVzZXIgYWN0aW9ucyB0aGF0IGNoYW5nZSB0aGVcbiAqIHNlbGVjdGVkIG9wdGlvbiB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAqXG4gKiBJZiBpdCBpcyBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBvcHRpb25zIHdpbGwgbm90XG4gKiB1cGRhdGUgaW4gcmVzcG9uc2UgdG8gdXNlciBhY3Rpb25zLiBJbnN0ZWFkLCB0aGUgYHZhbHVlYCBwcm9wIG11c3QgY2hhbmdlIGluXG4gKiBvcmRlciBmb3IgdGhlIHJlbmRlcmVkIG9wdGlvbnMgdG8gdXBkYXRlLlxuICpcbiAqIElmIGBkZWZhdWx0VmFsdWVgIGlzIHByb3ZpZGVkLCBhbnkgb3B0aW9ucyB3aXRoIHRoZSBzdXBwbGllZCB2YWx1ZXMgd2lsbCBiZVxuICogc2VsZWN0ZWQuXG4gKi9cbnZhciBSZWFjdERPTVNlbGVjdCA9IHtcbiAgZ2V0SG9zdFByb3BzOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMpIHtcbiAgICByZXR1cm4gX2Fzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgIG9uQ2hhbmdlOiBpbnN0Ll93cmFwcGVyU3RhdGUub25DaGFuZ2UsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH0sXG5cbiAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCwgcHJvcHMpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tTZWxlY3RQcm9wVHlwZXMoaW5zdCwgcHJvcHMpO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgIGluc3QuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICAgIHBlbmRpbmdVcGRhdGU6IGZhbHNlLFxuICAgICAgaW5pdGlhbFZhbHVlOiB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICBsaXN0ZW5lcnM6IG51bGwsXG4gICAgICBvbkNoYW5nZTogX2hhbmRsZUNoYW5nZS5iaW5kKGluc3QpLFxuICAgICAgd2FzTXVsdGlwbGU6IEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpXG4gICAgfTtcblxuICAgIGlmIChwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnU2VsZWN0IGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICcgKyAnKHNwZWNpZnkgZWl0aGVyIHRoZSB2YWx1ZSBwcm9wLCBvciB0aGUgZGVmYXVsdFZhbHVlIHByb3AsIGJ1dCBub3QgJyArICdib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBzZWxlY3QgJyArICdlbGVtZW50IGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnKSA6IHZvaWQgMDtcbiAgICAgIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9LFxuXG4gIGdldFNlbGVjdFZhbHVlQ29udGV4dDogZnVuY3Rpb24gKGluc3QpIHtcbiAgICAvLyBSZWFjdERPTU9wdGlvbiBsb29rcyBhdCB0aGlzIGluaXRpYWwgdmFsdWUgc28gdGhlIGluaXRpYWwgZ2VuZXJhdGVkXG4gICAgLy8gbWFya3VwIGhhcyBjb3JyZWN0IGBzZWxlY3RlZGAgYXR0cmlidXRlc1xuICAgIHJldHVybiBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO1xuICB9LFxuXG4gIHBvc3RVcGRhdGVXcmFwcGVyOiBmdW5jdGlvbiAoaW5zdCkge1xuICAgIHZhciBwcm9wcyA9IGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuXG4gICAgLy8gQWZ0ZXIgdGhlIGluaXRpYWwgbW91bnQsIHdlIGNvbnRyb2wgc2VsZWN0ZWQtbmVzcyBtYW51YWxseSBzbyBkb24ndCBwYXNzXG4gICAgLy8gdGhpcyB2YWx1ZSBkb3duXG4gICAgaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSA9IHVuZGVmaW5lZDtcblxuICAgIHZhciB3YXNNdWx0aXBsZSA9IGluc3QuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtcbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUgPSBCb29sZWFuKHByb3BzLm11bHRpcGxlKTtcblxuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgdXBkYXRlT3B0aW9ucyhpbnN0LCBCb29sZWFuKHByb3BzLm11bHRpcGxlKSwgdmFsdWUpO1xuICAgIH0gZWxzZSBpZiAod2FzTXVsdGlwbGUgIT09IEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpKSB7XG4gICAgICAvLyBGb3Igc2ltcGxpY2l0eSwgcmVhcHBseSBgZGVmYXVsdFZhbHVlYCBpZiBgbXVsdGlwbGVgIGlzIHRvZ2dsZWQuXG4gICAgICBpZiAocHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlT3B0aW9ucyhpbnN0LCBCb29sZWFuKHByb3BzLm11bHRpcGxlKSwgcHJvcHMuZGVmYXVsdFZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldmVydCB0aGUgc2VsZWN0IGJhY2sgdG8gaXRzIGRlZmF1bHQgdW5zZWxlY3RlZCBzdGF0ZS5cbiAgICAgICAgdXBkYXRlT3B0aW9ucyhpbnN0LCBCb29sZWFuKHByb3BzLm11bHRpcGxlKSwgcHJvcHMubXVsdGlwbGUgPyBbXSA6ICcnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gIHZhciByZXR1cm5WYWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZXhlY3V0ZU9uQ2hhbmdlKHByb3BzLCBldmVudCk7XG5cbiAgaWYgKHRoaXMuX3Jvb3ROb2RlSUQpIHtcbiAgICB0aGlzLl93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSA9IHRydWU7XG4gIH1cbiAgUmVhY3RVcGRhdGVzLmFzYXAodXBkYXRlT3B0aW9uc0lmUGVuZGluZ1VwZGF0ZUFuZE1vdW50ZWQsIHRoaXMpO1xuICByZXR1cm4gcmV0dXJuVmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Q7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01TZWxlY3QuanNcbi8vIG1vZHVsZSBpZCA9IDYxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcbnZhciBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vVHJhbnNhY3Rpb24nKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG5cbnZhciBSRVNFVF9CQVRDSEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gIGNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9IGZhbHNlO1xuICB9XG59O1xuXG52YXIgRkxVU0hfQkFUQ0hFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBlbXB0eUZ1bmN0aW9uLFxuICBjbG9zZTogUmVhY3RVcGRhdGVzLmZsdXNoQmF0Y2hlZFVwZGF0ZXMuYmluZChSZWFjdFVwZGF0ZXMpXG59O1xuXG52YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbRkxVU0hfQkFUQ0hFRF9VUERBVEVTLCBSRVNFVF9CQVRDSEVEX1VQREFURVNdO1xuXG5mdW5jdGlvbiBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbn1cblxuX2Fzc2lnbihSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbiwge1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9XG59KTtcblxudmFyIHRyYW5zYWN0aW9uID0gbmV3IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbigpO1xuXG52YXIgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSA9IHtcbiAgaXNCYXRjaGluZ1VwZGF0ZXM6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBDYWxsIHRoZSBwcm92aWRlZCBmdW5jdGlvbiBpbiBhIGNvbnRleHQgd2l0aGluIHdoaWNoIGNhbGxzIHRvIGBzZXRTdGF0ZWBcbiAgICogYW5kIGZyaWVuZHMgYXJlIGJhdGNoZWQgc3VjaCB0aGF0IGNvbXBvbmVudHMgYXJlbid0IHVwZGF0ZWQgdW5uZWNlc3NhcmlseS5cbiAgICovXG4gIGJhdGNoZWRVcGRhdGVzOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGEsIGIsIGMsIGQsIGUpIHtcbiAgICB2YXIgYWxyZWFkeUJhdGNoaW5nVXBkYXRlcyA9IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXM7XG5cbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gdHJ1ZTtcblxuICAgIC8vIFRoZSBjb2RlIGlzIHdyaXR0ZW4gdGhpcyB3YXkgdG8gYXZvaWQgZXh0cmEgYWxsb2NhdGlvbnNcbiAgICBpZiAoYWxyZWFkeUJhdGNoaW5nVXBkYXRlcykge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGEsIGIsIGMsIGQsIGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJhbnNhY3Rpb24ucGVyZm9ybShjYWxsYmFjaywgbnVsbCwgYSwgYiwgYywgZCwgZSk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3k7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5qc1xuLy8gbW9kdWxlIGlkID0gNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5Q29tcG9uZW50RmFjdG9yeTtcblxudmFyIFJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb24gPSB7XG4gIGluamVjdEVtcHR5Q29tcG9uZW50RmFjdG9yeTogZnVuY3Rpb24gKGZhY3RvcnkpIHtcbiAgICBlbXB0eUNvbXBvbmVudEZhY3RvcnkgPSBmYWN0b3J5O1xuICB9XG59O1xuXG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiAoaW5zdGFudGlhdGUpIHtcbiAgICByZXR1cm4gZW1wdHlDb21wb25lbnRGYWN0b3J5KGluc3RhbnRpYXRlKTtcbiAgfVxufTtcblxuUmVhY3RFbXB0eUNvbXBvbmVudC5pbmplY3Rpb24gPSBSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RW1wdHlDb21wb25lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RFbXB0eUNvbXBvbmVudC5qc1xuLy8gbW9kdWxlIGlkID0gNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gbnVsbDtcbnZhciB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBudWxsO1xuXG52YXIgUmVhY3RIb3N0Q29tcG9uZW50SW5qZWN0aW9uID0ge1xuICAvLyBUaGlzIGFjY2VwdHMgYSBjbGFzcyB0aGF0IHJlY2VpdmVzIHRoZSB0YWcgc3RyaW5nLiBUaGlzIGlzIGEgY2F0Y2ggYWxsXG4gIC8vIHRoYXQgY2FuIHJlbmRlciBhbnkga2luZCBvZiB0YWcuXG4gIGluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzczogZnVuY3Rpb24gKGNvbXBvbmVudENsYXNzKSB7XG4gICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gIH0sXG4gIC8vIFRoaXMgYWNjZXB0cyBhIHRleHQgY29tcG9uZW50IGNsYXNzIHRoYXQgdGFrZXMgdGhlIHRleHQgc3RyaW5nIHRvIGJlXG4gIC8vIHJlbmRlcmVkIGFzIHByb3BzLlxuICBpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uIChjb21wb25lbnRDbGFzcykge1xuICAgIHRleHRDb21wb25lbnRDbGFzcyA9IGNvbXBvbmVudENsYXNzO1xuICB9XG59O1xuXG4vKipcbiAqIEdldCBhIGhvc3QgaW50ZXJuYWwgY29tcG9uZW50IGNsYXNzIGZvciBhIHNwZWNpZmljIHRhZy5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCB0byBjcmVhdGUuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGludGVybmFsIGNsYXNzIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KSB7XG4gICFnZW5lcmljQ29tcG9uZW50Q2xhc3MgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVGhlcmUgaXMgbm8gcmVnaXN0ZXJlZCBjb21wb25lbnQgZm9yIHRoZSB0YWcgJXMnLCBlbGVtZW50LnR5cGUpIDogX3Byb2RJbnZhcmlhbnQoJzExMScsIGVsZW1lbnQudHlwZSkgOiB2b2lkIDA7XG4gIHJldHVybiBuZXcgZ2VuZXJpY0NvbXBvbmVudENsYXNzKGVsZW1lbnQpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RUZXh0fSB0ZXh0XG4gKiBAcmV0dXJuIHtSZWFjdENvbXBvbmVudH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VGb3JUZXh0KHRleHQpIHtcbiAgcmV0dXJuIG5ldyB0ZXh0Q29tcG9uZW50Q2xhc3ModGV4dCk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1RleHRDb21wb25lbnQoY29tcG9uZW50KSB7XG4gIHJldHVybiBjb21wb25lbnQgaW5zdGFuY2VvZiB0ZXh0Q29tcG9uZW50Q2xhc3M7XG59XG5cbnZhciBSZWFjdEhvc3RDb21wb25lbnQgPSB7XG4gIGNyZWF0ZUludGVybmFsQ29tcG9uZW50OiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudCxcbiAgY3JlYXRlSW5zdGFuY2VGb3JUZXh0OiBjcmVhdGVJbnN0YW5jZUZvclRleHQsXG4gIGlzVGV4dENvbXBvbmVudDogaXNUZXh0Q29tcG9uZW50LFxuICBpbmplY3Rpb246IFJlYWN0SG9zdENvbXBvbmVudEluamVjdGlvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEhvc3RDb21wb25lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RIb3N0Q29tcG9uZW50LmpzXG4vLyBtb2R1bGUgaWQgPSA2NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01TZWxlY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0RE9NU2VsZWN0aW9uJyk7XG5cbnZhciBjb250YWluc05vZGUgPSByZXF1aXJlKCdmYmpzL2xpYi9jb250YWluc05vZGUnKTtcbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKCdmYmpzL2xpYi9mb2N1c05vZGUnKTtcbnZhciBnZXRBY3RpdmVFbGVtZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudCcpO1xuXG5mdW5jdGlvbiBpc0luRG9jdW1lbnQobm9kZSkge1xuICByZXR1cm4gY29udGFpbnNOb2RlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgbm9kZSk7XG59XG5cbi8qKlxuICogQFJlYWN0SW5wdXRTZWxlY3Rpb246IFJlYWN0IGlucHV0IHNlbGVjdGlvbiBtb2R1bGUuIEJhc2VkIG9uIFNlbGVjdGlvbi5qcyxcbiAqIGJ1dCBtb2RpZmllZCB0byBiZSBzdWl0YWJsZSBmb3IgcmVhY3QgYW5kIGhhcyBhIGNvdXBsZSBvZiBidWcgZml4ZXMgKGRvZXNuJ3RcbiAqIGFzc3VtZSBidXR0b25zIGhhdmUgcmFuZ2Ugc2VsZWN0aW9ucyBhbGxvd2VkKS5cbiAqIElucHV0IHNlbGVjdGlvbiBtb2R1bGUgZm9yIFJlYWN0LlxuICovXG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHtcblxuICBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXM6IGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbm9kZU5hbWUgJiYgKG5vZGVOYW1lID09PSAnaW5wdXQnICYmIGVsZW0udHlwZSA9PT0gJ3RleHQnIHx8IG5vZGVOYW1lID09PSAndGV4dGFyZWEnIHx8IGVsZW0uY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpO1xuICB9LFxuXG4gIGdldFNlbGVjdGlvbkluZm9ybWF0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgIHJldHVybiB7XG4gICAgICBmb2N1c2VkRWxlbTogZm9jdXNlZEVsZW0sXG4gICAgICBzZWxlY3Rpb25SYW5nZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMoZm9jdXNlZEVsZW0pID8gUmVhY3RJbnB1dFNlbGVjdGlvbi5nZXRTZWxlY3Rpb24oZm9jdXNlZEVsZW0pIDogbnVsbFxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXN0b3JlU2VsZWN0aW9uOiBJZiBhbnkgc2VsZWN0aW9uIGluZm9ybWF0aW9uIHdhcyBwb3RlbnRpYWxseSBsb3N0LFxuICAgKiByZXN0b3JlIGl0LiBUaGlzIGlzIHVzZWZ1bCB3aGVuIHBlcmZvcm1pbmcgb3BlcmF0aW9ucyB0aGF0IGNvdWxkIHJlbW92ZSBkb21cbiAgICogbm9kZXMgYW5kIHBsYWNlIHRoZW0gYmFjayBpbiwgcmVzdWx0aW5nIGluIGZvY3VzIGJlaW5nIGxvc3QuXG4gICAqL1xuICByZXN0b3JlU2VsZWN0aW9uOiBmdW5jdGlvbiAocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikge1xuICAgIHZhciBjdXJGb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICB2YXIgcHJpb3JGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uZm9jdXNlZEVsZW07XG4gICAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICAgIGlmIChjdXJGb2N1c2VkRWxlbSAhPT0gcHJpb3JGb2N1c2VkRWxlbSAmJiBpc0luRG9jdW1lbnQocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgIGlmIChSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLnNldFNlbGVjdGlvbihwcmlvckZvY3VzZWRFbGVtLCBwcmlvclNlbGVjdGlvblJhbmdlKTtcbiAgICAgIH1cbiAgICAgIGZvY3VzTm9kZShwcmlvckZvY3VzZWRFbGVtKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBnZXRTZWxlY3Rpb246IEdldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSBmb2N1c2VkIHRleHRhcmVhLCBpbnB1dCBvclxuICAgKiBjb250ZW50RWRpdGFibGUgbm9kZS5cbiAgICogLUBpbnB1dDogTG9vayB1cCBzZWxlY3Rpb24gYm91bmRzIG9mIHRoaXMgaW5wdXRcbiAgICogLUByZXR1cm4ge3N0YXJ0OiBzZWxlY3Rpb25TdGFydCwgZW5kOiBzZWxlY3Rpb25FbmR9XG4gICAqL1xuICBnZXRTZWxlY3Rpb246IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgIHZhciBzZWxlY3Rpb247XG5cbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgICAgLy8gTW9kZXJuIGJyb3dzZXIgd2l0aCBpbnB1dCBvciB0ZXh0YXJlYS5cbiAgICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgc3RhcnQ6IGlucHV0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgICBlbmQ6IGlucHV0LnNlbGVjdGlvbkVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBpbnB1dC5ub2RlTmFtZSAmJiBpbnB1dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSB7XG4gICAgICAvLyBJRTggaW5wdXQuXG4gICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgIC8vIFRoZXJlIGNhbiBvbmx5IGJlIG9uZSBzZWxlY3Rpb24gcGVyIGRvY3VtZW50IGluIElFLCBzbyBpdCBtdXN0XG4gICAgICAvLyBiZSBpbiBvdXIgZWxlbWVudC5cbiAgICAgIGlmIChyYW5nZS5wYXJlbnRFbGVtZW50KCkgPT09IGlucHV0KSB7XG4gICAgICAgIHNlbGVjdGlvbiA9IHtcbiAgICAgICAgICBzdGFydDogLXJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aCksXG4gICAgICAgICAgZW5kOiAtcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aClcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29udGVudCBlZGl0YWJsZSBvciBvbGQgSUUgdGV4dGFyZWEuXG4gICAgICBzZWxlY3Rpb24gPSBSZWFjdERPTVNlbGVjdGlvbi5nZXRPZmZzZXRzKGlucHV0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VsZWN0aW9uIHx8IHsgc3RhcnQ6IDAsIGVuZDogMCB9O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAc2V0U2VsZWN0aW9uOiBTZXRzIHRoZSBzZWxlY3Rpb24gYm91bmRzIG9mIGEgdGV4dGFyZWEgb3IgaW5wdXQgYW5kIGZvY3VzZXNcbiAgICogdGhlIGlucHV0LlxuICAgKiAtQGlucHV0ICAgICBTZXQgc2VsZWN0aW9uIGJvdW5kcyBvZiB0aGlzIGlucHV0IG9yIHRleHRhcmVhXG4gICAqIC1Ab2Zmc2V0cyAgIE9iamVjdCBvZiBzYW1lIGZvcm0gdGhhdCBpcyByZXR1cm5lZCBmcm9tIGdldCpcbiAgICovXG4gIHNldFNlbGVjdGlvbjogZnVuY3Rpb24gKGlucHV0LCBvZmZzZXRzKSB7XG4gICAgdmFyIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICB2YXIgZW5kID0gb2Zmc2V0cy5lbmQ7XG4gICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICB9XG5cbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBzdGFydDtcbiAgICAgIGlucHV0LnNlbGVjdGlvbkVuZCA9IE1hdGgubWluKGVuZCwgaW5wdXQudmFsdWUubGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbiAmJiBpbnB1dC5ub2RlTmFtZSAmJiBpbnB1dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnKSB7XG4gICAgICB2YXIgcmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBzdGFydCk7XG4gICAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG4gICAgICByYW5nZS5zZWxlY3QoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3RET01TZWxlY3Rpb24uc2V0T2Zmc2V0cyhpbnB1dCwgb2Zmc2V0cyk7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5wdXRTZWxlY3Rpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RJbnB1dFNlbGVjdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gNjVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzXG4vLyBtb2R1bGUgaWQgPSA2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xudmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xudmFyIFJlYWN0U2VydmVyVXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0U2VydmVyVXBkYXRlUXVldWUnKTtcblxuLyoqXG4gKiBFeGVjdXRlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBDb25zaWRlciB0aGVzZSBhc1xuICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuICogZWFjaCBvdGhlci5cbiAqL1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW107XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRSQU5TQUNUSU9OX1dSQVBQRVJTLnB1c2goe1xuICAgIGluaXRpYWxpemU6IFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luRmx1c2gsXG4gICAgY2xvc2U6IFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZEZsdXNoXG4gIH0pO1xufVxuXG52YXIgbm9vcENhbGxiYWNrUXVldWUgPSB7XG4gIGVucXVldWU6IGZ1bmN0aW9uICgpIHt9XG59O1xuXG4vKipcbiAqIEBjbGFzcyBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHJlbmRlclRvU3RhdGljTWFya3VwXG4gKi9cbmZ1bmN0aW9uIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ocmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICB0aGlzLnJlbmRlclRvU3RhdGljTWFya3VwID0gcmVuZGVyVG9TdGF0aWNNYXJrdXA7XG4gIHRoaXMudXNlQ3JlYXRlRWxlbWVudCA9IGZhbHNlO1xuICB0aGlzLnVwZGF0ZVF1ZXVlID0gbmV3IFJlYWN0U2VydmVyVXBkYXRlUXVldWUodGhpcyk7XG59XG5cbnZhciBNaXhpbiA9IHtcbiAgLyoqXG4gICAqIEBzZWUgVHJhbnNhY3Rpb25cbiAgICogQGFic3RyYWN0XG4gICAqIEBmaW5hbFxuICAgKiBAcmV0dXJuIHthcnJheX0gRW1wdHkgbGlzdCBvZiBvcGVyYXRpb24gd3JhcCBwcm9jZWR1cmVzLlxuICAgKi9cbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfSxcblxuICAvKipcbiAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgcXVldWUgdG8gY29sbGVjdCBgb25ET01SZWFkeWAgY2FsbGJhY2tzIHdpdGguXG4gICAqL1xuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbm9vcENhbGxiYWNrUXVldWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHF1ZXVlIHRvIGNvbGxlY3QgUmVhY3QgYXN5bmMgZXZlbnRzLlxuICAgKi9cbiAgZ2V0VXBkYXRlUXVldWU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVRdWV1ZTtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcywgYW5kIHdpbGwgaW52b2tlIHRoaXMgYmVmb3JlIGFsbG93aW5nIHRoaXNcbiAgICogaW5zdGFuY2UgdG8gYmUgcmV1c2VkLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge30sXG5cbiAgY2hlY2twb2ludDogZnVuY3Rpb24gKCkge30sXG5cbiAgcm9sbGJhY2s6IGZ1bmN0aW9uICgpIHt9XG59O1xuXG5fYXNzaWduKFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbiwgTWl4aW4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA2N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbmZ1bmN0aW9uIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSkge1xuICBSZWFjdFVwZGF0ZXMuZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VW5leHBlY3RlZEFyZ3VtZW50KGFyZykge1xuICB2YXIgdHlwZSA9IHR5cGVvZiBhcmc7XG4gIGlmICh0eXBlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG4gIHZhciBkaXNwbGF5TmFtZSA9IGFyZy5jb25zdHJ1Y3RvciAmJiBhcmcuY29uc3RydWN0b3IubmFtZSB8fCB0eXBlO1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFyZyk7XG4gIGlmIChrZXlzLmxlbmd0aCA+IDAgJiYga2V5cy5sZW5ndGggPCAyMCkge1xuICAgIHJldHVybiBkaXNwbGF5TmFtZSArICcgKGtleXM6ICcgKyBrZXlzLmpvaW4oJywgJykgKyAnKSc7XG4gIH1cbiAgcmV0dXJuIGRpc3BsYXlOYW1lO1xufVxuXG5mdW5jdGlvbiBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsIGNhbGxlck5hbWUpIHtcbiAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7XG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgY3RvciA9IHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gT25seSB3YXJuIHdoZW4gd2UgaGF2ZSBhIGNhbGxlck5hbWUuIE90aGVyd2lzZSB3ZSBzaG91bGQgYmUgc2lsZW50LlxuICAgICAgLy8gV2UncmUgcHJvYmFibHkgY2FsbGluZyBmcm9tIGVucXVldWVDYWxsYmFjay4gV2UgZG9uJ3Qgd2FudCB0byB3YXJuXG4gICAgICAvLyB0aGVyZSBiZWNhdXNlIHdlIGFscmVhZHkgd2FybmVkIGZvciB0aGUgY29ycmVzcG9uZGluZyBsaWZlY3ljbGUgbWV0aG9kLlxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWNhbGxlck5hbWUsICclcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIG9yIG1vdW50aW5nIGNvbXBvbmVudC4gJyArICdUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGNhbGxlZCAlcygpIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuICcgKyAnVGhpcyBpcyBhIG5vLW9wLiBQbGVhc2UgY2hlY2sgdGhlIGNvZGUgZm9yIHRoZSAlcyBjb21wb25lbnQuJywgY2FsbGVyTmFtZSwgY2FsbGVyTmFtZSwgY3RvciAmJiAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpIHx8ICdSZWFjdENsYXNzJykgOiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsICclcyguLi4pOiBDYW5ub3QgdXBkYXRlIGR1cmluZyBhbiBleGlzdGluZyBzdGF0ZSB0cmFuc2l0aW9uIChzdWNoIGFzICcgKyAnd2l0aGluIGByZW5kZXJgIG9yIGFub3RoZXIgY29tcG9uZW50XFwncyBjb25zdHJ1Y3RvcikuIFJlbmRlciBtZXRob2RzICcgKyAnc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGU7IGNvbnN0cnVjdG9yICcgKyAnc2lkZS1lZmZlY3RzIGFyZSBhbiBhbnRpLXBhdHRlcm4sIGJ1dCBjYW4gYmUgbW92ZWQgdG8gJyArICdgY29tcG9uZW50V2lsbE1vdW50YC4nLCBjYWxsZXJOYW1lKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBpbnRlcm5hbEluc3RhbmNlO1xufVxuXG4vKipcbiAqIFJlYWN0VXBkYXRlUXVldWUgYWxsb3dzIGZvciBzdGF0ZSB1cGRhdGVzIHRvIGJlIHNjaGVkdWxlZCBpbnRvIGEgbGF0ZXJcbiAqIHJlY29uY2lsaWF0aW9uIHN0ZXAuXG4gKi9cbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0ge1xuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHdlIHdhbnQgdG8gdGVzdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuICBpc01vdW50ZWQ6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciwgJyVzIGlzIGFjY2Vzc2luZyBpc01vdW50ZWQgaW5zaWRlIGl0cyByZW5kZXIoKSBmdW5jdGlvbi4gJyArICdyZW5kZXIoKSBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZS4gSXQgc2hvdWxkICcgKyAnbmV2ZXIgYWNjZXNzIHNvbWV0aGluZyB0aGF0IHJlcXVpcmVzIHN0YWxlIGRhdGEgZnJvbSB0aGUgcHJldmlvdXMgJyArICdyZW5kZXIsIHN1Y2ggYXMgcmVmcy4gTW92ZSB0aGlzIGxvZ2ljIHRvIGNvbXBvbmVudERpZE1vdW50IGFuZCAnICsgJ2NvbXBvbmVudERpZFVwZGF0ZSBpbnN0ZWFkLicsIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIC8vIER1cmluZyBjb21wb25lbnRXaWxsTW91bnQgYW5kIHJlbmRlciB0aGlzIHdpbGwgc3RpbGwgYmUgbnVsbCBidXQgYWZ0ZXJcbiAgICAgIC8vIHRoYXQgd2lsbCBhbHdheXMgcmVuZGVyIHRvIHNvbWV0aGluZy4gQXQgbGVhc3QgZm9yIG5vdy4gU28gd2UgY2FuIHVzZVxuICAgICAgLy8gdGhpcyBoYWNrLlxuICAgICAgcmV0dXJuICEhaW50ZXJuYWxJbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEVucXVldWUgYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgZXhlY3V0ZWQgYWZ0ZXIgYWxsIHRoZSBwZW5kaW5nIHVwZGF0ZXNcbiAgICogaGF2ZSBwcm9jZXNzZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRvIHVzZSBhcyBgdGhpc2AgY29udGV4dC5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbGVyTmFtZSBOYW1lIG9mIHRoZSBjYWxsaW5nIGZ1bmN0aW9uIGluIHRoZSBwdWJsaWMgQVBJLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVDYWxsYmFjazogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIFJlYWN0VXBkYXRlUXVldWUudmFsaWRhdGVDYWxsYmFjayhjYWxsYmFjaywgY2FsbGVyTmFtZSk7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UpO1xuXG4gICAgLy8gUHJldmlvdXNseSB3ZSB3b3VsZCB0aHJvdyBhbiBlcnJvciBpZiB3ZSBkaWRuJ3QgaGF2ZSBhbiBpbnRlcm5hbFxuICAgIC8vIGluc3RhbmNlLiBTaW5jZSB3ZSB3YW50IHRvIG1ha2UgaXQgYSBuby1vcCBpbnN0ZWFkLCB3ZSBtaXJyb3IgdGhlIHNhbWVcbiAgICAvLyBiZWhhdmlvciB3ZSBoYXZlIGluIG90aGVyIGVucXVldWUqIG1ldGhvZHMuXG4gICAgLy8gV2UgYWxzbyBuZWVkIHRvIGlnbm9yZSBjYWxsYmFja3MgaW4gY29tcG9uZW50V2lsbE1vdW50LiBTZWVcbiAgICAvLyBlbnF1ZXVlVXBkYXRlcy5cbiAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgLy8gVE9ETzogVGhlIGNhbGxiYWNrIGhlcmUgaXMgaWdub3JlZCB3aGVuIHNldFN0YXRlIGlzIGNhbGxlZCBmcm9tXG4gICAgLy8gY29tcG9uZW50V2lsbE1vdW50LiBFaXRoZXIgZml4IGl0IG9yIGRpc2FsbG93IGRvaW5nIHNvIGNvbXBsZXRlbHkgaW5cbiAgICAvLyBmYXZvciBvZiBnZXRJbml0aWFsU3RhdGUuIEFsdGVybmF0aXZlbHksIHdlIGNhbiBkaXNhbGxvd1xuICAgIC8vIGNvbXBvbmVudFdpbGxNb3VudCBkdXJpbmcgc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWw6IGZ1bmN0aW9uIChpbnRlcm5hbEluc3RhbmNlLCBjYWxsYmFjaykge1xuICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICB9XG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAnZm9yY2VVcGRhdGUnKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IHRydWU7XG5cbiAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbGwgb2YgdGhlIHN0YXRlLiBBbHdheXMgdXNlIHRoaXMgb3IgYHNldFN0YXRlYCB0byBtdXRhdGUgc3RhdGUuXG4gICAqIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAgICpcbiAgICogVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgYHRoaXMuc3RhdGVgIHdpbGwgYmUgaW1tZWRpYXRlbHkgdXBkYXRlZCwgc29cbiAgICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb21wbGV0ZVN0YXRlIE5leHQgc3RhdGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKSB7XG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsICdyZXBsYWNlU3RhdGUnKTtcblxuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gW2NvbXBsZXRlU3RhdGVdO1xuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSB0cnVlO1xuXG4gICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyBhIHN1YnNldCBvZiB0aGUgc3RhdGUuIFRoaXMgb25seSBleGlzdHMgYmVjYXVzZSBfcGVuZGluZ1N0YXRlIGlzXG4gICAqIGludGVybmFsLiBUaGlzIHByb3ZpZGVzIGEgbWVyZ2luZyBzdHJhdGVneSB0aGF0IGlzIG5vdCBhdmFpbGFibGUgdG8gZGVlcFxuICAgKiBwcm9wZXJ0aWVzIHdoaWNoIGlzIGNvbmZ1c2luZy4gVE9ETzogRXhwb3NlIHBlbmRpbmdTdGF0ZSBvciBkb24ndCB1c2UgaXRcbiAgICogZHVyaW5nIHRoZSBtZXJnZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwYXJ0aWFsU3RhdGUgTmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIHN0YXRlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0U3RhdGUoKTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHBhcnRpYWxTdGF0ZSAhPSBudWxsLCAnc2V0U3RhdGUoLi4uKTogWW91IHBhc3NlZCBhbiB1bmRlZmluZWQgb3IgbnVsbCBzdGF0ZSBvYmplY3Q7ICcgKyAnaW5zdGVhZCwgdXNlIGZvcmNlVXBkYXRlKCkuJykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuXG4gICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHF1ZXVlID0gaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1N0YXRlUXVldWUgfHwgKGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gW10pO1xuICAgIHF1ZXVlLnB1c2gocGFydGlhbFN0YXRlKTtcblxuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgZW5xdWV1ZUVsZW1lbnRJbnRlcm5hbDogZnVuY3Rpb24gKGludGVybmFsSW5zdGFuY2UsIG5leHRFbGVtZW50LCBuZXh0Q29udGV4dCkge1xuICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgLy8gVE9ETzogaW50cm9kdWNlIF9wZW5kaW5nQ29udGV4dCBpbnN0ZWFkIG9mIHNldHRpbmcgaXQgZGlyZWN0bHkuXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5fY29udGV4dCA9IG5leHRDb250ZXh0O1xuICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gIH0sXG5cbiAgdmFsaWRhdGVDYWxsYmFjazogZnVuY3Rpb24gKGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gICAgISghY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcyguLi4pOiBFeHBlY3RlZCB0aGUgbGFzdCBvcHRpb25hbCBgY2FsbGJhY2tgIGFyZ3VtZW50IHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsIGNhbGxlck5hbWUsIGZvcm1hdFVuZXhwZWN0ZWRBcmd1bWVudChjYWxsYmFjaykpIDogX3Byb2RJbnZhcmlhbnQoJzEyMicsIGNhbGxlck5hbWUsIGZvcm1hdFVuZXhwZWN0ZWRBcmd1bWVudChjYWxsYmFjaykpIDogdm9pZCAwO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVRdWV1ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdFVwZGF0ZVF1ZXVlLmpzXG4vLyBtb2R1bGUgaWQgPSA2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgVmlld3BvcnRNZXRyaWNzID0ge1xuXG4gIGN1cnJlbnRTY3JvbGxMZWZ0OiAwLFxuXG4gIGN1cnJlbnRTY3JvbGxUb3A6IDAsXG5cbiAgcmVmcmVzaFNjcm9sbFZhbHVlczogZnVuY3Rpb24gKHNjcm9sbFBvc2l0aW9uKSB7XG4gICAgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxMZWZ0ID0gc2Nyb2xsUG9zaXRpb24ueDtcbiAgICBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbFRvcCA9IHNjcm9sbFBvc2l0aW9uLnk7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3cG9ydE1ldHJpY3M7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvVmlld3BvcnRNZXRyaWNzLmpzXG4vLyBtb2R1bGUgaWQgPSA2OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBBY2N1bXVsYXRlcyBpdGVtcyB0aGF0IG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGludG8gdGhlIGZpcnN0IG9uZS4gVGhpc1xuICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcbiAqIEFQSSBjbGVhbm5lc3MuIFNpbmNlIGBjdXJyZW50YCBjYW4gYmUgbnVsbCBiZWZvcmUgYmVpbmcgcGFzc2VkIGluIGFuZCBub3RcbiAqIG51bGwgYWZ0ZXIgdGhpcyBmdW5jdGlvbiwgbWFrZSBzdXJlIHRvIGFzc2lnbiBpdCBiYWNrIHRvIGBjdXJyZW50YDpcbiAqXG4gKiBgYSA9IGFjY3VtdWxhdGVJbnRvKGEsIGIpO2BcbiAqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuICpcbiAqIEByZXR1cm4geyp8YXJyYXk8Kj59IEFuIGFjY3VtdWxhdGlvbiBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBhY2N1bXVsYXRlSW50byhjdXJyZW50LCBuZXh0KSB7XG4gICEobmV4dCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nKSA6IF9wcm9kSW52YXJpYW50KCczMCcpIDogdm9pZCAwO1xuXG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIC8vIEJvdGggYXJlIG5vdCBlbXB0eS4gV2FybmluZzogTmV2ZXIgY2FsbCB4LmNvbmNhdCh5KSB3aGVuIHlvdSBhcmUgbm90XG4gIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG4gIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmV4dCkpIHtcbiAgICAgIGN1cnJlbnQucHVzaC5hcHBseShjdXJyZW50LCBuZXh0KTtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgICBjdXJyZW50LnB1c2gobmV4dCk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShuZXh0KSkge1xuICAgIC8vIEEgYml0IHRvbyBkYW5nZXJvdXMgdG8gbXV0YXRlIGBuZXh0YC5cbiAgICByZXR1cm4gW2N1cnJlbnRdLmNvbmNhdChuZXh0KTtcbiAgfVxuXG4gIHJldHVybiBbY3VycmVudCwgbmV4dF07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWNjdW11bGF0ZUludG87XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvYWNjdW11bGF0ZUludG8uanNcbi8vIG1vZHVsZSBpZCA9IDcwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnIgYW4gXCJhY2N1bXVsYXRpb25cIiBvZiBpdGVtcyB3aGljaCBpcyBlaXRoZXIgYW4gQXJyYXkgb3JcbiAqIGEgc2luZ2xlIGl0ZW0uIFVzZWZ1bCB3aGVuIHBhaXJlZCB3aXRoIHRoZSBgYWNjdW11bGF0ZWAgbW9kdWxlLiBUaGlzIGlzIGFcbiAqIHNpbXBsZSB1dGlsaXR5IHRoYXQgYWxsb3dzIHVzIHRvIHJlYXNvbiBhYm91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbXMsIGJ1dFxuICogaGFuZGxpbmcgdGhlIGNhc2Ugd2hlbiB0aGVyZSBpcyBleGFjdGx5IG9uZSBpdGVtIChhbmQgd2UgZG8gbm90IG5lZWQgdG9cbiAqIGFsbG9jYXRlIGFuIGFycmF5KS5cbiAqL1xuXG5mdW5jdGlvbiBmb3JFYWNoQWNjdW11bGF0ZWQoYXJyLCBjYiwgc2NvcGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGFyci5mb3JFYWNoKGNiLCBzY29wZSk7XG4gIH0gZWxzZSBpZiAoYXJyKSB7XG4gICAgY2IuY2FsbChzY29wZSwgYXJyKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZvckVhY2hBY2N1bXVsYXRlZDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9mb3JFYWNoQWNjdW11bGF0ZWQuanNcbi8vIG1vZHVsZSBpZCA9IDcxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBjb250ZW50S2V5ID0gbnVsbDtcblxuLyoqXG4gKiBHZXRzIHRoZSBrZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50IG9uIGEgRE9NIG5vZGUuXG4gKlxuICogQHJldHVybiB7P3N0cmluZ30gS2V5IHVzZWQgdG8gYWNjZXNzIHRleHQgY29udGVudC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRUZXh0Q29udGVudEFjY2Vzc29yKCkge1xuICBpZiAoIWNvbnRlbnRLZXkgJiYgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gICAgLy8gUHJlZmVyIHRleHRDb250ZW50IHRvIGlubmVyVGV4dCBiZWNhdXNlIG1hbnkgYnJvd3NlcnMgc3VwcG9ydCBib3RoIGJ1dFxuICAgIC8vIFNWRyA8dGV4dD4gZWxlbWVudHMgZG9uJ3Qgc3VwcG9ydCBpbm5lclRleHQgZXZlbiB3aGVuIDxkaXY+IGRvZXMuXG4gICAgY29udGVudEtleSA9ICd0ZXh0Q29udGVudCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ID8gJ3RleHRDb250ZW50JyA6ICdpbm5lclRleHQnO1xuICB9XG4gIHJldHVybiBjb250ZW50S2V5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRleHRDb250ZW50QWNjZXNzb3I7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvZ2V0VGV4dENvbnRlbnRBY2Nlc3Nvci5qc1xuLy8gbW9kdWxlIGlkID0gNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKSxcbiAgICBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50Jyk7XG52YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbXB0eUNvbXBvbmVudCcpO1xudmFyIFJlYWN0SG9zdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RIb3N0Q29tcG9uZW50Jyk7XG5cbnZhciBnZXROZXh0RGVidWdJRCA9IHJlcXVpcmUoJy4vZ2V0TmV4dERlYnVnSUQnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG4vLyBUbyBhdm9pZCBhIGN5Y2xpYyBkZXBlbmRlbmN5LCB3ZSBjcmVhdGUgdGhlIGZpbmFsIGNsYXNzIGluIHRoaXMgbW9kdWxlXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgdGhpcy5jb25zdHJ1Y3QoZWxlbWVudCk7XG59O1xuX2Fzc2lnbihSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIucHJvdG90eXBlLCBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCwge1xuICBfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDogaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudFxufSk7XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikge1xuICBpZiAob3duZXIpIHtcbiAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSB0eXBlIHJlZmVyZW5jZSBpcyBhIGtub3duIGludGVybmFsIHR5cGUuIEkuZS4gbm90IGEgdXNlclxuICogcHJvdmlkZWQgY29tcG9zaXRlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHlwZVxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIHRoaXMgaXMgYSB2YWxpZCBpbnRlcm5hbCB0eXBlLlxuICovXG5mdW5jdGlvbiBpc0ludGVybmFsQ29tcG9uZW50VHlwZSh0eXBlKSB7XG4gIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuLyoqXG4gKiBHaXZlbiBhIFJlYWN0Tm9kZSwgY3JlYXRlIGFuIGluc3RhbmNlIHRoYXQgd2lsbCBhY3R1YWxseSBiZSBtb3VudGVkLlxuICpcbiAqIEBwYXJhbSB7UmVhY3ROb2RlfSBub2RlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHNob3VsZEhhdmVEZWJ1Z0lEXG4gKiBAcmV0dXJuIHtvYmplY3R9IEEgbmV3IGluc3RhbmNlIG9mIHRoZSBlbGVtZW50J3MgY29uc3RydWN0b3IuXG4gKiBAcHJvdGVjdGVkXG4gKi9cbmZ1bmN0aW9uIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobm9kZSwgc2hvdWxkSGF2ZURlYnVnSUQpIHtcbiAgdmFyIGluc3RhbmNlO1xuXG4gIGlmIChub2RlID09PSBudWxsIHx8IG5vZGUgPT09IGZhbHNlKSB7XG4gICAgaW5zdGFuY2UgPSBSZWFjdEVtcHR5Q29tcG9uZW50LmNyZWF0ZShpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgZWxlbWVudCA9IG5vZGU7XG4gICAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG4gICAgaWYgKHR5cGVvZiB0eXBlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFyIGluZm8gPSAnJztcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwgJiYgT2JqZWN0LmtleXModHlwZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyAnaXRcXCdzIGRlZmluZWQgaW4uJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5mbyArPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oZWxlbWVudC5fb3duZXIpO1xuICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VsZW1lbnQgdHlwZSBpcyBpbnZhbGlkOiBleHBlY3RlZCBhIHN0cmluZyAoZm9yIGJ1aWx0LWluIGNvbXBvbmVudHMpIG9yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgY29tcG9uZW50cykgYnV0IGdvdDogJXMuJXMnLCB0eXBlID09IG51bGwgPyB0eXBlIDogdHlwZW9mIHR5cGUsIGluZm8pIDogX3Byb2RJbnZhcmlhbnQoJzEzMCcsIHR5cGUgPT0gbnVsbCA/IHR5cGUgOiB0eXBlb2YgdHlwZSwgaW5mbykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHN0cmluZyB2YWx1ZXNcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGluc3RhbmNlID0gUmVhY3RIb3N0Q29tcG9uZW50LmNyZWF0ZUludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAoaXNJbnRlcm5hbENvbXBvbmVudFR5cGUoZWxlbWVudC50eXBlKSkge1xuICAgICAgLy8gVGhpcyBpcyB0ZW1wb3JhcmlseSBhdmFpbGFibGUgZm9yIGN1c3RvbSBjb21wb25lbnRzIHRoYXQgYXJlIG5vdCBzdHJpbmdcbiAgICAgIC8vIHJlcHJlc2VudGF0aW9ucy4gSS5lLiBBUlQuIE9uY2UgdGhvc2UgYXJlIHVwZGF0ZWQgdG8gdXNlIHRoZSBzdHJpbmdcbiAgICAgIC8vIHJlcHJlc2VudGF0aW9uLCB3ZSBjYW4gZHJvcCB0aGlzIGNvZGUgcGF0aC5cbiAgICAgIGluc3RhbmNlID0gbmV3IGVsZW1lbnQudHlwZShlbGVtZW50KTtcblxuICAgICAgLy8gV2UgcmVuYW1lZCB0aGlzLiBBbGxvdyB0aGUgb2xkIG5hbWUgZm9yIGNvbXBhdC4gOihcbiAgICAgIGlmICghaW5zdGFuY2UuZ2V0SG9zdE5vZGUpIHtcbiAgICAgICAgaW5zdGFuY2UuZ2V0SG9zdE5vZGUgPSBpbnN0YW5jZS5nZXROYXRpdmVOb2RlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbnN0YW5jZSA9IG5ldyBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIoZWxlbWVudCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygbm9kZSA9PT0gJ251bWJlcicpIHtcbiAgICBpbnN0YW5jZSA9IFJlYWN0SG9zdENvbXBvbmVudC5jcmVhdGVJbnN0YW5jZUZvclRleHQobm9kZSk7XG4gIH0gZWxzZSB7XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VuY291bnRlcmVkIGludmFsaWQgUmVhY3Qgbm9kZSBvZiB0eXBlICVzJywgdHlwZW9mIG5vZGUpIDogX3Byb2RJbnZhcmlhbnQoJzEzMScsIHR5cGVvZiBub2RlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3RhbmNlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5nZXRIb3N0Tm9kZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5zdGFuY2UudW5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJywgJ09ubHkgUmVhY3QgQ29tcG9uZW50cyBjYW4gYmUgbW91bnRlZC4nKSA6IHZvaWQgMDtcbiAgfVxuXG4gIC8vIFRoZXNlIHR3byBmaWVsZHMgYXJlIHVzZWQgYnkgdGhlIERPTSBhbmQgQVJUIGRpZmZpbmcgYWxnb3JpdGhtc1xuICAvLyByZXNwZWN0aXZlbHkuIEluc3RlYWQgb2YgdXNpbmcgZXhwYW5kb3Mgb24gY29tcG9uZW50cywgd2Ugc2hvdWxkIGJlXG4gIC8vIHN0b3JpbmcgdGhlIHN0YXRlIG5lZWRlZCBieSB0aGUgZGlmZmluZyBhbGdvcml0aG1zIGVsc2V3aGVyZS5cbiAgaW5zdGFuY2UuX21vdW50SW5kZXggPSAwO1xuICBpbnN0YW5jZS5fbW91bnRJbWFnZSA9IG51bGw7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpbnN0YW5jZS5fZGVidWdJRCA9IHNob3VsZEhhdmVEZWJ1Z0lEID8gZ2V0TmV4dERlYnVnSUQoKSA6IDA7XG4gIH1cblxuICAvLyBJbnRlcm5hbCBpbnN0YW5jZXMgc2hvdWxkIGZ1bGx5IGNvbnN0cnVjdGVkIGF0IHRoaXMgcG9pbnQsIHNvIHRoZXkgc2hvdWxkXG4gIC8vIG5vdCBnZXQgYW55IG5ldyBmaWVsZHMgYWRkZWQgdG8gdGhlbSBhdCB0aGlzIHBvaW50LlxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyhpbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudC5qc1xuLy8gbW9kdWxlIGlkID0gNzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGhlLWlucHV0LWVsZW1lbnQuaHRtbCNpbnB1dC10eXBlLWF0dHItc3VtbWFyeVxuICovXG5cbnZhciBzdXBwb3J0ZWRJbnB1dFR5cGVzID0ge1xuICAnY29sb3InOiB0cnVlLFxuICAnZGF0ZSc6IHRydWUsXG4gICdkYXRldGltZSc6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG4gICdlbWFpbCc6IHRydWUsXG4gICdtb250aCc6IHRydWUsXG4gICdudW1iZXInOiB0cnVlLFxuICAncGFzc3dvcmQnOiB0cnVlLFxuICAncmFuZ2UnOiB0cnVlLFxuICAnc2VhcmNoJzogdHJ1ZSxcbiAgJ3RlbCc6IHRydWUsXG4gICd0ZXh0JzogdHJ1ZSxcbiAgJ3RpbWUnOiB0cnVlLFxuICAndXJsJzogdHJ1ZSxcbiAgJ3dlZWsnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ2lucHV0Jykge1xuICAgIHJldHVybiAhIXN1cHBvcnRlZElucHV0VHlwZXNbZWxlbS50eXBlXTtcbiAgfVxuXG4gIGlmIChub2RlTmFtZSA9PT0gJ3RleHRhcmVhJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dElucHV0RWxlbWVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9pc1RleHRJbnB1dEVsZW1lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXInKTtcbnZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKCcuL3NldElubmVySFRNTCcpO1xuXG4vKipcbiAqIFNldCB0aGUgdGV4dENvbnRlbnQgcHJvcGVydHkgb2YgYSBub2RlLCBlbnN1cmluZyB0aGF0IHdoaXRlc3BhY2UgaXMgcHJlc2VydmVkXG4gKiBldmVuIGluIElFOC4gaW5uZXJUZXh0IGlzIGEgcG9vciBzdWJzdGl0dXRlIGZvciB0ZXh0Q29udGVudCBhbmQsIGFtb25nIG1hbnlcbiAqIGlzc3VlcywgaW5zZXJ0cyA8YnI+IGluc3RlYWQgb2YgdGhlIGxpdGVyYWwgbmV3bGluZSBjaGFycy4gaW5uZXJIVE1MIGJlaGF2ZXNcbiAqIGFzIGl0IHNob3VsZC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24gKG5vZGUsIHRleHQpIHtcbiAgaWYgKHRleHQpIHtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblxuICAgIGlmIChmaXJzdENoaWxkICYmIGZpcnN0Q2hpbGQgPT09IG5vZGUubGFzdENoaWxkICYmIGZpcnN0Q2hpbGQubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIGZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdGV4dDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59O1xuXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIGlmICghKCd0ZXh0Q29udGVudCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSkge1xuICAgIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24gKG5vZGUsIHRleHQpIHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAzKSB7XG4gICAgICAgIG5vZGUubm9kZVZhbHVlID0gdGV4dDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2V0SW5uZXJIVE1MKG5vZGUsIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0ZXh0KSk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldFRleHRDb250ZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL3NldFRleHRDb250ZW50LmpzXG4vLyBtb2R1bGUgaWQgPSA3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdpdmVuIGEgYHByZXZFbGVtZW50YCBhbmQgYG5leHRFbGVtZW50YCwgZGV0ZXJtaW5lcyBpZiB0aGUgZXhpc3RpbmdcbiAqIGluc3RhbmNlIHNob3VsZCBiZSB1cGRhdGVkIGFzIG9wcG9zZWQgdG8gYmVpbmcgZGVzdHJveWVkIG9yIHJlcGxhY2VkIGJ5IGEgbmV3XG4gKiBpbnN0YW5jZS4gQm90aCBhcmd1bWVudHMgYXJlIGVsZW1lbnRzLiBUaGlzIGVuc3VyZXMgdGhhdCB0aGlzIGxvZ2ljIGNhblxuICogb3BlcmF0ZSBvbiBzdGF0ZWxlc3MgdHJlZXMgd2l0aG91dCBhbnkgYmFja2luZyBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IHByZXZFbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG5leHRFbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBleGlzdGluZyBpbnN0YW5jZSBzaG91bGQgYmUgdXBkYXRlZC5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgdmFyIHByZXZFbXB0eSA9IHByZXZFbGVtZW50ID09PSBudWxsIHx8IHByZXZFbGVtZW50ID09PSBmYWxzZTtcbiAgdmFyIG5leHRFbXB0eSA9IG5leHRFbGVtZW50ID09PSBudWxsIHx8IG5leHRFbGVtZW50ID09PSBmYWxzZTtcbiAgaWYgKHByZXZFbXB0eSB8fCBuZXh0RW1wdHkpIHtcbiAgICByZXR1cm4gcHJldkVtcHR5ID09PSBuZXh0RW1wdHk7XG4gIH1cblxuICB2YXIgcHJldlR5cGUgPSB0eXBlb2YgcHJldkVsZW1lbnQ7XG4gIHZhciBuZXh0VHlwZSA9IHR5cGVvZiBuZXh0RWxlbWVudDtcbiAgaWYgKHByZXZUeXBlID09PSAnc3RyaW5nJyB8fCBwcmV2VHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV4dFR5cGUgPT09ICdzdHJpbmcnIHx8IG5leHRUeXBlID09PSAnbnVtYmVyJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV4dFR5cGUgPT09ICdvYmplY3QnICYmIHByZXZFbGVtZW50LnR5cGUgPT09IG5leHRFbGVtZW50LnR5cGUgJiYgcHJldkVsZW1lbnQua2V5ID09PSBuZXh0RWxlbWVudC5rZXk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC5qc1xuLy8gbW9kdWxlIGlkID0gNzZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRTeW1ib2wnKTtcblxudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKCcuL2dldEl0ZXJhdG9yRm4nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBLZXlFc2NhcGVVdGlscyA9IHJlcXVpcmUoJy4vS2V5RXNjYXBlVXRpbHMnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgU0VQQVJBVE9SID0gJy4nO1xudmFyIFNVQlNFUEFSQVRPUiA9ICc6JztcblxuLyoqXG4gKiBUaGlzIGlzIGlubGluZWQgZnJvbSBSZWFjdEVsZW1lbnQgc2luY2UgdGhpcyBmaWxlIGlzIHNoYXJlZCBiZXR3ZWVuXG4gKiBpc29tb3JwaGljIGFuZCByZW5kZXJlcnMuIFdlIGNvdWxkIGV4dHJhY3QgdGhpcyB0byBhXG4gKlxuICovXG5cbi8qKlxuICogVE9ETzogVGVzdCB0aGF0IGEgc2luZ2xlIGNoaWxkIGFuZCBhbiBhcnJheSB3aXRoIG9uZSBpdGVtIGhhdmUgdGhlIHNhbWUga2V5XG4gKiBwYXR0ZXJuLlxuICovXG5cbnZhciBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBrZXkgc3RyaW5nIHRoYXQgaWRlbnRpZmllcyBhIGNvbXBvbmVudCB3aXRoaW4gYSBzZXQuXG4gKlxuICogQHBhcmFtIHsqfSBjb21wb25lbnQgQSBjb21wb25lbnQgdGhhdCBjb3VsZCBjb250YWluIGEgbWFudWFsIGtleS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCB0aGF0IGlzIHVzZWQgaWYgYSBtYW51YWwga2V5IGlzIG5vdCBwcm92aWRlZC5cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9uZW50S2V5KGNvbXBvbmVudCwgaW5kZXgpIHtcbiAgLy8gRG8gc29tZSB0eXBlY2hlY2tpbmcgaGVyZSBzaW5jZSB3ZSBjYWxsIHRoaXMgYmxpbmRseS4gV2Ugd2FudCB0byBlbnN1cmVcbiAgLy8gdGhhdCB3ZSBkb24ndCBibG9jayBwb3RlbnRpYWwgZnV0dXJlIEVTIEFQSXMuXG4gIGlmIChjb21wb25lbnQgJiYgdHlwZW9mIGNvbXBvbmVudCA9PT0gJ29iamVjdCcgJiYgY29tcG9uZW50LmtleSAhPSBudWxsKSB7XG4gICAgLy8gRXhwbGljaXQga2V5XG4gICAgcmV0dXJuIEtleUVzY2FwZVV0aWxzLmVzY2FwZShjb21wb25lbnQua2V5KTtcbiAgfVxuICAvLyBJbXBsaWNpdCBrZXkgZGV0ZXJtaW5lZCBieSB0aGUgaW5kZXggaW4gdGhlIHNldFxuICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHshc3RyaW5nfSBuYW1lU29GYXIgTmFtZSBvZiB0aGUga2V5IHBhdGggc28gZmFyLlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIENhbGxiYWNrIHRvIGludm9rZSB3aXRoIGVhY2ggY2hpbGQgZm91bmQuXG4gKiBAcGFyYW0gez8qfSB0cmF2ZXJzZUNvbnRleHQgVXNlZCB0byBwYXNzIGluZm9ybWF0aW9uIHRocm91Z2hvdXQgdGhlIHRyYXZlcnNhbFxuICogcHJvY2Vzcy5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgbmFtZVNvRmFyLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICBpZiAoY2hpbGRyZW4gPT09IG51bGwgfHwgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicgfHxcbiAgLy8gVGhlIGZvbGxvd2luZyBpcyBpbmxpbmVkIGZyb20gUmVhY3RFbGVtZW50LiBUaGlzIG1lYW5zIHdlIGNhbiBvcHRpbWl6ZVxuICAvLyBzb21lIGNoZWNrcy4gUmVhY3QgRmliZXIgYWxzbyBpbmxpbmVzIHRoaXMgbG9naWMgZm9yIHNpbWlsYXIgcHVycG9zZXMuXG4gIHR5cGUgPT09ICdvYmplY3QnICYmIGNoaWxkcmVuLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICBjYWxsYmFjayh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkcmVuLFxuICAgIC8vIElmIGl0J3MgdGhlIG9ubHkgY2hpbGQsIHRyZWF0IHRoZSBuYW1lIGFzIGlmIGl0IHdhcyB3cmFwcGVkIGluIGFuIGFycmF5XG4gICAgLy8gc28gdGhhdCBpdCdzIGNvbnNpc3RlbnQgaWYgdGhlIG51bWJlciBvZiBjaGlsZHJlbiBncm93cy5cbiAgICBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkcmVuLCAwKSA6IG5hbWVTb0Zhcik7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICB2YXIgY2hpbGQ7XG4gIHZhciBuZXh0TmFtZTtcbiAgdmFyIHN1YnRyZWVDb3VudCA9IDA7IC8vIENvdW50IG9mIGNoaWxkcmVuIGZvdW5kIGluIHRoZSBjdXJyZW50IHN1YnRyZWUuXG4gIHZhciBuZXh0TmFtZVByZWZpeCA9IG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgOiBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1I7XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGkpO1xuICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihjaGlsZHJlbik7XG4gICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBjaGlsZHJlbi5lbnRyaWVzKSB7XG4gICAgICAgIHZhciBpaSA9IDA7XG4gICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICBjaGlsZCA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG1hcHNBc0NoaWxkcmVuQWRkZW5kdW0gPSAnJztcbiAgICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgICAgdmFyIG1hcHNBc0NoaWxkcmVuT3duZXJOYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgICBpZiAobWFwc0FzQ2hpbGRyZW5Pd25lck5hbWUpIHtcbiAgICAgICAgICAgICAgbWFwc0FzQ2hpbGRyZW5BZGRlbmR1bSA9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBtYXBzQXNDaGlsZHJlbk93bmVyTmFtZSArICdgLic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRpZFdhcm5BYm91dE1hcHMsICdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCB5ZXQgZnVsbHkgc3VwcG9ydGVkLiBJdCBpcyBhbiAnICsgJ2V4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWlnaHQgYmUgcmVtb3ZlZC4gQ29udmVydCBpdCB0byBhICcgKyAnc2VxdWVuY2UgLyBpdGVyYWJsZSBvZiBrZXllZCBSZWFjdEVsZW1lbnRzIGluc3RlYWQuJXMnLCBtYXBzQXNDaGlsZHJlbkFkZGVuZHVtKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJdGVyYXRvciB3aWxsIHByb3ZpZGUgZW50cnkgW2ssdl0gdHVwbGVzIHJhdGhlciB0aGFuIHZhbHVlcy5cbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICBjaGlsZCA9IGVudHJ5WzFdO1xuICAgICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIEtleUVzY2FwZVV0aWxzLmVzY2FwZShlbnRyeVswXSkgKyBTVUJTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIDApO1xuICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFyIGFkZGVuZHVtID0gJyc7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgJyArICdSZWFjdCBhZGQtb25zLic7XG4gICAgICAgIGlmIChjaGlsZHJlbi5faXNSZWFjdEVsZW1lbnQpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgSXQgbG9va3MgbGlrZSB5b3VcXCdyZSB1c2luZyBhbiBlbGVtZW50IGNyZWF0ZWQgYnkgYSBkaWZmZXJlbnQgJyArICd2ZXJzaW9uIG9mIFJlYWN0LiBNYWtlIHN1cmUgdG8gdXNlIG9ubHkgb25lIGNvcHkgb2YgUmVhY3QuJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgIGFkZGVuZHVtICs9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiAlcykuJXMnLCBjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcsIGFkZGVuZHVtKSA6IF9wcm9kSW52YXJpYW50KCczMScsIGNoaWxkcmVuU3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJyA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oJywgJykgKyAnfScgOiBjaGlsZHJlblN0cmluZywgYWRkZW5kdW0pIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJ0cmVlQ291bnQ7XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCwgYnV0XG4gKiBtaWdodCBhbHNvIGJlIHNwZWNpZmllZCB0aHJvdWdoIGF0dHJpYnV0ZXM6XG4gKlxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuLCAuLi4pYFxuICogLSBgdHJhdmVyc2VBbGxDaGlsZHJlbih0aGlzLnByb3BzLmxlZnRQYW5lbENoaWxkcmVuLCAuLi4pYFxuICpcbiAqIFRoZSBgdHJhdmVyc2VDb250ZXh0YCBpcyBhbiBvcHRpb25hbCBhcmd1bWVudCB0aGF0IGlzIHBhc3NlZCB0aHJvdWdoIHRoZVxuICogZW50aXJlIHRyYXZlcnNhbC4gSXQgY2FuIGJlIHVzZWQgdG8gc3RvcmUgYWNjdW11bGF0aW9ucyBvciBhbnl0aGluZyBlbHNlIHRoYXRcbiAqIHRoZSBjYWxsYmFjayBtaWdodCBmaW5kIHJlbGV2YW50LlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgb2JqZWN0LlxuICogQHBhcmFtIHshZnVuY3Rpb259IGNhbGxiYWNrIFRvIGludm9rZSB1cG9uIHRyYXZlcnNpbmcgZWFjaCBjaGlsZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IGZvciB0cmF2ZXJzYWwuXG4gKiBAcmV0dXJuIHshbnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuIGluIHRoaXMgc3VidHJlZS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCAnJywgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhdmVyc2VBbGxDaGlsZHJlbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi90cmF2ZXJzZUFsbENoaWxkcmVuLmpzXG4vLyBtb2R1bGUgaWQgPSA3N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudCB0eXBlLiBJZiB0aGVyZSBpcyBubyBuYXRpdmUgU3ltYm9sXG4vLyBub3IgcG9seWZpbGwsIHRoZW4gYSBwbGFpbiBudW1iZXIgaXMgdXNlZCBmb3IgcGVyZm9ybWFuY2UuXG5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbFsnZm9yJ10gJiYgU3ltYm9sWydmb3InXSgncmVhY3QuZWxlbWVudCcpIHx8IDB4ZWFjNztcblxubW9kdWxlLmV4cG9ydHMgPSBSRUFDVF9FTEVNRU5UX1RZUEU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRTeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDc4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4vKipcbiAqIFJlYWN0RWxlbWVudFZhbGlkYXRvciBwcm92aWRlcyBhIHdyYXBwZXIgYXJvdW5kIGEgZWxlbWVudCBmYWN0b3J5XG4gKiB3aGljaCB2YWxpZGF0ZXMgdGhlIHByb3BzIHBhc3NlZCB0byB0aGUgZWxlbWVudC4gVGhpcyBpcyBpbnRlbmRlZCB0byBiZVxuICogdXNlZCBvbmx5IGluIERFViBhbmQgY291bGQgYmUgcmVwbGFjZWQgYnkgYSBzdGF0aWMgdHlwZSBjaGVja2VyIGZvciBsYW5ndWFnZXNcbiAqIHRoYXQgc3VwcG9ydCBpdC5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdENvbXBvbmVudFRyZWVIb29rID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudFRyZWVIb29rJyk7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcblxudmFyIGNoZWNrUmVhY3RUeXBlU3BlYyA9IHJlcXVpcmUoJy4vY2hlY2tSZWFjdFR5cGVTcGVjJyk7XG5cbnZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vY2FuRGVmaW5lUHJvcGVydHknKTtcbnZhciBnZXRJdGVyYXRvckZuID0gcmVxdWlyZSgnLi9nZXRJdGVyYXRvckZuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxuZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkge1xuICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG4gIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cbnZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fTtcblxuZnVuY3Rpb24gZ2V0Q3VycmVudENvbXBvbmVudEVycm9ySW5mbyhwYXJlbnRUeXBlKSB7XG4gIHZhciBpbmZvID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG5cbiAgaWYgKCFpbmZvKSB7XG4gICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG4gICAgaWYgKHBhcmVudE5hbWUpIHtcbiAgICAgIGluZm8gPSAnIENoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPCcgKyBwYXJlbnROYW1lICsgJz4uJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGluZm87XG59XG5cbi8qKlxuICogV2FybiBpZiB0aGUgZWxlbWVudCBkb2Vzbid0IGhhdmUgYW4gZXhwbGljaXQga2V5IGFzc2lnbmVkIHRvIGl0LlxuICogVGhpcyBlbGVtZW50IGlzIGluIGFuIGFycmF5LiBUaGUgYXJyYXkgY291bGQgZ3JvdyBhbmQgc2hyaW5rIG9yIGJlXG4gKiByZW9yZGVyZWQuIEFsbCBjaGlsZHJlbiB0aGF0IGhhdmVuJ3QgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcmUgcmVxdWlyZWQgdG9cbiAqIGhhdmUgYSBcImtleVwiIHByb3BlcnR5IGFzc2lnbmVkIHRvIGl0LiBFcnJvciBzdGF0dXNlcyBhcmUgY2FjaGVkIHNvIGEgd2FybmluZ1xuICogd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudCBFbGVtZW50IHRoYXQgcmVxdWlyZXMgYSBrZXkuXG4gKiBAcGFyYW0geyp9IHBhcmVudFR5cGUgZWxlbWVudCdzIHBhcmVudCdzIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICBpZiAoIWVsZW1lbnQuX3N0b3JlIHx8IGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCB8fCBlbGVtZW50LmtleSAhPSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG5cbiAgdmFyIG1lbW9pemVyID0gb3duZXJIYXNLZXlVc2VXYXJuaW5nLnVuaXF1ZUtleSB8fCAob3duZXJIYXNLZXlVc2VXYXJuaW5nLnVuaXF1ZUtleSA9IHt9KTtcblxuICB2YXIgY3VycmVudENvbXBvbmVudEVycm9ySW5mbyA9IGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8ocGFyZW50VHlwZSk7XG4gIGlmIChtZW1vaXplcltjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSkge1xuICAgIHJldHVybjtcbiAgfVxuICBtZW1vaXplcltjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7XG5cbiAgLy8gVXN1YWxseSB0aGUgY3VycmVudCBvd25lciBpcyB0aGUgb2ZmZW5kZXIsIGJ1dCBpZiBpdCBhY2NlcHRzIGNoaWxkcmVuIGFzIGFcbiAgLy8gcHJvcGVydHksIGl0IG1heSBiZSB0aGUgY3JlYXRvciBvZiB0aGUgY2hpbGQgdGhhdCdzIHJlc3BvbnNpYmxlIGZvclxuICAvLyBhc3NpZ25pbmcgaXQgYSBrZXkuXG4gIHZhciBjaGlsZE93bmVyID0gJyc7XG4gIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuX293bmVyICYmIGVsZW1lbnQuX293bmVyICE9PSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgLy8gR2l2ZSB0aGUgY29tcG9uZW50IHRoYXQgb3JpZ2luYWxseSBjcmVhdGVkIHRoaXMgY2hpbGQuXG4gICAgY2hpbGRPd25lciA9ICcgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gJyArIGVsZW1lbnQuX293bmVyLmdldE5hbWUoKSArICcuJztcbiAgfVxuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyArICclcyVzIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4lcycsIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8sIGNoaWxkT3duZXIsIFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0Q3VycmVudFN0YWNrQWRkZW5kdW0oZWxlbWVudCkpIDogdm9pZCAwO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IGV2ZXJ5IGVsZW1lbnQgZWl0aGVyIGlzIHBhc3NlZCBpbiBhIHN0YXRpYyBsb2NhdGlvbiwgaW4gYW5cbiAqIGFycmF5IHdpdGggYW4gZXhwbGljaXQga2V5cyBwcm9wZXJ0eSBkZWZpbmVkLCBvciBpbiBhbiBvYmplY3QgbGl0ZXJhbFxuICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZSBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBub2RlJ3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuZnVuY3Rpb24gdmFsaWRhdGVDaGlsZEtleXMobm9kZSwgcGFyZW50VHlwZSkge1xuICBpZiAodHlwZW9mIG5vZGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5vZGUpO1xuICAgIC8vIEVudHJ5IGl0ZXJhdG9ycyBwcm92aWRlIGltcGxpY2l0IGtleXMuXG4gICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBub2RlLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2l2ZW4gYW4gZWxlbWVudCwgdmFsaWRhdGUgdGhhdCBpdHMgcHJvcHMgZm9sbG93IHRoZSBwcm9wVHlwZXMgZGVmaW5pdGlvbixcbiAqIHByb3ZpZGVkIGJ5IHRoZSB0eXBlLlxuICpcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpIHtcbiAgdmFyIGNvbXBvbmVudENsYXNzID0gZWxlbWVudC50eXBlO1xuICBpZiAodHlwZW9mIGNvbXBvbmVudENsYXNzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBuYW1lID0gY29tcG9uZW50Q2xhc3MuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Q2xhc3MubmFtZTtcbiAgaWYgKGNvbXBvbmVudENsYXNzLnByb3BUeXBlcykge1xuICAgIGNoZWNrUmVhY3RUeXBlU3BlYyhjb21wb25lbnRDbGFzcy5wcm9wVHlwZXMsIGVsZW1lbnQucHJvcHMsICdwcm9wJywgbmFtZSwgZWxlbWVudCwgbnVsbCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXREZWZhdWx0UHJvcHMgaXMgb25seSB1c2VkIG9uIGNsYXNzaWMgUmVhY3QuY3JlYXRlQ2xhc3MgJyArICdkZWZpbml0aW9ucy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IG5hbWVkIGBkZWZhdWx0UHJvcHNgIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gIH1cbn1cblxudmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHtcblxuICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbiAodHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgdmFyIHZhbGlkVHlwZSA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAvLyBXZSB3YXJuIGluIHRoaXMgY2FzZSBidXQgZG9uJ3QgdGhyb3cuIFdlIGV4cGVjdCB0aGUgZWxlbWVudCBjcmVhdGlvbiB0b1xuICAgIC8vIHN1Y2NlZWQgYW5kIHRoZXJlIHdpbGwgbGlrZWx5IGJlIGVycm9ycyBpbiByZW5kZXIuXG4gICAgaWYgKCF2YWxpZFR5cGUpIHtcbiAgICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGluZm8gPSAnJztcbiAgICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyh0eXBlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpbmZvICs9ICcgWW91IGxpa2VseSBmb3Jnb3QgdG8gZXhwb3J0IHlvdXIgY29tcG9uZW50IGZyb20gdGhlIGZpbGUgJyArICdpdFxcJ3MgZGVmaW5lZCBpbi4nO1xuICAgICAgICB9XG4gICAgICAgIGluZm8gKz0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3QuY3JlYXRlRWxlbWVudDogdHlwZSBpcyBpbnZhbGlkIC0tIGV4cGVjdGVkIGEgc3RyaW5nIChmb3IgJyArICdidWlsdC1pbiBjb21wb25lbnRzKSBvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlICcgKyAnY29tcG9uZW50cykgYnV0IGdvdDogJXMuJXMnLCB0eXBlID09IG51bGwgPyB0eXBlIDogdHlwZW9mIHR5cGUsIGluZm8pIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIC8vIFRoZSByZXN1bHQgY2FuIGJlIG51bGxpc2ggaWYgYSBtb2NrIG9yIGEgY3VzdG9tIGZ1bmN0aW9uIGlzIHVzZWQuXG4gICAgLy8gVE9ETzogRHJvcCB0aGlzIHdoZW4gdGhlc2UgYXJlIG5vIGxvbmdlciBhbGxvd2VkIGFzIHRoZSB0eXBlIGFyZ3VtZW50LlxuICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIC8vIFNraXAga2V5IHdhcm5pbmcgaWYgdGhlIHR5cGUgaXNuJ3QgdmFsaWQgc2luY2Ugb3VyIGtleSB2YWxpZGF0aW9uIGxvZ2ljXG4gICAgLy8gZG9lc24ndCBleHBlY3QgYSBub24tc3RyaW5nL2Z1bmN0aW9uIHR5cGUgYW5kIGNhbiB0aHJvdyBjb25mdXNpbmcgZXJyb3JzLlxuICAgIC8vIFdlIGRvbid0IHdhbnQgZXhjZXB0aW9uIGJlaGF2aW9yIHRvIGRpZmZlciBiZXR3ZWVuIGRldiBhbmQgcHJvZC5cbiAgICAvLyAoUmVuZGVyaW5nIHdpbGwgdGhyb3cgd2l0aCBhIGhlbHBmdWwgbWVzc2FnZSBhbmQgYXMgc29vbiBhcyB0aGUgdHlwZSBpc1xuICAgIC8vIGZpeGVkLCB0aGUga2V5IHdhcm5pbmdzIHdpbGwgYXBwZWFyLilcbiAgICBpZiAodmFsaWRUeXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIHR5cGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpO1xuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0sXG5cbiAgY3JlYXRlRmFjdG9yeTogZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgdmFsaWRhdGVkRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG4gICAgLy8gTGVnYWN5IGhvb2sgVE9ETzogV2FybiBpZiB0aGlzIGlzIGFjY2Vzc2VkXG4gICAgdmFsaWRhdGVkRmFjdG9yeS50eXBlID0gdHlwZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHZhbGlkYXRlZEZhY3RvcnksICd0eXBlJywge1xuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdGYWN0b3J5LnR5cGUgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHRoZSBjbGFzcyBkaXJlY3RseSAnICsgJ2JlZm9yZSBwYXNzaW5nIGl0IHRvIGNyZWF0ZUZhY3RvcnkuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3R5cGUnLCB7XG4gICAgICAgICAgICAgIHZhbHVlOiB0eXBlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbGlkYXRlZEZhY3Rvcnk7XG4gIH0sXG5cbiAgY2xvbmVFbGVtZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgdmFyIG5ld0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgbmV3RWxlbWVudC50eXBlKTtcbiAgICB9XG4gICAgdmFsaWRhdGVQcm9wVHlwZXMobmV3RWxlbWVudCk7XG4gICAgcmV0dXJuIG5ld0VsZW1lbnQ7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3I7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdEVsZW1lbnRWYWxpZGF0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzXG4vLyBtb2R1bGUgaWQgPSA4MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBTcXVhZCwgU3F1YWRNZW1iZXIgfSBmcm9tICcuL1NxdWFkJztcclxuXHJcbi8vVE9ETzogZW5jb2Rpbmcgd2FzIFVURi0xNiBMRSAtLT4gY2hhbmdlZCB0byBVVEYtOCB3aXRob3V0IEJPTVxyXG52YXIgc3F1YWQ6IFNxdWFkID0gcmVxdWlyZSgnLi8uLi9kYXRhLzU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NkAxNDkwMzg2MTM1Lmpzb24nKTtcclxuXHJcblxyXG52YXIgbmV4dFBlcnNvbklkID0gMDtcclxudmFyIGZpcnN0TmFtZXM6IGFueSA9IFtdXHJcbnZhciBsYXN0TmFtZXM6IGFueSA9IFtdXHJcbnZhciBsb3JlbUlwc3VtOiBhbnkgPSBbXTtcclxudmFyIHN0YXR1c2VzOiBhbnkgPSBbXTtcclxuXHJcbnZhciBwb3N0ZXJXaWR0aCA9IDQwMDtcclxudmFyIHBvc3RlckhlaWdodCA9IDQwMDtcclxudmFyIF9jYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG5mdW5jdGlvbiBtYWtlUG9zdGVyKGNvbG9yOiBhbnkpIHtcclxuICAgIGlmICghX2NhbnZhcykge1xyXG4gICAgICAgIF9jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xyXG4gICAgICAgIF9jYW52YXMud2lkdGggPSBwb3N0ZXJXaWR0aDtcclxuICAgICAgICBfY2FudmFzLmhlaWdodCA9IHBvc3RlckhlaWdodDtcclxuICAgIH1cclxuICAgIHZhciBjdHh0ID0gX2NhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICBjdHh0LmZpbGxTdHlsZSA9IGNvbG9yO1xyXG4gICAgY3R4dC5maWxsUmVjdCgwLCAwLCBwb3N0ZXJXaWR0aCwgcG9zdGVySGVpZ2h0KTtcclxuICAgIHJldHVybiBfY2FudmFzLnRvRGF0YVVSTCgpO1xyXG59XHJcblxyXG52YXIgcG9zdGVyQ29sb3JzID0gW1xyXG4gICAgWzY4LCAzNCwgODddLCBbMTAwLCA2NiwgMTE5XSwgWzEzMiwgOTgsIDE1MV0sXHJcbiAgICBbMTY0LCAxNjIsIDE2NV0sIFsxOTYsIDE5NCwgMTk3XSwgWzIyOCwgMjI2LCAyMjldLFxyXG4gICAgWzIyMCwgNzcsIDZdLCBbMjUyLCAxMDksIDM4XSwgWzI1NSwgMTQxLCA3MF1cclxuXTtcclxudmFyIHBvc3RlcnMgPSBwb3N0ZXJDb2xvcnMubWFwKGZ1bmN0aW9uIChjb2xvcikge1xyXG4gICAgcmV0dXJuIG1ha2VQb3N0ZXIoXCJyZ2IoXCIgKyBjb2xvci5qb2luKFwiLCBcIikgKyBcIilcIik7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gcmFuZG9tSW50KGZpcnN0OiBhbnksIGxhc3Q6IGFueSkge1xyXG4gICAgcmV0dXJuIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIChsYXN0IC0gZmlyc3QpKSArIGZpcnN0O1xyXG59XHJcblxyXG5mdW5jdGlvbiByYW5kb21FbGVtZW50KGFycmF5OiBBcnJheTxhbnk+KSB7XHJcbiAgICByZXR1cm4gYXJyYXlbcmFuZG9tSW50KDAsIGFycmF5Lmxlbmd0aCAtIDEpXTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuQXJyYXkobWluTGVuZ3RoOiBhbnksIG1heExlbmd0aDogYW55LCBnZW5FbGVtZW50OiBhbnkpIHtcclxuICAgIHZhciBsZW4gPSByYW5kb21JbnQobWluTGVuZ3RoLCBtYXhMZW5ndGgpO1xyXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShsZW4pO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIHJlc3VsdFtpXSA9IGdlbkVsZW1lbnQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdlbk5hbWUoKSB7XHJcbiAgICByZXR1cm4gcmFuZG9tRWxlbWVudChmaXJzdE5hbWVzKSArIFwiIFwiICsgcmFuZG9tRWxlbWVudChsYXN0TmFtZXMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5QaG9uZU51bWJlcigpIHtcclxuICAgIHJldHVybiBcIjU1NS0wXCIgKyByYW5kb21JbnQoMTAwLCAxOTkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5QZXJzb24oKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGlkOiBuZXh0UGVyc29uSWQrKyxcclxuICAgICAgICBuYW1lOiBnZW5OYW1lKCksXHJcbiAgICAgICAgc3RhdHVzOiByYW5kb21FbGVtZW50KHN0YXR1c2VzKSxcclxuICAgICAgICBzY29yZTogcmFuZG9tRWxlbWVudChbMiwgMywgNCwgNSwgNiwgNywgOCwgOV0pLFxyXG4gICAgICAgIHBpY3R1cmU6IHJhbmRvbUVsZW1lbnQocG9zdGVycyksXHJcbiAgICAgICAgbW9iaWxlUGhvbmU6IGdlblBob25lTnVtYmVyKCksXHJcbiAgICAgICAgd29ya1Bob25lOiBnZW5QaG9uZU51bWJlcigpXHJcbiAgICB9O1xyXG59XHJcblxyXG52YXIgcGVyc29uQ291bnQgPSA1MDtcclxudmFyIHBlb3BsZSA9IGdlbkFycmF5KHBlcnNvbkNvdW50LCBwZXJzb25Db3VudCwgZ2VuUGVyc29uKTtcclxuXHJcbnBlb3BsZSA9IFtdXHJcbnZhciBwZXJzb246IE9iamVjdFxyXG5zcXVhZC5tZW1iZXJzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICBwZXJzb24gPSB7XHJcbiAgICAgICAgYXR0YWNrczogZWxlbWVudC5hdHRhY2tzV29uLFxyXG4gICAgICAgIGRlZmVuc2VzOiBlbGVtZW50LmRlZmVuc2VzV29uLFxyXG4gICAgICAgIHBsYW5ldGFyeTogZWxlbWVudC5oYXNQbGFuZXRhcnlDb21tYW5kLFxyXG4gICAgICAgIGhxOiBlbGVtZW50LmhxTGV2ZWwsXHJcbiAgICAgICAgb2ZmaWNlcjogZWxlbWVudC5pc09mZmljZXIsXHJcbiAgICAgICAgb3dubmVyOiBlbGVtZW50LmlzT3duZXIsXHJcbiAgICAgICAgam9pbkRhdGU6IGVsZW1lbnQuam9pbkRhdGUsXHJcbiAgICAgICAgbG9naW46IGVsZW1lbnQubGFzdExvZ2luVGltZSxcclxuICAgICAgICB1cGRhdGVkOiBlbGVtZW50Lmxhc3RVcGRhdGVkLFxyXG4gICAgICAgIG5hbWU6IGVsZW1lbnQubmFtZSxcclxuICAgICAgICBwbGFuZXQ6IGVsZW1lbnQucGxhbmV0LFxyXG4gICAgICAgIGlkOiBlbGVtZW50LnBsYXllcklkLFxyXG4gICAgICAgIHJhbms6IGVsZW1lbnQucmFuayxcclxuICAgICAgICByZXB1dGF0aW9uSW52ZXN0ZWQ6IGVsZW1lbnQucmVwdXRhdGlvbkludmVzdGVkLFxyXG4gICAgICAgIHNjb3JlOiBlbGVtZW50LnNjb3JlLFxyXG4gICAgICAgIHRvdXJuYW1lbnRSYXRpbmc6IGVsZW1lbnQudG91cm5hbWVudFJhdGluZyxcclxuICAgICAgICB0b3VybmFtZW50U2NvcmVzOiBlbGVtZW50LnRvdXJuYW1lbnRTY29yZXMsXHJcbiAgICAgICAgdHJvb3BzRG9uYXRlZDogZWxlbWVudC50cm9vcHNEb25hdGVkLFxyXG4gICAgICAgIHRyb29wc1JlY2VpdmVkOiBlbGVtZW50LnRyb29wc1JlY2VpdmVkLFxyXG4gICAgICAgIHdhclBhcnR5OiBlbGVtZW50LndhclBhcnR5LFxyXG4gICAgICAgIHhwOiBlbGVtZW50LnhwLFxyXG4gICAgICAgIHBpY3R1cmU6IHJhbmRvbUVsZW1lbnQocG9zdGVycylcclxuICAgIH1cclxuICAgIHBlb3BsZS5wdXNoKHBlcnNvbilcclxufSk7XHJcblxyXG4vL3ZhciBtZW1iZXJEZXRhaWxzOiBBcnJheTxPYmplY3Q+XHJcblxyXG52YXIgbWVtYmVyRGV0YWlscyA9IFtdXHJcbm1lbWJlckRldGFpbHMucHVzaChyZXF1aXJlKCcuLy4uL2RhdGEvJyArIHNxdWFkLm1lbWJlcnNbMF0ucGxheWVySWQgKyAnQDE0OTAzODYxOTIuanNvbicpKTtcclxubWVtYmVyRGV0YWlscy5wdXNoKHJlcXVpcmUoJy4vLi4vZGF0YS8yZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlAMTQ5MDM4NjMxNC5qc29uJykpO1xyXG5tZW1iZXJEZXRhaWxzLnB1c2gocmVxdWlyZSgnLi8uLi9kYXRhLzlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYkAxNDkwMzg2NDQ2Lmpzb24nKSk7XHJcblxyXG52YXIgbWVtYmVyczogQXJyYXk8T2JqZWN0PiA9IFtdXHJcbnZhciBtZW1iZXI6IE9iamVjdFxyXG5tZW1iZXJEZXRhaWxzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICBtZW1iZXIgPSB7XHJcbiAgICAgICAgdGltZVpvbmVPZmZzZXQ6IGVsZW1lbnQucGxheWVyTW9kZWwudGltZVpvbmVPZmZzZXQsXHJcbiAgICAgICAgc2NhbGFyczogZWxlbWVudC5zY2FsYXJzLFxyXG4gICAgICAgIHRyb29wczogZWxlbWVudC5wbGF5ZXJNb2RlbC51cGdyYWRlcy50cm9vcFxyXG4gICAgfVxyXG4gICAgbWVtYmVycy5wdXNoKG1lbWJlcik7XHJcbiAgICBjb25zb2xlLmxvZyhtZW1iZXIpXHJcbn0pO1xyXG5cclxuY29uc29sZS5sb2coe1xyXG4gICAgcGVvcGxlOiBwZW9wbGUsXHJcbiAgICBtZW1iZXJzOiBtZW1iZXJzXHJcbn0pXHJcblxyXG5jb25zb2xlLmxvZyh7XHJcbiAgICBwZW9wbGU6IHBlb3BsZVxyXG59KVxyXG5cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgcGVvcGxlOiBwZW9wbGUsXHJcbiAgICBtZW1iZXJzOiBtZW1iZXJzXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9EYXRhLnRzIiwiXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbnZhciB1cmxUb0NvbnRlbnQ6IGFueSA9IHtcclxuICAgIG5ldzogXCJXaGF0J3MgTmV3XCIsXHJcbiAgICBncm91cHM6IFwiU29tZSBvdGhlciB2aWV3XCIsXHJcbiAgICBzZXR0aW5nczogXCJTZXR0aW5nc1wiXHJcbn07XHJcblxyXG52YXIgT3RoZXJQYWdlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG4gICAgcHJvcFR5cGVzOiB7XHJcbiAgICAgICAgbG9jYXRpb246IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkXHJcbiAgICB9LFxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHZhciB0aXRsZSA9IHVybFRvQ29udGVudFt0aGlzLnByb3BzLmxvY2F0aW9uXSB8fCBcIk90aGVyXCI7XHJcbiAgICAgICAgcmV0dXJuIDxoMiBjbGFzc05hbWU9XCJ3aW4taDJcIiBzdHlsZT17eyBtYXJnaW5MZWZ0OiBcIjEwcHhcIiB9fT57dGl0bGV9PC9oMj5cclxuICAgIH1cclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE90aGVyUGFnZTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL090aGVyUGFnZS50c3giLCJcclxuaW1wb3J0ICogYXMgV2luSlMgZnJvbSAnd2luanMnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbXBvcnQgUHJvZmlsZVBpY3R1cmUgZnJvbSAnLi9Qcm9maWxlUGljdHVyZSc7XHJcblxyXG52YXIgUmVhY3RXaW5KUyA9IHJlcXVpcmUoJ3JlYWN0LXdpbmpzJyk7XHJcblxyXG5mdW5jdGlvbiBjYWxjMTAwUGVyY2VudE1pbnVzKG46IG51bWJlcikge1xyXG4gICAgcmV0dXJuIG4gPT09IDAgP1xyXG4gICAgICAgIFwiMTAwJVwiIDpcclxuICAgICAgICBcImNhbGMoMTAwJSAtIFwiICsgKG4gKyBcInB4XCIpICsgXCIpXCI7XHJcbn1cclxuXHJcbnZhciBQZW9wbGVQYWdlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG4gICAgaGFuZGxlVG9nZ2xlU2VsZWN0aW9uTW9kZSgpIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgc2VsZWN0aW9uTW9kZTogIXRoaXMuc3RhdGUuc2VsZWN0aW9uTW9kZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucHJvcHMub25OYXZpZ2F0ZShbXCJwZW9wbGVcIl0pO1xyXG4gICAgICAgIHRoaXMucmVmcy5saXN0Vmlldy53aW5Db250cm9sLnNlbGVjdGlvbi5jbGVhcigpO1xyXG4gICAgfSxcclxuICAgIGhhbmRsZVNlbGVjdGlvbkNoYW5nZWQoZXZlbnRPYmplY3Q6IGFueSkge1xyXG4gICAgICAgIHZhciBsaXN0VmlldyA9IGV2ZW50T2JqZWN0LmN1cnJlbnRUYXJnZXQud2luQ29udHJvbDtcclxuICAgICAgICB2YXIgaW5kaWNlcyA9IGxpc3RWaWV3LnNlbGVjdGlvbi5nZXRJbmRpY2VzKCk7XHJcbiAgICAgICAgLy8gUG9zdCB0byBhdm9pZCBuYXZpZ2F0aW5nIHdoaWxlIGluIHRoZSBtaWRkbGUgb2YgdGhlIGV2ZW50IGhhbmRsZXJcclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNlbGVjdGVkUGVvcGxlOiBpbmRpY2VzIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uTmF2aWdhdGUoaW5kaWNlcy5sZW5ndGggPT09IDEgJiYgIXRoaXMuc3RhdGUuc2VsZWN0aW9uTW9kZSA/IFtcInBlb3BsZVwiLCBpbmRpY2VzWzBdXSA6IFtcInBlb3BsZVwiXSk7XHJcbiAgICAgICAgfS5iaW5kKHRoaXMpLCAwKTtcclxuICAgIH0sXHJcbiAgICAvL2hhbmRsZURlbGV0ZSgpIHtcclxuICAgIC8vICAgIHZhciBwZW9wbGUgPSB0aGlzLnByb3BzLnBlb3BsZTtcclxuICAgIC8vICAgIHZhciBpbmRpY2VzID0gdGhpcy5zdGF0ZS5zZWxlY3RlZFBlb3BsZTtcclxuICAgIC8vICAgIGluZGljZXMuc29ydCgpO1xyXG4gICAgLy8gICAgaW5kaWNlcy5yZXZlcnNlKCk7XHJcbiAgICAvLyAgICBpbmRpY2VzLmZvckVhY2goZnVuY3Rpb24gKGk6IG51bWJlcikge1xyXG4gICAgLy8gICAgICAgIHBlb3BsZS5zcGxpY2UoaSwgMSk7XHJcbiAgICAvLyAgICB9KTtcclxuICAgIC8vICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgLy8gICAgICAgIHNlbGVjdGVkUGVvcGxlOiBbXSxcclxuICAgIC8vICAgICAgICBzZWxlY3Rpb25Nb2RlOiBmYWxzZVxyXG4gICAgLy8gICAgfSk7XHJcbiAgICAvLyAgICB0aGlzLnByb3BzLm9uUGVvcGxlQ2hhbmdlZChwZW9wbGUpO1xyXG4gICAgLy99LFxyXG4gICAgaGFuZGxlQ29udGVudEFuaW1hdGluZyhldmVudE9iamVjdDogYW55KSB7XHJcbiAgICAgICAgLy8vLyBEaXNhYmxlIExpc3RWaWV3J3MgZW50cmFuY2UgYW5pbWF0aW9uXHJcbiAgICAgICAgLy9pZiAoZXZlbnRPYmplY3QuZGV0YWlsLnR5cGUgPT09IFwiZW50cmFuY2VcIikge1xyXG4gICAgICAgIC8vICAgIGV2ZW50T2JqZWN0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgLy99XHJcbiAgICB9LFxyXG4gICAgcGVyc29uUmVuZGVyZXI6IFJlYWN0V2luSlMucmVhY3RSZW5kZXJlcihmdW5jdGlvbiAocGVyc29uOiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPFByb2ZpbGVQaWN0dXJlIGJhY2tncm91bmRVcmw9e3BlcnNvbi5kYXRhLnBpY3R1cmV9IHNpemU9ezM0fSAvPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibmFtZVwiPntwZXJzb24uZGF0YS5uYW1lfTwvc3Bhbj48YnIgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIkhRXCI+SFE6IHtwZXJzb24uZGF0YS5ocX0gPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiUmFua1wiPlJhbms6IHtwZXJzb24uZGF0YS5yYW5rfSA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJYUFwiPlhQOiB7cGVyc29uLmRhdGEueHB9IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIlNjb3JlXCI+U2NvcmU6IHtwZXJzb24uZGF0YS5zY29yZX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cIkF0dGFja3NcIj5BdHRhY2tzOiB7cGVyc29uLmRhdGEuYXR0YWNrc30gPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiRGVmZW5zZXNcIj5EZWZlbnNlczoge3BlcnNvbi5kYXRhLmRlZmVuc2VzfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxiciAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInJlcHV0YXRpb25JbnZlc3RlZFwiPnJlcHV0YXRpb24gaW52ZXN0ZWQ6IHtwZXJzb24uZGF0YS5yZXB1dGF0aW9uSW52ZXN0ZWR9PC9zcGFuPjxiciAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfSksXHJcbiAgICAvL2dyb3VwSGVhZGVyUmVuZGVyZXI6IFJlYWN0V2luSlMucmVhY3RSZW5kZXJlcihmdW5jdGlvbihpdGVtOiBhbnkpIHtcclxuICAgIC8vICAgIHJldHVybiAoXHJcbiAgICAvLyAgICAgICAgPGRpdj57aXRlbS5kYXRhLnRpdGxlfTwvZGl2PlxyXG4gICAgLy8gICAgKTtcclxuICAgIC8vfSksXHJcbiAgICByZW5kZXJQZW9wbGVQYW5lKHBlb3BsZVBhbmVXaWR0aDogbnVtYmVyKSB7XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGVvcGxlU2VhcmNoUGFuZVwiIHN0eWxlPXt7IGhlaWdodDogXCIxMDAlXCIsIHdpZHRoOiBwZW9wbGVQYW5lV2lkdGgsIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsIHZlcnRpY2FsQWxpZ246IFwidG9wXCIgfX0+XHJcbiAgICAgICAgICAgICAgICA8UmVhY3RXaW5KUy5MaXN0Vmlld1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZj1cImxpc3RWaWV3XCJcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwZW9wbGVMaXN0VmlldyB3aW4tc2VsZWN0aW9uc3R5bGVmaWxsZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogXCJjYWxjKDEwMCUgLSA0OHB4KVwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbURhdGFTb3VyY2U9e3RoaXMucHJvcHMucGVvcGxlLmRhdGFTb3VyY2V9XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVRlbXBsYXRlPXt0aGlzLnBlcnNvblJlbmRlcmVyfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ3JvdXBEYXRhU291cmNlPXt0aGlzLnByb3BzLnBlb3BsZS5ncm91cHMuZGF0YVNvdXJjZX1cclxuICAgICAgICAgICAgICAgICAgICAvL2dyb3VwSGVhZGVyVGVtcGxhdGU9e3RoaXMuZ3JvdXBIZWFkZXJSZW5kZXJlcn1cclxuICAgICAgICAgICAgICAgICAgICBsYXlvdXQ9e3RoaXMuc3RhdGUubGF5b3V0fVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbk1vZGU9e3RoaXMuc3RhdGUuc2VsZWN0aW9uTW9kZSA/IFwibXVsdGlcIiA6IFwic2luZ2xlXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgdGFwQmVoYXZpb3I9e3RoaXMuc3RhdGUuc2VsZWN0aW9uTW9kZSA/IFwidG9nZ2xlU2VsZWN0XCIgOiBcImRpcmVjdFNlbGVjdFwifVxyXG4gICAgICAgICAgICAgICAgICAgIG9uU2VsZWN0aW9uQ2hhbmdlZD17dGhpcy5oYW5kbGVTZWxlY3Rpb25DaGFuZ2VkfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ29udGVudEFuaW1hdGluZz17dGhpcy5oYW5kbGVDb250ZW50QW5pbWF0aW5nfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfSxcclxuICAgIHJlbmRlclByb2ZpbGVQYW5lKHNlbGVjdGVkSW5kZXg6IGFueSwgcGVvcGxlUGFuZVdpZHRoOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoc2VsZWN0ZWRJbmRleCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9maWxlUGFuZVwiIHN0eWxlPXt7IGhlaWdodDogXCIxMDAlXCIsIHdpZHRoOiBjYWxjMTAwUGVyY2VudE1pbnVzKHBlb3BsZVBhbmVXaWR0aCksIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsIHZlcnRpY2FsQWxpZ246IFwidG9wXCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBkaXNwbGF5OiBcImZsZXhcIiwgaGVpZ2h0OiBcIjEwMCVcIiwganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzc05hbWU9XCJ3aW4taDFcIiBzdHlsZT17eyBjb2xvcjogXCJncmV5XCIgfX0+Tm8gU2VsZWN0aW9uPC9oMT5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFBlcnNvbiA9IHRoaXMucHJvcHMucGVvcGxlLmdldEF0KHNlbGVjdGVkSW5kZXgpO1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9maWxlUGFuZVwiIHN0eWxlPXt7IGhlaWdodDogXCIxMDAlXCIsIHdpZHRoOiBjYWxjMTAwUGVyY2VudE1pbnVzKHBlb3BsZVBhbmVXaWR0aCksIGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIsIHZlcnRpY2FsQWxpZ246IFwidG9wXCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwcm9maWxlSGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibmFtZVwiPntzZWxlY3RlZFBlcnNvbi5uYW1lfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBlcnNvbkluZm9cIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxQcm9maWxlUGljdHVyZSBiYWNrZ3JvdW5kVXJsPXtzZWxlY3RlZFBlcnNvbi5waWN0dXJlfSBzaXplPXsxMDB9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2ZpbGVTdGF0dXNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJtZXNzYWdlXCI+e3NlbGVjdGVkUGVyc29uLnNjb3JlfSA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibG9naW5cIj5sb2dpbjoge3NlbGVjdGVkUGVyc29uLnVwZGF0ZWR9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInVwZGF0ZWRcIj51cGRhdGVkOiB7c2VsZWN0ZWRQZXJzb24ubG9naW59PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRpbWVab25lT2Zmc2V0XCI+dGltZVpvbmVPZmZzZXQ6IHt9PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VwYXJhdG9yXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2ZpbGVDb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3BhbiBjbGFzc05hbWU9XCJtZXNzYWdlSWNvblwiIC8+TWVzc2FnZTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+PHNwYW4gY2xhc3NOYW1lPVwiZW1haWxJY29uXCIgLz5FbWFpbCB3b3JrPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT48c3BhbiBjbGFzc05hbWU9XCJtYXBJY29uXCIgLz5NYXAgaG9tZTwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcHJvcFR5cGVzOiB7XHJcbiAgICAgICAgbW9kZTogUmVhY3QuUHJvcFR5cGVzLm9uZU9mKFtcInNtYWxsXCIsIFwibWVkaXVtXCIsIFwibGFyZ2VcIl0pLmlzUmVxdWlyZWQsXHJcbiAgICAgICAgcGVvcGxlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcbiAgICAgICAgLy9tZW1iZXJzOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXHJcbiAgICAgICAgbG9jYXRpb246IFJlYWN0LlByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkLFxyXG4gICAgICAgIG9uTmF2aWdhdGU6IFJlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXHJcbiAgICAgICAgb25QZW9wbGVDaGFuZ2VkOiBSZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXHJcbiAgICB9LFxyXG4gICAgZ2V0SW5pdGlhbFN0YXRlKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxheW91dDogeyB0eXBlOiBXaW5KUy5VSS5MaXN0TGF5b3V0IH0sXHJcbiAgICAgICAgICAgIHNlbGVjdGVkUGVvcGxlOiBbXSxcclxuICAgICAgICAgICAgc2VsZWN0aW9uTW9kZTogZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHJlbmRlcigpIHtcclxuICAgICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IHRoaXMucHJvcHMubG9jYXRpb24ubGVuZ3RoID49IDIgPyB0aGlzLnByb3BzLmxvY2F0aW9uWzFdIDogbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PT0gXCJzbWFsbFwiKSB7XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEluZGV4ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJQZW9wbGVQYW5lKFwiMTAwJVwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlclByb2ZpbGVQYW5lKHNlbGVjdGVkSW5kZXgsIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHBlb3BsZVBhbmVXaWR0aCA9IDMyMDtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiBcIjEwMCVcIiB9fT5cclxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJQZW9wbGVQYW5lKHBlb3BsZVBhbmVXaWR0aCl9XHJcbiAgICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVyUHJvZmlsZVBhbmUoc2VsZWN0ZWRJbmRleCwgcGVvcGxlUGFuZVdpZHRoKX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IFBlb3BsZVBhZ2U7XHJcblxyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1Blb3BsZVBhZ2UudHN4IiwiXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByb2ZpbGVQaWN0dXJlUHJvcHMge1xyXG4gICAgYmFja2dyb3VuZFVybDogc3RyaW5nO1xyXG4gICAgc2l6ZTogbnVtYmVyO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZmlsZVBpY3R1cmUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvZmlsZVBpY3R1cmVQcm9wcywgdW5kZWZpbmVkPiB7XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHNpemU6IG51bWJlciA9IHRoaXMucHJvcHMuc2l6ZVxyXG4gICAgICAgIGNvbnN0IGNzc1VybDogc3RyaW5nID0gXCJ1cmwoXCIgKyB0aGlzLnByb3BzLmJhY2tncm91bmRVcmwgKyBcIilcIlxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInByb2ZpbGVQaWN0dXJlXCIgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRJbWFnZTogY3NzVXJsLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHNpemUsXHJcbiAgICAgICAgICAgICAgICBXZWJraXRCb3JkZXJSYWRpdXM6IHNpemUsXHJcbiAgICAgICAgICAgICAgICBNb3pCb3JkZXJSYWRpdXM6IHNpemUsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IHNpemUsXHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kU2l6ZTogXCJjb3ZlclwiLFxyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIlxyXG4gICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiYXNzZXRzL2ltZy9wcm9maWxlLnBuZ1wiIGhlaWdodD17c2l6ZX0gd2lkdGg9e3NpemV9IC8+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL1Byb2ZpbGVQaWN0dXJlLnRzeCIsIlxyXG5pbXBvcnQgKiBhcyBXaW5KUyBmcm9tICd3aW5qcyc7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuXHJcbi8vaW1wb3J0ICogYXMgUmVhY3RXaW5KUyBmcm9tICdyZWFjdC13aW5qcyc7XHJcbnZhciBSZWFjdFdpbkpTID0gcmVxdWlyZSgncmVhY3Qtd2luanMnKTtcclxuXHJcbi8vaW1wb3J0IFBlb3BsZVBhZ2UgZnJvbSAnLi9QZW9wbGVQYWdlJztcclxudmFyIFBlb3BsZVBhZ2UgPSByZXF1aXJlKCcuL1Blb3BsZVBhZ2UudHN4Jyk7XHJcbnZhciBPdGhlclBhZ2UgPSByZXF1aXJlKCcuL090aGVyUGFnZS50c3gnKTtcclxuaW1wb3J0IFByb2ZpbGVQaWN0dXJlIGZyb20gJy4vUHJvZmlsZVBpY3R1cmUnXHJcblxyXG4vL2ltcG9ydCAqIGFzIERhdGEgZnJvbSAnLi9GYWtlRGF0YSdcclxuLy92YXIgRGF0YSA9IHJlcXVpcmUoJy4vRmFrZURhdGEudHMnKTtcclxudmFyIERhdGEgPSByZXF1aXJlKCcuL0RhdGEudHMnKTtcclxuXHJcbnZhciBzcGxpdFZpZXdJZCA9IFwicm9vdFNwbGl0Vmlld1wiO1xyXG5cclxudmFyIHNwbGl0Vmlld0NvbmZpZ3M6IGFueSA9IHtcclxuICAgIHNtYWxsOiB7XHJcbiAgICAgICAgY2xvc2VkRGlzcGxheU1vZGU6IFwibm9uZVwiLFxyXG4gICAgICAgIG9wZW5lZERpc3BsYXlNb2RlOiBcIm92ZXJsYXlcIlxyXG4gICAgfSxcclxuICAgIG1lZGl1bToge1xyXG4gICAgICAgIGNsb3NlZERpc3BsYXlNb2RlOiBcImlubGluZVwiLFxyXG4gICAgICAgIG9wZW5lZERpc3BsYXlNb2RlOiBcIm92ZXJsYXlcIlxyXG4gICAgfSxcclxuICAgIGxhcmdlOiB7XHJcbiAgICAgICAgY2xvc2VkRGlzcGxheU1vZGU6IFwiaW5saW5lXCIsXHJcbiAgICAgICAgb3BlbmVkRGlzcGxheU1vZGU6IFwiaW5saW5lXCJcclxuICAgIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIG1lcmdlKC8qIG9ianMgKi8pIHtcclxuICAgIHZhciBrOiBhbnk7XHJcbiAgICB2YXIgcmVzdWx0OiBhbnkgPSB7fTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICB2YXIgb2JqID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGlmIChvYmopIHtcclxuICAgICAgICAgICAgZm9yIChrIGluIG9iaikgeyByZXN1bHRba10gPSBvYmpba107IH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRNb2RlKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICB3aW5kb3cuaW5uZXJXaWR0aCA+PSAxMzY2ID8gXCJsYXJnZVwiIDpcclxuICAgICAgICAgICAgd2luZG93LmlubmVyV2lkdGggPj0gODAwID8gXCJtZWRpdW1cIiA6XHJcbiAgICAgICAgICAgICAgICBcInNtYWxsXCJcclxuICAgICk7XHJcbn1cclxuXHJcbnZhciBBcHAgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcbiAgICBnZXRTcGxpdFZpZXdDb25maWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHNwbGl0Vmlld0NvbmZpZ3NbdGhpcy5zdGF0ZS5tb2RlXTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGVQZW9wbGVDaGFuZ2VkKG5ld1Blb3BsZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIHBlb3BsZTogbmV3UGVvcGxlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgaGFuZGxlTmF2aWdhdGlvbihuZXdMb2NhdGlvbjogYW55KSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uOiBuZXdMb2NhdGlvblxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGhhbmRsZUJhY2soKSB7XHJcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gdGhpcy5zdGF0ZS5sb2NhdGlvbjtcclxuICAgICAgICBsb2NhdGlvbi5wb3AoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZU5hdmlnYXRpb24obG9jYXRpb24pO1xyXG4gICAgfSxcclxuICAgIGhhbmRsZVJlc2l6ZSgpIHtcclxuICAgICAgICB2YXIgcHJldk1vZGUgPSB0aGlzLnN0YXRlLm1vZGU7XHJcbiAgICAgICAgdmFyIG5leHRNb2RlID0gZ2V0TW9kZSgpO1xyXG5cclxuICAgICAgICBpZiAocHJldk1vZGUgIT09IG5leHRNb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBtb2RlOiBuZXh0TW9kZSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgaGFuZGxlQ29tbWFuZEludm9rZWQobmV3TG9jYXRpb246IGFueSkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICBsb2NhdGlvbjogbmV3TG9jYXRpb24sXHJcbiAgICAgICAgICAgIHBhbmVPcGVuZWQ6IHRoaXMuZ2V0U3BsaXRWaWV3Q29uZmlnKCkub3BlbmVkRGlzcGxheU1vZGUgPT09IFwib3ZlcmxheVwiID8gZmFsc2UgOiB0aGlzLnN0YXRlLnBhbmVPcGVuZWRcclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBoYW5kbGVUb2dnbGVQYW5lKCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBwYW5lT3BlbmVkOiAhdGhpcy5zdGF0ZS5wYW5lT3BlbmVkIH0pO1xyXG4gICAgfSxcclxuICAgIGhhbmRsZUFmdGVyQ2xvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHBhbmVPcGVuZWQ6IGZhbHNlIH0pO1xyXG4gICAgfSxcclxuICAgIGdldEluaXRpYWxTdGF0ZSgpIHtcclxuICAgICAgICB2YXIgbW9kZSA9IGdldE1vZGUoKTtcclxuXHJcbiAgICAgICAgdmFyIGdyb3VwS2V5ID0gZnVuY3Rpb24gKGRhdGE6IGFueSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lWzBdLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGdyb3VwRGF0YSA9IGZ1bmN0aW9uIChkYXRhOiBhbnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdGl0bGU6IGdyb3VwS2V5KGRhdGEpIH07XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIHNvcnRlciA9IGZ1bmN0aW9uIChhOiBhbnksIGI6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoYS5uYW1lIDwgYi5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5uYW1lID4gYi5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdmFyIGRhdGEgPSBuZXcgV2luSlMuQmluZGluZy5MaXN0KERhdGEucGVvcGxlKVxyXG4gICAgICAgICAgICAuY3JlYXRlU29ydGVkKHNvcnRlcilcclxuICAgICAgICAgICAgLmNyZWF0ZUdyb3VwZWQoZ3JvdXBLZXksIGdyb3VwRGF0YSk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHBlb3BsZTogZGF0YSxcclxuICAgICAgICAgICAgbW9kZTogbW9kZSxcclxuICAgICAgICAgICAgbG9jYXRpb246IFtcInBlb3BsZVwiXVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuaGFuZGxlUmVzaXplKTtcclxuICAgIH0sXHJcbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XHJcbiAgICB9LFxyXG4gICAgcmVuZGVyUGVvcGxlUGFnZSgpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8UGVvcGxlUGFnZVxyXG4gICAgICAgICAgICAgICAgbW9kZT17dGhpcy5zdGF0ZS5tb2RlfVxyXG4gICAgICAgICAgICAgICAgcGVvcGxlPXt0aGlzLnN0YXRlLnBlb3BsZX1cclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uPXt0aGlzLnN0YXRlLmxvY2F0aW9ufVxyXG4gICAgICAgICAgICAgICAgb25OYXZpZ2F0ZT17dGhpcy5oYW5kbGVOYXZpZ2F0aW9ufVxyXG4gICAgICAgICAgICAgICAgb25QZW9wbGVDaGFuZ2VkPXt0aGlzLmhhbmRsZVBlb3BsZUNoYW5nZWR9IC8+XHJcbiAgICAgICAgKTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJPdGhlclBhZ2UoKSB7XHJcbiAgICAgICAgcmV0dXJuIDxPdGhlclBhZ2UgbG9jYXRpb249e3RoaXMuc3RhdGUubG9jYXRpb259IC8+XHJcbiAgICB9LFxyXG4gICAgcmVuZGVyQ29udGVudCgpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5sb2NhdGlvbi5sZW5ndGggPT09IDAgfHwgdGhpcy5zdGF0ZS5sb2NhdGlvblswXSA9PT0gXCJwZW9wbGVcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJQZW9wbGVQYWdlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyT3RoZXJQYWdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIC8vIFRPRE86IEZpeCBNZSFcclxuICAgIHJlbmRlckJhY2tCdXR0b24oKSB7XHJcbiAgICAgICAgdmFyIGNhbkdvQmFjayA9IHRoaXMuc3RhdGUubG9jYXRpb24ubGVuZ3RoID4gMTtcclxuICAgICAgICB2YXIgc2hvdWxkU2hvd0JhY2tCdXR0b24gPSBjYW5Hb0JhY2sgJiYgdGhpcy5zdGF0ZS5tb2RlID09PSBcInNtYWxsXCI7XHJcbiAgICAgICAgcmV0dXJuIHNob3VsZFNob3dCYWNrQnV0dG9uID9cclxuICAgICAgICAgICAgPGJ1dHRvbiBzdHlsZT17eyBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiIH19IGNsYXNzTmFtZT1cIndpbi1iYWNrYnV0dG9uXCIgb25DbGljaz17dGhpcy5oYW5kbGVCYWNrfSAvPiA6XHJcbiAgICAgICAgICAgIG51bGw7XHJcbiAgICB9LFxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHZhciBwYW5lQ29tcG9uZW50ID0gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPFJlYWN0V2luSlMuU3BsaXRWaWV3LkNvbW1hbmRcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIlBlb3BsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbj1cImNvbnRhY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uSW52b2tlZD17dGhpcy5oYW5kbGVDb21tYW5kSW52b2tlZC5iaW5kKG51bGwsIFtcInBlb3BsZVwiXSl9IC8+XHJcbiAgICAgICAgICAgICAgICA8UmVhY3RXaW5KUy5TcGxpdFZpZXcuQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPVwiV2hhdCdzIE5ld1wiXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbj1cImNvbW1lbnRcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uSW52b2tlZD17dGhpcy5oYW5kbGVDb21tYW5kSW52b2tlZC5iaW5kKG51bGwsIFtcIm5ld1wiXSl9IC8+XHJcbiAgICAgICAgICAgICAgICA8UmVhY3RXaW5KUy5TcGxpdFZpZXcuQ29tbWFuZFxyXG4gICAgICAgICAgICAgICAgICAgIC8qIFRPRE86IHNhbWUgYXMgdGhlIHRleHQ/ICovXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9XCJTb21lIG90aGVyIHZpZXcuXCJcclxuICAgICAgICAgICAgICAgICAgICBpY29uPVwicGVvcGxlXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkludm9rZWQ9e3RoaXMuaGFuZGxlQ29tbWFuZEludm9rZWQuYmluZChudWxsLCBbXCJncm91cHNcIl0pfSAvPlxyXG5cclxuICAgICAgICAgICAgICAgIDxSZWFjdFdpbkpTLlNwbGl0Vmlldy5Db21tYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgYm90dG9tOiAwLCB3aWR0aDogXCIxMDAlXCIgfX1cclxuICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIlNldHRpbmdzXCJcclxuICAgICAgICAgICAgICAgICAgICBpY29uPVwic2V0dGluZ3NcIlxyXG4gICAgICAgICAgICAgICAgICAgIG9uSW52b2tlZD17dGhpcy5oYW5kbGVDb21tYW5kSW52b2tlZC5iaW5kKG51bGwsIFtcInNldHRpbmdzXCJdKX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgdmFyIGNvbnRlbnRDb21wb25lbnQgPSB0aGlzLnJlbmRlckNvbnRlbnQoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6IFwiMTAwJVwiIH19PlxyXG4gICAgICAgICAgICAgICAgey8qdG9wKi99XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGhlaWdodDogNDgsIGJhY2tncm91bmRDb2xvcjogXCJyZ2JhKDEsIDEyMSwgMjE2LCAwLjMpXCIgfX0gY2xhc3NOYW1lPVwid2luLXVpLWRhcmtcIj5cclxuICAgICAgICAgICAgICAgICAgICA8UmVhY3RXaW5KUy5TcGxpdFZpZXdQYW5lVG9nZ2xlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtY29udHJvbHM9e3NwbGl0Vmlld0lkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17eyBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYW5lT3BlbmVkPXt0aGlzLnN0YXRlLnBhbmVPcGVuZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uSW52b2tlZD17dGhpcy5oYW5kbGVUb2dnbGVQYW5lfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlckJhY2tCdXR0b24oKX1cclxuICAgICAgICAgICAgICAgICAgICB7LyogVE9ETzogYWRkIHRlc3QgZm9yIHRoZSBodG1sIHRpdGxlICovfVxyXG4gICAgICAgICAgICAgICAgICAgIDxoNCBjbGFzc05hbWU9XCJ3aW4taDRcIiBzdHlsZT17eyBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiLCBtYXJnaW5MZWZ0OiA1IH19PmZjdWs8L2g0PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8UmVhY3RXaW5KUy5TcGxpdFZpZXdcclxuICAgICAgICAgICAgICAgICAgICBpZD17c3BsaXRWaWV3SWR9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgaGVpZ2h0OiBcImNhbGMoMTAwJSAtIDQ4cHgpXCIgfX1cclxuICAgICAgICAgICAgICAgICAgICBwYW5lQ29tcG9uZW50PXtwYW5lQ29tcG9uZW50fVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRDb21wb25lbnQ9e2NvbnRlbnRDb21wb25lbnR9XHJcbiAgICAgICAgICAgICAgICAgICAgb25BZnRlckNsb3NlPXt0aGlzLmhhbmRsZUFmdGVyQ2xvc2V9XHJcbiAgICAgICAgICAgICAgICAgICAgcGFuZU9wZW5lZD17dGhpcy5zdGF0ZS5wYW5lT3BlbmVkfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvKnsuLi50aGlzLmdldFNwbGl0Vmlld0NvbmZpZygpIH0qLyAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59KTtcclxuXHJcblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKSk7XHJcblxyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LnRzeCIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgX2h5cGhlblBhdHRlcm4gPSAvLSguKS9nO1xuXG4vKipcbiAqIENhbWVsY2FzZXMgYSBoeXBoZW5hdGVkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF9oeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoXywgY2hhcmFjdGVyKSB7XG4gICAgcmV0dXJuIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZmJqcy9saWIvY2FtZWxpemUuanNcbi8vIG1vZHVsZSBpZCA9IDg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhbWVsaXplID0gcmVxdWlyZSgnLi9jYW1lbGl6ZScpO1xuXG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBDU1MgcHJvcGVydHkgbmFtZSwgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGNhbWVsaXplU3R5bGVOYW1lKCdiYWNrZ3JvdW5kLWNvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmRDb2xvclwiXG4gKiAgID4gY2FtZWxpemVTdHlsZU5hbWUoJy1tb3otdHJhbnNpdGlvbicpXG4gKiAgIDwgXCJNb3pUcmFuc2l0aW9uXCJcbiAqICAgPiBjYW1lbGl6ZVN0eWxlTmFtZSgnLW1zLXRyYW5zaXRpb24nKVxuICogICA8IFwibXNUcmFuc2l0aW9uXCJcbiAqXG4gKiBBcyBBbmRpIFNtaXRoIHN1Z2dlc3RzXG4gKiAoaHR0cDovL3d3dy5hbmRpc21pdGguY29tL2Jsb2cvMjAxMi8wMi9tb2Rlcm5penItcHJlZml4ZWQvKSwgYW4gYC1tc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBjYW1lbGl6ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGNhbWVsaXplKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZVN0eWxlTmFtZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZmJqcy9saWIvY2FtZWxpemVTdHlsZU5hbWUuanNcbi8vIG1vZHVsZSBpZCA9IDg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZmJqcy9saWIvY29udGFpbnNOb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSA4OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIENvbnZlcnQgYXJyYXktbGlrZSBvYmplY3RzIHRvIGFycmF5cy5cbiAqXG4gKiBUaGlzIEFQSSBhc3N1bWVzIHRoZSBjYWxsZXIga25vd3MgdGhlIGNvbnRlbnRzIG9mIHRoZSBkYXRhIHR5cGUuIEZvciBsZXNzXG4gKiB3ZWxsIGRlZmluZWQgaW5wdXRzIHVzZSBjcmVhdGVBcnJheUZyb21NaXhlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbnxmaWxlbGlzdH0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cbiAgLy8gU29tZSBicm93c2VycyBidWlsdGluIG9iamVjdHMgY2FuIHJlcG9ydCB0eXBlb2YgJ2Z1bmN0aW9uJyAoZS5nLiBOb2RlTGlzdFxuICAvLyBpbiBvbGQgdmVyc2lvbnMgb2YgU2FmYXJpKS5cbiAgISghQXJyYXkuaXNBcnJheShvYmopICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogQXJyYXktbGlrZSBvYmplY3QgZXhwZWN0ZWQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgISh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IG5lZWRzIGEgbGVuZ3RoIHByb3BlcnR5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gICEobGVuZ3RoID09PSAwIHx8IGxlbmd0aCAtIDEgaW4gb2JqKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3Qgc2hvdWxkIGhhdmUga2V5cyBmb3IgaW5kaWNlcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcblxuICAhKHR5cGVvZiBvYmouY2FsbGVlICE9PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3QgY2FuXFwndCBiZSBgYXJndW1lbnRzYC4gVXNlIHJlc3QgcGFyYW1zICcgKyAnKGZ1bmN0aW9uKC4uLmFyZ3MpIHt9KSBvciBBcnJheS5mcm9tKCkgaW5zdGVhZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgLy8gT2xkIElFIGRvZXNuJ3QgZ2l2ZSBjb2xsZWN0aW9ucyBhY2Nlc3MgdG8gaGFzT3duUHJvcGVydHkuIEFzc3VtZSBpbnB1dHNcbiAgLy8gd2l0aG91dCBtZXRob2Qgd2lsbCB0aHJvdyBkdXJpbmcgdGhlIHNsaWNlIGNhbGwgYW5kIHNraXAgc3RyYWlnaHQgdG8gdGhlXG4gIC8vIGZhbGxiYWNrLlxuICBpZiAob2JqLmhhc093blByb3BlcnR5KSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmopO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElFIDwgOSBkb2VzIG5vdCBzdXBwb3J0IEFycmF5I3NsaWNlIG9uIGNvbGxlY3Rpb25zIG9iamVjdHNcbiAgICB9XG4gIH1cblxuICAvLyBGYWxsIGJhY2sgdG8gY29weWluZyBrZXkgYnkga2V5LiBUaGlzIGFzc3VtZXMgYWxsIGtleXMgaGF2ZSBhIHZhbHVlLFxuICAvLyBzbyB3aWxsIG5vdCBwcmVzZXJ2ZSBzcGFyc2VseSBwb3B1bGF0ZWQgaW5wdXRzLlxuICB2YXIgcmV0ID0gQXJyYXkobGVuZ3RoKTtcbiAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGxlbmd0aDsgaWkrKykge1xuICAgIHJldFtpaV0gPSBvYmpbaWldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogUGVyZm9ybSBhIGhldXJpc3RpYyB0ZXN0IHRvIGRldGVybWluZSBpZiBhbiBvYmplY3QgaXMgXCJhcnJheS1saWtlXCIuXG4gKlxuICogICBBIG1vbmsgYXNrZWQgSm9zaHUsIGEgWmVuIG1hc3RlciwgXCJIYXMgYSBkb2cgQnVkZGhhIG5hdHVyZT9cIlxuICogICBKb3NodSByZXBsaWVkOiBcIk11LlwiXG4gKlxuICogVGhpcyBmdW5jdGlvbiBkZXRlcm1pbmVzIGlmIGl0cyBhcmd1bWVudCBoYXMgXCJhcnJheSBuYXR1cmVcIjogaXQgcmV0dXJuc1xuICogdHJ1ZSBpZiB0aGUgYXJndW1lbnQgaXMgYW4gYWN0dWFsIGFycmF5LCBhbiBgYXJndW1lbnRzJyBvYmplY3QsIG9yIGFuXG4gKiBIVE1MQ29sbGVjdGlvbiAoZS5nLiBub2RlLmNoaWxkTm9kZXMgb3Igbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgpKS5cbiAqXG4gKiBJdCB3aWxsIHJldHVybiBmYWxzZSBmb3Igb3RoZXIgYXJyYXktbGlrZSBvYmplY3RzIGxpa2UgRmlsZWxpc3QuXG4gKlxuICogQHBhcmFtIHsqfSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKG9iaikge1xuICByZXR1cm4gKFxuICAgIC8vIG5vdCBudWxsL2ZhbHNlXG4gICAgISFvYmogJiYgKFxuICAgIC8vIGFycmF5cyBhcmUgb2JqZWN0cywgTm9kZUxpc3RzIGFyZSBmdW5jdGlvbnMgaW4gU2FmYXJpXG4gICAgdHlwZW9mIG9iaiA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09ICdmdW5jdGlvbicpICYmXG4gICAgLy8gcXVhY2tzIGxpa2UgYW4gYXJyYXlcbiAgICAnbGVuZ3RoJyBpbiBvYmogJiZcbiAgICAvLyBub3Qgd2luZG93XG4gICAgISgnc2V0SW50ZXJ2YWwnIGluIG9iaikgJiZcbiAgICAvLyBubyBET00gbm9kZSBzaG91bGQgYmUgY29uc2lkZXJlZCBhbiBhcnJheS1saWtlXG4gICAgLy8gYSAnc2VsZWN0JyBlbGVtZW50IGhhcyAnbGVuZ3RoJyBhbmQgJ2l0ZW0nIHByb3BlcnRpZXMgb24gSUU4XG4gICAgdHlwZW9mIG9iai5ub2RlVHlwZSAhPSAnbnVtYmVyJyAmJiAoXG4gICAgLy8gYSByZWFsIGFycmF5XG4gICAgQXJyYXkuaXNBcnJheShvYmopIHx8XG4gICAgLy8gYXJndW1lbnRzXG4gICAgJ2NhbGxlZScgaW4gb2JqIHx8XG4gICAgLy8gSFRNTENvbGxlY3Rpb24vTm9kZUxpc3RcbiAgICAnaXRlbScgaW4gb2JqKVxuICApO1xufVxuXG4vKipcbiAqIEVuc3VyZSB0aGF0IHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSBieSB3cmFwcGluZyBpdCBpbiBhbiBhcnJheSBpZiBpdCBpcyBub3QuXG4gKiBDcmVhdGVzIGEgY29weSBvZiB0aGUgYXJndW1lbnQgaWYgaXQgaXMgYWxyZWFkeSBhbiBhcnJheS5cbiAqXG4gKiBUaGlzIGlzIG1vc3RseSB1c2VmdWwgaWRpb21hdGljYWxseTpcbiAqXG4gKiAgIHZhciBjcmVhdGVBcnJheUZyb21NaXhlZCA9IHJlcXVpcmUoJ2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG4gKlxuICogICBmdW5jdGlvbiB0YWtlc09uZU9yTW9yZVRoaW5ncyh0aGluZ3MpIHtcbiAqICAgICB0aGluZ3MgPSBjcmVhdGVBcnJheUZyb21NaXhlZCh0aGluZ3MpO1xuICogICAgIC4uLlxuICogICB9XG4gKlxuICogVGhpcyBhbGxvd3MgeW91IHRvIHRyZWF0IGB0aGluZ3MnIGFzIGFuIGFycmF5LCBidXQgYWNjZXB0IHNjYWxhcnMgaW4gdGhlIEFQSS5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0byBjb252ZXJ0IGFuIGFycmF5LWxpa2Ugb2JqZWN0LCBsaWtlIGBhcmd1bWVudHNgLCBpbnRvIGFuIGFycmF5XG4gKiB1c2UgdG9BcnJheSBpbnN0ZWFkLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqXG4gKiBAcmV0dXJuIHthcnJheX1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTWl4ZWQob2JqKSB7XG4gIGlmICghaGFzQXJyYXlOYXR1cmUob2JqKSkge1xuICAgIHJldHVybiBbb2JqXTtcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICByZXR1cm4gb2JqLnNsaWNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRvQXJyYXkob2JqKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFycmF5RnJvbU1peGVkO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9jcmVhdGVBcnJheUZyb21NaXhlZC5qc1xuLy8gbW9kdWxlIGlkID0gOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIGZiLXd3dy91bnNhZmUtaHRtbCovXG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIGNyZWF0ZUFycmF5RnJvbU1peGVkID0gcmVxdWlyZSgnLi9jcmVhdGVBcnJheUZyb21NaXhlZCcpO1xudmFyIGdldE1hcmt1cFdyYXAgPSByZXF1aXJlKCcuL2dldE1hcmt1cFdyYXAnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIHJlbmRlciBhbGwgbWFya3VwLlxuICovXG52YXIgZHVtbXlOb2RlID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFBhdHRlcm4gdXNlZCBieSBgZ2V0Tm9kZU5hbWVgLlxuICovXG52YXIgbm9kZU5hbWVQYXR0ZXJuID0gL15cXHMqPChcXHcrKS87XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIGBub2RlTmFtZWAgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gYSBzdHJpbmcgb2YgbWFya3VwLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgU3RyaW5nIG9mIG1hcmt1cC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IE5vZGUgbmFtZSBvZiB0aGUgc3VwcGxpZWQgbWFya3VwLlxuICovXG5mdW5jdGlvbiBnZXROb2RlTmFtZShtYXJrdXApIHtcbiAgdmFyIG5vZGVOYW1lTWF0Y2ggPSBtYXJrdXAubWF0Y2gobm9kZU5hbWVQYXR0ZXJuKTtcbiAgcmV0dXJuIG5vZGVOYW1lTWF0Y2ggJiYgbm9kZU5hbWVNYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbm9kZXMgcmVuZGVyZWQgZnJvbSB0aGUgc3VwcGxpZWQgbWFya3VwLiBUaGVcbiAqIG9wdGlvbmFsbHkgc3VwcGxpZWQgYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIG9uY2UgZm9yIGVhY2hcbiAqIDxzY3JpcHQ+IGVsZW1lbnQgdGhhdCBpcyByZW5kZXJlZC4gSWYgbm8gYGhhbmRsZVNjcmlwdGAgZnVuY3Rpb24gaXMgc3VwcGxpZWQsXG4gKiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGlmIGFueSA8c2NyaXB0PiBlbGVtZW50cyBhcmUgcmVuZGVyZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBBIHN0cmluZyBvZiB2YWxpZCBIVE1MIG1hcmt1cC5cbiAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBoYW5kbGVTY3JpcHQgSW52b2tlZCBvbmNlIGZvciBlYWNoIHJlbmRlcmVkIDxzY3JpcHQ+LlxuICogQHJldHVybiB7YXJyYXk8RE9NRWxlbWVudHxET01UZXh0Tm9kZT59IEFuIGFycmF5IG9mIHJlbmRlcmVkIG5vZGVzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBoYW5kbGVTY3JpcHQpIHtcbiAgdmFyIG5vZGUgPSBkdW1teU5vZGU7XG4gICEhIWR1bW15Tm9kZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgZHVtbXkgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgbm9kZU5hbWUgPSBnZXROb2RlTmFtZShtYXJrdXApO1xuXG4gIHZhciB3cmFwID0gbm9kZU5hbWUgJiYgZ2V0TWFya3VwV3JhcChub2RlTmFtZSk7XG4gIGlmICh3cmFwKSB7XG4gICAgbm9kZS5pbm5lckhUTUwgPSB3cmFwWzFdICsgbWFya3VwICsgd3JhcFsyXTtcblxuICAgIHZhciB3cmFwRGVwdGggPSB3cmFwWzBdO1xuICAgIHdoaWxlICh3cmFwRGVwdGgtLSkge1xuICAgICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBub2RlLmlubmVySFRNTCA9IG1hcmt1cDtcbiAgfVxuXG4gIHZhciBzY3JpcHRzID0gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gIGlmIChzY3JpcHRzLmxlbmd0aCkge1xuICAgICFoYW5kbGVTY3JpcHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnY3JlYXRlTm9kZXNGcm9tTWFya3VwKC4uLik6IFVuZXhwZWN0ZWQgPHNjcmlwdD4gZWxlbWVudCByZW5kZXJlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgY3JlYXRlQXJyYXlGcm9tTWl4ZWQoc2NyaXB0cykuZm9yRWFjaChoYW5kbGVTY3JpcHQpO1xuICB9XG5cbiAgdmFyIG5vZGVzID0gQXJyYXkuZnJvbShub2RlLmNoaWxkTm9kZXMpO1xuICB3aGlsZSAobm9kZS5sYXN0Q2hpbGQpIHtcbiAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgfVxuICByZXR1cm4gbm9kZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAuanNcbi8vIG1vZHVsZSBpZCA9IDkxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIGZiLXd3dy91bnNhZmUtaHRtbCAqL1xuXG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIER1bW15IGNvbnRhaW5lciB1c2VkIHRvIGRldGVjdCB3aGljaCB3cmFwcyBhcmUgbmVjZXNzYXJ5LlxuICovXG52YXIgZHVtbXlOb2RlID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuXG4vKipcbiAqIFNvbWUgYnJvd3NlcnMgY2Fubm90IHVzZSBgaW5uZXJIVE1MYCB0byByZW5kZXIgY2VydGFpbiBlbGVtZW50cyBzdGFuZGFsb25lLFxuICogc28gd2Ugd3JhcCB0aGVtLCByZW5kZXIgdGhlIHdyYXBwZWQgbm9kZXMsIHRoZW4gZXh0cmFjdCB0aGUgZGVzaXJlZCBub2RlLlxuICpcbiAqIEluIElFOCwgY2VydGFpbiBlbGVtZW50cyBjYW5ub3QgcmVuZGVyIGFsb25lLCBzbyB3cmFwIGFsbCBlbGVtZW50cyAoJyonKS5cbiAqL1xuXG52YXIgc2hvdWxkV3JhcCA9IHt9O1xuXG52YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG52YXIgdGFibGVXcmFwID0gWzEsICc8dGFibGU+JywgJzwvdGFibGU+J107XG52YXIgdHJXcmFwID0gWzMsICc8dGFibGU+PHRib2R5Pjx0cj4nLCAnPC90cj48L3Rib2R5PjwvdGFibGU+J107XG5cbnZhciBzdmdXcmFwID0gWzEsICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nLCAnPC9zdmc+J107XG5cbnZhciBtYXJrdXBXcmFwID0ge1xuICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuXG4gICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgJ2NvbCc6IFsyLCAnPHRhYmxlPjx0Ym9keT48L3Rib2R5Pjxjb2xncm91cD4nLCAnPC9jb2xncm91cD48L3RhYmxlPiddLFxuICAnbGVnZW5kJzogWzEsICc8ZmllbGRzZXQ+JywgJzwvZmllbGRzZXQ+J10sXG4gICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuXG4gICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICdvcHRpb24nOiBzZWxlY3RXcmFwLFxuXG4gICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICd0Ym9keSc6IHRhYmxlV3JhcCxcbiAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAndGhlYWQnOiB0YWJsZVdyYXAsXG5cbiAgJ3RkJzogdHJXcmFwLFxuICAndGgnOiB0cldyYXBcbn07XG5cbi8vIEluaXRpYWxpemUgdGhlIFNWRyBlbGVtZW50cyBzaW5jZSB3ZSBrbm93IHRoZXknbGwgYWx3YXlzIG5lZWQgdG8gYmUgd3JhcHBlZFxuLy8gY29uc2lzdGVudGx5LiBJZiB0aGV5IGFyZSBjcmVhdGVkIGluc2lkZSBhIDxkaXY+IHRoZXkgd2lsbCBiZSBpbml0aWFsaXplZCBpblxuLy8gdGhlIHdyb25nIG5hbWVzcGFjZSAoYW5kIHdpbGwgbm90IGRpc3BsYXkpLlxudmFyIHN2Z0VsZW1lbnRzID0gWydjaXJjbGUnLCAnY2xpcFBhdGgnLCAnZGVmcycsICdlbGxpcHNlJywgJ2cnLCAnaW1hZ2UnLCAnbGluZScsICdsaW5lYXJHcmFkaWVudCcsICdtYXNrJywgJ3BhdGgnLCAncGF0dGVybicsICdwb2x5Z29uJywgJ3BvbHlsaW5lJywgJ3JhZGlhbEdyYWRpZW50JywgJ3JlY3QnLCAnc3RvcCcsICd0ZXh0JywgJ3RzcGFuJ107XG5zdmdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlTmFtZSkge1xuICBtYXJrdXBXcmFwW25vZGVOYW1lXSA9IHN2Z1dyYXA7XG4gIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gdHJ1ZTtcbn0pO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24gZm9yIHRoZSBzdXBwbGllZCBgbm9kZU5hbWVgLlxuICpcbiAqIE5PVEU6IFRoaXMgbGF6aWx5IGRldGVjdHMgd2hpY2ggd3JhcHMgYXJlIG5lY2Vzc2FyeSBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbm9kZU5hbWUgTG93ZXJjYXNlIGBub2RlTmFtZWAuXG4gKiBAcmV0dXJuIHs/YXJyYXl9IE1hcmt1cCB3cmFwIGNvbmZpZ3VyYXRpb24sIGlmIGFwcGxpY2FibGUuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcmt1cFdyYXAobm9kZU5hbWUpIHtcbiAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01hcmt1cCB3cmFwcGluZyBub2RlIG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgaWYgKCFtYXJrdXBXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgIG5vZGVOYW1lID0gJyonO1xuICB9XG4gIGlmICghc2hvdWxkV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICBpZiAobm9kZU5hbWUgPT09ICcqJykge1xuICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgfSBlbHNlIHtcbiAgICAgIGR1bW15Tm9kZS5pbm5lckhUTUwgPSAnPCcgKyBub2RlTmFtZSArICc+PC8nICsgbm9kZU5hbWUgKyAnPic7XG4gICAgfVxuICAgIHNob3VsZFdyYXBbbm9kZU5hbWVdID0gIWR1bW15Tm9kZS5maXJzdENoaWxkO1xuICB9XG4gIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRNYXJrdXBXcmFwO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9nZXRNYXJrdXBXcmFwLmpzXG4vLyBtb2R1bGUgaWQgPSA5MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogR2V0cyB0aGUgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSBzdXBwbGllZCBlbGVtZW50IG9yIHdpbmRvdy5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlcyBhcmUgdW5ib3VuZGVkLCB1bmxpa2UgYGdldFNjcm9sbFBvc2l0aW9uYC4gVGhpcyBtZWFucyB0aGV5XG4gKiBtYXkgYmUgbmVnYXRpdmUgb3IgZXhjZWVkIHRoZSBlbGVtZW50IGJvdW5kYXJpZXMgKHdoaWNoIGlzIHBvc3NpYmxlIHVzaW5nXG4gKiBpbmVydGlhbCBzY3JvbGxpbmcpLlxuICpcbiAqIEBwYXJhbSB7RE9NV2luZG93fERPTUVsZW1lbnR9IHNjcm9sbGFibGVcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwIHdpdGggYHhgIGFuZCBgeWAga2V5cy5cbiAqL1xuXG5mdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG4gIGlmIChzY3JvbGxhYmxlLldpbmRvdyAmJiBzY3JvbGxhYmxlIGluc3RhbmNlb2Ygc2Nyb2xsYWJsZS5XaW5kb3cpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogc2Nyb2xsYWJsZS5wYWdlWE9mZnNldCB8fCBzY3JvbGxhYmxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgeTogc2Nyb2xsYWJsZS5wYWdlWU9mZnNldCB8fCBzY3JvbGxhYmxlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogc2Nyb2xsYWJsZS5zY3JvbGxMZWZ0LFxuICAgIHk6IHNjcm9sbGFibGUuc2Nyb2xsVG9wXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ZianMvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBfdXBwZXJjYXNlUGF0dGVybiA9IC8oW0EtWl0pL2c7XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgc3RyaW5nLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKlxuICogRm9yIENTUyBzdHlsZSBuYW1lcywgdXNlIGBoeXBoZW5hdGVTdHlsZU5hbWVgIGluc3RlYWQgd2hpY2ggd29ya3MgcHJvcGVybHlcbiAqIHdpdGggYWxsIHZlbmRvciBwcmVmaXhlcywgaW5jbHVkaW5nIGBtc2AuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfdXBwZXJjYXNlUGF0dGVybiwgJy0kMScpLnRvTG93ZXJDYXNlKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9oeXBoZW5hdGUuanNcbi8vIG1vZHVsZSBpZCA9IDk0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGh5cGhlbmF0ZSA9IHJlcXVpcmUoJy4vaHlwaGVuYXRlJyk7XG5cbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG5cbi8qKlxuICogSHlwaGVuYXRlcyBhIGNhbWVsY2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ2JhY2tncm91bmRDb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kLWNvbG9yXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ01velRyYW5zaXRpb24nKVxuICogICA8IFwiLW1vei10cmFuc2l0aW9uXCJcbiAqICAgPiBoeXBoZW5hdGVTdHlsZU5hbWUoJ21zVHJhbnNpdGlvbicpXG4gKiAgIDwgXCItbXMtdHJhbnNpdGlvblwiXG4gKlxuICogQXMgTW9kZXJuaXpyIHN1Z2dlc3RzIChodHRwOi8vbW9kZXJuaXpyLmNvbS9kb2NzLyNwcmVmaXhlZCksIGFuIGBtc2AgcHJlZml4XG4gKiBpcyBjb252ZXJ0ZWQgdG8gYC1tcy1gLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gaHlwaGVuYXRlKHN0cmluZykucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaHlwaGVuYXRlU3R5bGVOYW1lO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanNcbi8vIG1vZHVsZSBpZCA9IDk1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHZhciBkb2MgPSBvYmplY3QgPyBvYmplY3Qub3duZXJEb2N1bWVudCB8fCBvYmplY3QgOiBkb2N1bWVudDtcbiAgdmFyIGRlZmF1bHRWaWV3ID0gZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgcmV0dXJuICEhKG9iamVjdCAmJiAodHlwZW9mIGRlZmF1bHRWaWV3Lk5vZGUgPT09ICdmdW5jdGlvbicgPyBvYmplY3QgaW5zdGFuY2VvZiBkZWZhdWx0Vmlldy5Ob2RlIDogdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5ub2RlVHlwZSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG9iamVjdC5ub2RlTmFtZSA9PT0gJ3N0cmluZycpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2ZianMvbGliL2lzTm9kZS5qc1xuLy8gbW9kdWxlIGlkID0gOTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9pc05vZGUnKTtcblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSB0ZXh0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGlzVGV4dE5vZGUob2JqZWN0KSB7XG4gIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc1RleHROb2RlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9pc1RleHROb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSA5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKiBAdHlwZWNoZWNrcyBzdGF0aWMtb25seVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNZW1vaXplcyB0aGUgcmV0dXJuIHZhbHVlIG9mIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIG9uZSBzdHJpbmcgYXJndW1lbnQuXG4gKi9cblxuZnVuY3Rpb24gbWVtb2l6ZVN0cmluZ09ubHkoY2FsbGJhY2spIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgaWYgKCFjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG4gICAgICBjYWNoZVtzdHJpbmddID0gY2FsbGJhY2suY2FsbCh0aGlzLCBzdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVbc3RyaW5nXTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplU3RyaW5nT25seTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vZmJqcy9saWIvbWVtb2l6ZVN0cmluZ09ubHkuanNcbi8vIG1vZHVsZSBpZCA9IDk4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuXG52YXIgcGVyZm9ybWFuY2U7XG5cbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2UgfHwgd2luZG93Lm1zUGVyZm9ybWFuY2UgfHwgd2luZG93LndlYmtpdFBlcmZvcm1hbmNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlIHx8IHt9O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9wZXJmb3JtYW5jZS5qc1xuLy8gbW9kdWxlIGlkID0gOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgcGVyZm9ybWFuY2UgPSByZXF1aXJlKCcuL3BlcmZvcm1hbmNlJyk7XG5cbnZhciBwZXJmb3JtYW5jZU5vdztcblxuLyoqXG4gKiBEZXRlY3QgaWYgd2UgY2FuIHVzZSBgd2luZG93LnBlcmZvcm1hbmNlLm5vdygpYCBhbmQgZ3JhY2VmdWxseSBmYWxsYmFjayB0b1xuICogYERhdGUubm93KClgIGlmIGl0IGRvZXNuJ3QgZXhpc3QuIFdlIG5lZWQgdG8gc3VwcG9ydCBGaXJlZm94IDwgMTUgZm9yIG5vd1xuICogYmVjYXVzZSBvZiBGYWNlYm9vaydzIHRlc3RpbmcgaW5mcmFzdHJ1Y3R1cmUuXG4gKi9cbmlmIChwZXJmb3JtYW5jZS5ub3cpIHtcbiAgcGVyZm9ybWFuY2VOb3cgPSBmdW5jdGlvbiBwZXJmb3JtYW5jZU5vdygpIHtcbiAgICByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7XG4gIH07XG59IGVsc2Uge1xuICBwZXJmb3JtYW5jZU5vdyA9IGZ1bmN0aW9uIHBlcmZvcm1hbmNlTm93KCkge1xuICAgIHJldHVybiBEYXRlLm5vdygpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlTm93O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9mYmpzL2xpYi9wZXJmb3JtYW5jZU5vdy5qc1xuLy8gbW9kdWxlIGlkID0gMTAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0ge1xuXHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFwicGxheWVyTW9kZWxcIjoge1xuXHRcdFwiZ3VpbGRJbmZvXCI6IHtcblx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcImljb25cIjogXCJTcXVhZFN5bWJvbHNfMTFcIixcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ4Nzc2NTc3Mixcblx0XHRcdFwicGxheWVySGFzT3V0c3RhbmRpbmdKb2luUmVxdWVzdFwiOiBmYWxzZVxuXHRcdH0sXG5cdFx0XCJ1cGdyYWRlc1wiOiB7XG5cdFx0XHRcInRyb29wXCI6IHtcblx0XHRcdFx0XCJEYXJrXCI6IDUsXG5cdFx0XHRcdFwiU3Rvcm1cIjogNSxcblx0XHRcdFx0XCJFbXBpcmVTcGVlZGVyXCI6IDUsXG5cdFx0XHRcdFwiQVRTVFwiOiA1LFxuXHRcdFx0XHRcIlNjb3V0XCI6IDQsXG5cdFx0XHRcdFwiMk1UYW5rXCI6IDUsXG5cdFx0XHRcdFwiSGVyb0FUU1RcIjogNSxcblx0XHRcdFx0XCJIZXJvQVRNUFwiOiA1LFxuXHRcdFx0XHRcIkRld2JhY2tcIjogNSxcblx0XHRcdFx0XCJBVE1QXCI6IDQsXG5cdFx0XHRcdFwiSGVyb0NyaW1zb25HdWFyZFwiOiA1LFxuXHRcdFx0XHRcIlRlY2huaWNpYW5cIjogNVxuXHRcdFx0fSxcblx0XHRcdFwic3BlY2lhbEF0dGFja1wiOiB7XG5cdFx0XHRcdFwiQXRtb3NNaWdcIjogMVxuXHRcdFx0fSxcblx0XHRcdFwiYnVpbGRpbmdcIjoge30sXG5cdFx0XHRcImVxdWlwbWVudFwiOiB7fVxuXHRcdH0sXG5cdFx0XCJwcml6ZXNcIjoge1xuXHRcdFx0XCJ0cm9vcFwiOiB7XG5cdFx0XHRcdFwiRGV3YmFja1wiOiAxLFxuXHRcdFx0XHRcIlNjb3V0XCI6IDYwLFxuXHRcdFx0XHRcIkFUTVBcIjogMjIsXG5cdFx0XHRcdFwiSGVyb0FUU1RcIjogMjMsXG5cdFx0XHRcdFwiU2hvY2tcIjogNTEsXG5cdFx0XHRcdFwiMk1UYW5rXCI6IDE4LFxuXHRcdFx0XHRcIlNlY3VyaXR5RHJvaWRcIjogNjgsXG5cdFx0XHRcdFwiRW1waXJlU3BlZWRlclwiOiAzNyxcblx0XHRcdFx0XCJBVEFUXCI6IDE3LFxuXHRcdFx0XHRcIkhlcm9Dcmltc29uR3VhcmRcIjogMTIsXG5cdFx0XHRcdFwiSGVyb0FUTVBcIjogMTIsXG5cdFx0XHRcdFwiSGVyb0FUQVRcIjogMTQsXG5cdFx0XHRcdFwiRW1waXJlSG92ZXJ0YW5rU2FtcGxlXCI6IDcsXG5cdFx0XHRcdFwiS3ViYXpJbnZhZGVyXCI6IDMsXG5cdFx0XHRcdFwiVGVjaG5pY2lhblwiOiA2LFxuXHRcdFx0XHRcIkVtcGlyZVRvZ25hdGhcIjogMyxcblx0XHRcdFx0XCJIZWF2eVN0b3JtXCI6IDEyLFxuXHRcdFx0XHRcIlByb2JlRHJvaWRcIjogN1xuXHRcdFx0fSxcblx0XHRcdFwic3BlY2lhbEF0dGFja1wiOiB7XG5cdFx0XHRcdFwiQXRtb3NNaWdcIjogNTAsXG5cdFx0XHRcdFwiVGllQm9tYmVyXCI6IDIsXG5cdFx0XHRcdFwiVGllRGVmZW5kZXJcIjogMSxcblx0XHRcdFx0XCJUaWVJbnRlcmNlcHRvclwiOiAzLFxuXHRcdFx0XHRcIlRpZUZpZ2h0ZXJcIjogMVxuXHRcdFx0fSxcblx0XHRcdFwicmVzb3VyY2VzXCI6IHt9LFxuXHRcdFx0XCJjcmF0ZXNcIjoge1xuXHRcdFx0XHRcImF2YWlsYWJsZVwiOiB7fSxcblx0XHRcdFx0XCJpblByb2dyZXNzXCI6IHt9LFxuXHRcdFx0XHRcIm5leHRcIjogMzUzLFxuXHRcdFx0XHRcIm5leHREYWlseUNyYXRlVGltZVwiOiAxNDkwNDE0NDAwLFxuXHRcdFx0XHRcIm5leHRIb2xvbmV0VGltZVwiOiAxNDg4MjcxOTI4XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImRvbmF0ZWRUcm9vcHNcIjoge1xuXHRcdFx0XCJ0cm9vcE1lcmNlbmFyeUVtcGlyZUdhbW9ycmVhbldhcnJpb3IyXCI6IHtcblx0XHRcdFx0XCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIjogMlxuXHRcdFx0fSxcblx0XHRcdFwidHJvb3BIZWF2eVN0b3JtN1wiOiB7XG5cdFx0XHRcdFwiMzA3NmRlNDQtYTEyZi0xMWU2LTg1YzktMDYwYTMyMDA0ZjhjXCI6IDFcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiYnVpbGRpbmdzVW5kZXJDb25zdHJ1Y3Rpb25cIjogW10sXG5cdFx0XCJtYXBcIjoge1xuXHRcdFx0XCJuZXh0XCI6IDI4MCxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0MVwiLFxuXHRcdFx0XCJidWlsZGluZ3NcIjogW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfOFwiLFxuXHRcdFx0XHRcdFwieFwiOiAxNCxcblx0XHRcdFx0XHRcInpcIjogMTcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF83MFwiLFxuXHRcdFx0XHRcdFwieFwiOiAxNyxcblx0XHRcdFx0XHRcInpcIjogNixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzdcIixcblx0XHRcdFx0XHRcInhcIjogMTMsXG5cdFx0XHRcdFx0XCJ6XCI6IDE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNlwiLFxuXHRcdFx0XHRcdFwieFwiOiAxMixcblx0XHRcdFx0XHRcInpcIjogMTcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF81XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDExLFxuXHRcdFx0XHRcdFwielwiOiAxNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEwNlwiLFxuXHRcdFx0XHRcdFwieFwiOiA3LFxuXHRcdFx0XHRcdFwielwiOiAxOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNyZWRpdEdlbmVyYXRvcjRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiAxNDkwMzgwNTQwLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjBcIixcblx0XHRcdFx0XHRcInhcIjogMTUsXG5cdFx0XHRcdFx0XCJ6XCI6IDYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82NFwiLFxuXHRcdFx0XHRcdFwieFwiOiAxNyxcblx0XHRcdFx0XHRcInpcIjogNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzRcIixcblx0XHRcdFx0XHRcInhcIjogMTAsXG5cdFx0XHRcdFx0XCJ6XCI6IDE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjNcIixcblx0XHRcdFx0XHRcInhcIjogMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDgsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8zXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDksXG5cdFx0XHRcdFx0XCJ6XCI6IDE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMlwiLFxuXHRcdFx0XHRcdFwieFwiOiA4LFxuXHRcdFx0XHRcdFwielwiOiAxNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzYyXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDcsXG5cdFx0XHRcdFx0XCJ6XCI6IDE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjFcIixcblx0XHRcdFx0XHRcInhcIjogMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDE1LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjhcIixcblx0XHRcdFx0XHRcInhcIjogMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yNFwiLFxuXHRcdFx0XHRcdFwieFwiOiAxOSxcblx0XHRcdFx0XHRcInpcIjogMTMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVDcmVkaXRHZW5lcmF0b3I0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDM4MDU0Myxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzY3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDE2LFxuXHRcdFx0XHRcdFwielwiOiAxNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzY2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDE3LFxuXHRcdFx0XHRcdFwielwiOiAxNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzY1XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDE3LFxuXHRcdFx0XHRcdFwielwiOiAxNixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzc4XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDE5LFxuXHRcdFx0XHRcdFwielwiOiAxOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNyZWRpdFN0b3JhZ2U1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzkxXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDcsXG5cdFx0XHRcdFx0XCJ6XCI6IDYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF85MFwiLFxuXHRcdFx0XHRcdFwieFwiOiA4LFxuXHRcdFx0XHRcdFwielwiOiA2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODZcIixcblx0XHRcdFx0XHRcInhcIjogMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDEyLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODVcIixcblx0XHRcdFx0XHRcInhcIjogMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDEzLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODRcIixcblx0XHRcdFx0XHRcInhcIjogMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDE0LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODhcIixcblx0XHRcdFx0XHRcInhcIjogMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDEwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODdcIixcblx0XHRcdFx0XHRcInhcIjogMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDExLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjBcIixcblx0XHRcdFx0XHRcInhcIjogMTUsXG5cdFx0XHRcdFx0XCJ6XCI6IDE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTdcIixcblx0XHRcdFx0XHRcInhcIjogOSxcblx0XHRcdFx0XHRcInpcIjogNixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDEwLFxuXHRcdFx0XHRcdFwielwiOiA2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTVcIixcblx0XHRcdFx0XHRcInhcIjogMTEsXG5cdFx0XHRcdFx0XCJ6XCI6IDYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNFwiLFxuXHRcdFx0XHRcdFwieFwiOiAxMixcblx0XHRcdFx0XHRcInpcIjogNixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzU4XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDE5LFxuXHRcdFx0XHRcdFwielwiOiAxMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU1hdGVyaWFsc0dlbmVyYXRvcjVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiAxNDkwMzgwNTQ0LFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTlcIixcblx0XHRcdFx0XHRcInhcIjogMTMsXG5cdFx0XHRcdFx0XCJ6XCI6IDYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xOFwiLFxuXHRcdFx0XHRcdFwieFwiOiAxNCxcblx0XHRcdFx0XHRcInpcIjogNixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDE2LFxuXHRcdFx0XHRcdFwielwiOiA2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODJcIixcblx0XHRcdFx0XHRcInhcIjogMTAsXG5cdFx0XHRcdFx0XCJ6XCI6IDE1LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTW9ydGFyNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF84MVwiLFxuXHRcdFx0XHRcdFwieFwiOiAxMixcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU1vcnRhcjRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjNcIixcblx0XHRcdFx0XHRcInhcIjogMTMsXG5cdFx0XHRcdFx0XCJ6XCI6IDE5LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQ3JlZGl0U3RvcmFnZTRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNzZcIixcblx0XHRcdFx0XHRcInhcIjogMSxcblx0XHRcdFx0XHRcInpcIjogMTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVDcmVkaXRHZW5lcmF0b3I0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDM4MDUzOSxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzc5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDE2LFxuXHRcdFx0XHRcdFwielwiOiAxOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU1hdGVyaWFsc1N0b3JhZ2U0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEwN1wiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiAxOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU1hdGVyaWFsc0dlbmVyYXRvcjVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiAxNDkwMzgwNTM5LFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNTRcIixcblx0XHRcdFx0XHRcInhcIjogMTksXG5cdFx0XHRcdFx0XCJ6XCI6IDE2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzU3RvcmFnZTVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNTNcIixcblx0XHRcdFx0XHRcInhcIjogMTAsXG5cdFx0XHRcdFx0XCJ6XCI6IDE5LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzR2VuZXJhdG9yNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzODA1NDEsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMTBcIixcblx0XHRcdFx0XHRcInhcIjogMTIsXG5cdFx0XHRcdFx0XCJ6XCI6IDE1LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUm9ja2V0VHVycmV0NFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF81MlwiLFxuXHRcdFx0XHRcdFwieFwiOiAxMCxcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVJhcGlkRmlyZVR1cnJldDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNTVcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVNxdWFkQnVpbGRpbmc0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzczXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDE0LFxuXHRcdFx0XHRcdFwielwiOiA4LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUm9ja2V0VHVycmV0NFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMjRcIixcblx0XHRcdFx0XHRcInhcIjogMTUsXG5cdFx0XHRcdFx0XCJ6XCI6IDEwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlU2hpZWxkR2VuZXJhdG9yNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMTJcIixcblx0XHRcdFx0XHRcInhcIjogOCxcblx0XHRcdFx0XHRcInpcIjogMTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVTaGllbGRHZW5lcmF0b3I0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExOFwiLFxuXHRcdFx0XHRcdFwieFwiOiA2LFxuXHRcdFx0XHRcdFwielwiOiA2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTE3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDUsXG5cdFx0XHRcdFx0XCJ6XCI6IDYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMTlcIixcblx0XHRcdFx0XHRcInhcIjogNCxcblx0XHRcdFx0XHRcInpcIjogNixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEyMlwiLFxuXHRcdFx0XHRcdFwieFwiOiA2LFxuXHRcdFx0XHRcdFwielwiOiAxNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExNlwiLFxuXHRcdFx0XHRcdFwieFwiOiA1LFxuXHRcdFx0XHRcdFwielwiOiAxNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExNVwiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiAxNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzIyXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IDE1LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUmFwaWRGaXJlVHVycmV0NFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMTFcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogMTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVSb2NrZXRUdXJyZXQ0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEyMVwiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiAxNixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEyMFwiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiAxNSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzlcIixcblx0XHRcdFx0XHRcInhcIjogNCxcblx0XHRcdFx0XHRcInpcIjogNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExNFwiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiAxNCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExM1wiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiAxMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzgzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IDExLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTJcIixcblx0XHRcdFx0XHRcInhcIjogNCxcblx0XHRcdFx0XHRcInpcIjogMTAsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF84OVwiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiA5LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTBcIixcblx0XHRcdFx0XHRcInhcIjogNCxcblx0XHRcdFx0XHRcInpcIjogMTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMVwiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiA4LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODBcIixcblx0XHRcdFx0XHRcInhcIjogMTYsXG5cdFx0XHRcdFx0XCJ6XCI6IDgsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVUcmFwU3RyaWtlR2VuZXJpYzRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNzJcIixcblx0XHRcdFx0XHRcInhcIjogMTUsXG5cdFx0XHRcdFx0XCJ6XCI6IDE0LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUmFwaWRGaXJlVHVycmV0NFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMDhcIixcblx0XHRcdFx0XHRcInhcIjogMTUsXG5cdFx0XHRcdFx0XCJ6XCI6IDE2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlVHJhcFN0cmlrZUdlbmVyaWM0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEyM1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtMixcblx0XHRcdFx0XHRcInpcIjogMTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVTY291dFRvd2VyMVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yNVwiLFxuXHRcdFx0XHRcdFwieFwiOiAxMyxcblx0XHRcdFx0XHRcInpcIjogLTEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVTdGFycG9ydDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNzFcIixcblx0XHRcdFx0XHRcInhcIjogNyxcblx0XHRcdFx0XHRcInpcIjogLTEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVTdGFycG9ydDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNTlcIixcblx0XHRcdFx0XHRcInhcIjogMixcblx0XHRcdFx0XHRcInpcIjogMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUZhY3Rvcnk0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzY5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDAsXG5cdFx0XHRcdFx0XCJ6XCI6IDYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVCYXJyYWNrczVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNTZcIixcblx0XHRcdFx0XHRcInhcIjogMCxcblx0XHRcdFx0XHRcInpcIjogOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUJhcnJhY2tzNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF85M1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtMixcblx0XHRcdFx0XHRcInpcIjogMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU9mZmVuc2VMYWI1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEwOVwiLFxuXHRcdFx0XHRcdFwieFwiOiAwLFxuXHRcdFx0XHRcdFwielwiOiAxMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUJhcnJhY2tzNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMjdcIixcblx0XHRcdFx0XHRcInhcIjogLTEsXG5cdFx0XHRcdFx0XCJ6XCI6IDE1LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlVGFjdGljYWxDb21tYW5kNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDEwLFxuXHRcdFx0XHRcdFwielwiOiAxMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUhRNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yNTRcIixcblx0XHRcdFx0XHRcInhcIjogLTUsXG5cdFx0XHRcdFx0XCJ6XCI6IDE2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzR2VuZXJhdG9yNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzODA1MzcsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yNTNcIixcblx0XHRcdFx0XHRcInhcIjogLTQsXG5cdFx0XHRcdFx0XCJ6XCI6IDEyLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQ3JlZGl0R2VuZXJhdG9yNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzODA1MzYsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yNDdcIixcblx0XHRcdFx0XHRcInhcIjogLTIxLFxuXHRcdFx0XHRcdFwielwiOiAtMjEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yNDBcIixcblx0XHRcdFx0XHRcInhcIjogLTE5LFxuXHRcdFx0XHRcdFwielwiOiAtMTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVSb2NrZXRUdXJyZXQxXCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI0NVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTksXG5cdFx0XHRcdFx0XCJ6XCI6IC0yMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI0MlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IC0yMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI0NlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMjEsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI0MVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMjEsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI1MFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTksXG5cdFx0XHRcdFx0XCJ6XCI6IC0xNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI0OVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI0M1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI0OFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTgsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI0NFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTcsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzkyXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xNyxcblx0XHRcdFx0XHRcInpcIjogLTIwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTFcIixcblx0XHRcdFx0XHRcInhcIjogLTIwLFxuXHRcdFx0XHRcdFwielwiOiAtMTcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yNlwiLFxuXHRcdFx0XHRcdFwieFwiOiAyMCxcblx0XHRcdFx0XHRcInpcIjogLTIxLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlRHJvaWRIdXQxXCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI3NVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMSxcblx0XHRcdFx0XHRcInpcIjogLTE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwianVua1NtYWxsMVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yNzdcIixcblx0XHRcdFx0XHRcInhcIjogLTE1LFxuXHRcdFx0XHRcdFwielwiOiAxNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcInJvY2tTbWFsbDFcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNzdcIixcblx0XHRcdFx0XHRcInhcIjogMTksXG5cdFx0XHRcdFx0XCJ6XCI6IDIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVNYXRlcmlhbHNHZW5lcmF0b3I1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDM4MDU0Nixcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzU3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDE5LFxuXHRcdFx0XHRcdFwielwiOiA2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQ3JlZGl0R2VuZXJhdG9yNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzODA1NDUsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH1cblx0XHRcdF1cblx0XHR9LFxuXHRcdFwiaW52ZW50b3J5XCI6IHtcblx0XHRcdFwic3RvcmFnZVwiOiB7XG5cdFx0XHRcdFwiY3JlZGl0c1wiOiB7XG5cdFx0XHRcdFx0XCJhbW91bnRcIjogMTk4NTgsXG5cdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAyMjUwMDAsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF0ZXJpYWxzXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiAxNDg1NCxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDIyNTAwMCxcblx0XHRcdFx0XHRcInNjYWxlXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjb250cmFiYW5kXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiAwLFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMCxcblx0XHRcdFx0XHRcInNjYWxlXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJyZXB1dGF0aW9uXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiAxLFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMTQsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY3J5c3RhbHNcIjoge1xuXHRcdFx0XHRcdFwiYW1vdW50XCI6IDQyNCxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IC0xLFxuXHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRyb2lkc1wiOiB7XG5cdFx0XHRcdFx0XCJhbW91bnRcIjogMixcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDUsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwieHBcIjoge1xuXHRcdFx0XHRcdFwiYW1vdW50XCI6IDc0OSxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IC0xLFxuXHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiAwLFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMjAsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiaGVyb1wiOiB7XG5cdFx0XHRcdFx0XCJhbW91bnRcIjogMCxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDAsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2hhbXBpb25cIjoge1xuXHRcdFx0XHRcdFwiYW1vdW50XCI6IDAsXG5cdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAwLFxuXHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0XCJjYXBhY2l0eVwiOiAtMSxcblx0XHRcdFwic3ViU3RvcmFnZVwiOiB7XG5cdFx0XHRcdFwidHJvb3BcIjoge1xuXHRcdFx0XHRcdFwic3RvcmFnZVwiOiB7XG5cdFx0XHRcdFx0XHRcInRyb29wRW1waXJlU3BlZWRlcjVcIjoge1xuXHRcdFx0XHRcdFx0XHRcImFtb3VudFwiOiAzLFxuXHRcdFx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IC0xLFxuXHRcdFx0XHRcdFx0XHRcInNjYWxlXCI6IDZcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcInRyb29wVGVjaG5pY2lhbjVcIjoge1xuXHRcdFx0XHRcdFx0XHRcImFtb3VudFwiOiAyLFxuXHRcdFx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IC0xLFxuXHRcdFx0XHRcdFx0XHRcInNjYWxlXCI6IDRcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogNTIsXG5cdFx0XHRcdFx0XCJzdWJTdG9yYWdlXCI6IHt9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic3BlY2lhbEF0dGFja1wiOiB7XG5cdFx0XHRcdFx0XCJzdG9yYWdlXCI6IHt9LFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMCxcblx0XHRcdFx0XHRcInN1YlN0b3JhZ2VcIjoge31cblx0XHRcdFx0fSxcblx0XHRcdFx0XCJoZXJvXCI6IHtcblx0XHRcdFx0XHRcInN0b3JhZ2VcIjoge1xuXHRcdFx0XHRcdFx0XCJ0cm9vcEhlcm9Dcmltc29uR3VhcmQ1XCI6IHtcblx0XHRcdFx0XHRcdFx0XCJhbW91bnRcIjogMSxcblx0XHRcdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAxLFxuXHRcdFx0XHRcdFx0XHRcInNjYWxlXCI6IDFcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcInRyb29wSGVyb0FUTVA1XCI6IHtcblx0XHRcdFx0XHRcdFx0XCJhbW91bnRcIjogMSxcblx0XHRcdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAxLFxuXHRcdFx0XHRcdFx0XHRcInNjYWxlXCI6IDFcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMixcblx0XHRcdFx0XHRcInN1YlN0b3JhZ2VcIjoge31cblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjaGFtcGlvblwiOiB7XG5cdFx0XHRcdFx0XCJzdG9yYWdlXCI6IHt9LFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMCxcblx0XHRcdFx0XHRcInN1YlN0b3JhZ2VcIjoge31cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XCJjdXJyZW50UXVlc3RcIjogXCJcIixcblx0XHRcInByb3RlY3RlZFVudGlsXCI6IDE0OTA0MDIwNDUsXG5cdFx0XCJwcm90ZWN0aW9uRnJvbVwiOiAxNDkwMzU4ODQ1LFxuXHRcdFwicHJvdGVjdGlvbkNvb2xkb3duVW50aWxcIjoge30sXG5cdFx0XCJiYXR0bGVMb2dzXCI6IFtcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcImIzNzU3NmRlLTA3YzktMTFlNy05MjM2LTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiZmYwYWE2YmEtZmE3ZS0xMWU2LTkxNTgtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwicGFzelwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiZTYyOTBlZGItNzBmYi0xMWU0LWIzMmUtMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJSYW1ibGFoelwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDM4MSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDUsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDEyLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE1Nixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtNSxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5Mzk0OTkyLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDExMjY3LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDEyNTc2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTEyNjcsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTI1NzZcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIxNDE0LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIzOTAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BIZXJvQ2hld2JhY2NhNFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BCYW50aGE0XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcFdvb2tpZTRcIjogMyxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2taOTUxXCI6IDEsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrQVdpbmcxXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFBhdGhmaW5kZXI1XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcEFBVDE0XCI6IDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BXb29raWU0XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI0XCI6IDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogNTMsXG5cdFx0XHRcdFwic3RhcnNcIjogMSxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxOCxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxMixcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiMjAzYTNiY2EtMDgwNy0xMWU3LWJhMGItMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJhMjMzYmM3OS04YTM0LTExZTUtODc0My0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJPYmkgVHdvXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI3NjZjOTIwZC01YWExLTExZTYtYjA2ZC0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkNvbGxhdGVyYWxEYW1hZ2VcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAzODE2LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogLTIzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNzA3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE4NCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAyOCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5NDIxNTk3LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge30sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMTE5OSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMzkwMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wVmFuZ3VhcmQxXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjogbnVsbCxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjogbnVsbCxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiAwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDAsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTAsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMjcsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMFwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiB0cnVlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2U0XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcImY5YzYzOGU5LTA4MDctMTFlNy1iMzVlLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiODk4YzViY2MtOTU1My0xMWU2LWEyMWMtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwi0K3QtNGD0LDRgNC0XCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI0YmM0OThmZS0xYzc3LTExZTYtYjVjMy0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkdUT3JlYmVsc1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDI3MzksXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiA2LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNjQ4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE3OCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtNixcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5NDIxNjkzLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIwMTk5LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyOTAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjExOTksXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjM5MDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIxMTk5LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIzOTAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNlwiOiAyNCxcblx0XHRcdFx0XHRcInRyb29wSnVnZ2VybmF1dDZcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogOTIsXG5cdFx0XHRcdFwic3RhcnNcIjogMixcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMCxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxOSxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2UzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjY0MzA4MTE3LTA4NmMtMTFlNy05OTAyLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNWFmZmUwYjAtZWRkZS0xMWU2LTllMjUtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwicmVzcXVpZWxcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjZiNmM0NDNhLTVmNjItMTFlNi1iMjUwLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiU0hPQ0tfV0FWRVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDQxMDEsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiA2LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMjEyLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE3Mixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtNixcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5NDY0ODY3LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTc4NDIsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE1MjAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxODg0Mixcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTYyMDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIwNDAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIzMDQyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BBQVQxNlwiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNlwiOiA0NCxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wTWVyY2VuYXJ5UmViZWxHYW1vcnJlYW5XYXJyaW9yMVwiOiAxLFxuXHRcdFx0XHRcdFwic3BlY2lhbEF0dGFja1hXaW5nNlwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvTGVpYTVcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogOTIsXG5cdFx0XHRcdFwic3RhcnNcIjogMixcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMCxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAyNSxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDJcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsQ29udHJhYmFuZEdlbmVyYXRvckhlYWx0aDNcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTWF0ZXJpYWxzR2VuZXJhdG9ySGVhbHRoMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDNcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsQ3JlZGl0R2VuZXJhdG9ySGVhbHRoMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI1MDc5NWNhNy0wOGQwLTExZTctOTc4OS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjFmZTg4YWM3LWE4MzctMTFlNi04ZGZkLTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIlRBQ1hcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjI4ODczYzlkLWFjOWEtMTFlNC1hOWEyLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiUmViZWxUaG9ybnNcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAyNDk5LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMTAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xMTEsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTYyLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0xMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5NTA3NzM0LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjEzNTQsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE4NzYwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMjM1NCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTk3NjBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE5NzYwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyMzU0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNlwiOiAyMCxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM2XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcEJhbnRoYTZcIjogNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMTAwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDMsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTAsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTksXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTJcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTW9ydGFyVHVycmV0RGFtYWdlMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjJcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiNTM2MDIwOTgtMDk1OC0xMWU3LThkMDgtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJkNWNjNGVlNy1lMjMxLTExZTYtODFlMS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJMw6luYVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiZDZmM2I2MzEtNzM5Yi0xMWU2LTg1OWEtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJQb3dlci1IdW5ncnlcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAzMjQsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAtMTEsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xNjYsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTc1LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDEzLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk1NjYxNTcsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNjY0OCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA3MjAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNjY0OCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA3MjAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxOTI0OCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMTgwMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSnVnZ2VybmF1dDVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wQUFUMTVcIjogMixcblx0XHRcdFx0XHRcInRyb29wSXRob3JpYW5JbmZpbHRyYXRvcjVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wRGVzZXJ0U2tpZmY1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFJlYmVsU3BlZWRlcjVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wV29va2llNVwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wS3ViYXpJbnZhZGVyNVwiOiAxLFxuXHRcdFx0XHRcdFwic3BlY2lhbEF0dGFja0hXSzI5MDJcIjogMSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tCV2luZzJcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0xlaWE1XCI6IDEsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrWFdpbmc1XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDQ3LFxuXHRcdFx0XHRcInN0YXJzXCI6IDAsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTgsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTMsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENyZWRpdEdlbmVyYXRvckhlYWx0aDFcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTWF0ZXJpYWxzR2VuZXJhdG9ySGVhbHRoMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDb250cmFiYW5kR2VuZXJhdG9ySGVhbHRoMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDJcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiMGQ5YjRiZjItMDk1OS0xMWU3LTk5OWQtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIzYjgxMDE3NC1hNjUxLTExZTUtYjVlOC0wNmUwODQwMDRmOTJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJza3l3YWxsXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJjOWUwNTdmNy1hM2UxLTExZTUtOWM5Yi0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIlJVU1NJQU5CRUFSXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMjQ0MSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDEwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNzM2LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE2NSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTU2NjUwOSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNTE5MSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxNzI4MFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDUwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxODI4MFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTYxOTEsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTgyODBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI2XCI6IDEzLFxuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVJlYmVsNlwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNYXJrc21hbjZcIjogMixcblx0XHRcdFx0XHRcInRyb29wTWVkaWM1XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFQyQlRhbms0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9DaGV3YmFjY2E0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ1XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDEzLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxDb250cmFiYW5kR2VuZXJhdG9ySGVhbHRoMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNYXRlcmlhbHNHZW5lcmF0b3JIZWFsdGgyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENyZWRpdEdlbmVyYXRvckhlYWx0aDJcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGgzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGgyXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjkxZGNlZjA3LTA5ZGMtMTFlNy05OTAyLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiZDM0ZWJmODgtYTIyMi0xMWU2LWJjYmItMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiR09LVVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiMzdhOGEzOGQtYmExMC0xMWU1LTgyMTktMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJJVEFMSUFOSVNcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxMzY1LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogLTEyLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNzYxLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE3OSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAxNCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5NjIyOTIzLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIzMTUsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjQzNlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIzMTUsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjQzNlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTAzMjQsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTY5MzBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI1XCI6IDIwLFxuXHRcdFx0XHRcdFwidHJvb3BXb29raWU1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9SMkQyNVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BSZWJlbFNwZWVkZXI1XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEFBVDE1XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ1XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU3Rvcm02XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiAzNSxcblx0XHRcdFx0XCJzdGFyc1wiOiAwLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDE2LFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE0LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxCdXJzdFR1cnJldERhbWFnZTFcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0SGVhbHRoMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDb250cmFiYW5kR2VuZXJhdG9ySGVhbHRoNVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJkOGY4MGZhOS0wOWRjLTExZTctYjM1ZS0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjU1NjEwNmJiLTM4ZWItMTFlNS1hMzdhLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcImNvbXBvemVyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI4Y2Y3ZjM4Ni0yZjE0LTExZTYtOWZjOC0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIlRoZV9SZXNpc3RhbmNlXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNDAxMDEsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAxMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogNTc1LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE2OSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTYyMzA2OSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA4MzA4LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDE0ODIxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogOTMwOCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxNTgyMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogOTMwOCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxNTgyMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjlcIjogMTksXG5cdFx0XHRcdFx0XCJ0cm9vcFJlYmVsU3BlZWRlcjlcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0NoZXdiYWNjYTlcIjogMSxcblx0XHRcdFx0XHRcInRyb29wTWVyY2VuYXJ5UmViZWxUd2lsZWtJbmNpbmVyYXRvcjVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wUmViZWxKZXRwYWNrVHJvb3BlcjEwXCI6IDNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU25pcGVyN1wiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTZcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDQzLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2U0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENyZWRpdEdlbmVyYXRvckhlYWx0aDVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTWF0ZXJpYWxzR2VuZXJhdG9ySGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjJcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiOWZiZDg1NTItMGE2Mi0xMWU3LTk5MDItMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI0YzZjMzM4OC1kYzUxLTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJFRDFcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcImQwZGIyMzc2LWI0MDQtMTFlNi1iZWM4LTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiU3F1YWRDaHVja05vcnJpc1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE0NTU5LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMTAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC01MDIsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTU5LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0xMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5NjgwNTQ2LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjM4NjAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE2NjE2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNzYxNlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTc2MTYsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjQ4NjBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI2XCI6IDE2LFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQ2hld2JhY2NhNlwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BEZXNlcnRTa2lmZjZcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDZcIjogNixcblx0XHRcdFx0XHRcInRyb29wTWVkaWM1XCI6IDRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDMxLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2UxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNYXRlcmlhbHNHZW5lcmF0b3JIZWFsdGgzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENyZWRpdEdlbmVyYXRvckhlYWx0aDNcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDRcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiZmJmZWE3NmEtMGFlOC0xMWU3LWIzNWUtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5NjZhYTM1YS1hYzIwLTExZTUtODIxOS0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJodWZmXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJmY2U5ZTZhNC00ZmI5LTExZTYtYjk1Ny0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkZJUkVTVE9STUVSU1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU2MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDE4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMzE0LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE0MSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTgsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTczODI1OCxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyODA4LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNjUzMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjM4MDgsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE3NTMyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNzUzMixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMzgwOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSnVnZ2VybmF1dDZcIjogMixcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDVcIjogMyxcblx0XHRcdFx0XHRcInRyb29wSGVyb0NoZXdiYWNjYTZcIjogMSxcblx0XHRcdFx0XHRcInRyb29wV29va2llNVwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNVwiOiAxNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFJlYmVsU3BlZWRlcjhcIjogMSxcblx0XHRcdFx0XHRcInRyb29wQUFUMTdcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjVcIjogMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiAxMDAsXG5cdFx0XHRcdFwic3RhcnNcIjogMyxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxOCxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxNCxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsTWF0ZXJpYWxzR2VuZXJhdG9ySGVhbHRoM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDcmVkaXRHZW5lcmF0b3JIZWFsdGgzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDb250cmFiYW5kR2VuZXJhdG9ySGVhbHRoM1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJkZDE3ZWNiMi0wYjZlLTExZTctOTc4OS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjYwNzk0MWM4LWFjNGMtMTFlNi1iMGQ1LTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcImtpbGxlclwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA4NjQ5LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMTAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0yMDg1LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDEzMSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTc5NTc0Mixcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIxOTY2LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNjQ2NlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjI5NjYsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE3NDY2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNzQ2Nixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMjk2NlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wVmFuZ3VhcmQxXCI6IDE0LFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyMVwiOiAyNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMTAwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDMsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTAsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMjgsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNYXRlcmlhbHNHZW5lcmF0b3JIZWFsdGgxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2UxXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcImY2MmQ1MTE1LTBiZjQtMTFlNy04ZDA4LTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiZDI1NjAyYjYtNDFlMC0xMWU1LTlkNGEtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwienlsbzR1XCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJhMzFmNDUwOC00YjQ5LTExZTYtOTdhMi0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkRldXRzY2hfUmV2ZXJzZVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDEzNDcyLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogLTMyLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAxNDM3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE2OSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAzOCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5ODUzMjkzLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge30sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNzQxMyxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMjI5NFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wQVRURTlcIjogMixcblx0XHRcdFx0XHRcInRyb29wQmFudGhhOFwiOiA4LFxuXHRcdFx0XHRcdFwidHJvb3BDaGFtcGlvblJlYmVsSGVhdnlEcm9pZGVrYTJcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0xlaWE4XCI6IDEsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrWjk1OFwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IG51bGwsXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IG51bGwsXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAwLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDM4LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjBcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogdHJ1ZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg5XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbE1vcnRhclR1cnJldERhbWFnZTRcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiMWEwNzA1MjQtMGJmNS0xMWU3LWFhY2EtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3MGFlZDE3Yi1kYzJlLTExZTYtYmE0NS0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJqdWFua1wiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiODUzMTg1YWYtOWNjZS0xMWU2LWFjYzUtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJDQVRfQVRUQUNLXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNDg4LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogLTExLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTYsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTgyLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDEzLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk4NTM0NTMsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNDIwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA0MjAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNDIwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA0MjAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNzQxMyxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMjI5NFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wV29va2llNVwiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQ2hld2JhY2NhNFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BSZWJlbFNwZWVkZXI0XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFQyQlRhbms0XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI1XCI6IDEyLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzRcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMzcsXG5cdFx0XHRcdFwic3RhcnNcIjogMCxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxOCxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxMyxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiODIzZWRjM2EtMGJmNS0xMWU3LTk5OWQtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI1YzVmNmYyMC1lNzM1LTExZTYtODFlMS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJBc2FzaW5uXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJjYzE1OTEzNS1hNTU0LTExZTYtOTFhOC0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkNBWkFJTVBFUklPXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMzgwMyxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDEwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAzNTAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTcyLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0xMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5ODUzNTkyLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTkxOTcsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE0MzE2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMDE5Nyxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTUzMTZcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE1MzE2LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIwMTk3XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BWYW5ndWFyZDVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0NoZXdiYWNjYTZcIjogMSxcblx0XHRcdFx0XHRcInRyb29wV29va2llNlwiOiA1LFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzVcIjogMixcblx0XHRcdFx0XHRcInRyb29wSnVnZ2VybmF1dDVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wUmViZWxUb2duYXRoMVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNYXJrc21hbjVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjVcIjogMTFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDI1LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxDcmVkaXRHZW5lcmF0b3JIZWFsdGgxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENvbnRyYWJhbmRHZW5lcmF0b3JIZWFsdGgxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbE1hdGVyaWFsc0dlbmVyYXRvckhlYWx0aDFcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGgyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGgyXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjMzZGNhYjk5LTBjN2ItMTFlNy1iMzVlLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiYTIxNjEwNjYtMDAyZS0xMWU3LTkxOTEtMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiRGlta2FzaFwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiZDc4ZGM0NzYtZTVlMi0xMWU1LWFmODItMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJOYV9WaVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDI2Mixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IC0xMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTIzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE4NCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAxMixcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5OTEwOTQyLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge30sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMjM1NCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMDQ0MlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wQmFudGhhNFwiOiA5LFxuXHRcdFx0XHRcdFwidHJvb3BBQVQxNFwiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQ2hld2JhY2NhNVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNFwiOiA1XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA0LFxuXHRcdFx0XHRcInN0YXJzXCI6IDAsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTgsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTIsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjU0ZDBhNTFkLTBjN2ItMTFlNy1iN2RiLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiYTBjOTY5NGEtYzQ1NC0xMWU2LTg2ZGUtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiTWFpdHJlIEd1aWd1aVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiOTFjM2ZkYTYtZmYwOC0xMWU1LTkyN2ItMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJGcmVuY2hSZWJlbFwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU3OTYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAtMjQsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC02OTgsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMjEzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDI5LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk5MTEwMDQsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxMTQwMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTE1MDVcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDExNDAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMTUwNVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjIzNTQsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjA0NDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI1XCI6IDE5LFxuXHRcdFx0XHRcdFwidHJvb3BKdWdnZXJuYXV0NVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVJlYmVsNVwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzVcIjogMixcblx0XHRcdFx0XHRcInRyb29wSGVyb0hhblNvbG81XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFBhdGhmaW5kZXI1XCI6IDZcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wRW1waXJlU3BlZWRlcjdcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDI3LFxuXHRcdFx0XHRcInN0YXJzXCI6IDAsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTAsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMjgsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxCdXJzdFR1cnJldEhlYWx0aDFcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0SGVhbHRoMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI4ZWYwZGQ0Mi0wYzdiLTExZTctYmEwYi0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImIwMjViYzdkLWY0YzAtMTFlNi04ODQxLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcImFtcGVyZXN1blwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiMDQ2MDM2YTYtNDZlOC0xMWU2LThmZDYtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJyZWJlbC1hdmVuZ2Vyc1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDIyMzUsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAtMTYsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE3Myxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjJkYTM3ZTlkLWIwYjQtMTFlNi05MTNhLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkphcXVlbGluZVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE1OTAsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAyMzIsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMTksXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTkxMTEyNCxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyNDk2LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDc3Mjhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyNDk2LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDc3Mjhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE3MDEyLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDE0NzYyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BKdWdnZXJuYXV0NVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQ2hld2JhY2NhNVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzVcIjogMixcblx0XHRcdFx0XHRcInRyb29wV29va2llNVwiOiA5LFxuXHRcdFx0XHRcdFwidHJvb3BQYXRoZmluZGVyNVwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNVwiOiAzLFxuXHRcdFx0XHRcdFwic3BlY2lhbEF0dGFja1hXaW5nNVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiAyMSxcblx0XHRcdFx0XCJzdGFyc1wiOiAwLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE5LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiMDVhOTJiMDUtMGM3Yy0xMWU3LTk5MDItMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJhNDI5NDhkYS0yMjNjLTExZTYtOWNhNC0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJGbHlpbmdTaW1wc29uXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI4NThiODI0MS1iMWE5LTExZTUtYmVlZi0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkdlcm1hbi1SZWJlbGxzLUVcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNjU5OSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDEwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTkwNCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjJkYTM3ZTlkLWIwYjQtMTFlNi05MTNhLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkphcXVlbGluZVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE1OTAsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAyMjIsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTEwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk5MTEzNzAsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxMDAzMyxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTQ4OTFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDExMDMzLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNTg5MVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTU4OTEsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTEwMzNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw4XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BDaGFtcGlvblJlYmVsRHJvaWRla2E3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEFBVDE4XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9MdWtlU2t5d2Fsa2VyNlwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEVtcGlyZVNwZWVkZXI3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5U3Rvcm03XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiAxMDAsXG5cdFx0XHRcdFwic3RhcnNcIjogMyxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMCxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAzNixcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0SGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2U1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoOFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjJcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsQnVyc3RUdXJyZXREYW1hZ2UzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjU1NzIxZWRiLTBkMDEtMTFlNy05ZmNmLTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMDM2YjcyZGItNWVkMC0xMWU1LTk5ZjgtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSk9ITiBNQVhcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcImFhZjcwZjRhLWQ4ZTAtMTFlNS04OWNhLTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiUHJhZXRvcmlhbl9HdWFyZFwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE2Nzk3LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMTAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC01MDg2LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDIxMixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTk2ODU4MSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMDExNSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxOTI3MlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIxMTE1LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIwMjcyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMTExNSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMDI3MlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSnVnZ2VybmF1dDdcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0hhblNvbG84XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljOFwiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3BBQVQxOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNYXJrc21hbjhcIjogMixcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDhcIjogMyxcblx0XHRcdFx0XHRcInRyb29wTWVyY2VuYXJ5UmViZWxHYW1vcnJlYW5XYXJyaW9yMVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyOFwiOiAxMyxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tCV2luZzZcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMTAwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDMsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTAsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMzMsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg4XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg4XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDcmVkaXRHZW5lcmF0b3JIZWFsdGg2XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjRjNTUxNWU5LTBkODctMTFlNy05MjM2LTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMzViMWNkOWYtZjg0Ny0xMWU2LWE3OWYtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiYW5kcm9pZHRhcHB5Mi4wXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJlMDQwYTZhMC01ZTQwLTExZTYtOTMxZS0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIk5ld09sZEJvbGRSZWJlbHNcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAyNzM5LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTgzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDIwOSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMyxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMDI2MTQ0LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE4MTYyLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDEwNDQ0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTgxNjIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjgwOVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjAzMzIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjAxMzhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI1XCI6IDQ1XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA1MCxcblx0XHRcdFx0XCJzdGFyc1wiOiAxLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDIyLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiNWM3OTJmMDktMGRjYS0xMWU3LWIzNWUtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3ZGY1N2NkOS01MjIwLTExZTYtYWYzNS0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJGcmFuY29cIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcImY3NTUwMTE4LTMwYWMtMTFlNi1hYTc2LTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiUmVkRm9yY2U1XCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNzYxNixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDEwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMjAzNCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjJkYTM3ZTlkLWIwYjQtMTFlNi05MTNhLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkphcXVlbGluZVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE1OTAsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAxOTksXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTEwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAwNTQ5ODUsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxOTAzMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTg3MDVcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIwMDMwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxOTcwNVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTk3MDUsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjAwMzBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI4XCI6IDgsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljN1wiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3BKdWdnZXJuYXV0OFwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BNZXJjZW5hcnlSZWJlbFR3aWxla0luY2luZXJhdG9yMVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiAxMDAsXG5cdFx0XHRcdFwic3RhcnNcIjogMyxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMCxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAzMyxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEJ1cnN0VHVycmV0RGFtYWdlMlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI4MWI4OTY3Zi0wZTUwLTExZTctOTk5ZC0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjA4OGIxY2RjLWE5OGYtMTFlNS05OWY3LTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcImthcmxvXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJlYjU2MTEyMi0zMTExLTExZTYtODEyMS0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIlBldGVycHJvXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTE0MDQsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNDg3Nixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjJkYTM3ZTlkLWIwYjQtMTFlNi05MTNhLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkphcXVlbGluZVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE1OTAsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAxOTYsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTMsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDExMjUzOSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAzMzUzLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDQxNjVcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAzNjEzLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDQ0MjVcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDQzNTMsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNTMzMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjhcIjogMzAsXG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ4XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1hcmtzbWFuOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNZXJjZW5hcnlSZWJlbEdhbW9ycmVhbldhcnJpb3IzXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9IYW5Tb2xvN1wiOiAxLFxuXHRcdFx0XHRcdFwic3BlY2lhbEF0dGFja1hXaW5nOFwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA2OSxcblx0XHRcdFx0XCJzdGFyc1wiOiAxLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDMzLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXRIZWFsdGgzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDNcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0RGFtYWdlMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXREYW1hZ2UzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjgxZmU1NzczLTBlOTMtMTFlNy1iYTBiLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNWQ1MTUzZmYtMTgyYi0xMWU2LTlhNmYtMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiUGF1bCBNdWFkaWJcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcImNjNTdkNTdlLWI1NjktMTFlNS05MmFhLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiU3dlZGVuX0FsbGlhbmNlXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNDc3NSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC00ODQsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTkzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0zLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAxNDEzNTksXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTc0NjIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjE5OTBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNzU2Mixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxMzMzN1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTg0NjIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjI5OTBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcE1lcmNlbmFyeVJlYmVsVHdpbGVrSW5jaW5lcmF0b3IzXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BSZWJlbEpldHBhY2tUcm9vcGVyOFwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BNZXJjZW5hcnlSZWJlbEdhbW9ycmVhbldhcnJpb3IzXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI4XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcFZhbmd1YXJkOFwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEVtcGlyZVNwZWVkZXI3XCI6IDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA2NCxcblx0XHRcdFx0XCJzdGFyc1wiOiAxLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDMwLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2U1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbE1vcnRhclR1cnJldERhbWFnZTVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDhcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENyZWRpdEdlbmVyYXRvckhlYWx0aDZcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiNTVjMWI2ZTktMGVkOS0xMWU3LTkyMzYtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI2NjllMzhiMy1kNmEyLTExZTYtOTdlNS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJNb3NzaWZpZWQ0XCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI2YzM4MjViMi0zM2NkLTExZTYtYmM0Mi0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkJ1bGdhcmlhd2FyaW9yc1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE2MzcsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAtMTIsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0zMzMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMjA3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDE0LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAxNzEzNDIsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTE0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTE0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMzQ1Myxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxNDY3MVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wVDJCVGFuazRcIjogNSxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDRcIjogNCxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM0XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFdvb2tpZTRcIjogMyxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjRcIjogNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BFbXBpcmVTdG9ybURlYXRoN1wiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTdcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU2hvY2szXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFNob2NrN1wiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BUZWNobmljaWFuN1wiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogNDEsXG5cdFx0XHRcdFwic3RhcnNcIjogMCxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxNCxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxNCxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsTWF0ZXJpYWxzR2VuZXJhdG9ySGVhbHRoM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsQ3JlZGl0R2VuZXJhdG9ySGVhbHRoM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGgxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg0XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjAxY2M2MDgzLTBlZGEtMTFlNy04ZDA4LTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiYjJiMDUxZTktZmM2YS0xMWU0LThiYTQtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiZGVsIHJvdWtpXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI3ZjUxM2UwMS02MWRmLTExZTUtYTk4ZC0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkFMSUFOWkFfTUVYSUNPXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTAzNSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDYsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xNDAxLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDIwMSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtNixcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMTcxNjQ1LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTMwOTIsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDEyMjM5XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxNDA5Mixcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTMyMzlcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDEzNjQzLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDE0ODg3XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BNYXJrc21hbjdcIjogMSxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM2XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw3XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9DaGV3YmFjY2E1XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDUwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDIsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTAsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMjcsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2U0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg3XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcImU2NzcwYzA5LTBmM2UtMTFlNy1hODQyLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNjkwYzM3YTEtNzVhNS0xMWU1LTkwOTctMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwicmVkZG9nXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJhNzljYzk2Ny1kNTMyLTExZTYtOTNmMS0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcInRoZS5tb2pvLnJldm9sdFwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDYyMTUxLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMTAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC03NzQ4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiSmFxdWVsaW5lXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTU5MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE5MSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDIxNDk3NSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI3MTc2LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyNTM5MlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjgxNzYsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDI2MzkyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyNjM5Mixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyODE3NlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wQ2hhbXBpb25SZWJlbERyb2lkZWthMTBcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjlcIjogMTEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw5XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljOVwiOiA1LFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvSGFuU29sbzhcIjogMSxcblx0XHRcdFx0XHRcInRyb29wVDJCVGFuazlcIjogMSxcblx0XHRcdFx0XHRcInRyb29wRGVzZXJ0U2tpZmY5XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFZhbmd1YXJkOVwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BNYXJrc21hbjlcIjogMSxcblx0XHRcdFx0XHRcInRyb29wUmViZWxTcGVlZGVyOVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BSZWJlbEpldHBhY2tUcm9vcGVyOVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIYWlsZmlyZThcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTdcIjogMixcblx0XHRcdFx0XHRcInRyb29wU25pcGVyN1wiOiAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMTAwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDMsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTAsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMjEsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg4XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENyZWRpdEdlbmVyYXRvckhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTWF0ZXJpYWxzR2VuZXJhdG9ySGVhbHRoNlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCIwZjU3NDE5ZC0wZmM1LTExZTctYmFkOC0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImMxMGNjODFjLWZlMzktMTFlNi05NTNhLTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcImp1bmd5b3VjaGFuXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJjZWFmYzc3ZS00MmJjLTExZTYtYTVhOC0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkdhbGFjdGljLldvbHZlc1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU2ODAsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNDEsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTg4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0zLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAyNzI1NjUsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA3Nzc2LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA5MTg1XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA4MjY2LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA5Njc1XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNzg0OSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxNTY0NlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSGVyb0NoZXdiYWNjYTVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI1XCI6IDE2LFxuXHRcdFx0XHRcdFwidHJvb3BSZWJlbFNwZWVkZXI1XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFQyQlRhbms1XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BSZWJlbFNwZWVkZXI3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyOFwiOiAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wRGFyazVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wTWVyY2VuYXJ5RW1waXJlR2Ftb3JyZWFuV2FycmlvcjJcIjogMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDU5LFxuXHRcdFx0XHRcInN0YXJzXCI6IDEsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTAsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMjgsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCIxMDY1ZjZmOC0xMDA4LTExZTctODRlZS0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImExNDU3OTU2LWNjYzAtMTFlNS1hNmI2LTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcInh5dWNyb3BibFwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiYTZiOGRmYTgtOTU3My0xMWU2LWIwNzItMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJORVcuJTViMDBmZmZmJTVkSkVESVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDgyNTMsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAxMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTEwNTMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTc4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0xMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMzAxMzE1LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTYxMjksXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDEwNTgwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxNzEyOSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTE1ODBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDExNTgwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDE3MTI5XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyOFwiOiAzNyxcblx0XHRcdFx0XHRcInRyb29wSnVnZ2VybmF1dDhcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb1JlYmVsSm9oaGFyMlwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BDaGFtcGlvblJlYmVsRHJvaWRla2E1XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wRGFyazZcIjogNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDMzLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxCdXJzdFR1cnJldERhbWFnZTNcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCIzMDE5NjNhNS0xMDhlLTExZTctYWIxNy0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjhmMjdjOTg1LTYwYzItMTFlNi04ZjA4LTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIk9iaSBXYW5cIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjQ2ZGJlMTExLTg5MGUtMTFlNC1iZTIzLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiTm9yZHdpbmRcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA2MDY2LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogNixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTEyNzgsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZGEzN2U5ZC1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNTkwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMTcyLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC02LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAzNTg5NDcsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMjk0NCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTU2MzRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIzOTQ0LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNjYzNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTY2MzQsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjM5NDRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9IYW5Tb2xvN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BKdWdnZXJuYXV0N1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIYWlsZmlyZTNcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjdcIjogMjRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDc2LFxuXHRcdFx0XHRcInN0YXJzXCI6IDIsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTAsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMzMsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0RGFtYWdlM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXRIZWFsdGgzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoNlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH1cblx0XHRdLFxuXHRcdFwiY2FtcGFpZ25zXCI6IHtcblx0XHRcdFwiY21wX2Z1ZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wX2Z1ZVwiLFxuXHRcdFx0XHRcInRpbWVab25lXCI6IDAsXG5cdFx0XHRcdFwiY29tcGxldGVkXCI6IHRydWUsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcInN3X2h0aF9vdXRwb3N0c1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwic3dfaHRoX291dHBvc3RzXCIsXG5cdFx0XHRcdFwidGltZVpvbmVcIjogMCxcblx0XHRcdFx0XCJjb21wbGV0ZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IGZhbHNlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfMF9oYl9lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfMF9oYl9lXCIsXG5cdFx0XHRcdFwidGltZVpvbmVcIjogMCxcblx0XHRcdFx0XCJjb21wbGV0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJjb2xsZWN0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJwb2ludHNcIjogMCxcblx0XHRcdFx0XCJpdGVtc1wiOiB7fVxuXHRcdFx0fSxcblx0XHRcdFwiY21wXzFfdXR0c19lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfMV91dHRzX2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiB0cnVlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfMl90c3dfZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wXzJfdHN3X2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiB0cnVlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfM190amdfZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJwb2ludHNcIjogMCxcblx0XHRcdFx0XCJpdGVtc1wiOiB7fVxuXHRcdFx0fSxcblx0XHRcdFwiY21wXzRfc290bV9lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiB0cnVlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfNV90aWhfZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wXzVfdGloX2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiB0cnVlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfN19ic19lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwidGltZVpvbmVcIjogMCxcblx0XHRcdFx0XCJjb21wbGV0ZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IGZhbHNlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcIm1pc3Npb25zXCI6IHtcblx0XHRcdFwiZnVlX2RlZmVuZEJhc2VNaXNzaW9uXzAwXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJmdWVfZGVmZW5kQmFzZU1pc3Npb25fMDBcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF9mdWVcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDb21wbGV0ZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNWM2MTZmZWUtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiLFxuXHRcdFx0XHRcdFwiQXZvaWRDb21wbGV0ZUxvc3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiZnVlX2ltcEludHJvQmFzZU1pc3Npb25fMDBcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImZ1ZV9pbXBJbnRyb0Jhc2VNaXNzaW9uXzAwXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfZnVlXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ29tcGxldGVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjk4MDk4MDA3LWIwYjQtMTFlNi05MTNhLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImZ1ZV9yZWJJbnRyb0Jhc2VNaXNzaW9uXzAwXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJmdWVfcmViSW50cm9CYXNlTWlzc2lvbl8wMFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wX2Z1ZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNvbXBsZXRlZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJkOGE2NTU1Yi1iMGI0LTExZTYtOTEzYS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTA2Mixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxMDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJzd19odGhfb3V0cG9zdF9zXzFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcInN3X2h0aF9vdXRwb3N0X3NfMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwic3dfaHRoX291dHBvc3RzXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiRGVmYXVsdFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDAsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8xX3V0dHNfZV8xXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzFfdXR0c19lXzFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8wX2hiX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjVlODI0MjVkLWIwYjYtMTFlNi05MmUwLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95UXVhcnRlckJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8xX3V0dHNfZV8yXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzFfdXR0c19lXzJcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8wX2hiX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImIyMGVhYjA2LWIwYmEtMTFlNi05ZmE3LTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDUwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzJhXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzFfdXR0c19lXzJhXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMF9oYl9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJlMjJjZWJjMy1iZGFmLTExZTYtYTc0MS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA1MDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95UXVhcnRlckJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8xX3V0dHNfZV8zXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzFfdXR0c19lXzNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xX3V0dHNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25fV2FsbF9UMV8yNVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzRcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfNFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzFfdXR0c19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI4NmI1MDg3MS1iZTI0LTExZTYtYjliYi0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfNVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8xX3V0dHNfZV81XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMV91dHRzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duVDJFbXBTdGFycG9ydFwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzZcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfNlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzFfdXR0c19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI2MjE3ZTU2Ny1iZjBhLTExZTYtYmRlYy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveVF1YXJ0ZXJCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfN1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8xX3V0dHNfZV83XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMV91dHRzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duMkVtcENyZUdlblwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzlcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfOVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzFfdXR0c19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI3MTU4ZGRiMy1iZmQ0LTExZTYtYmRlYy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveVF1YXJ0ZXJCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfMTBcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfMTBcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8yX3Rzd19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bjRUdXJyZXRzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMl90c3dfZV8xXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzJfdHN3X2VfMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzJfdHN3X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImZiYmZjYjE5LWJmZjItMTFlNi1hMjViLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8yX3Rzd19lXzJcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMl90c3dfZV8yXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMl90c3dfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd24xVDFFbXBGYWN0b3J5XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMl90c3dfZV8zXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzJfdHN3X2VfM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzJfdHN3X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImZhNTdlMGNiLWJmZjMtMTFlNi1hMjViLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDUwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzJfdHN3X2VfNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8yX3Rzd19lXzRcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8yX3Rzd19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bjJUMkVtcENyZWRHZW5cIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8yX3Rzd19lXzVcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMl90c3dfZV81XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMl90c3dfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiOGVmYmVmYzMtYzA3OS0xMWU2LTk0OWQtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzNfdGpnX2VfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8zX3RqZ19lXzFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8zX3RqZ19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJkMzJhZWMxZS1jMDc5LTExZTYtOTQ5ZC0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfM190amdfZV8yXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzNfdGpnX2VfMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duMlQyRW1wQmFycmFja3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8zX3RqZ19lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfM190amdfZV8zXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNDE3YWIxM2EtYzBkNy0xMWU2LWE3NDEtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDUwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveVF1YXJ0ZXJCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfM190amdfZV80XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzNfdGpnX2VfNFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjk0OWFkY2JmLWMzMjItMTFlNi1iMjdmLTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8zX3RqZ19lXzVcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfM190amdfZV81XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd24xVDJFbXBNYXRTdG9yXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfM190amdfZV82XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzNfdGpnX2VfNlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjQyMzVlMzQ3LWMzYmEtMTFlNi1iNTFkLTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8zX3RqZ19lXzdcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfM190amdfZV83XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd24yVDJFbXBSRlR1cnJldHNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8zX3RqZ19lXzhcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfM190amdfZV84XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZDQ5NjU5OWEtYzNjNy0xMWU2LWI0MDAtMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzNfdGpnX2VfOVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8zX3RqZ19lXzlcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8zX3RqZ19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93blQzRW1wSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8zX3RqZ19lXzEwXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzNfdGpnX2VfMTBcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8zX3RqZ19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDIsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI1NjE0NjAyMy1jM2M4LTExZTYtYjQwMC0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMzc1LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDM3NSxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIktpbGxfaW5mYW50cnlfdDFfMTBcIixcblx0XHRcdFx0XHRcIktpbGxfVHVza2VuSGVyb190MV8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZU1vcnRhcl9UMV8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8yXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZUJhcnJhY2tzX1QzXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV8zXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiN2Q0NGM5YjAtYzNmNi0xMWU2LWFhZjUtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV80XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzRcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZjk3ZWIzNjAtYzNmNi0xMWU2LWFhZjUtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV81XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzVcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiOWNiM2ExMDEtYzQ1OS0xMWU2LWFhZjUtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV82XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzZcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMzAxZmQ4NmMtYzRlZi0xMWU2LTg4Y2ItMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzdcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfN1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl90dXJyZXRfdDFfNlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzhcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfOFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl93YWxsX3QxXzQwXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfOVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV85XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7XG5cdFx0XHRcdFx0XCJQdnBfd2luXzFcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJQdnBfd2luXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV8xMFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8xMFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9zdGFycG9ydF90Ml8yXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfMTFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfMTFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNDM5M2VjZDItYzU0Mi0xMWU2LTg2ZGUtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV8xMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8xMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJiZTEyNjc4YS1kOWFmLTExZTYtOGY4Yy0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzEzXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzEzXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImNmZTAzZGFhLWRiNjgtMTFlNi04YjUzLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV8xNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8xNFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCIxY2Y3YTcwOS1kYjY5LTExZTYtOGI1My0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVNYXRlcmlhbHNHZW5lcmF0b3JfdDNfM1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzJcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVPZmZlbnNlTGFiX3QxXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF81X3RpaF9lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNV90aWhfZV8zXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNV90aWhfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNTAwN2IxOWMtZGRiMS0xMWU2LTk5NGMtMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF81X3RpaF9lXzRcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNV90aWhfZV80XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNV90aWhfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25fMTJfdDNfd2FsbHNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF81X3RpaF9lXzVcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNV90aWhfZV81XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNV90aWhfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiYzJmMDAzMzUtZGRiZi0xMWU2LTk1YzEtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDEwMDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF81X3RpaF9lXzZcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNV90aWhfZV82XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNV90aWhfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMjRkMWZlNTEtZGRjMC0xMWU2LTk1YzEtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfN1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzdcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVDcmVkaXRHZW5lcmF0b3JfdDNfM1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfOFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzhcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI3NTRlNWJiOC1lMmUwLTExZTYtOWIzNy0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV8xXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV8xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCIxM2NjODIzMC1lNjNhLTExZTYtYTBkOS0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIktpbGxfaW5mYW50cnlfdDFfNVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV8yXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV8yXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI4YjhiNjg5My1lNjQ1LTExZTYtYTA1ZC0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjEwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMTAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiS2lsbF9pbmZhbnRyeV90MV8xMFwiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiS2lsbF9pbmZhbnRyeV90MV81XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjQ2NWRhYjdmLWU5NzgtMTFlNi05ZTI1LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzRcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzRcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZUhRX3Q0XzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl83X2JzX2VfNVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfNVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMGQyMGQ5NzItZTk3OS0xMWU2LTllMjUtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV82XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV82XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVUYWN0aWNhbENvbW1hbmRfdDFfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV83XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV83XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI0ZmNlM2YyZS1lOTc5LTExZTYtOWUyNS0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzhcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzhcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMSxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjJjZDQ1MDFhLWY2MzUtMTFlNi1hODNiLTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyNDAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI0MDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzlcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzlcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMSxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImQyMjYxNWU2LWYzZGEtMTFlNi1hYTg3LTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyNjAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI2MDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95X3JlYmVsVGFjdGljYWxDb21tYW5kX3QxXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl83X2JzX2VfMTBcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzEwXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQWN0aXZlXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMCxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImZkMjQ1ZmM5LTBlM2UtMTFlNy05Nzg5LTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyOTAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI5MDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwidG91cm5hbWVudHNcIjoge1xuXHRcdFx0XCJjb25mbGljdF9mb3Jlc3RPcHNfdGF0XzAxXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjb25mbGljdF9mb3Jlc3RPcHNfdGF0XzAxXCIsXG5cdFx0XHRcdFwicmF0aW5nXCI6IDAsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicGVyY2VudGlsZVwiOiAwLFxuXHRcdFx0XHRcInRpZXJcIjogXCJ0b3VybmFtZW50X3RpZXJfMVwiLFxuXHRcdFx0XHRcInJlZGVlbWVkUmV3YXJkc1wiOiBbXG5cdFx0XHRcdFx0XCJsY19jb25mX2NyeXN0YWxfdGllcjFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImF0dGFja3NXb25cIjogMCxcblx0XHRcdFx0XCJhdHRhY2tzTG9zdFwiOiAxLFxuXHRcdFx0XHRcImRlZmVuc2VzV29uXCI6IDMsXG5cdFx0XHRcdFwiZGVmZW5zZXNMb3N0XCI6IDksXG5cdFx0XHRcdFwiZG9uYXRlZFRyb29wc1wiOiAxMTVcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiaXNGdWVJblByb2dyZXNzXCI6IGZhbHNlLFxuXHRcdFwiRGFtYWdlZEJ1aWxkaW5nc1wiOiB7XG5cdFx0XHRcImJsZF8xMjRcIjogMTAwLFxuXHRcdFx0XCJibGRfNTRcIjogMTAwLFxuXHRcdFx0XCJibGRfODRcIjogMTAwLFxuXHRcdFx0XCJibGRfNzJcIjogMTAwLFxuXHRcdFx0XCJibGRfMTEyXCI6IDEwMCxcblx0XHRcdFwiYmxkXzc4XCI6IDEwMCxcblx0XHRcdFwiYmxkXzEwOFwiOiAxMDAsXG5cdFx0XHRcImJsZF8yNFwiOiAxMDAsXG5cdFx0XHRcImJsZF8yNTRcIjogMTAwLFxuXHRcdFx0XCJibGRfMjZcIjogMTAwLFxuXHRcdFx0XCJibGRfNzlcIjogMTAwLFxuXHRcdFx0XCJibGRfNjFcIjogMTAwLFxuXHRcdFx0XCJibGRfNjZcIjogMTAwLFxuXHRcdFx0XCJibGRfNThcIjogMTAwLFxuXHRcdFx0XCJibGRfNjVcIjogMTAwLFxuXHRcdFx0XCJibGRfNjdcIjogMTAwLFxuXHRcdFx0XCJibGRfMjNcIjogMTAwLFxuXHRcdFx0XCJibGRfMTIzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzI1M1wiOiAxMDAsXG5cdFx0XHRcImJsZF8xMTBcIjogMTAwLFxuXHRcdFx0XCJibGRfNjBcIjogMTAwLFxuXHRcdFx0XCJibGRfNTNcIjogMTAwLFxuXHRcdFx0XCJibGRfMTI3XCI6IDEwMCxcblx0XHRcdFwiYmxkXzgyXCI6IDEwMCxcblx0XHRcdFwiYmxkXzhcIjogMTAwLFxuXHRcdFx0XCJibGRfMTA2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzEwOVwiOiAxMDAsXG5cdFx0XHRcImJsZF8xXCI6IDEwMCxcblx0XHRcdFwiYmxkXzI1XCI6IDEwMCxcblx0XHRcdFwiYmxkXzczXCI6IDEwMCxcblx0XHRcdFwiYmxkXzc2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzg1XCI6IDEwMCxcblx0XHRcdFwiYmxkXzU3XCI6IDEwMCxcblx0XHRcdFwiYmxkXzU2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzc3XCI6IDEwMCxcblx0XHRcdFwiYmxkXzEwN1wiOiAxMDAsXG5cdFx0XHRcImJsZF83MFwiOiAwLFxuXHRcdFx0XCJibGRfN1wiOiA4MCxcblx0XHRcdFwiYmxkXzZcIjogNTEsXG5cdFx0XHRcImJsZF81XCI6IDEzLFxuXHRcdFx0XCJibGRfMjBcIjogMTMsXG5cdFx0XHRcImJsZF82NFwiOiAwLFxuXHRcdFx0XCJibGRfNFwiOiAxNyxcblx0XHRcdFwiYmxkXzYzXCI6IDAsXG5cdFx0XHRcImJsZF8zXCI6IDAsXG5cdFx0XHRcImJsZF8yXCI6IDAsXG5cdFx0XHRcImJsZF82MlwiOiAwLFxuXHRcdFx0XCJibGRfNjhcIjogMCxcblx0XHRcdFwiYmxkXzkxXCI6IDAsXG5cdFx0XHRcImJsZF85MFwiOiAwLFxuXHRcdFx0XCJibGRfODZcIjogMCxcblx0XHRcdFwiYmxkXzg4XCI6IDAsXG5cdFx0XHRcImJsZF84N1wiOiAwLFxuXHRcdFx0XCJibGRfMTdcIjogMCxcblx0XHRcdFwiYmxkXzE2XCI6IDAsXG5cdFx0XHRcImJsZF8xNVwiOiAwLFxuXHRcdFx0XCJibGRfMTRcIjogMTMsXG5cdFx0XHRcImJsZF8xOVwiOiAxMyxcblx0XHRcdFwiYmxkXzE4XCI6IDE3LFxuXHRcdFx0XCJibGRfMTNcIjogMTcsXG5cdFx0XHRcImJsZF84MVwiOiA0Nyxcblx0XHRcdFwiYmxkXzUyXCI6IDAsXG5cdFx0XHRcImJsZF81NVwiOiAwLFxuXHRcdFx0XCJibGRfMTE4XCI6IDAsXG5cdFx0XHRcImJsZF8xMTdcIjogMCxcblx0XHRcdFwiYmxkXzExOVwiOiAwLFxuXHRcdFx0XCJibGRfMTIyXCI6IDAsXG5cdFx0XHRcImJsZF8xMTZcIjogMCxcblx0XHRcdFwiYmxkXzExNVwiOiAxOSxcblx0XHRcdFwiYmxkXzIyXCI6IDAsXG5cdFx0XHRcImJsZF8xMTFcIjogMCxcblx0XHRcdFwiYmxkXzEyMVwiOiAwLFxuXHRcdFx0XCJibGRfMTIwXCI6IDAsXG5cdFx0XHRcImJsZF85XCI6IDAsXG5cdFx0XHRcImJsZF8xMTRcIjogMCxcblx0XHRcdFwiYmxkXzExM1wiOiAwLFxuXHRcdFx0XCJibGRfODNcIjogMCxcblx0XHRcdFwiYmxkXzEyXCI6IDAsXG5cdFx0XHRcImJsZF84OVwiOiAwLFxuXHRcdFx0XCJibGRfMTBcIjogMCxcblx0XHRcdFwiYmxkXzIxXCI6IDAsXG5cdFx0XHRcImJsZF84MFwiOiA1MSxcblx0XHRcdFwiYmxkXzcxXCI6IDM5LFxuXHRcdFx0XCJibGRfNTlcIjogMCxcblx0XHRcdFwiYmxkXzY5XCI6IDI5LFxuXHRcdFx0XCJibGRfOTNcIjogMCxcblx0XHRcdFwiYmxkXzI0N1wiOiAwLFxuXHRcdFx0XCJibGRfMjQwXCI6IDAsXG5cdFx0XHRcImJsZF8yNDVcIjogMCxcblx0XHRcdFwiYmxkXzI0MlwiOiAwLFxuXHRcdFx0XCJibGRfMjQ2XCI6IDAsXG5cdFx0XHRcImJsZF8yNDFcIjogMCxcblx0XHRcdFwiYmxkXzI1MFwiOiAwLFxuXHRcdFx0XCJibGRfMjQ5XCI6IDAsXG5cdFx0XHRcImJsZF8yNDNcIjogMCxcblx0XHRcdFwiYmxkXzI0OFwiOiAwLFxuXHRcdFx0XCJibGRfMjQ0XCI6IDAsXG5cdFx0XHRcImJsZF85MlwiOiAwLFxuXHRcdFx0XCJibGRfMTFcIjogMFxuXHRcdH0sXG5cdFx0XCJkZXZpY2VJbmZvXCI6IHt9LFxuXHRcdFwidGltZVpvbmVPZmZzZXRcIjogMixcblx0XHRcImNvbnRyYWN0c1wiOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwicm9ja1NtYWxsMVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDM4MDU3Nixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJDbGVhclwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMjc3XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJqdW5rU21hbGwxXCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMzgwNTc4LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIkNsZWFyXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8yNzVcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wQVRTVDVcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAzODA3MjYsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzU5XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcEVtcGlyZVNwZWVkZXI1XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMzgwODAxLFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF81OVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BFbXBpcmVTcGVlZGVyNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDM4MDg3Nixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfNTlcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wRW1waXJlU3BlZWRlcjVcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAzODA5NTEsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzU5XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcEFUTVA1XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwNDUxMjY4LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlJlc2VhcmNoXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF85M1wiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH1cblx0XHRdLFxuXHRcdFwiZnJvemVuQnVpbGRpbmdzXCI6IFtdLFxuXHRcdFwiaXNDb25uZWN0ZWRBY2NvdW50XCI6IHRydWUsXG5cdFx0XCJwdnBUYXJnZXRTZXJ2ZWRUaW1lXCI6IDE0OTAzNTg4NTEsXG5cdFx0XCJpbnRyb3NcIjogW10sXG5cdFx0XCJsYXN0TWlzc2lvblwiOiBcImNoYXB0ZXJfN19ic19lXzEwXCIsXG5cdFx0XCJpc1JhdGVJbmNlbnRpdml6ZWRcIjogZmFsc2UsXG5cdFx0XCJsYXN0UGF5bWVudFRpbWVcIjogbnVsbCxcblx0XHRcImxhc3RXYXJQYXJ0aWNpcGF0aW9uVGltZVwiOiAxNDkwMTY2MTAyLFxuXHRcdFwiaWRlbnRpdHlTd2l0Y2hUaW1lc1wiOiB7fSxcblx0XHRcIm9wZW5PZmZlclwiOiBudWxsLFxuXHRcdFwidW5sb2NrZWRQbGFuZXRzXCI6IFtdLFxuXHRcdFwicmVsb2NhdGlvblN0YXJDb3VudFwiOiAtMSxcblx0XHRcImhvbG9uZXRSZXdhcmRzXCI6IFtcblx0XHRcdFwicmV3YXJkX3NlY3VyaXR5RHJvaWRfZV9sdHJcIixcblx0XHRcdFwicmV3YXJkX2F0bW9zTWlnX2VfbHRyXCIsXG5cdFx0XHRcInJld2FyZF9kZXNCaW9tZV9lX2x0clwiLFxuXHRcdFx0XCJyZXdhcmRfZm9yQmlvbWVfZV9sdHJcIlxuXHRcdF0sXG5cdFx0XCJwbGF5ZXJPYmplY3RpdmVzXCI6IHtcblx0XHRcdFwicGxhbmV0MVwiOiB7XG5cdFx0XHRcdFwiZ3JvdXBJZFwiOiBcIm9ial90YXRvb2luZV9zZXJpZXMxMF85XCIsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0OTAzNDI0MDAsXG5cdFx0XHRcdFwiZ3JhY2VUaW1lXCI6IDE0OTA0MjUyMDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwNDI4ODAwLFxuXHRcdFx0XHRcInByb2dyZXNzXCI6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial90cmFpbl9oZXJvY3JpbXNvbmd1YXJkX2Vhc3lfZVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA1LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAxLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogMSxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJyZXdhcmRlZFwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kb25hdGVfc29jaWFsX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMTUsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAxNSxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJyZXdhcmRlZFwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kZXBsb3lfYXRhdF9oYXJkX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDEsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRcInBsYW5ldDhcIjoge1xuXHRcdFx0XHRcImdyb3VwSWRcIjogXCJvYmpfZm9yZXN0T3BzX3lhdmluXzIzXCIsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0OTAzNDI0MDAsXG5cdFx0XHRcdFwiZ3JhY2VUaW1lXCI6IDE0OTA0MjUyMDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwNDI4ODAwLFxuXHRcdFx0XHRcInByb2dyZXNzXCI6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kZXBsb3lfaGVyb2F0bXBfZWFzeV9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAxLFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9yZWNlaXZlX3NvY2lhbF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAxNSxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZm9yZXN0T3BzX2Rlc3Ryb3lfdHlwZV90dXJyZXRfaGFyZF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAxMCxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0fSxcblx0XHRcdFwicGxhbmV0MjNcIjoge1xuXHRcdFx0XHRcImdyb3VwSWRcIjogXCJvYmpfdGZhX3NlcmllczEwXzlcIixcblx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ5MDM0MjQwMCxcblx0XHRcdFx0XCJncmFjZVRpbWVcIjogMTQ5MDQyNTIwMCxcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTA0Mjg4MDAsXG5cdFx0XHRcdFwicHJvZ3Jlc3NcIjogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2Rlc3Ryb3lfY3JlZGl0c3RvcmFnZV9lYXN5X2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDEsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2RvbmF0ZV9zb2NpYWxfZVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA1LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAwLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogMTUsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2Rlc3Ryb3lfbWF0ZXJpYWxzc3RvcmFnZV9oYXJkX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDIsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRcInBsYW5ldDIxXCI6IHtcblx0XHRcdFx0XCJncm91cElkXCI6IFwib2JqX2hvdGhfc2VyaWVzMTBfOVwiLFxuXHRcdFx0XHRcInN0YXJ0VGltZVwiOiAxNDkwMzQyNDAwLFxuXHRcdFx0XHRcImdyYWNlVGltZVwiOiAxNDkwNDI1MjAwLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDQyODgwMCxcblx0XHRcdFx0XCJwcm9ncmVzc1wiOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZGVwbG95X2hlcm9hdHN0X2Vhc3lfZVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA1LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAwLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogMSxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfcmVjZWl2ZV9zb2NpYWxfZVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA1LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAwLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogMTUsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2Rlc3Ryb3lfbW9ydGFyX2hhcmRfZVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA1LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAwLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogMyxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0fSxcblx0XHRcdFwicGxhbmV0M1wiOiB7XG5cdFx0XHRcdFwiZ3JvdXBJZFwiOiBcIm9ial9kYW5kb3Jhbl9zZXJpZXMxMF85XCIsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0OTAzNDI0MDAsXG5cdFx0XHRcdFwiZ3JhY2VUaW1lXCI6IDE0OTA0MjUyMDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwNDI4ODAwLFxuXHRcdFx0XHRcInByb2dyZXNzXCI6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kZXBsb3lfaGVyb2F0c3RfZWFzeV9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAxLFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9yZWNlaXZlX3NvY2lhbF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAxNSxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZGVzdHJveV9idXJzdHR1cnJldF9oYXJkX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDMsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRcInBsYW5ldDZcIjoge1xuXHRcdFx0XHRcImdyb3VwSWRcIjogXCJvYmpfZXJraXRfc2VyaWVzMTBfOVwiLFxuXHRcdFx0XHRcInN0YXJ0VGltZVwiOiAxNDkwMzQyNDAwLFxuXHRcdFx0XHRcImdyYWNlVGltZVwiOiAxNDkwNDI1MjAwLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDQyODgwMCxcblx0XHRcdFx0XCJwcm9ncmVzc1wiOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZGVzdHJveV9zdGFycG9ydF9lYXN5X2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDEsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2RvbmF0ZV9zb2NpYWxfZVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA1LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAwLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogMTUsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX3RyYWluX2F0c3RfaGFyZF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAzLFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImxhc3RPYmplY3RpdmVDaGVja1RpbWVcIjogMTQ5MDM4MDQwMixcblx0XHRcInJhaWRzXCI6IHtcblx0XHRcdFwicGxhbmV0MVwiOiB7XG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcdFwicmFpZElkXCI6IFwicmFpZF9UYXRvb2luZTFcIixcblx0XHRcdFx0XCJyYWlkUG9vbElkXCI6IFwicmFpZHBvb2xfZGVzQmlvbWVfaHE1X2VcIixcblx0XHRcdFx0XCJyYWlkTWlzc2lvbklkXCI6IFwicmFpZF9kZXNCaW9tZV9lX2hxNV8xXCIsXG5cdFx0XHRcdFwicmV0cmllZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ5MDQxODAwMCxcblx0XHRcdFx0XCJlbmRUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFwibGFzdFJhaWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RSYWlkSWRcIjogXCJyYWlkX1RhdG9vaW5lMlwiLFxuXHRcdFx0XHRcImxhc3RSYWlkUG9vbElkXCI6IFwicmFpZHBvb2xfZGVzQmlvbWVfaHE1X2VcIixcblx0XHRcdFx0XCJsYXN0UmFpZE1pc3Npb25JZFwiOiBcInJhaWRfZGVzQmlvbWVfZV9ocTVfM1wiLFxuXHRcdFx0XHRcIm5leHRSYWlkU3RhcnRUaW1lXCI6IDE0OTA0NjEyMDBcblx0XHRcdH1cblx0XHR9LFxuXHRcdFwicGVya3NJbmZvXCI6IHtcblx0XHRcdFwicGVya3NcIjoge1xuXHRcdFx0XHRcImFjdGl2YXRlZFBlcmtzXCI6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInBlcmtJZFwiOiBcInBlcmtfQ0Jhcl9DRmFjNVwiLFxuXHRcdFx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ4ODkwNzg2Nyxcblx0XHRcdFx0XHRcdFwiZW5kVGltZVwiOiAxNDg4OTUxMDY3XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInBlcmtJZFwiOiBcInBlcmtfR0NyZF9HQ29uNFwiLFxuXHRcdFx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ4ODkwNzg5NSxcblx0XHRcdFx0XHRcdFwiZW5kVGltZVwiOiAxNDg4OTUxMDk1XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInBlcmtJZFwiOiBcInBlcmtfQ0Jhcl9DQ2FuNlwiLFxuXHRcdFx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ4ODkwNzkxMCxcblx0XHRcdFx0XHRcdFwiZW5kVGltZVwiOiAxNDg4OTUxMTEwXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImNvb2xkb3duc1wiOiB7XG5cdFx0XHRcdFx0XCJDQmFyX0NGYWNcIjogMTQ4OTAwODY2Nyxcblx0XHRcdFx0XHRcIkdDcmRfR0NvblwiOiAxNDg5MDA4Njk1LFxuXHRcdFx0XHRcdFwiQ0Jhcl9DQ2FuXCI6IDE0ODkwMDg3MTBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJoYXNBY3RpdmF0ZWRGaXJzdFBlcmtcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJhcm1vcnlJbmZvXCI6IHtcblx0XHRcdFwiZmlyc3RDcmF0ZVB1cmNoYXNlZFwiOiBmYWxzZVxuXHRcdH0sXG5cdFx0XCJhY3RpdmVBcm1vcnlcIjoge1xuXHRcdFx0XCJlcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcImNhcGFjaXR5XCI6IG51bGxcblx0XHR9LFxuXHRcdFwic2hhcmRzXCI6IHtcblx0XHRcdFwic2hyZF90cm9vcFNob2NrXCI6IDI5LFxuXHRcdFx0XCJzaHJkX3NwZWNpYWxBdHRhY2tBdG1vc01pZ1wiOiA5XG5cdFx0fSxcblx0XHRcInRyb29wRG9uYXRpb25Qcm9ncmVzc1wiOiB7XG5cdFx0XHRcImRvbmF0aW9uQ291bnRcIjogMTAsXG5cdFx0XHRcImxhc3RUcmFja2VkRG9uYXRpb25UaW1lXCI6IDE0OTAzODA0NTcsXG5cdFx0XHRcInJlcERvbmF0aW9uQ29vbGRvd25FbmRUaW1lXCI6IDE0OTA0MjUyMDBcblx0XHR9LFxuXHRcdFwicHVyY2hhc2VkQ3JhdGVzXCI6IFtdXG5cdH0sXG5cdFwic2NhbGFyc1wiOiB7XG5cdFx0XCJhdHRhY2tzTG9zdFwiOiAyNixcblx0XHRcImF0dGFja3NXb25cIjogMjUxLFxuXHRcdFwiZGVmZW5zZXNMb3N0XCI6IDIzNCxcblx0XHRcImRlZmVuc2VzV29uXCI6IDEyMSxcblx0XHRcImF0dGFja3NTdGFydGVkXCI6IDI3OCxcblx0XHRcImF0dGFja3NDb21wbGV0ZWRcIjogMjc3LFxuXHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE1OTAsXG5cdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDE3Mixcblx0XHRcInhwXCI6IDAsXG5cdFx0XCJORjEyMTlcIjogMVxuXHR9LFxuXHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIlxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2RhdGEvMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5QDE0OTAzODYzMTQuanNvblxuLy8gbW9kdWxlIGlkID0gMTAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0ge1xuXHRcIm5hbWVcIjogXCJmY3VrXCIsXG5cdFwiaWNvblwiOiBcIlNxdWFkU3ltYm9sc18xMVwiLFxuXHRcImRlc2NyaXB0aW9uXCI6IFwiaHR0cHMlM2ElMmYlMmZzd2MtZmN1ay5naXRodWIuaW8lMmZcIixcblx0XCJtZW1iZXJzaGlwUmVzdHJpY3Rpb25zXCI6IHtcblx0XHRcIm9wZW5FbnJvbGxtZW50XCI6IHRydWUsXG5cdFx0XCJtYXhTaXplXCI6IDMwLFxuXHRcdFwibWluU2NvcmVBdEVucm9sbG1lbnRcIjogMCxcblx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIlxuXHR9LFxuXHRcIm1lbWJlcnNcIjogW1xuXHRcdHtcblx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcImlzT3duZXJcIjogdHJ1ZSxcblx0XHRcdFwiaXNPZmZpY2VyXCI6IHRydWUsXG5cdFx0XHRcImpvaW5EYXRlXCI6IDE0Nzc3NDg0NjMsXG5cdFx0XHRcInRyb29wc0RvbmF0ZWRcIjogNTI1MSxcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogNTUxMSxcblx0XHRcdFwicmFua1wiOiAxLFxuXHRcdFx0XCJocUxldmVsXCI6IDgsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAyNjAsXG5cdFx0XHRcInhwXCI6IDE2MzAsXG5cdFx0XHRcInNjb3JlXCI6IDU3NDIsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMTQxMCxcblx0XHRcdFwiZGVmZW5zZXNXb25cIjogMTU0LFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQ2XCIsXG5cdFx0XHRcImxhc3RMb2dpblRpbWVcIjogMTQ5MDM3OTU5NCxcblx0XHRcdFwibGFzdFVwZGF0ZWRcIjogMTQ5MDM4Mzc2OCxcblx0XHRcdFwiaGFzUGxhbmV0YXJ5Q29tbWFuZFwiOiB0cnVlLFxuXHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIm5hbWVcIjogXCJKYXF1ZWxpbmVcIixcblx0XHRcdFwiaXNPd25lclwiOiBmYWxzZSxcblx0XHRcdFwiaXNPZmZpY2VyXCI6IHRydWUsXG5cdFx0XHRcImpvaW5EYXRlXCI6IDE0ODc3NjU3NzIsXG5cdFx0XHRcInRyb29wc0RvbmF0ZWRcIjogNTY3LFxuXHRcdFx0XCJ0cm9vcHNSZWNlaXZlZFwiOiAyMjQsXG5cdFx0XHRcInJhbmtcIjogMixcblx0XHRcdFwiaHFMZXZlbFwiOiA1LFxuXHRcdFx0XCJyZXB1dGF0aW9uSW52ZXN0ZWRcIjogNTUsXG5cdFx0XHRcInhwXCI6IDc0OSxcblx0XHRcdFwic2NvcmVcIjogMTc2Mixcblx0XHRcdFwid2FyUGFydHlcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50U2NvcmVzXCI6IHtcblx0XHRcdFx0XCJwbGFuZXQyM1wiOiAwLFxuXHRcdFx0XHRcInBsYW5ldDhcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiYXR0YWNrc1dvblwiOiAyNTEsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDEyMSxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0MVwiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0OTAzNzg5OTcsXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAzNzkwMDQsXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogZmFsc2UsXG5cdFx0XHRcInBsYXllcklkXCI6IFwiMmRhMzdlOWQtYjBiNC0xMWU2LTkxM2EtMDZjYjQ0MDA0Zjc5XCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwibmFtZVwiOiBcIlJhbXNzZXNcIixcblx0XHRcdFwiaXNPd25lclwiOiBmYWxzZSxcblx0XHRcdFwiaXNPZmZpY2VyXCI6IGZhbHNlLFxuXHRcdFx0XCJqb2luRGF0ZVwiOiAxNDg0MTgxNTIyLFxuXHRcdFx0XCJ0cm9vcHNEb25hdGVkXCI6IDUzNixcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogMjUyLFxuXHRcdFx0XCJyYW5rXCI6IDMsXG5cdFx0XHRcImhxTGV2ZWxcIjogNyxcblx0XHRcdFwicmVwdXRhdGlvbkludmVzdGVkXCI6IDk1LFxuXHRcdFx0XCJ4cFwiOiAxMjIyLFxuXHRcdFx0XCJzY29yZVwiOiA4MzUsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMjM0LFxuXHRcdFx0XCJkZWZlbnNlc1dvblwiOiAyOCxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0MVwiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0OTAzMjY5MDMsXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAzNjY2NzUsXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogdHJ1ZSxcblx0XHRcdFwicGxheWVySWRcIjogXCJjY2ZkOTBiMy1kODU4LTExZTYtODcwNS0wNjFjOTgwMDRmNzhcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwiQmtlSUlcIixcblx0XHRcdFwiaXNPd25lclwiOiBmYWxzZSxcblx0XHRcdFwiaXNPZmZpY2VyXCI6IGZhbHNlLFxuXHRcdFx0XCJqb2luRGF0ZVwiOiAxNDg0MTc5NTMxLFxuXHRcdFx0XCJ0cm9vcHNEb25hdGVkXCI6IDM1MCxcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogMzY2LFxuXHRcdFx0XCJyYW5rXCI6IDQsXG5cdFx0XHRcImhxTGV2ZWxcIjogNSxcblx0XHRcdFwicmVwdXRhdGlvbkludmVzdGVkXCI6IDQ4LFxuXHRcdFx0XCJ4cFwiOiA4NzYsXG5cdFx0XHRcInNjb3JlXCI6IDgzMixcblx0XHRcdFwid2FyUGFydHlcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50U2NvcmVzXCI6IHtcblx0XHRcdFx0XCJwbGFuZXQyM1wiOiAwLFxuXHRcdFx0XHRcInBsYW5ldDhcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiYXR0YWNrc1dvblwiOiAyNTksXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDIxLFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcImxhc3RMb2dpblRpbWVcIjogMTQ5MDA0MTM0Nixcblx0XHRcdFwibGFzdFVwZGF0ZWRcIjogMTQ5MDMzMDgwNixcblx0XHRcdFwiaGFzUGxhbmV0YXJ5Q29tbWFuZFwiOiBmYWxzZSxcblx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwi0L3QvdC9XCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ4ODczNTU5OCxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAyMjYsXG5cdFx0XHRcInRyb29wc1JlY2VpdmVkXCI6IDI5OSxcblx0XHRcdFwicmFua1wiOiA1LFxuXHRcdFx0XCJocUxldmVsXCI6IDQsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAyMSxcblx0XHRcdFwieHBcIjogNjg1LFxuXHRcdFx0XCJzY29yZVwiOiA2NjEsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMTc5LFxuXHRcdFx0XCJkZWZlbnNlc1dvblwiOiA0LFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcImxhc3RMb2dpblRpbWVcIjogMTQ5MDM4MjM2Myxcblx0XHRcdFwibGFzdFVwZGF0ZWRcIjogMTQ5MDM4MjM2OSxcblx0XHRcdFwiaGFzUGxhbmV0YXJ5Q29tbWFuZFwiOiBmYWxzZSxcblx0XHRcdFwicGxheWVySWRcIjogXCI3ZGI4ZmRiNC0wMWM1LTExZTctOTE5MS0wNmRjOGMwMDRmYmRcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwic2Nhcjc4XCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiB0cnVlLFxuXHRcdFx0XCJqb2luRGF0ZVwiOiAxNDgxMzAyMzg2LFxuXHRcdFx0XCJ0cm9vcHNEb25hdGVkXCI6IDExMDUsXG5cdFx0XHRcInRyb29wc1JlY2VpdmVkXCI6IDEzODUsXG5cdFx0XHRcInJhbmtcIjogNixcblx0XHRcdFwiaHFMZXZlbFwiOiA2LFxuXHRcdFx0XCJyZXB1dGF0aW9uSW52ZXN0ZWRcIjogMTcxLFxuXHRcdFx0XCJ4cFwiOiAxMjQyLFxuXHRcdFx0XCJzY29yZVwiOiA0NjcsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMjY0LFxuXHRcdFx0XCJkZWZlbnNlc1dvblwiOiAzNSxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0M1wiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0OTAyNzQ1MTEsXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAzNDQ4NjksXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogdHJ1ZSxcblx0XHRcdFwicGxheWVySWRcIjogXCIwNDc2YjA4My1iYmM0LTExZTYtODIzMy0wNjFjOTgwMDRmNzhcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwibG9yZHJvZ2VyXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ4OTAyNzUzNixcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiA4LFxuXHRcdFx0XCJ0cm9vcHNSZWNlaXZlZFwiOiAxNCxcblx0XHRcdFwicmFua1wiOiA3LFxuXHRcdFx0XCJocUxldmVsXCI6IDQsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAwLFxuXHRcdFx0XCJ4cFwiOiA1NzUsXG5cdFx0XHRcInNjb3JlXCI6IDQ1NSxcblx0XHRcdFwid2FyUGFydHlcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50U2NvcmVzXCI6IHtcblx0XHRcdFx0XCJwbGFuZXQyM1wiOiAwLFxuXHRcdFx0XHRcInBsYW5ldDhcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiYXR0YWNrc1dvblwiOiA4Nyxcblx0XHRcdFwiZGVmZW5zZXNXb25cIjogNCxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0MVwiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0OTAyMTkxMTYsXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAzNDg3MTIsXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogZmFsc2UsXG5cdFx0XHRcInBsYXllcklkXCI6IFwiYzBkYTlhMGMtMDM1My0xMWU3LTg1MGQtMDZjYjQ0MDA0Zjc5XCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwibmFtZVwiOiBcIlJPTUFOXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ5MDE3NzAxMCxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAwLFxuXHRcdFx0XCJ0cm9vcHNSZWNlaXZlZFwiOiAwLFxuXHRcdFx0XCJyYW5rXCI6IDgsXG5cdFx0XHRcImhxTGV2ZWxcIjogMyxcblx0XHRcdFwicmVwdXRhdGlvbkludmVzdGVkXCI6IDAsXG5cdFx0XHRcInhwXCI6IDM3Nixcblx0XHRcdFwic2NvcmVcIjogMzY5LFxuXHRcdFx0XCJ3YXJQYXJ0eVwiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRTY29yZXNcIjoge1xuXHRcdFx0XHRcInBsYW5ldDIzXCI6IDAsXG5cdFx0XHRcdFwicGxhbmV0OFwiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJhdHRhY2tzV29uXCI6IDQ3LFxuXHRcdFx0XCJkZWZlbnNlc1dvblwiOiAyLFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcImxhc3RMb2dpblRpbWVcIjogMTQ5MDE3NjI3Nyxcblx0XHRcdFwibGFzdFVwZGF0ZWRcIjogMTQ5MDM4MzY2Nyxcblx0XHRcdFwiaGFzUGxhbmV0YXJ5Q29tbWFuZFwiOiBmYWxzZSxcblx0XHRcdFwicGxheWVySWRcIjogXCI0YzkyZWJhYi0wODhjLTExZTctOWZjZi0wNjAzM2MwMDRmNzdcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwid2hpdGVidWZmYWxvXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ5MDE3MjExMSxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAzNyxcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogMzAsXG5cdFx0XHRcInJhbmtcIjogOSxcblx0XHRcdFwiaHFMZXZlbFwiOiAzLFxuXHRcdFx0XCJyZXB1dGF0aW9uSW52ZXN0ZWRcIjogMixcblx0XHRcdFwieHBcIjogNDE3LFxuXHRcdFx0XCJzY29yZVwiOiAzMDMsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogNTUsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDIsXG5cdFx0XHRcInBsYW5ldFwiOiBcInBsYW5ldDFcIixcblx0XHRcdFwibGFzdExvZ2luVGltZVwiOiAxNDkwMzgzMjk4LFxuXHRcdFx0XCJsYXN0VXBkYXRlZFwiOiAxNDkwMzg0MjI0LFxuXHRcdFx0XCJoYXNQbGFuZXRhcnlDb21tYW5kXCI6IGZhbHNlLFxuXHRcdFx0XCJwbGF5ZXJJZFwiOiBcImJhMjdiMzdlLTBlYjYtMTFlNy05MjM2LTA2Mzg2NDAwNGY3NVwiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIm5hbWVcIjogXCJEcmFnYW5cIixcblx0XHRcdFwiaXNPd25lclwiOiBmYWxzZSxcblx0XHRcdFwiaXNPZmZpY2VyXCI6IHRydWUsXG5cdFx0XHRcImpvaW5EYXRlXCI6IDE0ODg4MTAxNTYsXG5cdFx0XHRcInRyb29wc0RvbmF0ZWRcIjogMzksXG5cdFx0XHRcInRyb29wc1JlY2VpdmVkXCI6IDMzLFxuXHRcdFx0XCJyYW5rXCI6IDEwLFxuXHRcdFx0XCJocUxldmVsXCI6IDMsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAxMSxcblx0XHRcdFwieHBcIjogMjA4LFxuXHRcdFx0XCJzY29yZVwiOiAyNjcsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMzQsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDEsXG5cdFx0XHRcInBsYW5ldFwiOiBcInBsYW5ldDFcIixcblx0XHRcdFwibGFzdExvZ2luVGltZVwiOiAxNDkwMzg2MTMzLFxuXHRcdFx0XCJsYXN0VXBkYXRlZFwiOiAxNDkwMzg2MTM4LFxuXHRcdFx0XCJoYXNQbGFuZXRhcnlDb21tYW5kXCI6IGZhbHNlLFxuXHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjA4OWViOTZiLTAyNmQtMTFlNy05NTNhLTA2MDMzYzAwNGY3N1wiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIm5hbWVcIjogXCJKdWFuTWFcIixcblx0XHRcdFwiaXNPd25lclwiOiBmYWxzZSxcblx0XHRcdFwiaXNPZmZpY2VyXCI6IGZhbHNlLFxuXHRcdFx0XCJqb2luRGF0ZVwiOiAxNDg3ODk0NDMyLFxuXHRcdFx0XCJ0cm9vcHNEb25hdGVkXCI6IDExMCxcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogMjIzLFxuXHRcdFx0XCJyYW5rXCI6IDExLFxuXHRcdFx0XCJocUxldmVsXCI6IDUsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAyOSxcblx0XHRcdFwieHBcIjogNzEyLFxuXHRcdFx0XCJzY29yZVwiOiAyMDAsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMTE4LFxuXHRcdFx0XCJkZWZlbnNlc1dvblwiOiAyLFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcImxhc3RMb2dpblRpbWVcIjogMTQ4OTg4NjY4Nixcblx0XHRcdFwibGFzdFVwZGF0ZWRcIjogMTQ5MDM2MDk2Nyxcblx0XHRcdFwiaGFzUGxhbmV0YXJ5Q29tbWFuZFwiOiBmYWxzZSxcblx0XHRcdFwicGxheWVySWRcIjogXCI0YjM3OWI5Ny1mNTZiLTExZTYtOTFkNi0wNmU2ZWUwMDRmYmNcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwieXV1dG9cIixcblx0XHRcdFwiaXNPd25lclwiOiBmYWxzZSxcblx0XHRcdFwiaXNPZmZpY2VyXCI6IGZhbHNlLFxuXHRcdFx0XCJqb2luRGF0ZVwiOiAxNDkwMjUyNDQzLFxuXHRcdFx0XCJ0cm9vcHNEb25hdGVkXCI6IDksXG5cdFx0XHRcInRyb29wc1JlY2VpdmVkXCI6IDUsXG5cdFx0XHRcInJhbmtcIjogMTIsXG5cdFx0XHRcImhxTGV2ZWxcIjogNyxcblx0XHRcdFwicmVwdXRhdGlvbkludmVzdGVkXCI6IDAsXG5cdFx0XHRcInhwXCI6IDE1MTEsXG5cdFx0XHRcInNjb3JlXCI6IDE4NSxcblx0XHRcdFwid2FyUGFydHlcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50U2NvcmVzXCI6IHtcblx0XHRcdFx0XCJwbGFuZXQyM1wiOiAwLFxuXHRcdFx0XHRcInBsYW5ldDhcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiYXR0YWNrc1dvblwiOiA4OTAsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDEyNixcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0M1wiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0OTAzMjM0ODcsXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAzNjkxNzAsXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogdHJ1ZSxcblx0XHRcdFwicGxheWVySWRcIjogXCI1M2VmYjhkYS00MTA1LTExZTYtYWM2MC0wNjM4NjQwMDRmNzVcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwiMTIzNDU2Nzg5XCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ4OTg4MTkyNSxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAyMyxcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogMTQsXG5cdFx0XHRcInJhbmtcIjogMTMsXG5cdFx0XHRcImhxTGV2ZWxcIjogMyxcblx0XHRcdFwicmVwdXRhdGlvbkludmVzdGVkXCI6IDEsXG5cdFx0XHRcInhwXCI6IDMxNSxcblx0XHRcdFwic2NvcmVcIjogMTg0LFxuXHRcdFx0XCJ3YXJQYXJ0eVwiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRTY29yZXNcIjoge1xuXHRcdFx0XHRcInBsYW5ldDIzXCI6IDAsXG5cdFx0XHRcdFwicGxhbmV0OFwiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJhdHRhY2tzV29uXCI6IDE1LFxuXHRcdFx0XCJkZWZlbnNlc1dvblwiOiAwLFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcImxhc3RMb2dpblRpbWVcIjogMTQ5MDI3MzI1MSxcblx0XHRcdFwibGFzdFVwZGF0ZWRcIjogMTQ5MDI3MzI1Myxcblx0XHRcdFwiaGFzUGxhbmV0YXJ5Q29tbWFuZFwiOiBmYWxzZSxcblx0XHRcdFwicGxheWVySWRcIjogXCI1MWYyYWE3NS0wYzM0LTExZTctYjdkYi0wNmE3N2UwMDRmYmJcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwiU1RBTEtFUlwiLFxuXHRcdFx0XCJpc093bmVyXCI6IGZhbHNlLFxuXHRcdFx0XCJpc09mZmljZXJcIjogZmFsc2UsXG5cdFx0XHRcImpvaW5EYXRlXCI6IDE0OTAxODEwMDQsXG5cdFx0XHRcInRyb29wc0RvbmF0ZWRcIjogMjMsXG5cdFx0XHRcInRyb29wc1JlY2VpdmVkXCI6IDUsXG5cdFx0XHRcInJhbmtcIjogMTMsXG5cdFx0XHRcImhxTGV2ZWxcIjogMyxcblx0XHRcdFwicmVwdXRhdGlvbkludmVzdGVkXCI6IDAsXG5cdFx0XHRcInhwXCI6IDM1Mixcblx0XHRcdFwic2NvcmVcIjogMTg0LFxuXHRcdFx0XCJ3YXJQYXJ0eVwiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRTY29yZXNcIjoge1xuXHRcdFx0XHRcInBsYW5ldDIzXCI6IDAsXG5cdFx0XHRcdFwicGxhbmV0OFwiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJhdHRhY2tzV29uXCI6IDE0LFxuXHRcdFx0XCJkZWZlbnNlc1dvblwiOiAwLFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcImxhc3RMb2dpblRpbWVcIjogMTQ5MDM2MDEyOCxcblx0XHRcdFwibGFzdFVwZGF0ZWRcIjogMTQ5MDM2MDEzMixcblx0XHRcdFwiaGFzUGxhbmV0YXJ5Q29tbWFuZFwiOiBmYWxzZSxcblx0XHRcdFwicGxheWVySWRcIjogXCI5MjU0ZGQ3NC0wZWVlLTExZTctOTkwMi0wNmNiNDQwMDRmNzlcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwibWFub2VsXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ5MDE4MTA3Nixcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAwLFxuXHRcdFx0XCJ0cm9vcHNSZWNlaXZlZFwiOiA1LFxuXHRcdFx0XCJyYW5rXCI6IDE1LFxuXHRcdFx0XCJocUxldmVsXCI6IDMsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAwLFxuXHRcdFx0XCJ4cFwiOiAxODEsXG5cdFx0XHRcInNjb3JlXCI6IDEzNyxcblx0XHRcdFwid2FyUGFydHlcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50U2NvcmVzXCI6IHtcblx0XHRcdFx0XCJwbGFuZXQyM1wiOiAwLFxuXHRcdFx0XHRcInBsYW5ldDhcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiYXR0YWNrc1dvblwiOiAxMyxcblx0XHRcdFwiZGVmZW5zZXNXb25cIjogMCxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0MVwiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0OTAyMjUyMzcsXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAyMjU3NTUsXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogZmFsc2UsXG5cdFx0XHRcInBsYXllcklkXCI6IFwiZDA0OTA3ZGEtOWE1YS0xMWU2LTgxYmItMDZlNmVlMDA0ZmJjXCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwibmFtZVwiOiBcImJiYmJcIixcblx0XHRcdFwiaXNPd25lclwiOiBmYWxzZSxcblx0XHRcdFwiaXNPZmZpY2VyXCI6IGZhbHNlLFxuXHRcdFx0XCJqb2luRGF0ZVwiOiAxNDkwMTcwODc0LFxuXHRcdFx0XCJ0cm9vcHNEb25hdGVkXCI6IDgsXG5cdFx0XHRcInRyb29wc1JlY2VpdmVkXCI6IDAsXG5cdFx0XHRcInJhbmtcIjogMTYsXG5cdFx0XHRcImhxTGV2ZWxcIjogMyxcblx0XHRcdFwicmVwdXRhdGlvbkludmVzdGVkXCI6IDAsXG5cdFx0XHRcInhwXCI6IDM4MCxcblx0XHRcdFwic2NvcmVcIjogMTM2LFxuXHRcdFx0XCJ3YXJQYXJ0eVwiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRTY29yZXNcIjoge1xuXHRcdFx0XHRcInBsYW5ldDIzXCI6IDAsXG5cdFx0XHRcdFwicGxhbmV0OFwiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJhdHRhY2tzV29uXCI6IDYsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDAsXG5cdFx0XHRcInBsYW5ldFwiOiBcInBsYW5ldDFcIixcblx0XHRcdFwibGFzdExvZ2luVGltZVwiOiAxNDkwMzc4MTMxLFxuXHRcdFx0XCJsYXN0VXBkYXRlZFwiOiAxNDkwMzg0NzUwLFxuXHRcdFx0XCJoYXNQbGFuZXRhcnlDb21tYW5kXCI6IGZhbHNlLFxuXHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjU1YjFlNmVlLTBkNGItMTFlNy05OTlkLTA2OWRhNDAwNGY4YlwiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIm5hbWVcIjogXCJRdWFzYXJcIixcblx0XHRcdFwiaXNPd25lclwiOiBmYWxzZSxcblx0XHRcdFwiaXNPZmZpY2VyXCI6IHRydWUsXG5cdFx0XHRcImpvaW5EYXRlXCI6IDE0ODEyMDg5NjYsXG5cdFx0XHRcInRyb29wc0RvbmF0ZWRcIjogMTA1Myxcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogMTMzNSxcblx0XHRcdFwicmFua1wiOiAxNyxcblx0XHRcdFwiaHFMZXZlbFwiOiA3LFxuXHRcdFx0XCJyZXB1dGF0aW9uSW52ZXN0ZWRcIjogMTUyLFxuXHRcdFx0XCJ4cFwiOiAxNDc5LFxuXHRcdFx0XCJzY29yZVwiOiAxMTEsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogNCxcblx0XHRcdFwiZGVmZW5zZXNXb25cIjogNjUsXG5cdFx0XHRcInBsYW5ldFwiOiBcInBsYW5ldDFcIixcblx0XHRcdFwibGFzdExvZ2luVGltZVwiOiAxNDkwMzgwNzY1LFxuXHRcdFx0XCJsYXN0VXBkYXRlZFwiOiAxNDkwMzgwNzY4LFxuXHRcdFx0XCJoYXNQbGFuZXRhcnlDb21tYW5kXCI6IHRydWUsXG5cdFx0XHRcInBsYXllcklkXCI6IFwiMzA3NmRlNDQtYTEyZi0xMWU2LTg1YzktMDYwYTMyMDA0ZjhjXCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwibmFtZVwiOiBcImRhdmlkXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ5MDE4MDA1Myxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAwLFxuXHRcdFx0XCJ0cm9vcHNSZWNlaXZlZFwiOiAwLFxuXHRcdFx0XCJyYW5rXCI6IDE4LFxuXHRcdFx0XCJocUxldmVsXCI6IDMsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAwLFxuXHRcdFx0XCJ4cFwiOiAzMDQsXG5cdFx0XHRcInNjb3JlXCI6IDEwNyxcblx0XHRcdFwid2FyUGFydHlcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50U2NvcmVzXCI6IHt9LFxuXHRcdFx0XCJhdHRhY2tzV29uXCI6IDEsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDAsXG5cdFx0XHRcInBsYW5ldFwiOiBcInBsYW5ldDFcIixcblx0XHRcdFwibGFzdExvZ2luVGltZVwiOiAxNDkwMTgwOTI1LFxuXHRcdFx0XCJsYXN0VXBkYXRlZFwiOiAxNDkwMTgxMTg0LFxuXHRcdFx0XCJoYXNQbGFuZXRhcnlDb21tYW5kXCI6IGZhbHNlLFxuXHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjJmMmZlYjM3LTA3ZDQtMTFlNy04ZDA4LTA2MWM5ODAwNGY3OFwiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIm5hbWVcIjogXCJDb2xsaW5leFwiLFxuXHRcdFx0XCJpc093bmVyXCI6IGZhbHNlLFxuXHRcdFx0XCJpc09mZmljZXJcIjogZmFsc2UsXG5cdFx0XHRcImpvaW5EYXRlXCI6IDE0OTAxNzIyNDcsXG5cdFx0XHRcInRyb29wc0RvbmF0ZWRcIjogMCxcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogMSxcblx0XHRcdFwicmFua1wiOiAxOSxcblx0XHRcdFwiaHFMZXZlbFwiOiAyLFxuXHRcdFx0XCJyZXB1dGF0aW9uSW52ZXN0ZWRcIjogMCxcblx0XHRcdFwieHBcIjogMTQ4LFxuXHRcdFx0XCJzY29yZVwiOiAxMDAsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMCxcblx0XHRcdFwiZGVmZW5zZXNXb25cIjogMCxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0MVwiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0OTAyNTk1NjYsXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAyNTk1NjksXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogZmFsc2UsXG5cdFx0XHRcInBsYXllcklkXCI6IFwiZjE4NTdlZGYtMGVkNS0xMWU3LWFhY2EtMDZjNjZhMDA0Zjc2XCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwibmFtZVwiOiBcInBvaCB2alwiLFxuXHRcdFx0XCJpc093bmVyXCI6IGZhbHNlLFxuXHRcdFx0XCJpc09mZmljZXJcIjogZmFsc2UsXG5cdFx0XHRcImpvaW5EYXRlXCI6IDE0OTAxNzI4MjgsXG5cdFx0XHRcInRyb29wc0RvbmF0ZWRcIjogMCxcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogMCxcblx0XHRcdFwicmFua1wiOiAxOSxcblx0XHRcdFwiaHFMZXZlbFwiOiAyLFxuXHRcdFx0XCJyZXB1dGF0aW9uSW52ZXN0ZWRcIjogMCxcblx0XHRcdFwieHBcIjogMTQ4LFxuXHRcdFx0XCJzY29yZVwiOiAxMDAsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMCxcblx0XHRcdFwiZGVmZW5zZXNXb25cIjogMCxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0MVwiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0OTAyNDMzNzMsXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAyNDMzODEsXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogZmFsc2UsXG5cdFx0XHRcInBsYXllcklkXCI6IFwiMWVlM2ZkOWEtMGVjYS0xMWU3LWIzNWUtMDZlNmVlMDA0ZmJjXCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwibmFtZVwiOiBcInJvc2VcIixcblx0XHRcdFwiaXNPd25lclwiOiBmYWxzZSxcblx0XHRcdFwiaXNPZmZpY2VyXCI6IGZhbHNlLFxuXHRcdFx0XCJqb2luRGF0ZVwiOiAxNDkwMTgwMjQ4LFxuXHRcdFx0XCJ0cm9vcHNEb25hdGVkXCI6IDEyLFxuXHRcdFx0XCJ0cm9vcHNSZWNlaXZlZFwiOiAxOCxcblx0XHRcdFwicmFua1wiOiAxOSxcblx0XHRcdFwiaHFMZXZlbFwiOiAzLFxuXHRcdFx0XCJyZXB1dGF0aW9uSW52ZXN0ZWRcIjogMCxcblx0XHRcdFwieHBcIjogNDMyLFxuXHRcdFx0XCJzY29yZVwiOiAxMDAsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMTAsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDAsXG5cdFx0XHRcInBsYW5ldFwiOiBcInBsYW5ldDFcIixcblx0XHRcdFwibGFzdExvZ2luVGltZVwiOiAxNDkwMzc0NjQ3LFxuXHRcdFx0XCJsYXN0VXBkYXRlZFwiOiAxNDkwMzc0NjUyLFxuXHRcdFx0XCJoYXNQbGFuZXRhcnlDb21tYW5kXCI6IGZhbHNlLFxuXHRcdFx0XCJwbGF5ZXJJZFwiOiBcImNiZThlZDQzLTA1YzctMTFlNy1iYTBiLTA2MGEzMjAwNGY4Y1wiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIm5hbWVcIjogXCJrYWx5YW5pXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ5MDE4MDc4NSxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAwLFxuXHRcdFx0XCJ0cm9vcHNSZWNlaXZlZFwiOiAwLFxuXHRcdFx0XCJyYW5rXCI6IDE5LFxuXHRcdFx0XCJocUxldmVsXCI6IDIsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAwLFxuXHRcdFx0XCJ4cFwiOiAxNzcsXG5cdFx0XHRcInNjb3JlXCI6IDEwMCxcblx0XHRcdFwid2FyUGFydHlcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50U2NvcmVzXCI6IHtcblx0XHRcdFx0XCJwbGFuZXQyM1wiOiAwLFxuXHRcdFx0XHRcInBsYW5ldDhcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiYXR0YWNrc1dvblwiOiAwLFxuXHRcdFx0XCJkZWZlbnNlc1dvblwiOiAwLFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcImxhc3RMb2dpblRpbWVcIjogMTQ5MDI2NTg1Myxcblx0XHRcdFwibGFzdFVwZGF0ZWRcIjogMTQ5MDI2NTg2MSxcblx0XHRcdFwiaGFzUGxhbmV0YXJ5Q29tbWFuZFwiOiBmYWxzZSxcblx0XHRcdFwicGxheWVySWRcIjogXCJlNDUwOGJjYy0wZWRiLTExZTctYWFjYS0wNmM2NmEwMDRmNzZcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwiQXBvbGxvIENyZWVkXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ4MDg3MjY2OSxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAzMjMsXG5cdFx0XHRcInRyb29wc1JlY2VpdmVkXCI6IDUwNixcblx0XHRcdFwicmFua1wiOiAyMyxcblx0XHRcdFwiaHFMZXZlbFwiOiA1LFxuXHRcdFx0XCJyZXB1dGF0aW9uSW52ZXN0ZWRcIjogNDYsXG5cdFx0XHRcInhwXCI6IDkyOCxcblx0XHRcdFwic2NvcmVcIjogOTksXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMTU3LFxuXHRcdFx0XCJkZWZlbnNlc1dvblwiOiA0OCxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0M1wiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0ODg3NTAxNTksXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAzNTUyNTQsXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogdHJ1ZSxcblx0XHRcdFwicGxheWVySWRcIjogXCIwMmFkZGU4OC1iM2NmLTExZTYtYWY2MS0wNmU2ZWUwMDRmYmNcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwiQWRpXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ5MDE3MTU2NCxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAwLFxuXHRcdFx0XCJ0cm9vcHNSZWNlaXZlZFwiOiAwLFxuXHRcdFx0XCJyYW5rXCI6IDI0LFxuXHRcdFx0XCJocUxldmVsXCI6IDMsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAwLFxuXHRcdFx0XCJ4cFwiOiAyMDEsXG5cdFx0XHRcInNjb3JlXCI6IDk3LFxuXHRcdFx0XCJ3YXJQYXJ0eVwiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRTY29yZXNcIjoge1xuXHRcdFx0XHRcInBsYW5ldDIzXCI6IDAsXG5cdFx0XHRcdFwicGxhbmV0OFwiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJhdHRhY2tzV29uXCI6IDIsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDAsXG5cdFx0XHRcInBsYW5ldFwiOiBcInBsYW5ldDFcIixcblx0XHRcdFwibGFzdExvZ2luVGltZVwiOiAxNDkwMjYxOTUyLFxuXHRcdFx0XCJsYXN0VXBkYXRlZFwiOiAxNDkwMzg0NDkwLFxuXHRcdFx0XCJoYXNQbGFuZXRhcnlDb21tYW5kXCI6IGZhbHNlLFxuXHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjA2YzQzNGEyLTBlNGEtMTFlNy05OTlkLTA2OWRhNDAwNGY4YlwiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIm5hbWVcIjogXCJEZXNpZ3VyXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ4ODIxMzc1Myxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiA2NSxcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogMTEyLFxuXHRcdFx0XCJyYW5rXCI6IDI1LFxuXHRcdFx0XCJocUxldmVsXCI6IDUsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAxNCxcblx0XHRcdFwieHBcIjogODE0LFxuXHRcdFx0XCJzY29yZVwiOiA5Nixcblx0XHRcdFwid2FyUGFydHlcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50U2NvcmVzXCI6IHtcblx0XHRcdFx0XCJwbGFuZXQyM1wiOiAwLFxuXHRcdFx0XHRcInBsYW5ldDhcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiYXR0YWNrc1dvblwiOiAzMCxcblx0XHRcdFwiZGVmZW5zZXNXb25cIjogOSxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0MVwiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0OTAzNTEyNjEsXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAzNjM0NDYsXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogdHJ1ZSxcblx0XHRcdFwicGxheWVySWRcIjogXCI3Y2VjN2NmYy1mYzA4LTExZTYtODE0Ny0wNjM4NjQwMDRmNzVcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwiZ2ViXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ4OTY3NjQ3NCxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAxLFxuXHRcdFx0XCJ0cm9vcHNSZWNlaXZlZFwiOiAxLFxuXHRcdFx0XCJyYW5rXCI6IDI2LFxuXHRcdFx0XCJocUxldmVsXCI6IDQsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAwLFxuXHRcdFx0XCJ4cFwiOiA0NDgsXG5cdFx0XHRcInNjb3JlXCI6IDc2LFxuXHRcdFx0XCJ3YXJQYXJ0eVwiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRTY29yZXNcIjoge1xuXHRcdFx0XHRcInBsYW5ldDIzXCI6IDAsXG5cdFx0XHRcdFwicGxhbmV0OFwiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJhdHRhY2tzV29uXCI6IDcsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDAsXG5cdFx0XHRcInBsYW5ldFwiOiBcInBsYW5ldDFcIixcblx0XHRcdFwibGFzdExvZ2luVGltZVwiOiAxNDkwMjI5MjE5LFxuXHRcdFx0XCJsYXN0VXBkYXRlZFwiOiAxNDkwMzY2MTM0LFxuXHRcdFx0XCJoYXNQbGFuZXRhcnlDb21tYW5kXCI6IGZhbHNlLFxuXHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjI2MjdkYTQwLTA4NmUtMTFlNy1iMzVlLTA2ZTZlZTAwNGZiY1wiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIm5hbWVcIjogXCJEYXJ0aCBHb29mXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiB0cnVlLFxuXHRcdFx0XCJqb2luRGF0ZVwiOiAxNDgxMzAyMzc1LFxuXHRcdFx0XCJ0cm9vcHNEb25hdGVkXCI6IDM3Myxcblx0XHRcdFwidHJvb3BzUmVjZWl2ZWRcIjogNTg5LFxuXHRcdFx0XCJyYW5rXCI6IDI3LFxuXHRcdFx0XCJocUxldmVsXCI6IDUsXG5cdFx0XHRcInJlcHV0YXRpb25JbnZlc3RlZFwiOiAxMDEsXG5cdFx0XHRcInhwXCI6IDg4NCxcblx0XHRcdFwic2NvcmVcIjogNSxcblx0XHRcdFwid2FyUGFydHlcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50U2NvcmVzXCI6IHtcblx0XHRcdFx0XCJwbGFuZXQyM1wiOiAwLFxuXHRcdFx0XHRcInBsYW5ldDhcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiYXR0YWNrc1dvblwiOiA5NSxcblx0XHRcdFwiZGVmZW5zZXNXb25cIjogMzMsXG5cdFx0XHRcInBsYW5ldFwiOiBcInBsYW5ldDFcIixcblx0XHRcdFwibGFzdExvZ2luVGltZVwiOiAxNDg4NDA5MzI4LFxuXHRcdFx0XCJsYXN0VXBkYXRlZFwiOiAxNDkwMzc2ODc3LFxuXHRcdFx0XCJoYXNQbGFuZXRhcnlDb21tYW5kXCI6IGZhbHNlLFxuXHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjZiNTZkYTU4LWJjYzItMTFlNi04ZTVjLTA2Y2I0NDAwNGY3OVwiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIm5hbWVcIjogXCJTbm93eVwiLFxuXHRcdFx0XCJpc093bmVyXCI6IGZhbHNlLFxuXHRcdFx0XCJpc09mZmljZXJcIjogdHJ1ZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ4NjIwNDExMCxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiA3MDgsXG5cdFx0XHRcInRyb29wc1JlY2VpdmVkXCI6IDMwNixcblx0XHRcdFwicmFua1wiOiAyOCxcblx0XHRcdFwiaHFMZXZlbFwiOiA2LFxuXHRcdFx0XCJyZXB1dGF0aW9uSW52ZXN0ZWRcIjogODEsXG5cdFx0XHRcInhwXCI6IDEwNzgsXG5cdFx0XHRcInNjb3JlXCI6IDEsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogMzUsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDE0LFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcImxhc3RMb2dpblRpbWVcIjogMTQ4OTM2MjE4NSxcblx0XHRcdFwibGFzdFVwZGF0ZWRcIjogMTQ5MDM2OTY2Mixcblx0XHRcdFwiaGFzUGxhbmV0YXJ5Q29tbWFuZFwiOiBmYWxzZSxcblx0XHRcdFwicGxheWVySWRcIjogXCJhMTFiZWM3MC1lYTZmLTExZTYtOTVmMi0wNjBhMzIwMDRmOGNcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJuYW1lXCI6IFwiTMOzZsO8dHlpXCIsXG5cdFx0XHRcImlzT3duZXJcIjogZmFsc2UsXG5cdFx0XHRcImlzT2ZmaWNlclwiOiBmYWxzZSxcblx0XHRcdFwiam9pbkRhdGVcIjogMTQ4NjQ4OTg1OSxcblx0XHRcdFwidHJvb3BzRG9uYXRlZFwiOiAyMjksXG5cdFx0XHRcInRyb29wc1JlY2VpdmVkXCI6IDQyMixcblx0XHRcdFwicmFua1wiOiAyOCxcblx0XHRcdFwiaHFMZXZlbFwiOiA2LFxuXHRcdFx0XCJyZXB1dGF0aW9uSW52ZXN0ZWRcIjogNzIsXG5cdFx0XHRcInhwXCI6IDExNjAsXG5cdFx0XHRcInNjb3JlXCI6IDEsXG5cdFx0XHRcIndhclBhcnR5XCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFwidG91cm5hbWVudFNjb3Jlc1wiOiB7XG5cdFx0XHRcdFwicGxhbmV0MjNcIjogMCxcblx0XHRcdFx0XCJwbGFuZXQ4XCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImF0dGFja3NXb25cIjogNTMsXG5cdFx0XHRcImRlZmVuc2VzV29uXCI6IDExLFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcImxhc3RMb2dpblRpbWVcIjogMTQ4OTg2MDUzMSxcblx0XHRcdFwibGFzdFVwZGF0ZWRcIjogMTQ5MDM4NDk0NCxcblx0XHRcdFwiaGFzUGxhbmV0YXJ5Q29tbWFuZFwiOiB0cnVlLFxuXHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjFlYmYyZmU1LWQ3NmEtMTFlNi04ZjhjLTA2YzY2YTAwNGY3NlwiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIm5hbWVcIjogXCJEYXJ0aCBFbmVnb1wiLFxuXHRcdFx0XCJpc093bmVyXCI6IGZhbHNlLFxuXHRcdFx0XCJpc09mZmljZXJcIjogZmFsc2UsXG5cdFx0XHRcImpvaW5EYXRlXCI6IDE0ODcwMDc5MDYsXG5cdFx0XHRcInRyb29wc0RvbmF0ZWRcIjogMTg1LFxuXHRcdFx0XCJ0cm9vcHNSZWNlaXZlZFwiOiAyMzMsXG5cdFx0XHRcInJhbmtcIjogMjgsXG5cdFx0XHRcImhxTGV2ZWxcIjogNixcblx0XHRcdFwicmVwdXRhdGlvbkludmVzdGVkXCI6IDYzLFxuXHRcdFx0XCJ4cFwiOiAxMDU5LFxuXHRcdFx0XCJzY29yZVwiOiAxLFxuXHRcdFx0XCJ3YXJQYXJ0eVwiOiAwLFxuXHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcInRvdXJuYW1lbnRTY29yZXNcIjoge1xuXHRcdFx0XHRcInBsYW5ldDIzXCI6IDAsXG5cdFx0XHRcdFwicGxhbmV0OFwiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJhdHRhY2tzV29uXCI6IDE4OCxcblx0XHRcdFwiZGVmZW5zZXNXb25cIjogNCxcblx0XHRcdFwicGxhbmV0XCI6IFwicGxhbmV0MVwiLFxuXHRcdFx0XCJsYXN0TG9naW5UaW1lXCI6IDE0OTAzMDIyNTAsXG5cdFx0XHRcImxhc3RVcGRhdGVkXCI6IDE0OTAzNTg3OTksXG5cdFx0XHRcImhhc1BsYW5ldGFyeUNvbW1hbmRcIjogdHJ1ZSxcblx0XHRcdFwicGxheWVySWRcIjogXCI3MmVkMjYxMC1kYTk3LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIlxuXHRcdH1cblx0XSxcblx0XCJjcmVhdGVkXCI6IDE0Nzc3NDg0NjMsXG5cdFwiaGlnaGVzdFJhbmtBY2hpZXZlZFwiOiAxMTA5LFxuXHRcImFjdGl2ZU1lbWJlckNvdW50XCI6IDI3LFxuXHRcInNxdWFkV2FyUmVhZHlDb3VudFwiOiAyNyxcblx0XCJjdXJyZW50V2FySWRcIjogbnVsbCxcblx0XCJ3YXJTaWduVXBUaW1lXCI6IG51bGwsXG5cdFwid2FyUmF0aW5nXCI6IG51bGwsXG5cdFwiaXNTYW1lRmFjdGlvbldhckFsbG93ZWRcIjogdHJ1ZSxcblx0XCJzY29yZVwiOiAxMzcxMyxcblx0XCJyYW5rXCI6IDExMDksXG5cdFwiaWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XCJtZW1iZXJDb3VudFwiOiAzMCxcblx0XCJ3YXJIaXN0b3J5XCI6IFtcblx0XHR7XG5cdFx0XHRcIndhcklkXCI6IFwiNGY0N2RhYmEtYmIyMi0xMWU2LWFjYTgtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcImVuZERhdGVcIjogMTQ4MTEzOTQ2OSxcblx0XHRcdFwic2NvcmVcIjogMTUsXG5cdFx0XHRcIm9wcG9uZW50U2NvcmVcIjogMCxcblx0XHRcdFwib3Bwb25lbnRHdWlsZElkXCI6IFwiODNlODRlODQtMTAzYy0xMWU1LWFiNTYtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcIm9wcG9uZW50TmFtZVwiOiBcInJlYmVsc2FsaWVuY2VcIixcblx0XHRcdFwib3Bwb25lbnRJY29uXCI6IFwiU3F1YWRTeW1ib2xzXzE1XCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwid2FySWRcIjogXCIyZWI1MjhmZS1iZDI2LTExZTYtOTllYi0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFwiZW5kRGF0ZVwiOiAxNDgxMzYxMDM3LFxuXHRcdFx0XCJzY29yZVwiOiAxNCxcblx0XHRcdFwib3Bwb25lbnRTY29yZVwiOiAxNCxcblx0XHRcdFwib3Bwb25lbnRHdWlsZElkXCI6IFwiNTBiOGJkNWYtYjBjYy0xMWU2LTg0MDItMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcIm9wcG9uZW50TmFtZVwiOiBcIlBob2VuaXgtTGVnaW9uXCIsXG5cdFx0XHRcIm9wcG9uZW50SWNvblwiOiBcIlNxdWFkU3ltYm9sc18wNVwiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIndhcklkXCI6IFwiOGYwNDc4ZjQtYmZmMC0xMWU2LWFhNzctMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcImVuZERhdGVcIjogMTQ4MTY2Nzg1Nixcblx0XHRcdFwic2NvcmVcIjogMTUsXG5cdFx0XHRcIm9wcG9uZW50U2NvcmVcIjogMTIsXG5cdFx0XHRcIm9wcG9uZW50R3VpbGRJZFwiOiBcIjhhYzYyNzU3LWExMjYtMTFlNi1iZjM3LTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XCJvcHBvbmVudE5hbWVcIjogXCJYLlN0cmVtZS1FbGl0ZVwiLFxuXHRcdFx0XCJvcHBvbmVudEljb25cIjogXCJTcXVhZFN5bWJvbHNfMDFcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJ3YXJJZFwiOiBcIjJlNDUxMTQ1LWMyZTAtMTFlNi05ZWQyLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XCJlbmREYXRlXCI6IDE0ODE5OTA2NzQsXG5cdFx0XHRcInNjb3JlXCI6IDE1LFxuXHRcdFx0XCJvcHBvbmVudFNjb3JlXCI6IDUsXG5cdFx0XHRcIm9wcG9uZW50R3VpbGRJZFwiOiBcImU5ZTlhMGNhLWI2NTAtMTFlNi04ZjViLTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XCJvcHBvbmVudE5hbWVcIjogXCJSZWJlbHNFbmZvcmNlcnNcIixcblx0XHRcdFwib3Bwb25lbnRJY29uXCI6IFwiU3F1YWRTeW1ib2xzXzA5XCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwid2FySWRcIjogXCJhMDFkNzUxYy1jODA3LTExZTYtYjQwMC0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFwiZW5kRGF0ZVwiOiAxNDgyNTU3MzcyLFxuXHRcdFx0XCJzY29yZVwiOiAxNSxcblx0XHRcdFwib3Bwb25lbnRTY29yZVwiOiAxMixcblx0XHRcdFwib3Bwb25lbnRHdWlsZElkXCI6IFwiYzllMDU3ZjctYTNlMS0xMWU1LTljOWItMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcIm9wcG9uZW50TmFtZVwiOiBcIlJVU1NJQU5CRUFSXCIsXG5cdFx0XHRcIm9wcG9uZW50SWNvblwiOiBcIlNxdWFkU3ltYm9sc18xNVwiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIndhcklkXCI6IFwiYmM0MjMwNDctZGNiZS0xMWU2LTg3MDUtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcImVuZERhdGVcIjogMTQ4NDgzNTA0MCxcblx0XHRcdFwic2NvcmVcIjogMzcsXG5cdFx0XHRcIm9wcG9uZW50U2NvcmVcIjogMzAsXG5cdFx0XHRcIm9wcG9uZW50R3VpbGRJZFwiOiBcIjQxMTRmZmUwLWEzODItMTFlNi1hMjI1LTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XCJvcHBvbmVudE5hbWVcIjogXCJpdGFsaWFuc3RlbGxhclwiLFxuXHRcdFx0XCJvcHBvbmVudEljb25cIjogXCJTcXVhZFN5bWJvbHNfMTZcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJ3YXJJZFwiOiBcIjE4ZGQ2ZTYyLWRmNjMtMTFlNi1hMGQ5LTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XCJlbmREYXRlXCI6IDE0ODUxMjU1MzUsXG5cdFx0XHRcInNjb3JlXCI6IDQ1LFxuXHRcdFx0XCJvcHBvbmVudFNjb3JlXCI6IDIsXG5cdFx0XHRcIm9wcG9uZW50R3VpbGRJZFwiOiBcIjkwYmFmODM2LWYzNmItMTFlNC05NmY3LTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XCJvcHBvbmVudE5hbWVcIjogXCJjaGV3YmFjY2FcIixcblx0XHRcdFwib3Bwb25lbnRJY29uXCI6IFwiU3F1YWRTeW1ib2xzXzA2XCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwid2FySWRcIjogXCJmNGU0ZDE5MC1lODkwLTExZTYtOWIzNy0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFwiZW5kRGF0ZVwiOiAxNDg2MTM0ODAzLFxuXHRcdFx0XCJzY29yZVwiOiA0Myxcblx0XHRcdFwib3Bwb25lbnRTY29yZVwiOiAyMSxcblx0XHRcdFwib3Bwb25lbnRHdWlsZElkXCI6IFwiMzdhOGEzOGQtYmExMC0xMWU1LTgyMTktMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcIm9wcG9uZW50TmFtZVwiOiBcIklUQUxJQU5JU1wiLFxuXHRcdFx0XCJvcHBvbmVudEljb25cIjogXCJTcXVhZFN5bWJvbHNfMDVcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJ3YXJJZFwiOiBcImIwOWEyNDVlLWVhZTktMTFlNi04ZDViLTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XCJlbmREYXRlXCI6IDE0ODYzOTI4MDUsXG5cdFx0XHRcInNjb3JlXCI6IDQ1LFxuXHRcdFx0XCJvcHBvbmVudFNjb3JlXCI6IDE1LFxuXHRcdFx0XCJvcHBvbmVudEd1aWxkSWRcIjogXCIyMGJhZDYxZS1iNjVjLTExZTUtOTlmNy0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFwib3Bwb25lbnROYW1lXCI6IFwidGhlLmxhc3QuamVkaVwiLFxuXHRcdFx0XCJvcHBvbmVudEljb25cIjogXCJTcXVhZFN5bWJvbHNfMTVcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJ3YXJJZFwiOiBcImZkNGMwMzZmLWYyYWQtMTFlNi1hNzlmLTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XCJlbmREYXRlXCI6IDE0ODcyNDY3NzMsXG5cdFx0XHRcInNjb3JlXCI6IDQ0LFxuXHRcdFx0XCJvcHBvbmVudFNjb3JlXCI6IDExLFxuXHRcdFx0XCJvcHBvbmVudEd1aWxkSWRcIjogXCJhNTRjNDc2Yi00NjZjLTExZTUtYWRhZS0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFwib3Bwb25lbnROYW1lXCI6IFwiSW5kaWFcIixcblx0XHRcdFwib3Bwb25lbnRJY29uXCI6IFwiU3F1YWRTeW1ib2xzXzAyXCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwid2FySWRcIjogXCI0NWZkNDU2YS1mNTZmLTExZTYtODliNS0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFwiZW5kRGF0ZVwiOiAxNDg3NTU2MjA3LFxuXHRcdFx0XCJzY29yZVwiOiA0NSxcblx0XHRcdFwib3Bwb25lbnRTY29yZVwiOiAyNixcblx0XHRcdFwib3Bwb25lbnRHdWlsZElkXCI6IFwiOTM5ZTRjMTktNjMwNS0xMWU2LTkwNTktMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcIm9wcG9uZW50TmFtZVwiOiBcIkRyb2lkZWthU2NoaW5kZXJcIixcblx0XHRcdFwib3Bwb25lbnRJY29uXCI6IFwiU3F1YWRTeW1ib2xzXzE1XCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwid2FySWRcIjogXCJlM2I1MmI1OS1mOTM2LTExZTYtOTIyYy0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFwiZW5kRGF0ZVwiOiAxNDg3OTY1Mjk4LFxuXHRcdFx0XCJzY29yZVwiOiA0NCxcblx0XHRcdFwib3Bwb25lbnRTY29yZVwiOiAyNCxcblx0XHRcdFwib3Bwb25lbnRHdWlsZElkXCI6IFwiMjhkODUyYjgtNGFhYS0xMWU2LWFkYjgtMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcIm9wcG9uZW50TmFtZVwiOiBcIlJlYmVsc1VuaW9uU1wiLFxuXHRcdFx0XCJvcHBvbmVudEljb25cIjogXCJTcXVhZFN5bWJvbHNfMDFcIlxuXHRcdH0sXG5cdFx0e1xuXHRcdFx0XCJ3YXJJZFwiOiBcIjU1ZDQ2NGE4LWZlYmYtMTFlNi1iOTg1LTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XCJlbmREYXRlXCI6IDE0ODg1NzM2NDAsXG5cdFx0XHRcInNjb3JlXCI6IDQzLFxuXHRcdFx0XCJvcHBvbmVudFNjb3JlXCI6IDM3LFxuXHRcdFx0XCJvcHBvbmVudEd1aWxkSWRcIjogXCJiZDA4MjNiOC1iNjQzLTExZTYtODIzMy0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFwib3Bwb25lbnROYW1lXCI6IFwiVGhhaVNtaWxlXCIsXG5cdFx0XHRcIm9wcG9uZW50SWNvblwiOiBcIlNxdWFkU3ltYm9sc18wMlwiXG5cdFx0fSxcblx0XHR7XG5cdFx0XHRcIndhcklkXCI6IFwiYzliMTNmY2MtMDJhNy0xMWU3LTgyMmQtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcImVuZERhdGVcIjogMTQ4OTAwMzMyOSxcblx0XHRcdFwic2NvcmVcIjogNDUsXG5cdFx0XHRcIm9wcG9uZW50U2NvcmVcIjogMTAsXG5cdFx0XHRcIm9wcG9uZW50R3VpbGRJZFwiOiBcIjI4ZDg1MmI4LTRhYWEtMTFlNi1hZGI4LTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XCJvcHBvbmVudE5hbWVcIjogXCJSZWJlbHNVbmlvblNcIixcblx0XHRcdFwib3Bwb25lbnRJY29uXCI6IFwiU3F1YWRTeW1ib2xzXzAxXCJcblx0XHR9LFxuXHRcdHtcblx0XHRcdFwid2FySWRcIjogXCJmMTBlYjM0Ny0wY2Y2LTExZTctYjdkYi0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFwiZW5kRGF0ZVwiOiAxNDkwMTM2ODM2LFxuXHRcdFx0XCJzY29yZVwiOiA0NCxcblx0XHRcdFwib3Bwb25lbnRTY29yZVwiOiAxOSxcblx0XHRcdFwib3Bwb25lbnRHdWlsZElkXCI6IFwiNGRlNjdhYzAtNDgwNy0xMWU2LTkzNzctMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcIm9wcG9uZW50TmFtZVwiOiBcInBvcnR1Z2FsZGVhJWMzJWE3b1wiLFxuXHRcdFx0XCJvcHBvbmVudEljb25cIjogXCJTcXVhZFN5bWJvbHNfMDVcIlxuXHRcdH1cblx0XSxcblx0XCJsZXZlbFwiOiAyOCxcblx0XCJ0b3RhbFJlcEludmVzdGVkXCI6IDE3NzgsXG5cdFwicGVya3NcIjoge1xuXHRcdFwiYXZhaWxhYmxlXCI6IHtcblx0XHRcdFwiQ0Jhcl9DRmFjXCI6IFwicGVya19DQmFyX0NGYWM2XCIsXG5cdFx0XHRcIkRudEFtdF9EbnRUXCI6IFwicGVya19EbnRBbXRfRG50VDVcIixcblx0XHRcdFwiR0Nvbl9EbnRUXCI6IFwicGVya19HQ29uX0RudFQ1XCIsXG5cdFx0XHRcIkdDb25fVERyZFwiOiBcInBlcmtfR0Nvbl9URHJkNFwiLFxuXHRcdFx0XCJDSHJvX0dBbGxcIjogXCJwZXJrX0NIcm9fR0FsbDRcIixcblx0XHRcdFwiR0NyZF9HQ29uXCI6IFwicGVya19HQ3JkX0dDb240XCIsXG5cdFx0XHRcIkNDYW5fVERyZFwiOiBcInBlcmtfQ0Nhbl9URHJkNVwiLFxuXHRcdFx0XCJURHJkXCI6IFwicGVya19URHJkNFwiLFxuXHRcdFx0XCJDQmFyX0NDYW5cIjogXCJwZXJrX0NCYXJfQ0NhbjZcIixcblx0XHRcdFwiQ0ZhY19DQ2FuXCI6IFwicGVya19DRmFjX0NDYW40XCIsXG5cdFx0XHRcIkdBbGxfR0NvblwiOiBcInBlcmtfR0FsbF9HQ29uNFwiLFxuXHRcdFx0XCJHQ3JkX0RudFRcIjogXCJwZXJrX0dDcmRfRG50VDJcIlxuXHRcdH0sXG5cdFx0XCJpblByb2dyZXNzXCI6IHtcblx0XHRcdFwicGVya19DRmFjX0NDYW41XCI6IDMsXG5cdFx0XHRcInBlcmtfR0Nvbl9URHJkNVwiOiAyNVxuXHRcdH1cblx0fSxcblx0XCJsYXN0UGVya05vdGlmXCI6IDE0OTAyNDM0MzZcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9kYXRhLzU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NkAxNDkwMzg2MTM1Lmpzb25cbi8vIG1vZHVsZSBpZCA9IDEwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcInBsYXllck1vZGVsXCI6IHtcblx0XHRcImd1aWxkSW5mb1wiOiB7XG5cdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XCJpY29uXCI6IFwiXCIsXG5cdFx0XHRcImpvaW5EYXRlXCI6IDE0Nzc3NDg0NjMsXG5cdFx0XHRcInBsYXllckhhc091dHN0YW5kaW5nSm9pblJlcXVlc3RcIjogZmFsc2Vcblx0XHR9LFxuXHRcdFwidXBncmFkZXNcIjoge1xuXHRcdFx0XCJ0cm9vcFwiOiB7XG5cdFx0XHRcdFwiU3Rvcm1cIjogNyxcblx0XHRcdFx0XCJEYXJrXCI6IDYsXG5cdFx0XHRcdFwiQVRTVFwiOiA3LFxuXHRcdFx0XHRcIjJNVGFua1wiOiA2LFxuXHRcdFx0XHRcIlNjb3V0XCI6IDYsXG5cdFx0XHRcdFwiRW1waXJlU3BlZWRlclwiOiA3LFxuXHRcdFx0XHRcIkhlcm9BVFNUXCI6IDYsXG5cdFx0XHRcdFwiSGVyb0FUTVBcIjogNyxcblx0XHRcdFx0XCJEZXdiYWNrXCI6IDYsXG5cdFx0XHRcdFwiSGVyb0NyaW1zb25HdWFyZFwiOiA3LFxuXHRcdFx0XHRcIkFUTVBcIjogNixcblx0XHRcdFx0XCJUZWNobmljaWFuXCI6IDcsXG5cdFx0XHRcdFwiQVRBVFwiOiA3LFxuXHRcdFx0XHRcIkhlcm9BVEFUXCI6IDcsXG5cdFx0XHRcdFwiSGVhdnlTdG9ybVwiOiA3LFxuXHRcdFx0XHRcIlByb2JlRHJvaWRcIjogNyxcblx0XHRcdFx0XCJTaG9ja1wiOiAzLFxuXHRcdFx0XHRcIk1IQ1wiOiA3LFxuXHRcdFx0XHRcIkNoYW1waW9uRW1waXJlRHJvaWRla2FcIjogNSxcblx0XHRcdFx0XCJTbmlwZXJcIjogNyxcblx0XHRcdFx0XCJFbXBpcmVHYW1vcnJlYW5XYXJyaW9yXCI6IDJcblx0XHRcdH0sXG5cdFx0XHRcInNwZWNpYWxBdHRhY2tcIjoge1xuXHRcdFx0XHRcIlRpZUludGVyY2VwdG9yXCI6IDYsXG5cdFx0XHRcdFwiVGllRmlnaHRlclwiOiA2LFxuXHRcdFx0XHRcIlRpZUJvbWJlclwiOiA2LFxuXHRcdFx0XHRcIlRpZURlZmVuZGVyXCI6IDcsXG5cdFx0XHRcdFwiQXRtb3NNaWdcIjogMlxuXHRcdFx0fSxcblx0XHRcdFwiYnVpbGRpbmdcIjoge30sXG5cdFx0XHRcImVxdWlwbWVudFwiOiB7XG5cdFx0XHRcdFwiZXFwRW1waXJlSFFIZWFsdGhcIjogNyxcblx0XHRcdFx0XCJlcXBFbXBpcmVNb3J0YXJUdXJyZXREYW1hZ2VcIjogNixcblx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXREYW1hZ2VcIjogNixcblx0XHRcdFx0XCJlcXBFbXBpcmVXYWxsSGVhbHRoXCI6IDcsXG5cdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0SGVhbHRoXCI6IDYsXG5cdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoXCI6IDYsXG5cdFx0XHRcdFwiZXFwRW1waXJlUGVudGFnb25Ucm9vcGVyXCI6IDMsXG5cdFx0XHRcdFwiZXFwRW1waXJlTWF0ZXJpYWxzR2VuZXJhdG9ySGVhbHRoXCI6IDQsXG5cdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoXCI6IDcsXG5cdFx0XHRcdFwiZXFwRW1waXJlQ29udHJhYmFuZEdlbmVyYXRvckhlYWx0aFwiOiA0LFxuXHRcdFx0XHRcImVxcEVtcGlyZVBlbnRhZ29uSGVhdnlUcm9vcGVyXCI6IDMsXG5cdFx0XHRcdFwiZXFwRW1waXJlQnVyc3RUdXJyZXREYW1hZ2VcIjogMyxcblx0XHRcdFx0XCJlcXBFbXBpcmVCdXJzdFR1cnJldEhlYWx0aFwiOiAzLFxuXHRcdFx0XHRcImVxcEVtcGlyZUNhcmdvR3JlYXREYW5lXCI6IDEsXG5cdFx0XHRcdFwiZXFwRW1waXJlU2FuZHRyb29wZXJcIjogMixcblx0XHRcdFx0XCJlcXBFbXBpcmVBcmN0aWNBVE1QXCI6IDEsXG5cdFx0XHRcdFwiZXFwRW1waXJlU25vd3Ryb29wZXJcIjogMVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJwcml6ZXNcIjoge1xuXHRcdFx0XCJ0cm9vcFwiOiB7XG5cdFx0XHRcdFwiS3ViYXpJbnZhZGVyXCI6IDkzLFxuXHRcdFx0XHRcInByb21vUmFuY29yRW1waXJlXCI6IDYsXG5cdFx0XHRcdFwiRW1waXJlU3Rvcm1EZWF0aFwiOiAxMTEsXG5cdFx0XHRcdFwiRW1waXJlSGVhdnlTdG9ybURlYXRoXCI6IDk2LFxuXHRcdFx0XHRcIkVtcGlyZVNjb3V0RGVhdGhcIjogMjE5LFxuXHRcdFx0XHRcIkVtcGlyZUdhbW9ycmVhbldhcnJpb3JcIjogMTAsXG5cdFx0XHRcdFwiRW1waXJlU3BlZWRlclwiOiA1Nixcblx0XHRcdFx0XCJQcm9iZURyb2lkXCI6IDQ0LFxuXHRcdFx0XHRcIkhlYXZ5U3Rvcm1cIjogOTcsXG5cdFx0XHRcdFwiU25pcGVyXCI6IDQ5LFxuXHRcdFx0XHRcIkhlcm9BVFNUXCI6IDI1LFxuXHRcdFx0XHRcIkhlcm9BVEFUXCI6IDE0LFxuXHRcdFx0XHRcIlRlY2huaWNpYW5cIjogNDEsXG5cdFx0XHRcdFwiU2VjdXJpdHlEcm9pZFwiOiA0MSxcblx0XHRcdFx0XCJTaG9ja1wiOiAzNixcblx0XHRcdFx0XCJIZXJvQVRNUFwiOiA5LFxuXHRcdFx0XHRcIkFUQVRcIjogMTcsXG5cdFx0XHRcdFwiSGVyb0NyaW1zb25HdWFyZFwiOiAxMixcblx0XHRcdFx0XCJBVERQXCI6IDE4LFxuXHRcdFx0XHRcIkhlcm9EYXJ0aFZhZGVyXCI6IDEwLFxuXHRcdFx0XHRcIkVtcGlyZVR3aWxla0luY2luZXJhdG9yXCI6IDI1LFxuXHRcdFx0XHRcIkVtcGlyZUp1bXB0cm9vcGVyXCI6IDE5LFxuXHRcdFx0XHRcIk1IQ1wiOiAxNixcblx0XHRcdFx0XCJFbXBpcmVIb3ZlcnRhbmtTYW1wbGVcIjogMyxcblx0XHRcdFx0XCJLcmF5dERyYWdvblwiOiA0LFxuXHRcdFx0XHRcIkVtcGlyZUpvaGhhclwiOiA2LFxuXHRcdFx0XHRcIkVtcGlyZVRvZ25hdGhcIjogM1xuXHRcdFx0fSxcblx0XHRcdFwic3BlY2lhbEF0dGFja1wiOiB7XG5cdFx0XHRcdFwiVGllSW50ZXJjZXB0b3JcIjogOSxcblx0XHRcdFx0XCJUaWVGaWdodGVyXCI6IDYsXG5cdFx0XHRcdFwiVGllRGVmZW5kZXJcIjogNCxcblx0XHRcdFx0XCJUaWVCb21iZXJcIjogMyxcblx0XHRcdFx0XCJWVDQ5XCI6IDEsXG5cdFx0XHRcdFwiVGllQWR2YW5jZWRcIjogMSxcblx0XHRcdFx0XCJJbXBlcmlhbERyb3BzaGlwXCI6IDFcblx0XHRcdH0sXG5cdFx0XHRcInJlc291cmNlc1wiOiB7fSxcblx0XHRcdFwiY3JhdGVzXCI6IHtcblx0XHRcdFx0XCJhdmFpbGFibGVcIjoge30sXG5cdFx0XHRcdFwiaW5Qcm9ncmVzc1wiOiB7fSxcblx0XHRcdFx0XCJuZXh0XCI6IDY1OSxcblx0XHRcdFx0XCJuZXh0RGFpbHlDcmF0ZVRpbWVcIjogMTQ5MDQxNDQwMCxcblx0XHRcdFx0XCJuZXh0SG9sb25ldFRpbWVcIjogMTQ4ODI3MDYyNlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkb25hdGVkVHJvb3BzXCI6IHt9LFxuXHRcdFwiYnVpbGRpbmdzVW5kZXJDb25zdHJ1Y3Rpb25cIjogW1xuXHRcdFx0XCJibGRfMTIxXCJcblx0XHRdLFxuXHRcdFwibWFwXCI6IHtcblx0XHRcdFwibmV4dFwiOiA0ODcsXG5cdFx0XHRcInBsYW5ldFwiOiBcInBsYW5ldDZcIixcblx0XHRcdFwiYnVpbGRpbmdzXCI6IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE0OFwiLFxuXHRcdFx0XHRcdFwieFwiOiAxMCxcblx0XHRcdFx0XHRcInpcIjogMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE0M1wiLFxuXHRcdFx0XHRcdFwieFwiOiAzLFxuXHRcdFx0XHRcdFwielwiOiAtMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVRyYXBTdHJpa2VBT0U2XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE1NlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNSxcblx0XHRcdFx0XHRcInpcIjogLTYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVCdXJzdFR1cnJldDZcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfOTFcIixcblx0XHRcdFx0XHRcInhcIjogLTEwLFxuXHRcdFx0XHRcdFwielwiOiAtMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzIwMlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogLTgsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMDFcIixcblx0XHRcdFx0XHRcInhcIjogLTcsXG5cdFx0XHRcdFx0XCJ6XCI6IC01LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjE1XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDMsXG5cdFx0XHRcdFx0XCJ6XCI6IC02LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUmFwaWRGaXJlVHVycmV0N1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xN1wiLFxuXHRcdFx0XHRcdFwieFwiOiA1LFxuXHRcdFx0XHRcdFwielwiOiAtOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDUsXG5cdFx0XHRcdFx0XCJ6XCI6IC03LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjExXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDcsXG5cdFx0XHRcdFx0XCJ6XCI6IDMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVUcmFwU3RyaWtlR2VuZXJpYzZcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMThcIixcblx0XHRcdFx0XHRcInhcIjogNSxcblx0XHRcdFx0XHRcInpcIjogLTYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xM1wiLFxuXHRcdFx0XHRcdFwieFwiOiA1LFxuXHRcdFx0XHRcdFwielwiOiAtNSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzcxXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xMCxcblx0XHRcdFx0XHRcInpcIjogMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEwN1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtOSxcblx0XHRcdFx0XHRcInpcIjogLTEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMDRcIixcblx0XHRcdFx0XHRcInhcIjogMTAsXG5cdFx0XHRcdFx0XCJ6XCI6IDMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMDhcIixcblx0XHRcdFx0XHRcInhcIjogMTAsXG5cdFx0XHRcdFx0XCJ6XCI6IDEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82OVwiLFxuXHRcdFx0XHRcdFwieFwiOiAxMCxcblx0XHRcdFx0XHRcInpcIjogMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEwMlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogLTYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82MVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjdcIixcblx0XHRcdFx0XHRcInhcIjogLTQsXG5cdFx0XHRcdFx0XCJ6XCI6IDcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVCdXJzdFR1cnJldDZcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjZcIixcblx0XHRcdFx0XHRcInhcIjogLTEsXG5cdFx0XHRcdFx0XCJ6XCI6IDgsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVSb2NrZXRUdXJyZXQ3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzgwXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xMSxcblx0XHRcdFx0XHRcInpcIjogMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExNFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ6XCI6IDEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF83OVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogLTcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF83OFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ6XCI6IDIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF83NlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNyZWRpdFN0b3JhZ2U3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEyMlwiLFxuXHRcdFx0XHRcdFwieFwiOiAzLFxuXHRcdFx0XHRcdFwielwiOiAxLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlU2hpZWxkR2VuZXJhdG9yN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82MFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ6XCI6IDMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMTBcIixcblx0XHRcdFx0XHRcInhcIjogMyxcblx0XHRcdFx0XHRcInpcIjogNSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVRyYXBTdHJpa2VHZW5lcmljN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF81NVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMixcblx0XHRcdFx0XHRcInpcIjogNCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVNxdWFkQnVpbGRpbmc3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExN1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtNCxcblx0XHRcdFx0XHRcInpcIjogMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVNoaWVsZEdlbmVyYXRvcjdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjE2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC05LFxuXHRcdFx0XHRcdFwielwiOiAxLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTW9ydGFyNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNTdcIixcblx0XHRcdFx0XHRcInhcIjogNSxcblx0XHRcdFx0XHRcInpcIjogMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUJ1cnN0VHVycmV0NlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF84OFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMyxcblx0XHRcdFx0XHRcInpcIjogMTMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVTdGFycG9ydDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTQ0XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC00LFxuXHRcdFx0XHRcdFwielwiOiAtMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVRyYXBTdHJpa2VBT0U2XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzUzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xMCxcblx0XHRcdFx0XHRcInpcIjogLTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVNYXRlcmlhbHNHZW5lcmF0b3I3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDM4Mzc2NCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDU0MFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNTJcIixcblx0XHRcdFx0XHRcInhcIjogMyxcblx0XHRcdFx0XHRcInpcIjogNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVJhcGlkRmlyZVR1cnJldDZcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjJcIixcblx0XHRcdFx0XHRcInhcIjogLTYsXG5cdFx0XHRcdFx0XCJ6XCI6IDMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVSYXBpZEZpcmVUdXJyZXQ2XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExNVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtOCxcblx0XHRcdFx0XHRcInpcIjogMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVRyYXBTdHJpa2VHZW5lcmljNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMjBcIixcblx0XHRcdFx0XHRcInhcIjogLTEwLFxuXHRcdFx0XHRcdFwielwiOiAtMTMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVDcmVkaXRHZW5lcmF0b3I2XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDM4Mzc2NCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDQ5NFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDQ0XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDcsXG5cdFx0XHRcdFx0XCJ6XCI6IDE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwicm9ja1NtYWxsMVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF80NTlcIixcblx0XHRcdFx0XHRcInhcIjogLTQsXG5cdFx0XHRcdFx0XCJ6XCI6IDE5LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwianVua01lZGl1bTFcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogM1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDY1XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDUsXG5cdFx0XHRcdFx0XCJ6XCI6IDE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwianVua01lZGl1bTFcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDY2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC01LFxuXHRcdFx0XHRcdFwielwiOiAxNixcblx0XHRcdFx0XHRcInVpZFwiOiBcInJvY2tTbWFsbDFcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDc2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDE1LFxuXHRcdFx0XHRcdFwielwiOiAtNixcblx0XHRcdFx0XHRcInVpZFwiOiBcImp1bmtMYXJnZTFcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDc5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDIsXG5cdFx0XHRcdFx0XCJ6XCI6IDIwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwianVua1NtYWxsMVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF80ODJcIixcblx0XHRcdFx0XHRcInhcIjogMTUsXG5cdFx0XHRcdFx0XCJ6XCI6IC00LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwicm9ja1NtYWxsMVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF80ODNcIixcblx0XHRcdFx0XHRcInhcIjogLTEzLFxuXHRcdFx0XHRcdFwielwiOiAxOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImp1bmtMYXJnZTFcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMzMzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0yLFxuXHRcdFx0XHRcdFwielwiOiAtNSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVBsYXRmb3JtRHJvaWRla2E1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzIxMlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMSxcblx0XHRcdFx0XHRcInpcIjogLTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVTaGllbGRHZW5lcmF0b3I3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExNlwiLFxuXHRcdFx0XHRcdFwieFwiOiAzLFxuXHRcdFx0XHRcdFwielwiOiAtMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVJvY2tldFR1cnJldDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDQ2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDEsXG5cdFx0XHRcdFx0XCJ6XCI6IC05LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzU3RvcmFnZTdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMzEyXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IC02LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlVHJhcFN0cmlrZUFPRTZcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMzIzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xMCxcblx0XHRcdFx0XHRcInpcIjogLTIxLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQ29udHJhYmFuZENhbnRpbmEyXCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzc0XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC02LFxuXHRcdFx0XHRcdFwielwiOiAtMjEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVDcmVkaXRHZW5lcmF0b3I2XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDM4Mzc2NCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDQ5NFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTU5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDEzLFxuXHRcdFx0XHRcdFwielwiOiAtMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU5hdmlnYXRpb25DZW50ZXI0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzMxMVwiLFxuXHRcdFx0XHRcdFwieFwiOiAxNCxcblx0XHRcdFx0XHRcInpcIjogMTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVCYXJyYWNrczdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTAxXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDEzLFxuXHRcdFx0XHRcdFwielwiOiAyLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlU2NvdXRUb3dlcjFcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjZcIixcblx0XHRcdFx0XHRcInhcIjogMjAsXG5cdFx0XHRcdFx0XCJ6XCI6IC0yMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZURyb2lkSHV0MVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMTRcIixcblx0XHRcdFx0XHRcInhcIjogLTE2LFxuXHRcdFx0XHRcdFwielwiOiAwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQXJtb3J5M1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82NVwiLFxuXHRcdFx0XHRcdFwieFwiOiAxMixcblx0XHRcdFx0XHRcInpcIjogLTYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVNYXRlcmlhbHNHZW5lcmF0b3I2XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDM4Mzc2NCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDQ3OVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfOTRcIixcblx0XHRcdFx0XHRcInhcIjogLTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDEwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjA4XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC01LFxuXHRcdFx0XHRcdFwielwiOiAxMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzIwN1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtNixcblx0XHRcdFx0XHRcInpcIjogMTAsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNTJcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogMTAsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMDNcIixcblx0XHRcdFx0XHRcInhcIjogMyxcblx0XHRcdFx0XHRcInpcIjogMTAsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF81XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IDEwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfM1wiLFxuXHRcdFx0XHRcdFwieFwiOiA1LFxuXHRcdFx0XHRcdFwielwiOiAxMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzU2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC03LFxuXHRcdFx0XHRcdFwielwiOiAxMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUJhcnJhY2tzNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF83MlwiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiAxMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUJhcnJhY2tzNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMTFcIixcblx0XHRcdFx0XHRcInhcIjogLTUsXG5cdFx0XHRcdFx0XCJ6XCI6IC0zLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUm9ja2V0VHVycmV0NlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNixcblx0XHRcdFx0XHRcInpcIjogLTgsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF83XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC02LFxuXHRcdFx0XHRcdFwielwiOiAtMTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF85MFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNixcblx0XHRcdFx0XHRcInpcIjogLTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNixcblx0XHRcdFx0XHRcInpcIjogLTEzLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTFcIixcblx0XHRcdFx0XHRcInhcIjogLTYsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEwXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC02LFxuXHRcdFx0XHRcdFwielwiOiAtMTAsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNFwiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiAtOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzU4XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IC05LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTUxXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzZcIixcblx0XHRcdFx0XHRcInhcIjogNCxcblx0XHRcdFx0XHRcInpcIjogLTEzLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjAzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzU3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzMxMFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMSxcblx0XHRcdFx0XHRcInpcIjogLTExLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUmFwaWRGaXJlVHVycmV0N1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMSxcblx0XHRcdFx0XHRcInpcIjogLTEzLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMzIyXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDIsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzMyMVwiLFxuXHRcdFx0XHRcdFwieFwiOiAwLFxuXHRcdFx0XHRcdFwielwiOiAtMTMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8zMjBcIixcblx0XHRcdFx0XHRcInhcIjogMyxcblx0XHRcdFx0XHRcInpcIjogLTEzLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMzE2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0yLFxuXHRcdFx0XHRcdFwielwiOiAtMTMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8zMTVcIixcblx0XHRcdFx0XHRcInhcIjogLTUsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzMxNFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMyxcblx0XHRcdFx0XHRcInpcIjogLTEzLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMzEzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC00LFxuXHRcdFx0XHRcdFwielwiOiAtMTMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8zMTlcIixcblx0XHRcdFx0XHRcInhcIjogMSxcblx0XHRcdFx0XHRcInpcIjogLTEzLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTQ2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xLFxuXHRcdFx0XHRcdFwielwiOiAxMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE0NVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMixcblx0XHRcdFx0XHRcInpcIjogMTAsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMFwiLFxuXHRcdFx0XHRcdFwieFwiOiAwLFxuXHRcdFx0XHRcdFwielwiOiAxMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzIwNlwiLFxuXHRcdFx0XHRcdFwieFwiOiAxLFxuXHRcdFx0XHRcdFwielwiOiAxMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzIwNFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMyxcblx0XHRcdFx0XHRcInpcIjogMTAsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMDVcIixcblx0XHRcdFx0XHRcInhcIjogLTcsXG5cdFx0XHRcdFx0XCJ6XCI6IC00LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTUwXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC03LFxuXHRcdFx0XHRcdFwielwiOiAtMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE1NFwiLFxuXHRcdFx0XHRcdFwieFwiOiA1LFxuXHRcdFx0XHRcdFwielwiOiAtNCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzgxXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDUsXG5cdFx0XHRcdFx0XCJ6XCI6IC0zLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTUzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC04LFxuXHRcdFx0XHRcdFwielwiOiAtMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzMxOFwiLFxuXHRcdFx0XHRcdFwieFwiOiA3LFxuXHRcdFx0XHRcdFwielwiOiAtMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE0N1wiLFxuXHRcdFx0XHRcdFwieFwiOiAxMCxcblx0XHRcdFx0XHRcInpcIjogLTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDksXG5cdFx0XHRcdFx0XCJ6XCI6IC0yLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjhcIixcblx0XHRcdFx0XHRcInhcIjogOCxcblx0XHRcdFx0XHRcInpcIjogLTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF85XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDEwLFxuXHRcdFx0XHRcdFwielwiOiAtMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzg0XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDgsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlVHJhcFN0cmlrZUdlbmVyaWM2XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzIxN1wiLFxuXHRcdFx0XHRcdFwieFwiOiA4LFxuXHRcdFx0XHRcdFwielwiOiAtNixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNyZWRpdEdlbmVyYXRvcjdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiAxNDkwMzgzNzY0LFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogNTU0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF81NFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ6XCI6IC01LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzU3RvcmFnZTdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTA2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC03LFxuXHRcdFx0XHRcdFwielwiOiAtMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzg5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDUsXG5cdFx0XHRcdFx0XCJ6XCI6IC0yLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODJcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogLTIxLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlT2ZmZW5zZUxhYjdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjRcIixcblx0XHRcdFx0XHRcInhcIjogNyxcblx0XHRcdFx0XHRcInpcIjogLTEzLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQ3JlZGl0R2VuZXJhdG9yN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzODM3NjQsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiA1NTRcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzczXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xMCxcblx0XHRcdFx0XHRcInpcIjogLTE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzR2VuZXJhdG9yNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzODM3NjQsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiA0ODBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzMyOFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNixcblx0XHRcdFx0XHRcInpcIjogLTE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQ29udHJhYmFuZEdlbmVyYXRvcjNcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiAxNDkwMzgzNzY0LFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMzFcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzQ0NVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMixcblx0XHRcdFx0XHRcInpcIjogLTE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQ3JlZGl0U3RvcmFnZTdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDgwXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDIsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNvbnRyYWJhbmRHZW5lcmF0b3IxXCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDM4Mzc2NCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDE5XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNDJcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogLTE3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzR2VuZXJhdG9yNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzODM3NjQsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiA2OTNcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzIxOFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMixcblx0XHRcdFx0XHRcInpcIjogLTIxLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzR2VuZXJhdG9yNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzODM3NjQsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiA0Nzlcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE0MVwiLFxuXHRcdFx0XHRcdFwieFwiOiAyLFxuXHRcdFx0XHRcdFwielwiOiAtMjEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVDcmVkaXRHZW5lcmF0b3I3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDM4Mzc2NCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDEwMjFcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzIzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC00LFxuXHRcdFx0XHRcdFwielwiOiAtOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNyZWRpdFN0b3JhZ2U3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzc3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDcsXG5cdFx0XHRcdFx0XCJ6XCI6IC05LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzU3RvcmFnZTdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjRcIixcblx0XHRcdFx0XHRcInhcIjogMTEsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNyZWRpdEdlbmVyYXRvcjdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiAxNDkwMzgzNzY0LFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogNTU0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMjlcIixcblx0XHRcdFx0XHRcInhcIjogNSxcblx0XHRcdFx0XHRcInpcIjogMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNvbnRyYWJhbmRTdG9yYWdlM1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMDBcIixcblx0XHRcdFx0XHRcInhcIjogLTksXG5cdFx0XHRcdFx0XCJ6XCI6IC0yLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMzA5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC00LFxuXHRcdFx0XHRcdFwielwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVNb3J0YXI3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzgzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDIsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU1vcnRhcjZcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNzVcIixcblx0XHRcdFx0XHRcInhcIjogOCxcblx0XHRcdFx0XHRcInpcIjogMSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU1vcnRhcjdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMzE3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IC0yLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMixcblx0XHRcdFx0XHRcInpcIjogLTEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVIUThcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfOTJcIixcblx0XHRcdFx0XHRcInhcIjogLTEwLFxuXHRcdFx0XHRcdFwielwiOiA0LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTA5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC03LFxuXHRcdFx0XHRcdFwielwiOiA5LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNzBcIixcblx0XHRcdFx0XHRcInhcIjogLTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMDVcIixcblx0XHRcdFx0XHRcInhcIjogLTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDgsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF84XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC03LFxuXHRcdFx0XHRcdFwielwiOiA2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfOTNcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzIwOVwiLFxuXHRcdFx0XHRcdFwieFwiOiA2LFxuXHRcdFx0XHRcdFwielwiOiA4LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTQ5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IDcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMVwiLFxuXHRcdFx0XHRcdFwieFwiOiA2LFxuXHRcdFx0XHRcdFwielwiOiA2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMjVcIixcblx0XHRcdFx0XHRcInhcIjogLTE4LFxuXHRcdFx0XHRcdFwielwiOiA1LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlU3RhcnBvcnQ3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzQ1M1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogNSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw2XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzQ1NVwiLFxuXHRcdFx0XHRcdFwieFwiOiA3LFxuXHRcdFx0XHRcdFwielwiOiA1LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDU2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IDUsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF80NDlcIixcblx0XHRcdFx0XHRcInhcIjogLTQsXG5cdFx0XHRcdFx0XCJ6XCI6IDEwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDZcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDQ3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDIsXG5cdFx0XHRcdFx0XCJ6XCI6IDEwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDZcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNFwiLFxuXHRcdFx0XHRcdFwieFwiOiA5LFxuXHRcdFx0XHRcdFwielwiOiAzLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjJcIixcblx0XHRcdFx0XHRcInhcIjogOSxcblx0XHRcdFx0XHRcInpcIjogNCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExMFwiLFxuXHRcdFx0XHRcdFwieFwiOiA4LFxuXHRcdFx0XHRcdFwielwiOiA0LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDUwXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDcsXG5cdFx0XHRcdFx0XCJ6XCI6IDQsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82M1wiLFxuXHRcdFx0XHRcdFwieFwiOiA4LFxuXHRcdFx0XHRcdFwielwiOiAxMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUZhY3Rvcnk3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExM1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ6XCI6IDcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVUYWN0aWNhbENvbW1hbmQ3XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE1OFwiLFxuXHRcdFx0XHRcdFwieFwiOiA4LFxuXHRcdFx0XHRcdFwielwiOiA3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlRmxlZXRDb21tYW5kN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMTNcIixcblx0XHRcdFx0XHRcInhcIjogMTMsXG5cdFx0XHRcdFx0XCJ6XCI6IDUsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVTdGFycG9ydDdcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNTlcIixcblx0XHRcdFx0XHRcInhcIjogLTksXG5cdFx0XHRcdFx0XCJ6XCI6IDQsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF80NTFcIixcblx0XHRcdFx0XHRcInhcIjogLTgsXG5cdFx0XHRcdFx0XCJ6XCI6IDQsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF80NTJcIixcblx0XHRcdFx0XHRcInhcIjogLTgsXG5cdFx0XHRcdFx0XCJ6XCI6IDUsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMjFcIixcblx0XHRcdFx0XHRcInhcIjogLTE1LFxuXHRcdFx0XHRcdFwielwiOiAtNCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU1hdGVyaWFsc0dlbmVyYXRvcjZcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiAxNDkwMzgzNzY0LFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTU1XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xMyxcblx0XHRcdFx0XHRcInpcIjogMTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVGYWN0b3J5N1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMjNcIixcblx0XHRcdFx0XHRcInhcIjogLTE3LFxuXHRcdFx0XHRcdFwielwiOiAxMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUJhcnJhY2tzN1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF80ODRcIixcblx0XHRcdFx0XHRcInhcIjogLTIxLFxuXHRcdFx0XHRcdFwielwiOiAtOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcInJvY2tTbWFsbDFcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDg1XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDMsXG5cdFx0XHRcdFx0XCJ6XCI6IDE4LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwianVua01lZGl1bTFcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogM1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNDQ4XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xMyxcblx0XHRcdFx0XHRcInpcIjogLTgsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF80NTRcIixcblx0XHRcdFx0XHRcInhcIjogLTEzLFxuXHRcdFx0XHRcdFwielwiOiAtMTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF80ODZcIixcblx0XHRcdFx0XHRcInhcIjogMTEsXG5cdFx0XHRcdFx0XCJ6XCI6IDE5LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwicm9ja1NtYWxsMVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAyXG5cdFx0XHRcdH1cblx0XHRcdF1cblx0XHR9LFxuXHRcdFwiaW52ZW50b3J5XCI6IHtcblx0XHRcdFwic3RvcmFnZVwiOiB7XG5cdFx0XHRcdFwiY3JlZGl0c1wiOiB7XG5cdFx0XHRcdFx0XCJhbW91bnRcIjogNzU1NDYsXG5cdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAxNTAwMDAwLFxuXHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1hdGVyaWFsc1wiOiB7XG5cdFx0XHRcdFx0XCJhbW91bnRcIjogMzU0MzcsXG5cdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAxNTAwMDAwLFxuXHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNvbnRyYWJhbmRcIjoge1xuXHRcdFx0XHRcdFwiYW1vdW50XCI6IDU1NTMsXG5cdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiA1MDAwMCxcblx0XHRcdFx0XHRcInNjYWxlXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJyZXB1dGF0aW9uXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiAwLFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMTgsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY3J5c3RhbHNcIjoge1xuXHRcdFx0XHRcdFwiYW1vdW50XCI6IDQ3LFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogLTEsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZHJvaWRzXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiA0LFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogNSxcblx0XHRcdFx0XHRcInNjYWxlXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ4cFwiOiB7XG5cdFx0XHRcdFx0XCJhbW91bnRcIjogMTYzMCxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IC0xLFxuXHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiAwLFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMjAsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiaGVyb1wiOiB7XG5cdFx0XHRcdFx0XCJhbW91bnRcIjogMCxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDAsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2hhbXBpb25cIjoge1xuXHRcdFx0XHRcdFwiYW1vdW50XCI6IDAsXG5cdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAwLFxuXHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0XCJjYXBhY2l0eVwiOiAtMSxcblx0XHRcdFwic3ViU3RvcmFnZVwiOiB7XG5cdFx0XHRcdFwidHJvb3BcIjoge1xuXHRcdFx0XHRcdFwic3RvcmFnZVwiOiB7XG5cdFx0XHRcdFx0XHRcInRyb29wTWVyY2VuYXJ5RW1waXJlR2Ftb3JyZWFuV2FycmlvcjJcIjoge1xuXHRcdFx0XHRcdFx0XHRcImFtb3VudFwiOiAzLFxuXHRcdFx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IC0xLFxuXHRcdFx0XHRcdFx0XHRcInNjYWxlXCI6IDZcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcInRyb29wQVRBVDdcIjoge1xuXHRcdFx0XHRcdFx0XHRcImFtb3VudFwiOiAyLFxuXHRcdFx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IC0xLFxuXHRcdFx0XHRcdFx0XHRcInNjYWxlXCI6IDMwXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XCJ0cm9vcFRlY2huaWNpYW43XCI6IHtcblx0XHRcdFx0XHRcdFx0XCJhbW91bnRcIjogMyxcblx0XHRcdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAtMSxcblx0XHRcdFx0XHRcdFx0XCJzY2FsZVwiOiA0XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XCJ0cm9vcEVtcGlyZVNwZWVkZXI3XCI6IHtcblx0XHRcdFx0XHRcdFx0XCJhbW91bnRcIjogMSxcblx0XHRcdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAtMSxcblx0XHRcdFx0XHRcdFx0XCJzY2FsZVwiOiA2XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDk2LFxuXHRcdFx0XHRcdFwic3ViU3RvcmFnZVwiOiB7fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNwZWNpYWxBdHRhY2tcIjoge1xuXHRcdFx0XHRcdFwic3RvcmFnZVwiOiB7XG5cdFx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tUaWVCb21iZXI2XCI6IHtcblx0XHRcdFx0XHRcdFx0XCJhbW91bnRcIjogMSxcblx0XHRcdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAtMSxcblx0XHRcdFx0XHRcdFx0XCJzY2FsZVwiOiAzXG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrVGllRGVmZW5kZXI3XCI6IHtcblx0XHRcdFx0XHRcdFx0XCJhbW91bnRcIjogMSxcblx0XHRcdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAtMSxcblx0XHRcdFx0XHRcdFx0XCJzY2FsZVwiOiA0XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDI3LFxuXHRcdFx0XHRcdFwic3ViU3RvcmFnZVwiOiB7fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImhlcm9cIjoge1xuXHRcdFx0XHRcdFwic3RvcmFnZVwiOiB7XG5cdFx0XHRcdFx0XHRcInRyb29wSGVyb0FUQVQ3XCI6IHtcblx0XHRcdFx0XHRcdFx0XCJhbW91bnRcIjogMSxcblx0XHRcdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAxLFxuXHRcdFx0XHRcdFx0XHRcInNjYWxlXCI6IDFcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMyxcblx0XHRcdFx0XHRcInN1YlN0b3JhZ2VcIjoge31cblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjaGFtcGlvblwiOiB7XG5cdFx0XHRcdFx0XCJzdG9yYWdlXCI6IHtcblx0XHRcdFx0XHRcdFwidHJvb3BDaGFtcGlvbkVtcGlyZURyb2lkZWthNVwiOiB7XG5cdFx0XHRcdFx0XHRcdFwiYW1vdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMCxcblx0XHRcdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDEsXG5cdFx0XHRcdFx0XCJzdWJTdG9yYWdlXCI6IHt9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFwiY3VycmVudFF1ZXN0XCI6IFwiXCIsXG5cdFx0XCJwcm90ZWN0ZWRVbnRpbFwiOiAxNDkwNDI2Mzc4LFxuXHRcdFwicHJvdGVjdGlvbkZyb21cIjogMTQ5MDM4MzE3OCxcblx0XHRcInByb3RlY3Rpb25Db29sZG93blVudGlsXCI6IHt9LFxuXHRcdFwiYmF0dGxlTG9nc1wiOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJkZDQzNjA3Mi0wOTg1LTExZTctOWZjZi0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImY2ZDJjYmY5LTc1ODgtMTFlNS04YjY4LTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcInRha2FcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjBlNGM4ZWMxLTA5OWEtMTFlNS04YmE0LTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiSkFQQU4tSkVESVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDgzNjMsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAtMjcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04MjIsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMzksXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMzIsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTU4NTc4MSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA1OTIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMzI1ODAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDMyOTY5XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNTkyLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDMyNTgwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAzMjk2OVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNzMyLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA2MTA0Nyxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA0MzMwOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjhcIjogNCxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDlcIjogMTEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljOVwiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BKdWdnZXJuYXV0OFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvTHVrZVNreXdhbGtlcjhcIjogMSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tYV2luZzhcIjogMixcblx0XHRcdFx0XHRcInRyb29wQ2hhbXBpb25SZWJlbEhlYXZ5RHJvaWRla2ExXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcENoYW1waW9uUmViZWxEcm9pZGVrYTRcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogNDQsXG5cdFx0XHRcdFwic3RhcnNcIjogMCxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMyxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAzMixcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0SGVhbHRoNFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTRcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiNTNjMzExOTgtMDk4Ni0xMWU3LWJhMGItMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3MGY1MTFiMi01MmU3LTExZTUtYmYzZi0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJTY2hhdHRlbnTDtnRlclwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNDYyZjVkMjMtNmMyZi0xMWU1LThiNjgtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJsaWdodC1zYWJlclwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDIwNjkxLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogNCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTY5ODMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNDMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTQsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTU4NTk1MCxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAxNDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDM1ODc2LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIxMjI4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMTQwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAzNTg3Nixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMTIyOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNjczLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA0NTI0Nyxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyNzQ1MlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDlcIjogOSxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM5XCI6IDksXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI5XCI6IDEyLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQ2hld2JhY2NhOFwiOiAxLFxuXHRcdFx0XHRcdFwic3BlY2lhbEF0dGFja1hXaW5nOFwiOiAzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA1Nixcblx0XHRcdFx0XCJzdGFyc1wiOiAxLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEzLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDM2LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGg0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTW9ydGFyVHVycmV0RGFtYWdlNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTW9ydGFyVHVycmV0SGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNYXRlcmlhbHNHZW5lcmF0b3JIZWFsdGg2XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXRIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVNb3J0YXJUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVXYWxsSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVDcmVkaXRHZW5lcmF0b3JIZWFsdGg3XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjUwYWY3ZTZkLTA5ZDItMTFlNy04ZDA4LTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMDI0MTUyZGUtNDg0Yi0xMWU0LThmOGItMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiU3RyaWtlclwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNDg2NzdjNGEtYWY4OS0xMWU1LTkyYWEtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJKZWRpVGVtcGxlQmx1ZVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDczNzIwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMTMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDk1MjAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiA0MDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTg2Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC01Nixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTMsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTYxODU1Myxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA2MjYsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDM4ODU1LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDE4OTc5XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNjI2LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAzOTg1NSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxOTk3OVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNjI2LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAzOTg1NSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxOTk3OVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wVmFuZ3VhcmQ3XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXIxMFwiOiA1Myxcblx0XHRcdFx0XHRcInRyb29wTWVkaWMxMFwiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BIYWlsZmlyZTEwXCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEFUVEU5XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9SZWJlbEpvaGhhcjEwXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcENoYW1waW9uUmViZWxEcm9pZGVrYTIyXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wRW1waXJlU3BlZWRlcjdcIjogNCxcblx0XHRcdFx0XHRcInRyb29wRGFyazZcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEzLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDI0LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTW9ydGFyVHVycmV0SGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoOFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXREYW1hZ2U1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsQ3JlZGl0R2VuZXJhdG9ySGVhbHRoNVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJhODdlMDQ3ZC0wYTU4LTExZTctOTc4OS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImMyZGMzM2Q2LWM0NDQtMTFlNi04NmRlLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIlswMDAwMDBdQUtVTUFcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjc0MTIyOWY2LWUyNGYtMTFlNi1hMDVkLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiJTViMDAwMDA1JTVkQkFLVUZVXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTcyMzAsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAxMyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogMzU0LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDg5ODIsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogNDAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNjksXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTEzLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk2NzYyNzAsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNjkxLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA3NTkwOCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA1MjQ1MVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDE4OSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNzY5MDgsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNTM0NTFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDY5MSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNzY5MDgsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNTM0NTFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEl0aG9yaWFuSW5maWx0cmF0b3IxXCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFZhbmd1YXJkNVwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyOFwiOiA0MSxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM4XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9MZWlhOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNZXJjZW5hcnlSZWJlbFR3aWxla0luY2luZXJhdG9yMVwiOiAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDhcIjogNCxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM4XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI4XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMTAwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDMsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTMsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMzYsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDcmVkaXRHZW5lcmF0b3JIZWFsdGg1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyNFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIZWF2eVNhbmRTb2xkaWVyMlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJjNjU5Yzk4ZC0wYWRlLTExZTctOTc4OS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImJkODY0NGJmLTlmMTktMTFlNS1iMWQ1LTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIlRoYXQgR3V5XCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJmNTU2MjJmNS05NmMzLTExZTUtYjA1Yi0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIm9idy5lbGl0ZVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDg0OTEwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMTMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xNTcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMTU0NjAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogNDAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtODIsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTEzLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk3MzM4MzMsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNjM2LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDUwMTU5LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA3MDQ4N1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDYzNixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA1MTE1OSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNzE0ODdcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDYzNixcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNzE0ODcsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNTExNTlcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFZhbmd1YXJkNFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BCYW50aGE4XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWwxMFwiOiAxMixcblx0XHRcdFx0XHRcInRyb29wTWVkaWMxMFwiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvTHVrZVNreXdhbGtlcjEwXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXIxMFwiOiAxMSxcblx0XHRcdFx0XHRcInRyb29wQ2hhbXBpb25SZWJlbEhlYXZ5RHJvaWRla2ExNVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiAxMDAsXG5cdFx0XHRcdFwic3RhcnNcIjogMyxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMyxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAyNCxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDEwXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENyZWRpdEdlbmVyYXRvckhlYWx0aDEwXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhlYXZ5U2FuZFNvbGRpZXI2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyOFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNYXRlcmlhbHNHZW5lcmF0b3JIZWFsdGgxMFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGgxMFwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJlMWE0MzY1MC0wYjY0LTExZTctOTIzNi0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImZhYjhmMWE5LThiYTQtMTFlNS05MTUyLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcInBhdHJpay1zXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCIzZDJlZDBjZS1iMDVlLTExZTQtYTNjYS0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIlJ1c3NpYW5fTGVhZ3VlXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNjY0ODcsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAxMyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogNDgyNTAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMjY4NjIsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogNDAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtOTUsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTEzLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk3OTE0NDcsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNTMyLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDExNDYyLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNTU0NVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDUzMixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxMjQ2Mixcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTY1NDVcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDUzMixcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTY1NDUsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTI0NjJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXIxMFwiOiAyMyxcblx0XHRcdFx0XHRcInRyb29wVmFuZ3VhcmQxMFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVJlYmVsMTBcIjogOCxcblx0XHRcdFx0XHRcInRyb29wTWVkaWMxMFwiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvTHVrZVNreXdhbGtlcjEwXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcENoYW1waW9uUmViZWxIZWF2eURyb2lkZWthMTNcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BEYXJrNlwiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BEZXdiYWNrNlwiOiA0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMTAwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDMsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTMsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMjQsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoOFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoMTBcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSGVhdnlTYW5kU29sZGllcjlcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTW9ydGFyVHVycmV0SGVhbHRoOFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXREYW1hZ2U4XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZThcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIxMFwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJmZTRiOWI4Zi0wYmVhLTExZTctYjdkYi0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjYzZDY5OTE0LWJlMmUtMTFlNi1iMTZkLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcItCY0LzQv9C10YDQuNC4INC/0LjQt9C00LXRhlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiYzllMDU3ZjctYTNlMS0xMWU1LTljOWItMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJSVVNTSUFOQkVBUlwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4ODQsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAxMyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTE1OSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAxMTUsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogNDAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTA4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0xMyxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5ODQ5MjA3LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDYzNSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogODA4NjQsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNTM4NzZcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA2MzUsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDgxODY0LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDU0ODc2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA2MzUsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDgxODY0LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDU0ODc2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BWYW5ndWFyZDFcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDhcIjogNSxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM3XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI3XCI6IDM4LFxuXHRcdFx0XHRcdFwidHJvb3BBVEFQNlwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvTGVpYTZcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGFpbGZpcmU3XCI6IDEsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrWFdpbmc2XCI6IDYsXG5cdFx0XHRcdFx0XCJ0cm9vcENoYW1waW9uUmViZWxEcm9pZGVrYTRcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw4XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcEhhaWxmaXJlN1wiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyN1wiOiA0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU2NvdXQ2XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcERhcms2XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcFN0b3JtN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTZcIjogNCxcblx0XHRcdFx0XHRcInRyb29wQVRTVDdcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEzLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE2LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEJ1cnN0VHVycmV0SGVhbHRoM1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCIxOWE0YWRlNy0wYzcxLTExZTctYWFjYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjBiZjNkZDVkLTQwY2UtMTFlNS1iMmJkLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcImFvc2hpbWFcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjRiNTIxNDNmLTViYjAtMTFlNS1hMGNjLTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiV1BTKCVlNiViOSViZSVlNSViMiViOCVlOCVhZCVhNiVlNSVhZiU5ZiVlNyViZCViMilcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA3MjA3MCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDEzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTk3OCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAxMDkwNSxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiA0MDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTg2Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xMjEsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTEzLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk5MDY2ODMsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNTk4LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI1MDcwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA2OTQ5MVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDU5OCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyNjA3MCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNzA0OTFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDU5OCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNzA0OTEsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjYwNzBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcE1lcmNlbmFyeVJlYmVsR2Ftb3JyZWFuV2FycmlvcjJcIjogMSxcblx0XHRcdFx0XHRcInRyb29wUmViZWxKZXRwYWNrVHJvb3BlcjEwXCI6IDEyLFxuXHRcdFx0XHRcdFwidHJvb3BIYWlsZmlyZTlcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjlcIjogMyxcblx0XHRcdFx0XHRcInRyb29wSnVnZ2VybmF1dDEwXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9DaGV3YmFjY2ExMFwiOiAxLFxuXHRcdFx0XHRcdFwic3BlY2lhbEF0dGFja1hXaW5nMTBcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BFbXBpcmVTcGVlZGVyN1wiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVN0b3JtN1wiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMTAwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDMsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTMsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMjIsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg4XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoOFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXRIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEJ1cnN0VHVycmV0RGFtYWdlM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2U1XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXRIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVNb3J0YXJUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVXYWxsSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVDcmVkaXRHZW5lcmF0b3JIZWFsdGg3XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDZcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjM1Y2UyZmVkLTBjZjctMTFlNy1iN2RiLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiZjg4NzBhMmMtNjg1MC0xMWU1LTkwOTctMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwibWluXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI2MTQxNTRmOC05ZjViLTExZTUtYmI5Zi0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkdlcm1hbi5GdW4uSG9wZVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDM1NzkxLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogOCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTIwNjIsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMjA2Nyxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAyNDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTg2Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xMjksXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTgsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTk2NDMwMyxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA1NjcsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogODk2NCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTA5ODNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA1NjcsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogOTk2NCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTE5ODNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDU5MSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTYwMzcsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTM4NDlcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEJhbnRoYThcIjogMyxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjlcIjogNDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFZhbmd1YXJkN1wiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BKdWdnZXJuYXV0OVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzlcIjogNCxcblx0XHRcdFx0XHRcInRyb29wSGVyb0x1a2VTa3l3YWxrZXI5XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lcmNlbmFyeVJlYmVsUmlkZXI1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFZhbmd1YXJkOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BJdGhvcmlhbkluZmlsdHJhdG9yOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BQYXRoZmluZGVyOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BDaGFtcGlvblJlYmVsSGVhdnlEcm9pZGVrYTdcIjogMSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tCV2luZzlcIjogNCxcblx0XHRcdFx0XHRcInRyb29wQ2hhbXBpb25SZWJlbERyb2lkZWthMTJcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFJlYmVsSmV0cGFja1Ryb29wZXIxMFwiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyMTBcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEVtcGlyZVNwZWVkZXI3XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFRlY2huaWNpYW43XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lcmNlbmFyeUVtcGlyZUdhbW9ycmVhbldhcnJpb3IyXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcERhcms2XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFN0b3JtN1wiOiAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogODQsXG5cdFx0XHRcdFwic3RhcnNcIjogMixcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMyxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiA0MCxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg4XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEJ1cnN0VHVycmV0RGFtYWdlM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoOFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXREYW1hZ2U0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENyZWRpdEdlbmVyYXRvckhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0RGFtYWdlNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0NlwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiNGIwOWI5MWEtMGQ1Yy0xMWU3LTk3ODktMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmUzNDlkZi04ZjcwLTExZTUtODc0My0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJFYWVsZHJlZFwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiMGE5NGI4ZTMtZjYzZi0xMWU2LTg5YjUtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJSZWRTaGlydFJlYmVsc1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDYwMTUsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiA2LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTM0MCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAzMTUsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogNTJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTg2Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xMzUsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTYsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDAwNzc0NCxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA2NCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA0MjI5MSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNTExMjhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA2NCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA0MjI5MSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNTExMjhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDY0Myxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNTI3NzMsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNDMzNTlcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI4XCI6IDMyLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzhcIjogOCxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDhcIjogMixcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tCV2luZzhcIjogNyxcblx0XHRcdFx0XHRcInRyb29wSGVyb0NoZXdiYWNjYThcIjogMSxcblx0XHRcdFx0XHRcInRyb29wUmViZWxTcGVlZGVyOFwiOiA0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDhcIjogMixcblx0XHRcdFx0XHRcInRyb29wVDJCVGFuazdcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjhcIjogMyxcblx0XHRcdFx0XHRcInRyb29wTWFya3NtYW45XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogNzYsXG5cdFx0XHRcdFwic3RhcnNcIjogMSxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAyMCxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxNixcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0RGFtYWdlNFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGg1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXRIZWFsdGg1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI4ZDkxNDczZC0wZDVjLTExZTctOTk5ZC0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImNlYjcwYzQ0LWUzMTEtMTFlNS05YjJjLTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcInBlbHVzaW9cIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjUzZTBlNmJmLWI1YTQtMTFlNS05NjFiLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiQlJBU0lMLURPUy1KRURJU1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU2Mjc3LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMTMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xNDE3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDU2MDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogNDAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTQ4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0xMyxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMDA3Nzg5LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDYzNixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMTYwMSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjY5MDhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA2MzYsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjI2MDEsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDI3OTA4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA2MzYsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDI3OTA4LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyNjAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BWYW5ndWFyZDhcIjogMyxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDEwXCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljOVwiOiA2LFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyOVwiOiAxNSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0hhblNvbG8xMFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BSZWJlbEpldHBhY2tUcm9vcGVyOFwiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BIYWlsZmlyZTEwXCI6IDRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BSZWJlbEpldHBhY2tUcm9vcGVyMTBcIjogNCxcblx0XHRcdFx0XHRcInRyb29wSGFpbGZpcmUxMFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVJlYmVsMTBcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiAxMDAsXG5cdFx0XHRcdFwic3RhcnNcIjogMyxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMyxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiA0Myxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsQnVyc3RUdXJyZXRIZWFsdGgzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbE1vcnRhclR1cnJldERhbWFnZTRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0RGFtYWdlM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGgzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEJ1cnN0VHVycmV0RGFtYWdlM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDb250cmFiYW5kR2VuZXJhdG9ySGVhbHRoM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0NlwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiZjUxNzBlZGUtMGUyNC0xMWU3LTk3ODktMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIxODIzNzMwMC1jZDIxLTExZTYtOGNkNC0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJEaXlhcmtcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjM4OGM2N2JkLWIxNmYtMTFlNS1iZWVmLTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiRXNwYSVjMyViMW9sZXMtM1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDEyMTE3LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogLTI2LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMzI2NSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAxMDg4LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IC0yMDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTg2Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xMTcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMzEsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDA5Mzg0Nixcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDQ1ODM0LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA0NDYxNVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNDU4MzQsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDQ0NjE1XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA3MTEsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDU3MTg1LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDQ3MjAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BBQVQxNlwiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVJlYmVsN1wiOiA1LFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzdcIjogNCxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjdcIjogMTdcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDQyLFxuXHRcdFx0XHRcInN0YXJzXCI6IDAsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTMsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMzEsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTJcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbE1vcnRhclR1cnJldERhbWFnZTJcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0NlwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiMmVjMTUzYmEtMGUyNS0xMWU3LWIzNWUtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJiYmQzNjJhZC1hODU0LTExZTUtODUzMC0wNjAzNTAwMDRmOTBcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJiYWRnaXJsXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI3ZTAzMzQ2YS03NTJmLTExZTUtOTA5Ny0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImh1cnRpbmVtXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTUxMzMsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiA0LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTM1NCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiA2NzgsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogNDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTg2Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xMjEsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTQsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDA5Mzk5MSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAxNDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDI3NTI4LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDE5MTkxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMTQwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyNzUyOCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxOTE5MVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNTg4LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyOTc1NCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMDE5MVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjdcIjogMSxcblx0XHRcdFx0XHRcInRyb29wUmViZWxKZXRwYWNrVHJvb3BlcjhcIjogMixcblx0XHRcdFx0XHRcInRyb29wSGFpbGZpcmU5XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ5XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9MdWtlU2t5d2Fsa2VyN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzhcIjogMyxcblx0XHRcdFx0XHRcInRyb29wTWFya3NtYW44XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw4XCI6IDEsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrWFdpbmc4XCI6IDcsXG5cdFx0XHRcdFx0XCJ0cm9vcENoYW1waW9uUmViZWxIZWF2eURyb2lkZWthM1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BDaGFtcGlvblJlYmVsRHJvaWRla2E5XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BKdWdnZXJuYXV0MTBcIjogMSxcblx0XHRcdFx0XHRcInRyb29wTWFya3NtYW4xMFwiOiAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDUzLFxuXHRcdFx0XHRcInN0YXJzXCI6IDEsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTMsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMzYsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg5XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoOVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjJcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2U2XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXRIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVNb3J0YXJUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVXYWxsSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVDcmVkaXRHZW5lcmF0b3JIZWFsdGg3XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDZcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjA0ZjYwOGUzLTBlNjgtMTFlNy05Nzg5LTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiOWY3NjhiNTQtZjBmNC0xMWU0LTlmZDItMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwicmViZWwgMTBcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcImFlMDliOGQzLTAzNDgtMTFlNi05YjI4LTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiRGVsdGE3XCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNDEyOTIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiA0LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTcxMSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiA2MjEwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDQwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTI1LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC00LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAxMjI2OTIsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNDgxLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMTA0LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDc0NzFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA0ODEsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDI0NzQsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNzg0MVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNDg5LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA1NTY0LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDEwNTQ2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BWYW5ndWFyZDlcIjogMSxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM5XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI5XCI6IDYsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw5XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcEFUQVA5XCI6IDMsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrWjk1OVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNZXJjZW5hcnlSZWJlbEdhbW9ycmVhbldhcnJpb3I1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFdvb2tpZTlcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0x1a2VTa3l3YWxrZXI4XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lcmNlbmFyeVJlYmVsVHdpbGVrSW5jaW5lcmF0b3I1XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcENoYW1waW9uUmViZWxEcm9pZGVrYTEyXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcENoYW1waW9uUmViZWxIZWF2eURyb2lkZWthNlwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEVtcGlyZVNwZWVkZXI3XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcFRlY2huaWNpYW43XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA1Nixcblx0XHRcdFx0XCJzdGFyc1wiOiAxLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEzLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDQwLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDhcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0RGFtYWdlNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoOVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIZWF2eVNhbmRTb2xkaWVyMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjNcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCIxNGEzNmIzNi0wZWFiLTExZTctYjM1ZS0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImRiMmZlZTMwLTY0ZjctMTFlNi1hNzdhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIk1hY2tcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcImZhNjk4YWU3LTUzM2QtMTFlNi04OWVjLTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiYnJhc2lsLWJyLXdhcnNcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA0NjExLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMTQsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC01ODEsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTM5LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0xNCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMTUxNTM4LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDIyLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDkwNDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDU5ODdcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAyMixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxMDA0MCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNjk4N1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNDg0LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMDMwMyxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMzExN1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wRGVzZXJ0U2tpZmY3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFZhbmd1YXJkMVwiOiA0LFxuXHRcdFx0XHRcdFwic3BlY2lhbEF0dGFja1lXaW5nNlwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyN1wiOiA3Nyxcblx0XHRcdFx0XHRcInRyb29wSGVyb0NoZXdiYWNjYTdcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ4XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw5XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI5XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI3XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BFbXBpcmVTcGVlZGVyN1wiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BEZXdiYWNrNlwiOiA1LFxuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTdcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDY4LFxuXHRcdFx0XHRcInN0YXJzXCI6IDIsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMjMsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTYsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2U0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxCdXJzdFR1cnJldERhbWFnZTNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0NlwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiMDIwMGZiZmQtMGVjZS0xMWU3LWJhMGItMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4NTMsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAtMTMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xMzksXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIwNTc4MTdjZS04ZDA4LTExZTYtODEwMi0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJTaGFkeVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxMjEwOSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0yMzI1LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDE2LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAxNjY0MzMsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHt9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDI5NjAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDQzODc4OCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMDU4ODNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9BVE1QN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BFbXBpcmVIZWF2eVN0b3JtRGVhdGg3XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5U3Rvcm03XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFNuaXBlcjdcIjogMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogNixcblx0XHRcdFx0XCJzdGFyc1wiOiAwLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDMwLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE1LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoOFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTW9ydGFyVHVycmV0SGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNYXRlcmlhbHNHZW5lcmF0b3JIZWFsdGg1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDcmVkaXRHZW5lcmF0b3JIZWFsdGg1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENvbnRyYWJhbmRHZW5lcmF0b3JIZWFsdGg1XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDZcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjVkNjYxNjRjLTBlY2YtMTFlNy1iYTBiLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNzc5YTMzNWUtNzIxNi0xMWU2LThiNTgtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiMnRlZTJcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA1ODQwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogLTEzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTM5LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMDQxZWQ5MzktOGU2Yy0xMWU0LThmMWYtMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiZnJhbmt5a2xmXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJlYjU2MTEyMi0zMTExLTExZTYtODEyMS0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIlBldGVycHJvXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNzExNCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IDYzNixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAxNixcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMTY3MDQ1LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNDE0ODIsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDU3ODNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDQxNTgyLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA1ODgzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA0NzkzLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMDQ1MzMsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjA0NDc1XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BBVEFUN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQVRBVDdcIjogMSxcblx0XHRcdFx0XHRcInRyb29wVGVjaG5pY2lhbjdcIjogNCxcblx0XHRcdFx0XHRcInRyb29wTUhDN1wiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BNZXJjZW5hcnlFbXBpcmVHYW1vcnJlYW5XYXJyaW9yMlwiOiA0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU3Rvcm03XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcERld2JhY2s2XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcERhcms2XCI6IDNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMjUsXG5cdFx0XHRcdFwic3RhcnNcIjogMCxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAyNyxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxNSxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0RGFtYWdlM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXREYW1hZ2UzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsQnVyc3RUdXJyZXREYW1hZ2UyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJlNTYyN2NiYi0wZWQxLTExZTctOTk5ZC0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTg1Mixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDEyLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTM5LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNGMyNDhkNDMtM2Y4ZC0xMWU0LTkzYTEtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiWmFjYWFyb25cIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjAxMGQyNGI4LTU3ZjUtMTFlNC1iMzJlLTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiTWFsYXlzaWEuUmViZWxzXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMzgzLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTM4Mixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAxNjgxNTUsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogODcwNzIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogODI0NThcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA4ODA3Mixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA4MzQ1OFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogODgwNzIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogODM0NThcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrVGllQm9tYmVyNlwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BTaG9jazNcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU3Rvcm03XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lcmNlbmFyeUVtcGlyZUdhbW9ycmVhbldhcnJpb3IyXCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9BVEFUN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BUZWNobmljaWFuN1wiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BNSEM3XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5U3Rvcm03XCI6IDQsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrVGllRGVmZW5kZXI3XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcENoYW1waW9uRW1waXJlRHJvaWRla2E1XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BFbXBpcmVTcGVlZGVyN1wiOiA0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEyLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDMxLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI4ZTQ3NzUwZC0wZWQ1LTExZTctYmEwYi0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTg2Myxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDExLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTM5LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiZTgyZThjNjItYmUyOS0xMWU2LThkNWItMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiR2VuZXJhbCBGYXN0aW9cIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjRiNTIxNDNmLTViYjAtMTFlNS1hMGNjLTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiV1BTKCVlNiViOSViZSVlNSViMiViOCVlOCVhZCVhNiVlNSVhZiU5ZiVlNyViZCViMilcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA2OTQsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNjU3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0xMSxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMTY5NzE2LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIxMzQyLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIxMjE4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjIzNDIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjIyMThcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIyMzQyLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyMjE4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVN0b3JtN1wiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQ3JpbXNvbkd1YXJkNlwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BUZWNobmljaWFuN1wiOiA1LFxuXHRcdFx0XHRcdFwidHJvb3BFbXBpcmVTcGVlZGVyN1wiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BNSEM3XCI6IDRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVN0b3JtN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BFbXBpcmVTcGVlZGVyN1wiOiA0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDMxLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI5OGEzNDBjOS0wZWQ4LTExZTctOTIzNi0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTg2OSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDYsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xMzksXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJjNjNjMGU5YS05MmIxLTExZTYtYmU1MC0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJNYXJzIDVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjUxOWVkNGY2LWE5OGItMTFlNS05ZGRiLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiRGVyQXVmc3RhbmRcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxMTAwNyxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC00NzMxLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC02LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAxNzEwNjQsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNTIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogODgzMzksXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDM1OTE5XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNTIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogODg1ODksXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDM2MTY5XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAxMTg5LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNDEzMjYsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjUzOTUwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BUZWNobmljaWFuN1wiOiA4LFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQVRBVDdcIjogMSxcblx0XHRcdFx0XHRcInRyb29wTUhDN1wiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTdcIjogNCxcblx0XHRcdFx0XHRcInRyb29wRW1waXJlU3BlZWRlcjdcIjogMixcblx0XHRcdFx0XHRcInRyb29wQ2hhbXBpb25FbXBpcmVEcm9pZGVrYTVcIjogMSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tUaWVEZWZlbmRlcjdcIjogMixcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tUaWVCb21iZXI2XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BEZXdiYWNrNlwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BEYXJrNlwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTdcIjogMSxcblx0XHRcdFx0XHRcInRyb29wRW1waXJlU3BlZWRlcjdcIjogMixcblx0XHRcdFx0XHRcInRyb29wVGVjaG5pY2lhbjdcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI5XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcFdvb2tpZTZcIjogNCxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjhcIjogNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDU3LFxuXHRcdFx0XHRcInN0YXJzXCI6IDEsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTksXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTUsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXRIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVNb3J0YXJUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVXYWxsSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVDcmVkaXRHZW5lcmF0b3JIZWFsdGg3XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDhcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0RGFtYWdlNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxCdXJzdFR1cnJldEhlYWx0aDVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTW9ydGFyVHVycmV0SGVhbHRoNlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJiNDg3NDUzZC0wZWRiLTExZTctOGQwOC0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIjJ0ZWUyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTg3Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xMzksXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3MTExZjY2Mi0wODdmLTExZTYtOTgxNC0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJ0YW5rXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJiNzI3NDdjNi1mODY4LTExZTUtYTExNS0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkhFTElYMS4wXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNDMzLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTQzMixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAxNzI0MDUsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA1MzEyMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNDEwNzBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDU0MTIwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA0MjA3MFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNTc1NDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNTQxMjBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9BVEFUN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BUZWNobmljaWFuN1wiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BBVEFUN1wiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVN0b3JtN1wiOiA1XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wRW1waXJlU3BlZWRlcjdcIjogNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA5Mixcblx0XHRcdFx0XCJzdGFyc1wiOiAyLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEyLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDMxLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGgxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTFcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDNcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg0XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDZcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjg0NzAwODc4LTBlZGYtMTFlNy05Nzg5LTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNzc5YTMzNWUtNzIxNi0xMWU2LThiNTgtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiMnRlZTJcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA1ODgzLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogNyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTEzOSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjg1ZDBjNGQxLTJmOGItMTFlNi04YWNmLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcImxlb1wiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiMmY1NWY3ZjctNTE2NC0xMWU0LTkzZmItMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJyZWJlbGxzdXBlcnNxYXVkXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNTUyLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTU1MSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAxNzQwMjQsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMjg1LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNjA1OCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyOTIxM1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDI4NSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTcwNTgsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMzAyMTNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDI4NSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTcwNTgsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMzAyMTNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEFUQVQ3XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFRlY2huaWNpYW43XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9BVEFUN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNZXJjZW5hcnlFbXBpcmVHYW1vcnJlYW5XYXJyaW9yMlwiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTdcIjogMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEVtcGlyZVNwZWVkZXI3XCI6IDRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogOTgsXG5cdFx0XHRcdFwic3RhcnNcIjogMixcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMixcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAzMSxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0SGVhbHRoMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDcmVkaXRHZW5lcmF0b3JIZWFsdGgzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENvbnRyYWJhbmRHZW5lcmF0b3JIZWFsdGgyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoNFwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCIxZjhjMTI2Yi0wZWYxLTExZTctOTIzNi0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjFlYzQ0MjM3LTc1Y2UtMTFlNi05ZjBjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcInRteXNcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcImI4MDQzNDkxLThiMTctMTFlNS04NzQzLTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiVEVNUExBUi1KRURJc1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE5MTcwLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogOCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTEwNzcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4ODMsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTQ3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC04LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAxODE1NzgsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNTQ3LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDExNTYyLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA2NjE4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNTQ3LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDEyNTYyLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA3NjE4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA1NDcsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDc5NTIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTg2OThcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI3XCI6IDEyLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzdcIjogNCxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tGYW5nRmlnaHRlcjVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDdcIjogNixcblx0XHRcdFx0XHRcInRyb29wQmlnTW91dGhBbGllbjFcIjogMSxcblx0XHRcdFx0XHRcInRyb29wVmFuZ3VhcmQ2XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcEFBVDE3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lcmNlbmFyeVJlYmVsR2Ftb3JyZWFuV2FycmlvcjFcIjogMSxcblx0XHRcdFx0XHRcInRyb29wQVRBUDdcIjogMSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tCV2luZzdcIjogNCxcblx0XHRcdFx0XHRcInRyb29wQVRSVDNcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhhaWxmaXJlN1wiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wRW1waXJlU3BlZWRlcjdcIjogMyxcblx0XHRcdFx0XHRcInRyb29wU2NvdXQ2XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcFRlY2huaWNpYW43XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA4Nyxcblx0XHRcdFx0XCJzdGFyc1wiOiAyLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEzLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDM2LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxIZWF2eVNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIb3ZlcnRhbmsxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyM1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCIwOTUxZjc1My0wZjU2LTExZTctOTk5ZC0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImJkZjIyYmY5LWJmNTgtMTFlNS05NTBlLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkdpdWtlIFNreXJ1bm5lclwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNDQxZTdkMzgtOTI5MS0xMWU1LTk5OWItMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCIlNWIwMDAwRkYlNWRJVEFMSUFOSVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDM3MDQzLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogNCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTI0NTIsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4ODMsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTUxLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC00LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAyMjQ5MTcsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNjI4LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA0NjAzNSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA0ODIyOVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDYyOCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNDYwMzUsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNDgyMjlcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDYyOCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNTM0NjYsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNDkyMjlcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFJlYmVsU3BlZWRlcjhcIjogMTksXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9MdWtlU2t5d2Fsa2VyOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzlcIjogMixcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2taOTUxMFwiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyOVwiOiAxNSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tCV2luZzdcIjogMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQxMFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIYWlsZmlyZTEwXCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFZhbmd1YXJkMTBcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjlcIjogM1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA3Mixcblx0XHRcdFx0XCJzdGFyc1wiOiAxLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEzLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDQwLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXREYW1hZ2U3XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbE1vcnRhclR1cnJldEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyM1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI5ZWM2MDU4Yy0wZjk5LTExZTctYThlYy0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjNmYzk0ZjAxLTVmYTgtMTFlNS1iN2UyLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcInRvdG9jYWNhXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCIxYzE3NDc1ZC1mNWVkLTExZTUtYTU0Ni0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkZSYW5jZVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDM0MjI4LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogOCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTMxODcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4ODMsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTU5LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC04LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAyNTM5NTUsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNTMzLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDM5ODg2LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAzNjUwM1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDUzMyxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA0MDg4Nixcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMzc1MDNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDUzMyxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMzc1MDMsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNDA4ODZcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFZhbmd1YXJkNlwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyOVwiOiAxMSxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM5XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw5XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ5XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9IYW5Tb2xvOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIYWlsZmlyZTlcIjogMyxcblx0XHRcdFx0XHRcInRyb29wRGVzZXJ0U2tpZmY5XCI6IDEsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrRmFuZ0ZpZ2h0ZXIxXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcENoYW1waW9uUmViZWxIZWF2eURyb2lkZWthNVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEVtcGlyZVNwZWVkZXI3XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcFNjb3V0NlwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BUZWNobmljaWFuN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BEYXJrNlwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogODYsXG5cdFx0XHRcdFwic3RhcnNcIjogMixcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMyxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiA0MCxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDhcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0RGFtYWdlNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTW9ydGFyVHVycmV0RGFtYWdlNVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlTW9ydGFyVHVycmV0RGFtYWdlNlwiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlV2FsbEhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoN1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQ2XCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCIwZmJmMTQ2OS0wZmZlLTExZTctODRlZS0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjQzMjMzMDE0LWYxMTctMTFlNi1hODQ0LTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIlBhbGFkaW5cIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcImVhMzdlZjBjLTYzMjYtMTFlNi04MWI2LTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiUk9HVUUxXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTEwNSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IC0xMixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTI0LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNzc5YTMzNWUtNzIxNi0xMWU2LThiNTgtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiMnRlZTJcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA1ODgzLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTE0NSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAxNCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMjk3MTA4LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDE3LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyNDEyLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyOTMwOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDE3LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyNDEyLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyOTMwOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogODE3LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA2MTM1Nixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA2MTMzOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSnVnZ2VybmF1dDVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjZcIjogNDcsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9DaGV3YmFjY2E1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljNVwiOiAzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDZcIjogMixcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjZcIjogMTBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogNDAsXG5cdFx0XHRcdFwic3RhcnNcIjogMCxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAyNixcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxNCxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsQ3JlZGl0R2VuZXJhdG9ySGVhbHRoMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDb250cmFiYW5kR2VuZXJhdG9ySGVhbHRoMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDJcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0NlwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiODFjMzc3M2QtMGZmZS0xMWU3LWIzNWUtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIwOWQ4NmY5Zi1iYWNkLTExZTYtOGNmOC0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJrZGFcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBudWxsLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMzgwNCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDE0LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNTI1LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNzc5YTMzNWUtNzIxNi0xMWU2LThiNTgtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiMnRlZTJcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA1ODgzLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTE1OSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTQsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDI5NzI2OSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAxNTksXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNjMxLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMzgyOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDE1OSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxNjMxLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNDgyOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNjUxLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA0MzUzMixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA0NTE2OFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjZcIjogNDQsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljNlwiOiA2LFxuXHRcdFx0XHRcdFwidHJvb3BNZXJjZW5hcnlSZWJlbEdhbW9ycmVhbldhcnJpb3IxXCI6IDMsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrWjk1NVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvTGVpYTZcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BEYXJrNlwiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTdcIjogNixcblx0XHRcdFx0XHRcInRyb29wRW1waXJlU3BlZWRlcjdcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDUyLFxuXHRcdFx0XHRcInN0YXJzXCI6IDIsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMjMsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTUsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEJ1cnN0VHVycmV0SGVhbHRoMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsTWF0ZXJpYWxzR2VuZXJhdG9ySGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0NlwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiZGJlZDI4NmUtMTA3NS0xMWU3LWE4ZWMtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJjNjNjMGU5YS05MmIxLTExZTYtYmU1MC0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJNYXJzIDVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjUxOWVkNGY2LWE5OGItMTFlNS05ZGRiLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiRGVyQXVmc3RhbmRcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxMTMwMCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDgsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC00Nzg3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNzc5YTMzNWUtNzIxNi0xMWU2LThiNTgtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiMnRlZTJcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA1ODgzLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTE2Nyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtOCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMzQ4NTM5LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDExNzcsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjE1Njhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMTc3LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyNTY4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiA3MTcsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDUzMzMxLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDczMzA0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BUMkJUYW5rOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BBVFRFN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BSZWJlbEpldHBhY2tUcm9vcGVyN1wiOiA1LFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzdcIjogMyxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDhcIjogMyxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tYV2luZzVcIjogNSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0xlaWE4XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI4XCI6IDRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU3Rvcm03XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEVtcGlyZVNwZWVkZXI3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcERld2JhY2s2XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEFUU1Q3XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA1MSxcblx0XHRcdFx0XCJzdGFyc1wiOiAyLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDEzLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDIyLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2U1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSGVhdnlTYW5kU29sZGllcjFcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXRIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVNb3J0YXJUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVXYWxsSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVDcmVkaXRHZW5lcmF0b3JIZWFsdGg3XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDZcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcImYzMDk5NTRkLTEwYzYtMTFlNy1iYTY5LTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNjkyNWVlN2YtZTRhYy0xMWU2LTk2YzgtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiRXlldGd1eVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiYTM1N2EwNzgtNzlkMi0xMWU1LTg4NDYtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJvYndib290Y2FtcFwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDEzNTE2LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogLTI4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMjQ5LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNzc5YTMzNWUtNzIxNi0xMWU2LThiNTgtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiMnRlZTJcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA1ODgzLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTEzMyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAzNCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMzgzMzgxLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDExLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDk5MjUsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE4MDczXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMTEsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogOTkyNSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTgwNzNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDYzNCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjcwODAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTQ2MzVcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI3XCI6IDU2LFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzdcIjogOCxcblx0XHRcdFx0XHRcInRyb29wSGVyb0xlaWE3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcENoYW1waW9uUmViZWxEcm9pZGVrYTRcIjogMSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tCV2luZzdcIjogMSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tCV2luZzZcIjogMSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tZV2luZzdcIjogMixcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tYV2luZzVcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEFUQVA2XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw4XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyN1wiOiAzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wRW1waXJlU3BlZWRlcjdcIjogM1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDQ4LFxuXHRcdFx0XHRcInN0YXJzXCI6IDAsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTMsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMzMsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVJhcGlkRmlyZVR1cnJldEhlYWx0aDZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0NlwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiZGI3M2I5MTktMTBjNy0xMWU3LWJhNjktMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI0Nzk2ZTQ5Ny01MTdhLTExZTYtOGU0Yy0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJicnVuaGlsZGVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjg1OGI4MjQxLWIxYTktMTFlNS1iZWVmLTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiR2VybWFuLVJlYmVsbHMtRVwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDM4NTA3LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogOCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTIwNjQsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI3NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIydGVlMlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDU4ODMsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTQxLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC04LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAzODM3NjQsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogNjM1LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDExMjA3LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMjEwMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDYzNSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxMjIwNyxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjMxMDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDYzNSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjMxMDIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTIyMDdcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI4XCI6IDgsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw4XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljOFwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BWYW5ndWFyZDRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wTWVyY2VuYXJ5UmViZWxHYW1vcnJlYW5XYXJyaW9yNFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQ2hld2JhY2NhOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BKdWdnZXJuYXV0OFwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BIYWlsZmlyZThcIjogMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BBVFNUN1wiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogOTksXG5cdFx0XHRcdFwic3RhcnNcIjogMixcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMyxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiA0MCxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhlYXZ5U2FuZFNvbGRpZXIyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyNFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXREYW1hZ2U3XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXRIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVNb3J0YXJUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVXYWxsSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwRW1waXJlSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBFbXBpcmVDcmVkaXRHZW5lcmF0b3JIZWFsdGg3XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDZcIlxuXHRcdFx0fVxuXHRcdF0sXG5cdFx0XCJjYW1wYWlnbnNcIjoge1xuXHRcdFx0XCJjbXBfZnVlXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfZnVlXCIsXG5cdFx0XHRcdFwidGltZVpvbmVcIjogMCxcblx0XHRcdFx0XCJjb21wbGV0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJjb2xsZWN0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJwb2ludHNcIjogMCxcblx0XHRcdFx0XCJpdGVtc1wiOiB7fVxuXHRcdFx0fSxcblx0XHRcdFwic3dfaHRoX291dHBvc3RzXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJzd19odGhfb3V0cG9zdHNcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJjb2xsZWN0ZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcImNtcF8wX2hiX2VcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNtcF8wX2hiX2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiB0cnVlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfMV91dHRzX2VcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNtcF8xX3V0dHNfZVwiLFxuXHRcdFx0XHRcInRpbWVab25lXCI6IDAsXG5cdFx0XHRcdFwiY29tcGxldGVkXCI6IHRydWUsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcImNtcF8yX3Rzd19lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfMl90c3dfZVwiLFxuXHRcdFx0XHRcInRpbWVab25lXCI6IDAsXG5cdFx0XHRcdFwiY29tcGxldGVkXCI6IHRydWUsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcImNtcF8zX3RqZ19lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInRpbWVab25lXCI6IDAsXG5cdFx0XHRcdFwiY29tcGxldGVkXCI6IHRydWUsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcImNtcF80X3NvdG1fZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwidGltZVpvbmVcIjogMCxcblx0XHRcdFx0XCJjb21wbGV0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJjb2xsZWN0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJwb2ludHNcIjogMCxcblx0XHRcdFx0XCJpdGVtc1wiOiB7fVxuXHRcdFx0fSxcblx0XHRcdFwiY21wXzVfdGloX2VcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwidGltZVpvbmVcIjogMCxcblx0XHRcdFx0XCJjb21wbGV0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJjb2xsZWN0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJwb2ludHNcIjogMCxcblx0XHRcdFx0XCJpdGVtc1wiOiB7fVxuXHRcdFx0fSxcblx0XHRcdFwiY21wXzdfYnNfZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInRpbWVab25lXCI6IDAsXG5cdFx0XHRcdFwiY29tcGxldGVkXCI6IHRydWUsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcImNtcF84X3RhdF9lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInRpbWVab25lXCI6IDAsXG5cdFx0XHRcdFwiY29tcGxldGVkXCI6IHRydWUsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcImNtcF85X3Nhc19lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfOV9zYXNfZVwiLFxuXHRcdFx0XHRcInRpbWVab25lXCI6IDAsXG5cdFx0XHRcdFwiY29tcGxldGVkXCI6IHRydWUsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcImNtcF8xMF9iZ2hfZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wXzEwX2JnaF9lXCIsXG5cdFx0XHRcdFwidGltZVpvbmVcIjogMCxcblx0XHRcdFx0XCJjb21wbGV0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJjb2xsZWN0ZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcImNtcF8xMV90YmZ0X2VcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNtcF8xMV90YmZ0X2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJjb2xsZWN0ZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwibWlzc2lvbnNcIjoge1xuXHRcdFx0XCJmdWVfZGVmZW5kQmFzZU1pc3Npb25fMDBcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImZ1ZV9kZWZlbmRCYXNlTWlzc2lvbl8wMFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wX2Z1ZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNvbXBsZXRlZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI5ZjcxYzhhNS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIlJldGFpbkhRXCIsXG5cdFx0XHRcdFx0XCJBdm9pZENvbXBsZXRlTG9zc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJmdWVfaW1wSW50cm9CYXNlTWlzc2lvbl8wMFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiZnVlX2ltcEludHJvQmFzZU1pc3Npb25fMDBcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF9mdWVcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDb21wbGV0ZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZWU2Mjg1ZjEtNzIxNi0xMWU2LThiNTgtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiZnVlX3JlYkludHJvQmFzZU1pc3Npb25fMDBcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImZ1ZV9yZWJJbnRyb0Jhc2VNaXNzaW9uXzAwXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfZnVlXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ29tcGxldGVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjE3ZDFkMzVkLTcyMTctMTFlNi04YjU4LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMDU4LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDEwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcInN3X2h0aF9vdXRwb3N0X3NfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwic3dfaHRoX291dHBvc3Rfc18xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJzd19odGhfb3V0cG9zdHNcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJEZWZhdWx0XCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMCxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW10sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzBfaGJfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMjU2Mzg3NjctNzIxOC0xMWU2LWI5MzEtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzJcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzBfaGJfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNzE3YTA2MGItNzIxOS0xMWU2LWI5MzEtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNTAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveVF1YXJ0ZXJCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfMmFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfMmFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8wX2hiX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImMxOTZhNDc3LTcyMWEtMTFlNi04OTE5LTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDUwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzFfdXR0c19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9XYWxsX1QxXzI1XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8xX3V0dHNfZV80XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMV91dHRzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjg0ZWU1MDU5LTcyMWMtMTFlNi04OTE5LTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8xX3V0dHNfZV81XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzFfdXR0c19lXzVcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xX3V0dHNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25UMkVtcFN0YXJwb3J0XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfNlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8xX3V0dHNfZV82XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMV91dHRzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjNiNzgyMTdhLTcyMWYtMTFlNi05NjczLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95UXVhcnRlckJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8xX3V0dHNfZV83XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzFfdXR0c19lXzdcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xX3V0dHNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd24yRW1wQ3JlR2VuXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfOVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8xX3V0dHNfZV85XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMV91dHRzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjgxOWI0MWJjLTcyMjktMTFlNi1hMzNhLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95UXVhcnRlckJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8xX3V0dHNfZV8xMFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8xX3V0dHNfZV8xMFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzJfdHN3X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duNFR1cnJldHNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8yX3Rzd19lXzFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMl90c3dfZV8xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMl90c3dfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMjNmMGVhNDgtNzIyYi0xMWU2LWEzM2EtMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzJfdHN3X2VfMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8yX3Rzd19lXzJcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8yX3Rzd19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bjFUMUVtcEZhY3RvcnlcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8yX3Rzd19lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMl90c3dfZV8zXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMl90c3dfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZWU5NGQzZmQtNzIyYi0xMWU2LWEzM2EtMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNTAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveVF1YXJ0ZXJCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMl90c3dfZV80XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzJfdHN3X2VfNFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzJfdHN3X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duMlQyRW1wQ3JlZEdlblwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzJfdHN3X2VfNVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8yX3Rzd19lXzVcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8yX3Rzd19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJhNWFmMDhkOS03MjNhLTExZTYtOTFjOS0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveVF1YXJ0ZXJCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfM190amdfZV8xXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzNfdGpnX2VfMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImY0ODMxNjQ4LTcyM2EtMTFlNi05MWM5LTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8zX3RqZ19lXzJcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfM190amdfZV8yXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd24yVDJFbXBCYXJyYWNrc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzNfdGpnX2VfM1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8zX3RqZ19lXzNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8zX3RqZ19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI0MTU2OTUwNS03MjQyLTExZTYtODkxOS0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNTAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95UXVhcnRlckJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8zX3RqZ19lXzRcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfM190amdfZV80XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiYjk0MzFkNGEtNzI0Mi0xMWU2LTg5MTktMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzNfdGpnX2VfNVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8zX3RqZ19lXzVcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8zX3RqZ19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bjFUMkVtcE1hdFN0b3JcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8zX3RqZ19lXzZcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfM190amdfZV82XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiOWE0YWQ2YjQtNzI0My0xMWU2LTg5MTktMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzNfdGpnX2VfN1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8zX3RqZ19lXzdcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8zX3RqZ19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bjJUMkVtcFJGVHVycmV0c1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzNfdGpnX2VfOFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8zX3RqZ19lXzhcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8zX3RqZ19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCIyYzZlMmUwMy03MmM5LTExZTYtODU5YS0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveVF1YXJ0ZXJCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfM190amdfZV85XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzNfdGpnX2VfOVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duVDNFbXBIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzNfdGpnX2VfMTBcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfM190amdfZV8xMFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjMyN2MzZTA1LTczMzYtMTFlNi05NWQ5LTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJLaWxsX2luZmFudHJ5X3QxXzEwXCIsXG5cdFx0XHRcdFx0XCJLaWxsX1R1c2tlbkhlcm9fdDFfMVwiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVNb3J0YXJfVDFfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzJcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ29tcGxldGVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZUJhcnJhY2tzX1QzXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV8zXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNzBlZGRhZjgtNzM0Ni0xMWU2LTkxYzktMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV80XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzRcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiOTZkMjU5NGQtNzM1OS0xMWU2LWJmYjYtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV81XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzVcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNTNhYTdhMWUtNzM1ZS0xMWU2LThiY2QtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV82XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzZcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiYzBkNzYzYWItNzM1ZS0xMWU2LThiY2QtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzdcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfN1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl90dXJyZXRfdDFfNlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzhcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfOFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl93YWxsX3QxXzQwXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfOVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV85XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7XG5cdFx0XHRcdFx0XCJQdnBfd2luXzFcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJQdnBfd2luXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV8xMFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8xMFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9zdGFycG9ydF90Ml8yXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfMTFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfMTFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMmVhNWIxODQtNzM3NC0xMWU2LWI2ZjMtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV8xMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8xMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI2ZDMzZTAwNC03Mzc2LTExZTYtYjZmMy0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzEzXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzEzXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjFiYTZkNmRiLTczNzctMTFlNi1iNmYzLTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV8xNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8xNFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCIxNTI0ODI4Yy03Mzc5LTExZTYtYjkzMS0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVNYXRlcmlhbHNHZW5lcmF0b3JfdDNfM1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzJcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVPZmZlbnNlTGFiX3QxXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF81X3RpaF9lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNV90aWhfZV8zXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNV90aWhfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZTEzYmUwNTktNzQxZC0xMWU2LWI2ZjMtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF81X3RpaF9lXzRcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNV90aWhfZV80XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNV90aWhfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25fMTJfdDNfd2FsbHNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF81X3RpaF9lXzVcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNV90aWhfZV81XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNV90aWhfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiYjc2NTJhNmEtNzQxZS0xMWU2LWI2ZjMtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDEwMDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF81X3RpaF9lXzZcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNV90aWhfZV82XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNV90aWhfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMTUxZDUyMDktNzQxZi0xMWU2LWI2ZjMtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfN1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzdcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVDcmVkaXRHZW5lcmF0b3JfdDNfM1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfOFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzhcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJhN2FiYjY3NC03NDIxLTExZTYtYTMzYS0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA2MDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV8xXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV8xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJkOTY0OTE1Ni03NDI0LTExZTYtYTVjMy0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIktpbGxfaW5mYW50cnlfdDFfNVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV8yXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV8yXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI3Y2JjNWNlYy03NDI1LTExZTYtYTVjMy0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjEwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMTAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiS2lsbF9pbmZhbnRyeV90MV8xMFwiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiS2lsbF9pbmZhbnRyeV90MV81XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjFmNTEwYTZjLTc0MjctMTFlNi1hMzNhLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzRcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzRcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZUhRX3Q0XzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl83X2JzX2VfNVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfNVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiY2I2NzlmMjktNzUwOS0xMWU2LWI2ZjMtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV82XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV82XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ29tcGxldGVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZVRhY3RpY2FsQ29tbWFuZF90MV8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzdcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzdcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImQxZGM2MzM1LTc2YWQtMTFlNi1hMzNhLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl83X2JzX2VfOFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfOFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZjhkMzY3YzQtNzZhZS0xMWU2LWEzM2EtMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDI0MDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjQwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIktpbGxfaW5mYW50cnlfdDFfNVwiLFxuXHRcdFx0XHRcdFwiRGVzdHJveV9yZWJlbFRhY3RpY2FsQ29tbWFuZF90MV8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzlcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzlcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImMyYzNmYzk4LTdkOTItMTFlNi05NDBmLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyNjAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI2MDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJLaWxsX2luZmFudHJ5X3QxXzVcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lfcmViZWxUYWN0aWNhbENvbW1hbmRfdDFfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV8xMFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfMTBcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjIyMTgzOGQxLTc2Y2ItMTFlNi1hMzNhLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiS2lsbF9pbmZhbnRyeV90MV81XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzExXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV8xMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNzZlY2U0YzAtNzczNC0xMWU2LWI2ZjMtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV8xMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfMTJcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZU9mZmVuc2VMYWJfdDJfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV8xM1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfMTNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZVRhY3RpY2FsQ29tbWFuZF90Ml8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzE0XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV8xNFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZjM0Y2E4NzctN2U2Ni0xMWU2LTkxYTMtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDI1MDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjUwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiLFxuXHRcdFx0XHRcdFwiS2lsbF9pbmZhbnRyeV90MV84XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOF90YXRfZV8xXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzhfdGF0X2VfMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImVjZjg1YmI3LTc3MzUtMTFlNi05ZjBjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl84X3RhdF9lXzJcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV8yXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMzIwMzMyYzEtODVhZi0xMWU2LWE4MGQtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl84X3RhdF9lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV8zXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNvbXBsZXRlZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9zdGFycG9ydF90NF8yXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOF90YXRfZV80XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzhfdGF0X2VfNFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImQzNjFjOGYzLTg2MmQtMTFlNi1hYWQzLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDkwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOF90YXRfZV81XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzhfdGF0X2VfNVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjE5NWY3NWY5LTg2MmYtMTFlNi1hODBkLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA4MDAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDkwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOF90YXRfZV82XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzhfdGF0X2VfNlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjNhOGM3MTQ4LTg2NWEtMTFlNi1hODBkLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDkwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOF90YXRfZV83XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzhfdGF0X2VfN1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2JhcnJhY2tzX3Q0XzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl84X3RhdF9lXzhcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV84XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZWU0Mzk4NTgtODY3ZC0xMWU2LTkzMmQtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogOTAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl84X3RhdF9lXzlcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV85XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiYTcwZjFjNDEtODhhNy0xMWU2LWE4MGQtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl84X3RhdF9lXzEwXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzhfdGF0X2VfMTBcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF84X3RhdF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI3OWJmNWEwYy04OGFhLTExZTYtYmNkYS0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzhfdGF0X2VfMTFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV8xMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImYyZDkyNDQ5LTg4YWYtMTFlNi1hYWQzLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOF90YXRfZV8xMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl84X3RhdF9lXzEyXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNjc1MWY4MzEtODhiMi0xMWU2LTkzMmQtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzhfdGF0X2VfMTNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV8xM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImNlNGUxYWQzLTg4YjItMTFlNi05MzJkLTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl85X3Nhc19lXzFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOV9zYXNfZV8xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOV9zYXNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25fZW1waXJlRmFjdG9yeV90NF8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOV9zYXNfZV8yXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzlfc2FzX2VfMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzlfc2FzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjRlNjIwOGZjLTg4YjMtMTFlNi05ZjNhLTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOV9zYXNfZV8zXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzlfc2FzX2VfM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzlfc2FzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7XG5cdFx0XHRcdFx0XCJQdnBfd2luXzFcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJQdnBfd2luXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl85X3Nhc19lXzRcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOV9zYXNfZV80XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOV9zYXNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNTQ3ZjMxYzctODk4Yi0xMWU2LWFhZDMtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzlfc2FzX2VfNVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl85X3Nhc19lXzVcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF85X3Nhc19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVCYXJyYWNrc190NF8zXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOV9zYXNfZV82XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzlfc2FzX2VfNlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzlfc2FzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImM2MTJmMDA1LTg5OGUtMTFlNi04YTdlLTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOV9zYXNfZV83XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzlfc2FzX2VfN1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzlfc2FzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjIzNzdhNzZhLTkzOGItMTFlNi05YjM3LTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOV9zYXNfZV84XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzlfc2FzX2VfOFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzlfc2FzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImZlZjRiZjhhLTg5OGYtMTFlNi04YTdlLTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl85X3Nhc19lXzlcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOV9zYXNfZV85XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOV9zYXNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMTM3ZTA3YWItOTJmOC0xMWU2LWE5MmYtMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDMwMDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMzAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl85X3Nhc19lXzEwXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzlfc2FzX2VfMTBcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF85X3Nhc19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge1xuXHRcdFx0XHRcdFwiUHZwX3dpbl8xXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUHZwX3dpbl8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOV9zYXNfZV8xMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl85X3Nhc19lXzExXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOV9zYXNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiOGE3MzMxMGEtOTkwNS0xMWU2LTgxYmItMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl85X3Nhc19lXzEyXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzlfc2FzX2VfMTJcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF85X3Nhc19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJkMzI2MzQwMi05MzdkLTExZTYtYjA3Mi0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNzAwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA3MDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveV9zdG9yeVJlYlNoaWVsZEdlbjFcIixcblx0XHRcdFx0XHRcIktpbGxfaGVyb19PdG9WYW5zNFwiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzEwX2JnaF9lXzFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfMTBfYmdoX2VfMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzEwX2JnaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bkVtcGlyZVJvY2tldFR1cnJldDFfMlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzEwX2JnaF9lXzJcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfMTBfYmdoX2VfMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzEwX2JnaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI3NmFkYzYxOC05Mzc3LTExZTYtYTkyZi0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA5MDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwia2lsbF9oZXJvX3QxXzFcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcImtpbGxfdmVoaWNsZV90MV8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfMTBfYmdoX2VfM1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMF9iZ2hfZV8zXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTBfYmdoX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjFiYjU2NmUyLTkyYzMtMTFlNi04NjI3LTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI3NjMsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfMTBfYmdoX2VfNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMF9iZ2hfZV80XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTBfYmdoX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImEwNDA2ZmFlLTk5MTEtMTFlNi1iMmJhLTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA3MDAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDgwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzEwX2JnaF9lXzVcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfMTBfYmdoX2VfNVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzEwX2JnaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bkhRNVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzEwX2JnaF9lXzZcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfMTBfYmdoX2VfNlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzEwX2JnaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJiYmU4ZDcxOC05MmM1LTExZTYtOWIzNy0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA5MDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveVF1YXJ0ZXJCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lTaGllbGRHZW5lcmF0b3IxXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl8xMF9iZ2hfZV83XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzEwX2JnaF9lXzdcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xMF9iZ2hfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZjQ1ZTlkNmEtOTJjNi0xMWU2LWEyYTAtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogOTAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIktpbGxfaW5mYW50cnlfdDFfMTBcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIktpbGxfaW5mYW50cnlfdDFfMjBcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl8xMF9iZ2hfZV84XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzEwX2JnaF9lXzhcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xMF9iZ2hfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAyLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNDZjZTMyNmEtYTM2ZC0xMWU2LWJmNmQtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE5MjAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNzk5OCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl8xMF9iZ2hfZV85XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzEwX2JnaF9lXzlcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xMF9iZ2hfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMjIwOGJhZjMtOTJkNy0xMWU2LTg0ZDctMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogOTAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIktpbGxfUmFuY29yNV8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfMTBfYmdoX2VfMTBcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfMTBfYmdoX2VfMTBcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xMF9iZ2hfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiOWExOWRjOWQtOTJlOS0xMWU2LWE5MmYtMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiLFxuXHRcdFx0XHRcdFwiQXZvaWRDb21wbGV0ZUxvc3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl8xMF9iZ2hfZV8xMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMF9iZ2hfZV8xMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzEwX2JnaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCIyM2RkMGRiMC05NDUxLTExZTYtOGRlZS0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogOTAwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA5MDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiS2lsbF9pbmZhbnRyeV90MV8yMlwiLFxuXHRcdFx0XHRcdFwiS2lsbF92ZWhpY2xlX3QxXzZcIixcblx0XHRcdFx0XHRcIktpbGxfS3JheXREcmFnb244XzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl8xMF9iZ2hfZV8xMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMF9iZ2hfZV8xMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzEwX2JnaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bkVtcGlyZUZsZWV0Q29tbWFuZDJfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzEwX2JnaF9lXzEzXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzEwX2JnaF9lXzEzXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTBfYmdoX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjBiY2JmOGMzLTkyZWQtMTFlNi1hMmEwLTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA3OTgwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDkwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJraWxsX1dvbXBSYXRIZXJvX3QxXzFcIixcblx0XHRcdFx0XHRcImtpbGxfV29tcFJhdEdlbmVyYWxpc3RfdDFfNDBcIixcblx0XHRcdFx0XHRcImtpbGxfV29tcFJhdEJydWlzZXJfdDFfNVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzExX3RiZnRfZV8xXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzExX3RiZnRfZV8xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTFfdGJmdF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ29tcGxldGVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duQmFycmFja3M2XzNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl8xMV90YmZ0X2VfMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMV90YmZ0X2VfMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzExX3RiZnRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAyLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiOWZjMjc1NGQtMDA1OS0xMWU3LThiYzUtMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl8xMV90YmZ0X2VfM1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMV90YmZ0X2VfM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzExX3RiZnRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25FbXBpcmVDb250cmFiYW5kU3RvcmFnZTFfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzExX3RiZnRfZV80XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzExX3RiZnRfZV80XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTFfdGJmdF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDIsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJmYWIyN2Q5Ni0wMDRlLTExZTctOGJjNS0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNTUyLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfMTFfdGJmdF9lXzVcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfMTFfdGJmdF9lXzVcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xMV90YmZ0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImQ4OGY2ZTUyLWMyZTAtMTFlNi05ZWQyLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl8xMV90YmZ0X2VfNlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMV90YmZ0X2VfNlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzExX3RiZnRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25IZXJvQ29tbWFuZDdfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzExX3RiZnRfZV83XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzExX3RiZnRfZV83XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTFfdGJmdF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDEsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCIyNGIxMjI1Ni1mZWRiLTExZTYtOTE5MS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjg0OSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA3OTk0LFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW10sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzExX3RiZnRfZV84XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzExX3RiZnRfZV84XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTFfdGJmdF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDIsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCIyM2U1MGYwNS0wMDRmLTExZTctOGJjNS0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNTE0MCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA1ODQ5LFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW10sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzExX3RiZnRfZV85XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzExX3RiZnRfZV85XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTFfdGJmdF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQWN0aXZlXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMCxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjAzMDcwYWUzLTAzOGItMTFlNy1iOTYzLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMDY3MSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxMDgzMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJ0b3VybmFtZW50c1wiOiB7XG5cdFx0XHRcImNvbmZsaWN0X2ZvcmVzdE9wc190YXRfMDFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNvbmZsaWN0X2ZvcmVzdE9wc190YXRfMDFcIixcblx0XHRcdFx0XCJyYXRpbmdcIjogMzc1MSxcblx0XHRcdFx0XCJjb2xsZWN0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJwZXJjZW50aWxlXCI6IDcyLFxuXHRcdFx0XHRcInRpZXJcIjogXCJ0b3VybmFtZW50X3RpZXJfNFwiLFxuXHRcdFx0XHRcInJlZGVlbWVkUmV3YXJkc1wiOiBbXG5cdFx0XHRcdFx0XCJsY19jb25mX2NyeXN0YWxfdGllcjRcIixcblx0XHRcdFx0XHRcImxjX2NvbmZfY3J5c3RhbF90aWVyNFwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiYXR0YWNrc1dvblwiOiAxOSxcblx0XHRcdFx0XCJhdHRhY2tzTG9zdFwiOiA2LFxuXHRcdFx0XHRcImRlZmVuc2VzV29uXCI6IDEyLFxuXHRcdFx0XHRcImRlZmVuc2VzTG9zdFwiOiAxMyxcblx0XHRcdFx0XCJkb25hdGVkVHJvb3BzXCI6IDI2MFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJpc0Z1ZUluUHJvZ3Jlc3NcIjogZmFsc2UsXG5cdFx0XCJEYW1hZ2VkQnVpbGRpbmdzXCI6IHtcblx0XHRcdFwiYmxkXzI2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzIxOFwiOiAxMDAsXG5cdFx0XHRcImJsZF8xNDFcIjogMTAwLFxuXHRcdFx0XCJibGRfMzIzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzgyXCI6IDEwMCxcblx0XHRcdFwiYmxkXzc0XCI6IDEwMCxcblx0XHRcdFwiYmxkXzczXCI6IDEwMCxcblx0XHRcdFwiYmxkXzQ4MFwiOiAxMDAsXG5cdFx0XHRcImJsZF80NDVcIjogMTAwLFxuXHRcdFx0XCJibGRfMzI4XCI6IDEwMCxcblx0XHRcdFwiYmxkXzE0MlwiOiAxMDAsXG5cdFx0XHRcImJsZF8xMjBcIjogMTAwLFxuXHRcdFx0XCJibGRfMjEyXCI6IDEwMCxcblx0XHRcdFwiYmxkXzMxNVwiOiAxMDAsXG5cdFx0XHRcImJsZF8zMjJcIjogMTAwLFxuXHRcdFx0XCJibGRfNzdcIjogMTAwLFxuXHRcdFx0XCJibGRfMjAzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzgzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzMwOVwiOiAxMDAsXG5cdFx0XHRcImJsZF82NFwiOiAxMDAsXG5cdFx0XHRcImJsZF8zMTNcIjogMTAwLFxuXHRcdFx0XCJibGRfMzE0XCI6IDEwMCxcblx0XHRcdFwiYmxkXzMxOVwiOiAxMDAsXG5cdFx0XHRcImJsZF8xMjJcIjogMTAwLFxuXHRcdFx0XCJibGRfMzEwXCI6IDEwMCxcblx0XHRcdFwiYmxkXzMyMVwiOiAxMDAsXG5cdFx0XHRcImJsZF8yNFwiOiAxMDAsXG5cdFx0XHRcImJsZF8yMTVcIjogMTAwLFxuXHRcdFx0XCJibGRfNTNcIjogMTAwLFxuXHRcdFx0XCJibGRfNDQ2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzE3XCI6IDEwMCxcblx0XHRcdFwiYmxkXzY1XCI6IDEwMCxcblx0XHRcdFwiYmxkXzEwXCI6IDEwMCxcblx0XHRcdFwiYmxkXzEyMVwiOiAxMDAsXG5cdFx0XHRcImJsZF8yM1wiOiAxMDAsXG5cdFx0XHRcImJsZF85MFwiOiAxMDAsXG5cdFx0XHRcImJsZF8xMTZcIjogMTAwLFxuXHRcdFx0XCJibGRfMjE3XCI6IDEwMCxcblx0XHRcdFwiYmxkXzE2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzU0XCI6IDEwMCxcblx0XHRcdFwiYmxkXzE1NlwiOiAxMDAsXG5cdFx0XHRcImJsZF8zMzNcIjogMTAwLFxuXHRcdFx0XCJibGRfMTIzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzExN1wiOiAxMDAsXG5cdFx0XHRcImJsZF84OFwiOiAxMDAsXG5cdFx0XHRcImJsZF8yMTRcIjogMTAwLFxuXHRcdFx0XCJibGRfMzExXCI6IDEwMCxcblx0XHRcdFwiYmxkXzExMVwiOiAxMDAsXG5cdFx0XHRcImJsZF8xNTlcIjogMTAwLFxuXHRcdFx0XCJibGRfMTQzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzc2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzU2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzYzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzE1NVwiOiAxMDAsXG5cdFx0XHRcImJsZF8xMDZcIjogMTAwLFxuXHRcdFx0XCJibGRfODlcIjogMTAwLFxuXHRcdFx0XCJibGRfNzJcIjogMTAwLFxuXHRcdFx0XCJibGRfMjE2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzIyXCI6IDEwMCxcblx0XHRcdFwiYmxkXzI1XCI6IDEwMCxcblx0XHRcdFwiYmxkXzIxMVwiOiAxMDAsXG5cdFx0XHRcImJsZF84NFwiOiAxMDAsXG5cdFx0XHRcImJsZF83NVwiOiAxMDAsXG5cdFx0XHRcImJsZF8xNThcIjogMTAwLFxuXHRcdFx0XCJibGRfMTEzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzIyOVwiOiAxMDAsXG5cdFx0XHRcImJsZF8xMDFcIjogMTAwLFxuXHRcdFx0XCJibGRfMTQ3XCI6IDEwMCxcblx0XHRcdFwiYmxkXzlcIjogMTAwLFxuXHRcdFx0XCJibGRfMjEzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzE1N1wiOiAxMDAsXG5cdFx0XHRcImJsZF8yXCI6IDEwMCxcblx0XHRcdFwiYmxkXzY4XCI6IDEwMCxcblx0XHRcdFwiYmxkXzFcIjogMTAwLFxuXHRcdFx0XCJibGRfMTA1XCI6IDEwMCxcblx0XHRcdFwiYmxkXzU1XCI6IDEwMCxcblx0XHRcdFwiYmxkXzUyXCI6IDEwMCxcblx0XHRcdFwiYmxkXzE0OFwiOiAxNCxcblx0XHRcdFwiYmxkXzkxXCI6IDAsXG5cdFx0XHRcImJsZF8yMDJcIjogMCxcblx0XHRcdFwiYmxkXzIwMVwiOiAwLFxuXHRcdFx0XCJibGRfMTlcIjogNjcsXG5cdFx0XHRcImJsZF8xOFwiOiA0NCxcblx0XHRcdFwiYmxkXzEzXCI6IDE5LFxuXHRcdFx0XCJibGRfNzFcIjogMCxcblx0XHRcdFwiYmxkXzEwN1wiOiAwLFxuXHRcdFx0XCJibGRfMTA0XCI6IDE0LFxuXHRcdFx0XCJibGRfMTA4XCI6IDE0LFxuXHRcdFx0XCJibGRfNjlcIjogMTQsXG5cdFx0XHRcImJsZF8xMDJcIjogMCxcblx0XHRcdFwiYmxkXzYxXCI6IDE0LFxuXHRcdFx0XCJibGRfNjdcIjogNTMsXG5cdFx0XHRcImJsZF82NlwiOiA5Mixcblx0XHRcdFwiYmxkXzgwXCI6IDAsXG5cdFx0XHRcImJsZF8xMTRcIjogMCxcblx0XHRcdFwiYmxkXzc5XCI6IDAsXG5cdFx0XHRcImJsZF83OFwiOiAwLFxuXHRcdFx0XCJibGRfNjBcIjogMCxcblx0XHRcdFwiYmxkXzIxMFwiOiA1NCxcblx0XHRcdFwiYmxkXzE0NFwiOiAwLFxuXHRcdFx0XCJibGRfMTE1XCI6IDAsXG5cdFx0XHRcImJsZF8zMTJcIjogMTAwLFxuXHRcdFx0XCJibGRfOTRcIjogMCxcblx0XHRcdFwiYmxkXzIwOFwiOiAwLFxuXHRcdFx0XCJibGRfMjA3XCI6IDAsXG5cdFx0XHRcImJsZF8xNTJcIjogMCxcblx0XHRcdFwiYmxkXzEwM1wiOiAwLFxuXHRcdFx0XCJibGRfNVwiOiAwLFxuXHRcdFx0XCJibGRfM1wiOiAwLFxuXHRcdFx0XCJibGRfN1wiOiAwLFxuXHRcdFx0XCJibGRfMTJcIjogMCxcblx0XHRcdFwiYmxkXzExXCI6IDAsXG5cdFx0XHRcImJsZF8xNFwiOiA2MCxcblx0XHRcdFwiYmxkXzU4XCI6IDUzLFxuXHRcdFx0XCJibGRfMTUxXCI6IDIzLFxuXHRcdFx0XCJibGRfNlwiOiA2Mixcblx0XHRcdFwiYmxkXzU3XCI6IDM0LFxuXHRcdFx0XCJibGRfMTVcIjogNDksXG5cdFx0XHRcImJsZF8zMjBcIjogNjQsXG5cdFx0XHRcImJsZF8zMTZcIjogMjcsXG5cdFx0XHRcImJsZF8xNDZcIjogNDQsXG5cdFx0XHRcImJsZF8xNDVcIjogMCxcblx0XHRcdFwiYmxkXzIwXCI6IDAsXG5cdFx0XHRcImJsZF8yMDZcIjogMCxcblx0XHRcdFwiYmxkXzIwNFwiOiAwLFxuXHRcdFx0XCJibGRfMjA1XCI6IDAsXG5cdFx0XHRcImJsZF8xNTBcIjogMCxcblx0XHRcdFwiYmxkXzE1NFwiOiA1OCxcblx0XHRcdFwiYmxkXzgxXCI6IDg4LFxuXHRcdFx0XCJibGRfMTUzXCI6IDAsXG5cdFx0XHRcImJsZF8zMThcIjogNTgsXG5cdFx0XHRcImJsZF8yMDBcIjogMCxcblx0XHRcdFwiYmxkXzMxN1wiOiA4OCxcblx0XHRcdFwiYmxkXzkyXCI6IDAsXG5cdFx0XHRcImJsZF8xMDlcIjogMCxcblx0XHRcdFwiYmxkXzcwXCI6IDAsXG5cdFx0XHRcImJsZF84XCI6IDAsXG5cdFx0XHRcImJsZF85M1wiOiAwLFxuXHRcdFx0XCJibGRfMjA5XCI6IDI5LFxuXHRcdFx0XCJibGRfMTQ5XCI6IDAsXG5cdFx0XHRcImJsZF8yMVwiOiAwLFxuXHRcdFx0XCJibGRfNDUzXCI6IDAsXG5cdFx0XHRcImJsZF80NTVcIjogNyxcblx0XHRcdFwiYmxkXzQ1NlwiOiA4LFxuXHRcdFx0XCJibGRfNDQ5XCI6IDAsXG5cdFx0XHRcImJsZF80NDdcIjogMCxcblx0XHRcdFwiYmxkXzRcIjogMTQsXG5cdFx0XHRcImJsZF82MlwiOiAwLFxuXHRcdFx0XCJibGRfMTEwXCI6IDAsXG5cdFx0XHRcImJsZF80NTBcIjogMTAsXG5cdFx0XHRcImJsZF81OVwiOiAwLFxuXHRcdFx0XCJibGRfNDUxXCI6IDAsXG5cdFx0XHRcImJsZF80NTJcIjogMCxcblx0XHRcdFwiYmxkXzQ0OFwiOiAwLFxuXHRcdFx0XCJibGRfNDU0XCI6IDBcblx0XHR9LFxuXHRcdFwiZGV2aWNlSW5mb1wiOiB7fSxcblx0XHRcInRpbWVab25lT2Zmc2V0XCI6IDIsXG5cdFx0XCJjb250cmFjdHNcIjogW1xuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wRW1waXJlU3BlZWRlcjdcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAzODAxMDAsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzE1NVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BFbXBpcmVTcGVlZGVyN1wiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDM4MDE2OCxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfNjNcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wRW1waXJlU3BlZWRlcjdcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAzODAxODEsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzE1NVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BFbXBpcmVTcGVlZGVyN1wiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDM4MDI0OSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfNjNcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wSGVyb0NyaW1zb25HdWFyZDdcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAzODA0MjIsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiSGVyb1wiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTEzXCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJzcGVjaWFsQXR0YWNrQXRtb3NNaWcyXCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMzgwNjE5LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlNwZWNpYWxBdHRhY2tcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzE1OFwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BIZXJvQVRNUDdcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAzODA2OTIsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiSGVyb1wiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTEzXCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJzcGVjaWFsQXR0YWNrQXRtb3NNaWcyXCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMzgxMzM5LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlNwZWNpYWxBdHRhY2tcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzE1OFwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwic3BlY2lhbEF0dGFja0F0bW9zTWlnMlwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDM4MjA1OSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJTcGVjaWFsQXR0YWNrXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8xNThcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInNwZWNpYWxBdHRhY2tBdG1vc01pZzJcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAzODI3NzksXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiU3BlY2lhbEF0dGFja1wiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTU4XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJzcGVjaWFsQXR0YWNrQXRtb3NNaWcyXCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMzgzNDk5LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlNwZWNpYWxBdHRhY2tcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzE1OFwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwic3BlY2lhbEF0dGFja1RpZUJvbWJlcjZcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAzODQyMTksXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiU3BlY2lhbEF0dGFja1wiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTU4XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJzcGVjaWFsQXR0YWNrVGllQm9tYmVyNlwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDM4NDkzOSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJTcGVjaWFsQXR0YWNrXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8xNThcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU1hdGVyaWFsc0dlbmVyYXRvcjdcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAzOTEzNjAsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVXBncmFkZVwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTIxXCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcERhcms3XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwNTIyODQ5LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlJlc2VhcmNoXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF84MlwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH1cblx0XHRdLFxuXHRcdFwiZnJvemVuQnVpbGRpbmdzXCI6IFtcblx0XHRcdFwiYmxkXzE1NVwiLFxuXHRcdFx0XCJibGRfNjNcIlxuXHRcdF0sXG5cdFx0XCJpc0Nvbm5lY3RlZEFjY291bnRcIjogdHJ1ZSxcblx0XHRcInB2cFRhcmdldFNlcnZlZFRpbWVcIjogMTQ5MDM4MzYyMSxcblx0XHRcImludHJvc1wiOiBbXSxcblx0XHRcImxhc3RNaXNzaW9uXCI6IFwiY2hhcHRlcl8xMV90YmZ0X2VfOVwiLFxuXHRcdFwiaXNSYXRlSW5jZW50aXZpemVkXCI6IGZhbHNlLFxuXHRcdFwibGFzdFBheW1lbnRUaW1lXCI6IG51bGwsXG5cdFx0XCJsYXN0V2FyUGFydGljaXBhdGlvblRpbWVcIjogMTQ5MDE1Mjg2Nyxcblx0XHRcImlkZW50aXR5U3dpdGNoVGltZXNcIjoge30sXG5cdFx0XCJvcGVuT2ZmZXJcIjogbnVsbCxcblx0XHRcInVubG9ja2VkUGxhbmV0c1wiOiBbXG5cdFx0XHRcInBsYW5ldDFcIixcblx0XHRcdFwicGxhbmV0M1wiLFxuXHRcdFx0XCJwbGFuZXQyM1wiLFxuXHRcdFx0XCJwbGFuZXQ2XCIsXG5cdFx0XHRcInBsYW5ldDIxXCJcblx0XHRdLFxuXHRcdFwicmVsb2NhdGlvblN0YXJDb3VudFwiOiAxMSxcblx0XHRcImhvbG9uZXRSZXdhcmRzXCI6IFtcblx0XHRcdFwicmV3YXJkX2t1YmF6NF9lX2x0clwiLFxuXHRcdFx0XCJyZXdhcmRfdW5kZWFkX3NhbXBsZV9lX2x0cjJcIixcblx0XHRcdFwicmV3YXJkX3NlY3VyaXR5RHJvaWRfZV9sdHJcIixcblx0XHRcdFwicmV3YXJkX2hvdmVydGFua19lX2x0clwiLFxuXHRcdFx0XCJyZXdhcmRfYXRtb3NNaWdfZV9sdHJcIixcblx0XHRcdFwicmV3YXJkX2Rlc0Jpb21lX2VfbHRyXCIsXG5cdFx0XHRcInJld2FyZF9mb3JCaW9tZV9lX2x0clwiXG5cdFx0XSxcblx0XHRcInBsYXllck9iamVjdGl2ZXNcIjoge1xuXHRcdFx0XCJwbGFuZXQxXCI6IHtcblx0XHRcdFx0XCJncm91cElkXCI6IFwib2JqX3RhdG9vaW5lX3NlcmllczEwXzlcIixcblx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ5MDM0MjQwMCxcblx0XHRcdFx0XCJncmFjZVRpbWVcIjogMTQ5MDQyNTIwMCxcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTA0Mjg4MDAsXG5cdFx0XHRcdFwicHJvZ3Jlc3NcIjogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2RlcGxveV90eXBlX2hlcm9fZWFzeV9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDgsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAyLFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kb25hdGVfc29jaWFsX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogOCxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDM0LFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kZXN0cm95X3RhY3RpY2FsY29tbWFuZF9oYXJkX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogOCxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDIsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRcInBsYW5ldDhcIjoge1xuXHRcdFx0XHRcImdyb3VwSWRcIjogXCJvYmpfZm9yZXN0T3BzX3lhdmluXzIzXCIsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0OTAzNDI0MDAsXG5cdFx0XHRcdFwiZ3JhY2VUaW1lXCI6IDE0OTA0MjUyMDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwNDI4ODAwLFxuXHRcdFx0XHRcInByb2dyZXNzXCI6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial90cmFpbl9oZXJvYXRhdF9lYXN5X2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogOCxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDIsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2RvbmF0ZV9zb2NpYWxfZVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA4LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAwLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogMzQsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2ZvcmVzdE9wc19kZXN0cm95X3N0YXJwb3J0X2hhcmRfZVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA4LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAwLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogNixcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0fSxcblx0XHRcdFwicGxhbmV0MjNcIjoge1xuXHRcdFx0XHRcImdyb3VwSWRcIjogXCJvYmpfdGZhX3NlcmllczEwXzlcIixcblx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ5MDM0MjQwMCxcblx0XHRcdFx0XCJncmFjZVRpbWVcIjogMTQ5MDQyNTIwMCxcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTA0Mjg4MDAsXG5cdFx0XHRcdFwicHJvZ3Jlc3NcIjogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2RlcGxveV90aWVkZWZlbmRlcl9lYXN5X2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogOCxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDQsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX3JlY2VpdmVfc29jaWFsX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogOCxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDM0LFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kZXBsb3lfdHlwZV9oZXJvX2hhcmRfZVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA4LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAwLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogNCxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0fSxcblx0XHRcdFwicGxhbmV0MjFcIjoge1xuXHRcdFx0XHRcImdyb3VwSWRcIjogXCJvYmpfaG90aF9zZXJpZXMxMF85XCIsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0OTAzNDI0MDAsXG5cdFx0XHRcdFwiZ3JhY2VUaW1lXCI6IDE0OTA0MjUyMDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwNDI4ODAwLFxuXHRcdFx0XHRcInByb2dyZXNzXCI6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9sb290X2NvbnRyYWJhbmRfZWFzeVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA4LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAwLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogMTAwMCxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZG9uYXRlX3NvY2lhbF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDgsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAzNCxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfdHJhaW5fZW1waXJldHdpbGVraW5jaW5lcmF0b3JfaGFyZF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDgsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAxMyxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0fSxcblx0XHRcdFwicGxhbmV0M1wiOiB7XG5cdFx0XHRcdFwiZ3JvdXBJZFwiOiBcIm9ial9kYW5kb3Jhbl9zZXJpZXMxMF85XCIsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0OTAzNDI0MDAsXG5cdFx0XHRcdFwiZ3JhY2VUaW1lXCI6IDE0OTA0MjUyMDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwNDI4ODAwLFxuXHRcdFx0XHRcInByb2dyZXNzXCI6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kZXBsb3lfYXRtcF9lYXN5X2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogOCxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDMsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX3JlY2VpdmVfc29jaWFsX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogOCxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDM0LFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kZXBsb3lfaGVyb2NyaW1zb25ndWFyZF9oYXJkX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogOCxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDMsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRcInBsYW5ldDZcIjoge1xuXHRcdFx0XHRcImdyb3VwSWRcIjogXCJvYmpfZXJraXRfc2VyaWVzMTBfOVwiLFxuXHRcdFx0XHRcInN0YXJ0VGltZVwiOiAxNDkwMzQyNDAwLFxuXHRcdFx0XHRcImdyYWNlVGltZVwiOiAxNDkwNDI1MjAwLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDQyODgwMCxcblx0XHRcdFx0XCJwcm9ncmVzc1wiOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZGVwbG95X3NuaXBlcl9lYXN5X2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogOCxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDYsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX3JlY2VpdmVfc29jaWFsX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogOCxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMzQsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAzNCxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJjb21wbGV0ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kZXN0cm95X2NvbnRyYWJhbmRnZW5lcmF0b3JfaGFyZF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDgsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiA0LFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImxhc3RPYmplY3RpdmVDaGVja1RpbWVcIjogMTQ5MDM3OTU5NCxcblx0XHRcInJhaWRzXCI6IHtcblx0XHRcdFwicGxhbmV0MVwiOiB7XG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcdFwicmFpZElkXCI6IFwicmFpZF9UYXRvb2luZTFcIixcblx0XHRcdFx0XCJyYWlkUG9vbElkXCI6IFwicmFpZHBvb2xfZGVzQmlvbWVfaHE4X2VcIixcblx0XHRcdFx0XCJyYWlkTWlzc2lvbklkXCI6IFwicmFpZF9kZXNCaW9tZV9lX2hxOF8xXCIsXG5cdFx0XHRcdFwicmV0cmllZFwiOiBudWxsLFxuXHRcdFx0XHRcInN0YXJ0VGltZVwiOiAxNDg5NjQwNDAwLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XCJsYXN0UmFpZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwibGFzdFJhaWRJZFwiOiBcInJhaWRfVGF0b29pbmUyXCIsXG5cdFx0XHRcdFwibGFzdFJhaWRQb29sSWRcIjogXCJyYWlkcG9vbF90YXRfaHE3X2VcIixcblx0XHRcdFx0XCJsYXN0UmFpZE1pc3Npb25JZFwiOiBcInJhaWRfdGF0X2VfaHE3XzFcIixcblx0XHRcdFx0XCJuZXh0UmFpZFN0YXJ0VGltZVwiOiAxNDg5NjgzNjAwXG5cdFx0XHR9LFxuXHRcdFx0XCJwbGFuZXQzXCI6IHtcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDNcIixcblx0XHRcdFx0XCJyYWlkSWRcIjogXCJyYWlkX0RhbmRvcmFuMVwiLFxuXHRcdFx0XHRcInJhaWRQb29sSWRcIjogXCJyYWlkcG9vbF9nZW5faHE3X2VcIixcblx0XHRcdFx0XCJyYWlkTWlzc2lvbklkXCI6IFwicmFpZF9nZW5fZV9ocTdfMVwiLFxuXHRcdFx0XHRcInJldHJpZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0ODgwODUyMDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiBudWxsLFxuXHRcdFx0XHRcImxhc3RSYWlkU3RhcnNcIjogMixcblx0XHRcdFx0XCJsYXN0UmFpZElkXCI6IFwicmFpZF9EYW5kb3JhbjJcIixcblx0XHRcdFx0XCJsYXN0UmFpZFBvb2xJZFwiOiBcInJhaWRwb29sX2dlbl9ocTdfZVwiLFxuXHRcdFx0XHRcImxhc3RSYWlkTWlzc2lvbklkXCI6IFwicmFpZF9nZW5fZV9ocTdfM1wiLFxuXHRcdFx0XHRcIm5leHRSYWlkU3RhcnRUaW1lXCI6IDE0ODgxMjg0MDBcblx0XHRcdH0sXG5cdFx0XHRcInBsYW5ldDIzXCI6IHtcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDIzXCIsXG5cdFx0XHRcdFwicmFpZElkXCI6IFwicmFpZF9UYWtvZGFuYTFcIixcblx0XHRcdFx0XCJyYWlkUG9vbElkXCI6IFwicmFpZHBvb2xfZ2VuX2hxN19lXCIsXG5cdFx0XHRcdFwicmFpZE1pc3Npb25JZFwiOiBcInJhaWRfZ2VuX2VfaHE3XzNcIixcblx0XHRcdFx0XCJyZXRyaWVkXCI6IG51bGwsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0ODQ3MTU2MDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiBudWxsLFxuXHRcdFx0XHRcImxhc3RSYWlkU3RhcnNcIjogMSxcblx0XHRcdFx0XCJsYXN0UmFpZElkXCI6IFwicmFpZF9UYWtvZGFuYTFcIixcblx0XHRcdFx0XCJsYXN0UmFpZFBvb2xJZFwiOiBcInJhaWRwb29sX2dlbl9ocTdfZVwiLFxuXHRcdFx0XHRcImxhc3RSYWlkTWlzc2lvbklkXCI6IFwicmFpZF9nZW5fZV9ocTdfMVwiLFxuXHRcdFx0XHRcIm5leHRSYWlkU3RhcnRUaW1lXCI6IDE0ODQ3NTg4MDBcblx0XHRcdH0sXG5cdFx0XHRcInBsYW5ldDZcIjoge1xuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0NlwiLFxuXHRcdFx0XHRcInJhaWRJZFwiOiBcInJhaWRfRXJraXQxXCIsXG5cdFx0XHRcdFwicmFpZFBvb2xJZFwiOiBcInJhaWRwb29sX2Rlc0Jpb21lX2hxOF9lXCIsXG5cdFx0XHRcdFwicmFpZE1pc3Npb25JZFwiOiBcInJhaWRfZGVzQmlvbWVfZV9ocThfMVwiLFxuXHRcdFx0XHRcInJldHJpZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0OTA0MTgwMDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiBudWxsLFxuXHRcdFx0XHRcImxhc3RSYWlkU3RhcnNcIjogMixcblx0XHRcdFx0XCJsYXN0UmFpZElkXCI6IFwicmFpZF9FcmtpdDJcIixcblx0XHRcdFx0XCJsYXN0UmFpZFBvb2xJZFwiOiBcInJhaWRwb29sX2Rlc0Jpb21lX2hxOF9lXCIsXG5cdFx0XHRcdFwibGFzdFJhaWRNaXNzaW9uSWRcIjogXCJyYWlkX2Rlc0Jpb21lX2VfaHE4XzNcIixcblx0XHRcdFx0XCJuZXh0UmFpZFN0YXJ0VGltZVwiOiAxNDkwNDYxMjAwXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInBlcmtzSW5mb1wiOiB7XG5cdFx0XHRcInBlcmtzXCI6IHtcblx0XHRcdFx0XCJhY3RpdmF0ZWRQZXJrc1wiOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJwZXJrSWRcIjogXCJwZXJrX0RudEFtdF9EbnRUNVwiLFxuXHRcdFx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ5MDEwNDQyNixcblx0XHRcdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMTQ3NjI2XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInBlcmtJZFwiOiBcInBlcmtfR0NyZF9HQ29uNFwiLFxuXHRcdFx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ5MDExNjIxMSxcblx0XHRcdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMTU5NDExXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInBlcmtJZFwiOiBcInBlcmtfQ0Jhcl9DRmFjNlwiLFxuXHRcdFx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ5MDE2Nzc4NSxcblx0XHRcdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMjEwOTg1XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImNvb2xkb3duc1wiOiB7XG5cdFx0XHRcdFx0XCJEbnRBbXRfRG50VFwiOiAxNDkwMjA1MjI2LFxuXHRcdFx0XHRcdFwiR0NyZF9HQ29uXCI6IDE0OTAyMTcwMTEsXG5cdFx0XHRcdFx0XCJDQmFyX0NGYWNcIjogMTQ5MDI2ODU4NVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImhhc0FjdGl2YXRlZEZpcnN0UGVya1wiOiB0cnVlXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImFybW9yeUluZm9cIjoge1xuXHRcdFx0XCJmaXJzdENyYXRlUHVyY2hhc2VkXCI6IHRydWVcblx0XHR9LFxuXHRcdFwiYWN0aXZlQXJtb3J5XCI6IHtcblx0XHRcdFwiZXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXREYW1hZ2U2XCIsXG5cdFx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoNlwiLFxuXHRcdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZTZcIixcblx0XHRcdFx0XCJlcXBFbXBpcmVXYWxsSGVhbHRoN1wiLFxuXHRcdFx0XHRcImVxcEVtcGlyZUhRSGVhbHRoN1wiLFxuXHRcdFx0XHRcImVxcEVtcGlyZUNyZWRpdEdlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XSxcblx0XHRcdFwiY2FwYWNpdHlcIjogNDRcblx0XHR9LFxuXHRcdFwic2hhcmRzXCI6IHtcblx0XHRcdFwiZXFwRW1waXJlSFFIZWFsdGhcIjogNDkwLFxuXHRcdFx0XCJlcXBFbXBpcmVQZW50YWdvblRyb29wZXJcIjogMjcsXG5cdFx0XHRcImVxcEVtcGlyZVdhbGxIZWFsdGhcIjogOTYxLFxuXHRcdFx0XCJlcXBFbXBpcmVSYXBpZEZpcmVUdXJyZXREYW1hZ2VcIjogMzQsXG5cdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldERhbWFnZVwiOiAzNixcblx0XHRcdFwiZXFwRW1waXJlUmFwaWRGaXJlVHVycmV0SGVhbHRoXCI6IDc0LFxuXHRcdFx0XCJlcXBFbXBpcmVBcmN0aWNBVE1QXCI6IDMsXG5cdFx0XHRcImVxcEVtcGlyZU1vcnRhclR1cnJldEhlYWx0aFwiOiA4NSxcblx0XHRcdFwiZXFwRW1waXJlUGVudGFnb25IZWF2eVRyb29wZXJcIjogMTYsXG5cdFx0XHRcImVxcEVtcGlyZUhlYXZ5U25vd3Ryb29wZXJcIjogMTksXG5cdFx0XHRcImVxcEVtcGlyZVNub3d0cm9vcGVyXCI6IDUsXG5cdFx0XHRcInNocmRfc3BlY2lhbEF0dGFja1RpZUFkdmFuY2VkXCI6IDMwLFxuXHRcdFx0XCJlcXBFbXBpcmVDYXJnb0dyZWF0RGFuZVwiOiA0LFxuXHRcdFx0XCJzaHJkX3Ryb29wU2hvY2tcIjogMjMsXG5cdFx0XHRcImVxcEVtcGlyZU1hdGVyaWFsc0dlbmVyYXRvckhlYWx0aFwiOiA0NTAsXG5cdFx0XHRcImVxcEVtcGlyZUNvbnRyYWJhbmRHZW5lcmF0b3JIZWFsdGhcIjogNDgyLFxuXHRcdFx0XCJlcXBFbXBpcmVCdXJzdFR1cnJldERhbWFnZVwiOiAzNixcblx0XHRcdFwiZXFwRW1waXJlQ3JlZGl0R2VuZXJhdG9ySGVhbHRoXCI6IDgwLFxuXHRcdFx0XCJzaHJkX3Ryb29wU2VjdXJpdHlEcm9pZFwiOiAxMyxcblx0XHRcdFwic2hyZF9zcGVjaWFsQXR0YWNrQXRtb3NNaWdcIjogMTMsXG5cdFx0XHRcImVxcEVtcGlyZUFyY3RpY01IQ1wiOiA4LFxuXHRcdFx0XCJlcXBFbXBpcmVCdXJzdFR1cnJldEhlYWx0aFwiOiAyNCxcblx0XHRcdFwiZXFwRW1waXJlQXJjdGljSU5UNFwiOiA4LFxuXHRcdFx0XCJlcXBFbXBpcmVIb3ZlcnRhbmtcIjogNyxcblx0XHRcdFwiZXFwRW1waXJlU2FuZHRyb29wZXJcIjogMTQsXG5cdFx0XHRcInNocmRfdHJvb3BFbXBpcmVKb2hoYXJcIjogMixcblx0XHRcdFwiZXFwRW1waXJlSGVhdnlTYW5kdHJvb3BlclwiOiAxMFxuXHRcdH0sXG5cdFx0XCJ0cm9vcERvbmF0aW9uUHJvZ3Jlc3NcIjoge1xuXHRcdFx0XCJkb25hdGlvbkNvdW50XCI6IDcsXG5cdFx0XHRcImxhc3RUcmFja2VkRG9uYXRpb25UaW1lXCI6IDE0OTAzNzk2MzQsXG5cdFx0XHRcInJlcERvbmF0aW9uQ29vbGRvd25FbmRUaW1lXCI6IDE0OTA0MjUyMDBcblx0XHR9LFxuXHRcdFwicHVyY2hhc2VkQ3JhdGVzXCI6IFtdXG5cdH0sXG5cdFwic2NhbGFyc1wiOiB7XG5cdFx0XCJhdHRhY2tzTG9zdFwiOiAzMzUsXG5cdFx0XCJhdHRhY2tzV29uXCI6IDE0MTAsXG5cdFx0XCJkZWZlbnNlc0xvc3RcIjogNDMyLFxuXHRcdFwiZGVmZW5zZXNXb25cIjogMTU0LFxuXHRcdFwiYXR0YWNrc1N0YXJ0ZWRcIjogMTc0OCxcblx0XHRcImF0dGFja3NDb21wbGV0ZWRcIjogMTc0NSxcblx0XHRcImF0dGFja1JhdGluZ1wiOiA1ODgzLFxuXHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTQxLFxuXHRcdFwieHBcIjogMCxcblx0XHRcIk5GMTIxOVwiOiAxXG5cdH0sXG5cdFwibmFtZVwiOiBcIjJ0ZWUyXCJcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9kYXRhLzc3OWEzMzVlLTcyMTYtMTFlNi04YjU4LTA2MDMzYzAwNGY3N0AxNDkwMzg2MTkyLmpzb25cbi8vIG1vZHVsZSBpZCA9IDEwNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IHtcblx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcInBsYXllck1vZGVsXCI6IHtcblx0XHRcImd1aWxkSW5mb1wiOiB7XG5cdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XCJpY29uXCI6IFwiU3F1YWRTeW1ib2xzXzExXCIsXG5cdFx0XHRcImpvaW5EYXRlXCI6IDE0ODQxNzk1MzEsXG5cdFx0XHRcInBsYXllckhhc091dHN0YW5kaW5nSm9pblJlcXVlc3RcIjogZmFsc2Vcblx0XHR9LFxuXHRcdFwidXBncmFkZXNcIjoge1xuXHRcdFx0XCJ0cm9vcFwiOiB7XG5cdFx0XHRcdFwiU3Rvcm1cIjogNSxcblx0XHRcdFx0XCJBVFNUXCI6IDQsXG5cdFx0XHRcdFwiRGFya1wiOiA1LFxuXHRcdFx0XHRcIkVtcGlyZVNwZWVkZXJcIjogNCxcblx0XHRcdFx0XCJTY291dFwiOiA0LFxuXHRcdFx0XHRcIjJNVGFua1wiOiA0LFxuXHRcdFx0XHRcIkhlcm9BVFNUXCI6IDUsXG5cdFx0XHRcdFwiSGVyb0FUTVBcIjogNSxcblx0XHRcdFx0XCJEZXdiYWNrXCI6IDQsXG5cdFx0XHRcdFwiQVRNUFwiOiA0LFxuXHRcdFx0XHRcIkhlcm9Dcmltc29uR3VhcmRcIjogNFxuXHRcdFx0fSxcblx0XHRcdFwic3BlY2lhbEF0dGFja1wiOiB7XG5cdFx0XHRcdFwiVGllRmlnaHRlclwiOiAzXG5cdFx0XHR9LFxuXHRcdFx0XCJidWlsZGluZ1wiOiB7fSxcblx0XHRcdFwiZXF1aXBtZW50XCI6IHt9XG5cdFx0fSxcblx0XHRcInByaXplc1wiOiB7XG5cdFx0XHRcInRyb29wXCI6IHtcblx0XHRcdFx0XCJTZWN1cml0eURyb2lkXCI6IDI4LFxuXHRcdFx0XHRcIlNob2NrXCI6IDIzLFxuXHRcdFx0XHRcIkVtcGlyZUhvdmVydGFua1NhbXBsZVwiOiAxLFxuXHRcdFx0XHRcIlRlY2huaWNpYW5cIjogMTAsXG5cdFx0XHRcdFwiQVRNUFwiOiA0LFxuXHRcdFx0XHRcIkFUQVRcIjogMyxcblx0XHRcdFx0XCJFbXBpcmVTcGVlZGVyXCI6IDEwLFxuXHRcdFx0XHRcIlNjb3V0XCI6IDExLFxuXHRcdFx0XHRcIkhlcm9BVEFUXCI6IDMsXG5cdFx0XHRcdFwiMk1UYW5rXCI6IDQsXG5cdFx0XHRcdFwiSGVyb0FUU1RcIjogNSxcblx0XHRcdFx0XCJQcm9iZURyb2lkXCI6IDUsXG5cdFx0XHRcdFwiS3ViYXpJbnZhZGVyXCI6IDMsXG5cdFx0XHRcdFwiSGVhdnlTdG9ybVwiOiA1LFxuXHRcdFx0XHRcIkVtcGlyZVRvZ25hdGhcIjogMyxcblx0XHRcdFx0XCJIZXJvQVRNUFwiOiAxXG5cdFx0XHR9LFxuXHRcdFx0XCJzcGVjaWFsQXR0YWNrXCI6IHtcblx0XHRcdFx0XCJBdG1vc01pZ1wiOiAxLFxuXHRcdFx0XHRcIlRpZUFkdmFuY2VkXCI6IDFcblx0XHRcdH0sXG5cdFx0XHRcInJlc291cmNlc1wiOiB7fSxcblx0XHRcdFwiY3JhdGVzXCI6IHtcblx0XHRcdFx0XCJhdmFpbGFibGVcIjoge30sXG5cdFx0XHRcdFwiaW5Qcm9ncmVzc1wiOiB7fSxcblx0XHRcdFx0XCJuZXh0XCI6IDExOSxcblx0XHRcdFx0XCJuZXh0RGFpbHlDcmF0ZVRpbWVcIjogMTQ5MDA5NDAwMCxcblx0XHRcdFx0XCJuZXh0SG9sb25ldFRpbWVcIjogMTQ4ODEyNDQ2MFxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJkb25hdGVkVHJvb3BzXCI6IHt9LFxuXHRcdFwiYnVpbGRpbmdzVW5kZXJDb25zdHJ1Y3Rpb25cIjogW1xuXHRcdFx0XCJibGRfMTM4XCIsXG5cdFx0XHRcImJsZF8xMzlcIixcblx0XHRcdFwiYmxkXzI0XCIsXG5cdFx0XHRcImJsZF8yNVwiXG5cdFx0XSxcblx0XHRcIm1hcFwiOiB7XG5cdFx0XHRcIm5leHRcIjogMTcwLFxuXHRcdFx0XCJwbGFuZXRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcImJ1aWxkaW5nc1wiOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0yLFxuXHRcdFx0XHRcdFwielwiOiAtMixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUhRNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yNVwiLFxuXHRcdFx0XHRcdFwieFwiOiAxNixcblx0XHRcdFx0XHRcInpcIjogMTYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVTdGFycG9ydDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNTlcIixcblx0XHRcdFx0XHRcInhcIjogMTYsXG5cdFx0XHRcdFx0XCJ6XCI6IDEwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlU3RhcnBvcnQ0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzI2XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDIwLFxuXHRcdFx0XHRcdFwielwiOiAtMjEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVEcm9pZEh1dDFcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTE4XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0yMSxcblx0XHRcdFx0XHRcInpcIjogMTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVTY291dFRvd2VyMVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF81MlwiLFxuXHRcdFx0XHRcdFwieFwiOiAyLFxuXHRcdFx0XHRcdFwielwiOiAtNyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVJhcGlkRmlyZVR1cnJldDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTAzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDAsXG5cdFx0XHRcdFx0XCJ6XCI6IC03LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUm9ja2V0VHVycmV0NFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF83NlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMixcblx0XHRcdFx0XHRcInpcIjogLTcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVNb3J0YXI0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEwNFwiLFxuXHRcdFx0XHRcdFwieFwiOiAwLFxuXHRcdFx0XHRcdFwielwiOiA2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUm9ja2V0VHVycmV0NFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF83NVwiLFxuXHRcdFx0XHRcdFwieFwiOiAyLFxuXHRcdFx0XHRcdFwielwiOiA2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTW9ydGFyNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF81NFwiLFxuXHRcdFx0XHRcdFwieFwiOiAwLFxuXHRcdFx0XHRcdFwielwiOiAtNSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU1hdGVyaWFsc1N0b3JhZ2U1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzg5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0zLFxuXHRcdFx0XHRcdFwielwiOiAtNSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZU1hdGVyaWFsc1N0b3JhZ2U1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzc3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDEsXG5cdFx0XHRcdFx0XCJ6XCI6IDMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVDcmVkaXRTdG9yYWdlNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yM1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtMixcblx0XHRcdFx0XHRcInpcIjogMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNyZWRpdFN0b3JhZ2U1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExN1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtNSxcblx0XHRcdFx0XHRcInpcIjogLTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVTaGllbGRHZW5lcmF0b3I0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzk4XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlU2hpZWxkR2VuZXJhdG9yNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNDJcIixcblx0XHRcdFx0XHRcInhcIjogLTUsXG5cdFx0XHRcdFx0XCJ6XCI6IDIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVCdXJzdFR1cnJldDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNzNcIixcblx0XHRcdFx0XHRcInhcIjogLTUsXG5cdFx0XHRcdFx0XCJ6XCI6IC00LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUmFwaWRGaXJlVHVycmV0NFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMlwiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiAzLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlUmFwaWRGaXJlVHVycmV0NFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF83MlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMixcblx0XHRcdFx0XHRcInpcIjogNixcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVJhcGlkRmlyZVR1cnJldDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTQzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IC0zLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQnVyc3RUdXJyZXQ0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExNVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogLTYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xN1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogLTEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE1XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC03LFxuXHRcdFx0XHRcdFwielwiOiAxLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTRcIixcblx0XHRcdFx0XHRcInhcIjogLTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82OVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogNCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExNFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogLTUsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xOVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogLTMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xOFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogLTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogLTQsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xM1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogMyxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzY3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC03LFxuXHRcdFx0XHRcdFwielwiOiA3LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTFcIixcblx0XHRcdFx0XHRcInhcIjogLTcsXG5cdFx0XHRcdFx0XCJ6XCI6IDYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82NlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogLTcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yMVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogNSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzgyXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDMsXG5cdFx0XHRcdFx0XCJ6XCI6IC05LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTQwXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IC05LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTU3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC03LFxuXHRcdFx0XHRcdFwielwiOiAtOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE1NlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNixcblx0XHRcdFx0XHRcInpcIjogLTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNTVcIixcblx0XHRcdFx0XHRcInhcIjogLTUsXG5cdFx0XHRcdFx0XCJ6XCI6IC05LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjRcIixcblx0XHRcdFx0XHRcInhcIjogMSxcblx0XHRcdFx0XHRcInpcIjogLTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF84NlwiLFxuXHRcdFx0XHRcdFwieFwiOiAyLFxuXHRcdFx0XHRcdFwielwiOiAtOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzJcIixcblx0XHRcdFx0XHRcInhcIjogNSxcblx0XHRcdFx0XHRcInpcIjogLTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82MlwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMSxcblx0XHRcdFx0XHRcInpcIjogLTksXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF84NFwiLFxuXHRcdFx0XHRcdFwieFwiOiAwLFxuXHRcdFx0XHRcdFwielwiOiAtOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzYxXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0zLFxuXHRcdFx0XHRcdFwielwiOiAtOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzgzXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC00LFxuXHRcdFx0XHRcdFwielwiOiAtOSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzc5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IC05LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjVcIixcblx0XHRcdFx0XHRcInhcIjogLTIsXG5cdFx0XHRcdFx0XCJ6XCI6IC05LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTYwXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC03LFxuXHRcdFx0XHRcdFwielwiOiAtOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzlcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogLTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF84XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IC0xLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfN1wiLFxuXHRcdFx0XHRcdFwieFwiOiA2LFxuXHRcdFx0XHRcdFwielwiOiAwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNzBcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogLTcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IDQsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF81XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IDMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMDZcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogLTUsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMTNcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogNSxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExMlwiLFxuXHRcdFx0XHRcdFwieFwiOiA2LFxuXHRcdFx0XHRcdFwielwiOiA2LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNFwiLFxuXHRcdFx0XHRcdFwieFwiOiA2LFxuXHRcdFx0XHRcdFwielwiOiAyLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfM1wiLFxuXHRcdFx0XHRcdFwieFwiOiA2LFxuXHRcdFx0XHRcdFwielwiOiAxLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODVcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogLTQsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82M1wiLFxuXHRcdFx0XHRcdFwieFwiOiA2LFxuXHRcdFx0XHRcdFwielwiOiAtOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEyXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IC02LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTBcIixcblx0XHRcdFx0XHRcInhcIjogNixcblx0XHRcdFx0XHRcInpcIjogLTMsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMTBcIixcblx0XHRcdFx0XHRcInhcIjogMixcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE0MVwiLFxuXHRcdFx0XHRcdFwieFwiOiA0LFxuXHRcdFx0XHRcdFwielwiOiA4LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODFcIixcblx0XHRcdFx0XHRcInhcIjogLTUsXG5cdFx0XHRcdFx0XCJ6XCI6IDgsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF84MFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNCxcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzExMVwiLFxuXHRcdFx0XHRcdFwieFwiOiAzLFxuXHRcdFx0XHRcdFwielwiOiA4LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTA3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0yLFxuXHRcdFx0XHRcdFwielwiOiA4LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNjhcIixcblx0XHRcdFx0XHRcInhcIjogMSxcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEwOVwiLFxuXHRcdFx0XHRcdFwieFwiOiAwLFxuXHRcdFx0XHRcdFwielwiOiA4LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfODhcIixcblx0XHRcdFx0XHRcInhcIjogLTMsXG5cdFx0XHRcdFx0XCJ6XCI6IDgsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF84N1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtNixcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEwOFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMSxcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzc0XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC01LFxuXHRcdFx0XHRcdFwielwiOiA0LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlT2ZmZW5zZUxhYjVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTU0XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDYsXG5cdFx0XHRcdFx0XCJ6XCI6IDcsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVXYWxsNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xNTNcIixcblx0XHRcdFx0XHRcInhcIjogNSxcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE1OVwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVdhbGw0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE1OFwiLFxuXHRcdFx0XHRcdFwieFwiOiA2LFxuXHRcdFx0XHRcdFwielwiOiA4LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlV2FsbDRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTM4XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IC03LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlVHJhcFN0cmlrZUFPRTNcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTM5XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IDYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVUcmFwU3RyaWtlQU9FM1wiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMTZcIixcblx0XHRcdFx0XHRcInhcIjogLTUsXG5cdFx0XHRcdFx0XCJ6XCI6IC03LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlVHJhcFN0cmlrZUdlbmVyaWM0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzkxXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDQsXG5cdFx0XHRcdFx0XCJ6XCI6IC02LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlVHJhcFN0cmlrZUdlbmVyaWM0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzU1XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDgsXG5cdFx0XHRcdFx0XCJ6XCI6IC0yLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlU3F1YWRCdWlsZGluZzRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTM3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDgsXG5cdFx0XHRcdFx0XCJ6XCI6IC02LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlRmxlZXRDb21tYW5kMlwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF85N1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ6XCI6IDEsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVUYWN0aWNhbENvbW1hbmQ0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzEzNlwiLFxuXHRcdFx0XHRcdFwieFwiOiA4LFxuXHRcdFx0XHRcdFwielwiOiAtMTAsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVGYWN0b3J5NFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF82MFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTIsXG5cdFx0XHRcdFx0XCJ6XCI6IC0zLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlRmFjdG9yeTRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xMCxcblx0XHRcdFx0XHRcInpcIjogLTYsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVCYXJyYWNrczRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfNTZcIixcblx0XHRcdFx0XHRcInhcIjogLTEwLFxuXHRcdFx0XHRcdFwielwiOiA1LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQmFycmFja3M0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzcxXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xMCxcblx0XHRcdFx0XHRcInpcIjogOCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUJhcnJhY2tzNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF81M1wiLFxuXHRcdFx0XHRcdFwieFwiOiAtMTAsXG5cdFx0XHRcdFx0XCJ6XCI6IC05LFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzR2VuZXJhdG9yNVwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzMzA4MDEsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiA0MjAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8xMDJcIixcblx0XHRcdFx0XHRcInhcIjogLTEwLFxuXHRcdFx0XHRcdFwielwiOiAtMTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVNYXRlcmlhbHNHZW5lcmF0b3I0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDMzMDgwMSxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDMwMDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzU4XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC03LFxuXHRcdFx0XHRcdFwielwiOiAtMTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVNYXRlcmlhbHNHZW5lcmF0b3I0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDMzMDgwMSxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDMwMDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzkwXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC00LFxuXHRcdFx0XHRcdFwielwiOiAtMTIsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVNYXRlcmlhbHNHZW5lcmF0b3I0XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDMzMDgwMSxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDMwMDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzE0NFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtMSxcblx0XHRcdFx0XHRcInpcIjogLTEyLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlTWF0ZXJpYWxzR2VuZXJhdG9yNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzMzA4MDEsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAzMDAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF83OFwiLFxuXHRcdFx0XHRcdFwieFwiOiAtNyxcblx0XHRcdFx0XHRcInpcIjogMTAsXG5cdFx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVDcmVkaXRHZW5lcmF0b3I1XCIsXG5cdFx0XHRcdFx0XCJsYXN0Q29sbGVjdFRpbWVcIjogMTQ5MDMzMDgwMSxcblx0XHRcdFx0XHRcImN1cnJlbnRTdG9yYWdlXCI6IDQyMDBcblx0XHRcdFx0fSxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdFwia2V5XCI6IFwiYmxkXzU3XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC00LFxuXHRcdFx0XHRcdFwielwiOiAxMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNyZWRpdEdlbmVyYXRvcjVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiAxNDkwMzMwODAxLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogNDIwMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTQ4XCIsXG5cdFx0XHRcdFx0XCJ4XCI6IC0xLFxuXHRcdFx0XHRcdFwielwiOiAxMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNyZWRpdEdlbmVyYXRvcjVcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiAxNDkwMzMwODAxLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogNDIwMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0XCJrZXlcIjogXCJibGRfMTAxXCIsXG5cdFx0XHRcdFx0XCJ4XCI6IDIsXG5cdFx0XHRcdFx0XCJ6XCI6IDEwLFxuXHRcdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQ3JlZGl0R2VuZXJhdG9yNFwiLFxuXHRcdFx0XHRcdFwibGFzdENvbGxlY3RUaW1lXCI6IDE0OTAzMzA4MDEsXG5cdFx0XHRcdFx0XCJjdXJyZW50U3RvcmFnZVwiOiAzMDAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRcImtleVwiOiBcImJsZF8yNFwiLFxuXHRcdFx0XHRcdFwieFwiOiA1LFxuXHRcdFx0XHRcdFwielwiOiAxMCxcblx0XHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZUNyZWRpdEdlbmVyYXRvcjRcIixcblx0XHRcdFx0XHRcImxhc3RDb2xsZWN0VGltZVwiOiAxNDkwMzMwODAxLFxuXHRcdFx0XHRcdFwiY3VycmVudFN0b3JhZ2VcIjogMFxuXHRcdFx0XHR9XG5cdFx0XHRdXG5cdFx0fSxcblx0XHRcImludmVudG9yeVwiOiB7XG5cdFx0XHRcInN0b3JhZ2VcIjoge1xuXHRcdFx0XHRcImNyZWRpdHNcIjoge1xuXHRcdFx0XHRcdFwiYW1vdW50XCI6IDg5OTksXG5cdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAzMDAwMDAsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF0ZXJpYWxzXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiAyNTYwMCxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDMwMDAwMCxcblx0XHRcdFx0XHRcInNjYWxlXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjb250cmFiYW5kXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiAwLFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMCxcblx0XHRcdFx0XHRcInNjYWxlXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJyZXB1dGF0aW9uXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiAxLFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMTQsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY3J5c3RhbHNcIjoge1xuXHRcdFx0XHRcdFwiYW1vdW50XCI6IDIwMyxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IC0xLFxuXHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRyb2lkc1wiOiB7XG5cdFx0XHRcdFx0XCJhbW91bnRcIjogNCxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDUsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwieHBcIjoge1xuXHRcdFx0XHRcdFwiYW1vdW50XCI6IDg3Nixcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IC0xLFxuXHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wXCI6IHtcblx0XHRcdFx0XHRcImFtb3VudFwiOiAwLFxuXHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMjAsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiaGVyb1wiOiB7XG5cdFx0XHRcdFx0XCJhbW91bnRcIjogMCxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDAsXG5cdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2hhbXBpb25cIjoge1xuXHRcdFx0XHRcdFwiYW1vdW50XCI6IDAsXG5cdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAwLFxuXHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0XCJjYXBhY2l0eVwiOiAtMSxcblx0XHRcdFwic3ViU3RvcmFnZVwiOiB7XG5cdFx0XHRcdFwidHJvb3BcIjoge1xuXHRcdFx0XHRcdFwic3RvcmFnZVwiOiB7XG5cdFx0XHRcdFx0XHRcInRyb29wMk1UYW5rNFwiOiB7XG5cdFx0XHRcdFx0XHRcdFwiYW1vdW50XCI6IDEsXG5cdFx0XHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogLTEsXG5cdFx0XHRcdFx0XHRcdFwic2NhbGVcIjogMTBcblx0XHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XHRcInRyb29wQVRNUDRcIjoge1xuXHRcdFx0XHRcdFx0XHRcImFtb3VudFwiOiAxLFxuXHRcdFx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IC0xLFxuXHRcdFx0XHRcdFx0XHRcInNjYWxlXCI6IDE1XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdFx0XCJ0cm9vcFN0b3JtNVwiOiB7XG5cdFx0XHRcdFx0XHRcdFwiYW1vdW50XCI6IDIsXG5cdFx0XHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogLTEsXG5cdFx0XHRcdFx0XHRcdFwic2NhbGVcIjogMVxuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdFwidHJvb3BEYXJrNVwiOiB7XG5cdFx0XHRcdFx0XHRcdFwiYW1vdW50XCI6IDIsXG5cdFx0XHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogLTEsXG5cdFx0XHRcdFx0XHRcdFwic2NhbGVcIjogNFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiA1Mixcblx0XHRcdFx0XHRcInN1YlN0b3JhZ2VcIjoge31cblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrXCI6IHtcblx0XHRcdFx0XHRcInN0b3JhZ2VcIjoge30sXG5cdFx0XHRcdFx0XCJjYXBhY2l0eVwiOiAxMixcblx0XHRcdFx0XHRcInN1YlN0b3JhZ2VcIjoge31cblx0XHRcdFx0fSxcblx0XHRcdFx0XCJoZXJvXCI6IHtcblx0XHRcdFx0XHRcInN0b3JhZ2VcIjoge1xuXHRcdFx0XHRcdFx0XCJ0cm9vcEhlcm9BVFNUNVwiOiB7XG5cdFx0XHRcdFx0XHRcdFwiYW1vdW50XCI6IDEsXG5cdFx0XHRcdFx0XHRcdFwiY2FwYWNpdHlcIjogMSxcblx0XHRcdFx0XHRcdFx0XCJzY2FsZVwiOiAxXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDIsXG5cdFx0XHRcdFx0XCJzdWJTdG9yYWdlXCI6IHt9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2hhbXBpb25cIjoge1xuXHRcdFx0XHRcdFwic3RvcmFnZVwiOiB7fSxcblx0XHRcdFx0XHRcImNhcGFjaXR5XCI6IDAsXG5cdFx0XHRcdFx0XCJzdWJTdG9yYWdlXCI6IHt9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFwiY3VycmVudFF1ZXN0XCI6IFwiXCIsXG5cdFx0XCJwcm90ZWN0ZWRVbnRpbFwiOiAxNDkwMzg4MDg3LFxuXHRcdFwicHJvdGVjdGlvbkZyb21cIjogMTQ5MDMzMDQ4Nyxcblx0XHRcInByb3RlY3Rpb25Db29sZG93blVudGlsXCI6IHt9LFxuXHRcdFwiYmF0dGxlTG9nc1wiOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJhOTgxNDcwOC0wOWUyLTExZTctYjdkYi0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjhjMzVmMjY3LWY4ZWEtMTFlNi05N2VhLTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIm1hZGhhcmVcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjMwZmI1MzViLThkYWItMTFlNi05ODBlLTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiVGhlS29vcFRyb29wXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogODU4LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogODcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJCa2VJSVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNzg5LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0zLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk2MjU2MjMsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyNDQ1OCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTYyMDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI0NDU4LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNjIwMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjExMjIsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjU3MTRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9DaGV3YmFjY2E0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFdvb2tpZTRcIjogMixcblx0XHRcdFx0XHRcInRyb29wTWVkaWM1XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI1XCI6IDksXG5cdFx0XHRcdFx0XCJ0cm9vcFQyQlRhbms0XCI6IDMsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrWFdpbmczXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDcxLFxuXHRcdFx0XHRcInN0YXJzXCI6IDEsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTEsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTIsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjAwZGMwMWY5LTBhMjctMTFlNy05OTlkLTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNWNjMjBjN2YtYzY2Yi0xMWU2LWI5YmItMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiR29vZXlCXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCIyYzY3MDQ4NC1lMzIyLTExZTUtOWIyYy0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImNoZXdiYWNhMi4wXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNDAzOSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDExLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMjgzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiOWZhZGUwMGQtZDg1OS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiQmtlSUlcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNzY2LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTgwMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTY1NDkzOSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMDEyMixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMzA2MlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIxMTIyLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI0MDYyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMTEyMixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyNDA2MlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjZcIjogNixcblx0XHRcdFx0XHRcInRyb29wV29va2llNlwiOiA5LFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzZcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0hhblNvbG82XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDI3LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjFcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0SGVhbHRoMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJjZGQ0NTdiZC0wYWFiLTExZTctOWZjZi0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImFlZjllOTA3LTNlYmUtMTFlNS1iMmJkLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkx1aXMgU2t5d2Fsa2VyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJlMTJiNmZlNS0yOWY3LTExZTYtYjNjMS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkhhcmxhblwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDM5OTEsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAxMSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTIxMixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc2Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04MTEsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTExLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk3MTE5NjEsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMTY5MCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTkzMzhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyNjkwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMDMzOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjAzMzgsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjI2OTBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw1XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhhaWxmaXJlNVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BXb29raWU1XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljNFwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BWYW5ndWFyZDFcIjogNCxcblx0XHRcdFx0XHRcInRyb29wUGF0aGZpbmRlcjVcIjogNixcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjVcIjogOSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0xlaWE0XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BBQVQxNFwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNVwiOiA2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDMwLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDdcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0SGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoN1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXRIZWFsdGg0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJlNzMwZmQ4MS0wYjMxLTExZTctYWFjYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjY1NTQzN2M0LWJlNWUtMTFlNi1iN2RmLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkplZ2hpdCBTdC4gQWxlbVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiMTE5YjQ4YWItYmNiMS0xMWU0LTk4YWQtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJSb2d1ZUV3b2tDYXJuYWdlXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNzcwNCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC02Nyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc2Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04MTgsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTcsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTc2OTYwMixcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIwNTkyLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA3OTUwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMTU5Mixcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogODk1MFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTk3MTAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjE1OTJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQzXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9DaGV3YmFjY2E1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljNVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BXb29raWU0XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI0XCI6IDE3LFxuXHRcdFx0XHRcdFwic3BlY2lhbEF0dGFja1hXaW5nM1wiOiAzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA3Nixcblx0XHRcdFx0XCJzdGFyc1wiOiAyLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDI4LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI5OTEwNmRhYy0wYjk2LTExZTctOWZjZi0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImFjYWU4NWVhLWJlM2QtMTFlNi04ZDViLTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcInRvcnR5XCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJmMTkzMzk2Zi05ZDUwLTExZTUtOTk5Yi0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkNocmlzdGlhbi5KZWRpXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTY1MSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDExLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNTU4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiOWZhZGUwMGQtZDg1OS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiQmtlSUlcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNzY2LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTgyOSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTgxMjgzOCxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxODcxMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxOTcxNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE5NzEwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIwNzE0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxOTcxMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMDcxNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tYV2luZzVcIjogMixcblx0XHRcdFx0XHRcInRyb29wSGVyb0NoZXdiYWNjYTVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wV29va2llNVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BBQVQxNVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BKdWdnZXJuYXV0NVwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNVwiOiAxMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMTAwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDMsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTEsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTQsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbENyZWRpdEdlbmVyYXRvckhlYWx0aDNcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDNcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNFwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI5ODA4NTUzZC0wYzFjLTExZTctOTc4OS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjE5NTdlZmI0LTUxOWMtMTFlNi1iZDQyLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcItCx0LDRgNC80LDQu9C10LlcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjIwY2FiODNiLTgyZmEtMTFlNi1iMTg3LTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiUlVTU0lBTl9SRVZJVkFMXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogOTQzMyxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDExLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTU3OCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc2Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTExLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk4NzAzODYsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxOTAxMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTgyMDhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIwMDEwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxOTIwOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTkyMDgsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjAwMTBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9MZWlhOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzhcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDhcIjogMyxcblx0XHRcdFx0XHRcInRyb29wVmFuZ3VhcmQyXCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI4XCI6IDVcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDMzLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGg1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDhcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsQ3JlZGl0R2VuZXJhdG9ySGVhbHRoM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxTYW5kU29sZGllcjJcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiYjQ0ZmMwNWItMGNhMi0xMWU3LTk5MDItMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJkNzgyODJiZC1jMDc1LTExZTYtYWE3Ny0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJrYW5cIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjVhYmUxZGIwLTk5MjQtMTFlNi04NGQ0LTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiRm9yY2VUdVNlcmFzXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMzk4OCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC05NjMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJCa2VJSVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NjYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtODQzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0zLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk5Mjc5NTYsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjE1MTksXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTYyMDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMTUxOSxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxNjIwMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjQzODgsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjU1Njhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ2XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9DaGV3YmFjY2E2XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFdvb2tpZTZcIjogNCxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFQyQlRhbms1XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI2XCI6IDEwLFxuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVJlYmVsNVwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BNYXJrc21hbjZcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BFbXBpcmVTcGVlZGVyN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BUZWNobmljaWFuN1wiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogNjcsXG5cdFx0XHRcdFwic3RhcnNcIjogMSxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMSxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAyNyxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDVcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEJ1cnN0VHVycmV0RGFtYWdlMlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI1OTljYzhkYi0wY2M0LTExZTctOGQwOC0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc2OSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NDMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJhMzUzMWI0Yi1kOWE2LTExZTYtOGI1My0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJNb2NueVNpZXBhdG9yXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NmZlM2RmYy02NWExLTExZTQtYjMyZS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkdyZWVuXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNDkyLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTE5MSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMyxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDg5OTQyNDM3LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjE5MTYsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDI3NzQ2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMTkxNixcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjc3NDZcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDM0NzMwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyOTE2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTVcIjogMTAsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9BVFNUNFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BEYXJrNVwiOiA4LFxuXHRcdFx0XHRcdFwidHJvb3AyTVRhbms0XCI6IDEsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrVGllRmlnaHRlcjNcIjogM1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEVtcGlyZVNwZWVkZXI3XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogNjEsXG5cdFx0XHRcdFwic3RhcnNcIjogMSxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMSxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxOCxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiMGNlZTY1OGUtMGNjNS0xMWU3LThkMDgtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJCa2VJSVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NTYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAtMTMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NDMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJkNjQ1NzU1NC1jMGY3LTExZTYtYTI1Yi0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCIxa3VidWxhM1wiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiMTY1NjhlODYtZjZkYi0xMWU1LWE1NDYtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJVU0FrbmlnaHRzXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNzU4LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTI0LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDE2LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk5NDI2NTgsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA3NTMwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA3NTMwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxOTQyOCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyOTE5MFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU3Rvcm01XCI6IDcsXG5cdFx0XHRcdFx0XCJ0cm9vcEFUTVA0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcDJNVGFuazRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0NyaW1zb25HdWFyZDRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wRGFyazVcIjogNSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tUaWVGaWdodGVyM1wiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXIxMFwiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyN1wiOiAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMTcsXG5cdFx0XHRcdFwic3RhcnNcIjogMCxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMSxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxNSxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiYjI1YzhkMzctMGNjNS0xMWU3LThkMDgtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJCa2VJSVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NTksXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtODQzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiNjFmNTljOWItYTMwYy0xMWU2LWEyMjUtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwibWFsaWJ1Y29rZVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA3NjgsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNzU4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0zLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk5NDMwMjAsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxODY4NCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjEwNDRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDE4ODY0LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMTIyNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjIwNDQsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTk2ODRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFN0b3JtNVwiOiA5LFxuXHRcdFx0XHRcdFwidHJvb3BEYXJrNVwiOiA2LFxuXHRcdFx0XHRcdFwidHJvb3BEZXdiYWNrNFwiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3AyTVRhbms0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9BVE1QNFwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA5MCxcblx0XHRcdFx0XCJzdGFyc1wiOiAxLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE4LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJkYTM0ZjE3Mi0wY2M2LTExZTctOGQwOC0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImZjZTkxMTVjLWRkOWYtMTFlNi04OTM0LTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcImtpbG96dWx1XCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCIwNDU2MjI5NC0wNmMwLTExZTYtODE3MC0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkh1bmdhcnlTcXVhZFwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDMyODksXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiA3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtOTMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJCa2VJSVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NTksXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtODUwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC03LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0ODk5NDM1MjcsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogODA2NCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxOTc0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogOTA2NCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyOTc0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA5MDY0LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI5NzRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEFUQVA1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9DaGV3YmFjY2E1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFdvb2tpZTZcIjogMyxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM2XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEFBVDE2XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFBhdGhmaW5kZXI2XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw2XCI6IDIsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI1XCI6IDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDk0LFxuXHRcdFx0XHRcInN0YXJzXCI6IDIsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTEsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMjUsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGgzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDFcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiMGU2NjgwMzQtMGQyYy0xMWU3LTlmY2YtMDYwMzNjMDA0Zjc3XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJiNzM2MTNkYi01ODNlLTExZTYtYWI1YS0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJNYXN0ZXIgT2JpLXdhblwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiMjk2ZWQ4NGItZTMxMC0xMWU1LTlhNmItMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJXb29raWUtQ2xhblwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDQxMjUsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiA3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTI4NSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc1OSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NTcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTcsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ4OTk4Njk4Nyxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDE3NTUwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMzM1OFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTg1NTAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE0MzU4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNzUxNixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxODU1MFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSGVyb0NoZXdiYWNjYTdcIjogMSxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM3XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw3XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI2XCI6IDExXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcERld2JhY2s0XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcERhcms1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFN0b3JtNVwiOiAzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogODksXG5cdFx0XHRcdFwic3RhcnNcIjogMixcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMSxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAyNyxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg3XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldERhbWFnZTNcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsUmFwaWRGaXJlVHVycmV0SGVhbHRoM1wiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDcmVkaXRHZW5lcmF0b3JIZWFsdGg2XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbE1hdGVyaWFsc0dlbmVyYXRvckhlYWx0aDdcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiOThlY2M0MDEtMGQ4ZS0xMWU3LWJhMGItMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJCa2VJSVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NDYsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAtMTMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NTcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIyZWUwYzVhMS1lNmFhLTExZTYtYTBkOS0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCLQutC10LzQtdGA0L7QstGB0LrQuNC5XCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJjYmVkNzIwZS1kNGQ0LTExZTYtOTk0Yy0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIklUQS0lNWJGRjAwMDAlNWRXQVJcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA2OTEsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtNTAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMTYsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDAyOTMwOSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI5MDUwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMTMxOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjkwNTAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDExMzE4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAzMzMxOCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAzMjU3MFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU3Rvcm01XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcEFUU1Q0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcERhcms1XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcERld2JhY2s0XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9Dcmltc29uR3VhcmQ0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcDJNVGFuazRcIjogMSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tUaWVGaWdodGVyM1wiOiAzXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA0Nyxcblx0XHRcdFx0XCJzdGFyc1wiOiAwLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE1LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI3MzUwZDE1ZC0wZDhmLTExZTctYmEwYi0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc1Myxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NTcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI1MDFkNTdkZi04ODlhLTExZTYtOTMyZC0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJLaGFuXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI0MWZlODlmMy00NWNkLTExZTQtOTNmYi0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIm91ZXN0XCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNzA4LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTcwNSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtNyxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMDI5NjgwLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjgyMjIsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDM5ODUwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyOTIyMixcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogNDA4NTBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDQ5ODUwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDQyMDQ0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BBVFNUNFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTVcIjogOCxcblx0XHRcdFx0XHRcInRyb29wRGFyazVcIjogMyxcblx0XHRcdFx0XHRcInRyb29wRGV3YmFjazRcIjogNCxcblx0XHRcdFx0XHRcInRyb29wMk1UYW5rNFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQVRTVDVcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogNzgsXG5cdFx0XHRcdFwic3RhcnNcIjogMixcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMSxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxOCxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGg0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGgyXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcImY5ZGE3ZWVlLTBkOGYtMTFlNy1iYTBiLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiOWZhZGUwMGQtZDg1OS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiQmtlSUlcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNzQyLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogLTExLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtODU3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMzFjNTU4OGYtZGE3ZS0xMWU2LTk5NGMtMDZkYzhjMDA0ZmJkXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiZ3JheXdvbGZcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjFiZDczYWE3LTYzNzktMTFlNC1iZTE4LTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiQmF2YXJpYW5Db21tYW5kb1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDEwNzIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMTI1LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDEzLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAwMjk4MzIsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA4NlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogODZcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDEzNjE2LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDU0NDI1XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTVcIjogMyxcblx0XHRcdFx0XHRcInRyb29wMk1UYW5rNFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BEYXJrNVwiOiA2LFxuXHRcdFx0XHRcdFwidHJvb3BIZXJvQVRNUDVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wQVRNUDRcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMjMsXG5cdFx0XHRcdFwic3RhcnNcIjogMCxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMSxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxMyxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsSFFIZWFsdGgxXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcImQ3ZDAzZTk4LTBkOTAtMTFlNy1hYWNhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiOWZhZGUwMGQtZDg1OS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiQmtlSUlcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNzQ5LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogNyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTg1Nyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImY1M2YxNzIxLWQ3NDAtMTFlNi05NWMxLTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJhcnJ5XCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI0NmRlZDlmZS1jNTBiLTExZTUtOGM1Ni0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZyb2dneV9wb3dlclwiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDc3OCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0zNjYsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTcsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDAzMDI2OSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyNjEwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA0ODEyOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDI3MTAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDQ5MTI4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyNzEwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA0OTEyOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wRGFyazVcIjogNSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0NyaW1zb25HdWFyZDRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wQVRNUDRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU3Rvcm01XCI6IDcsXG5cdFx0XHRcdFx0XCJ0cm9vcDJNVGFuazRcIjogMSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tUaWVGaWdodGVyM1wiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI1XCI6IDRcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA3Myxcblx0XHRcdFx0XCJzdGFyc1wiOiAyLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE4LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI4Njk4ZDAxYS0wZDkxLTExZTctYWFjYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc1Nixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NTcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5MmQ0MjU2Ny1iZGY2LTExZTYtYWE3Ny0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJ2YW1waXJlXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogbnVsbCxcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBudWxsLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE0Nyxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0xNDYsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMDMwNTYxLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogOTkzNSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTc5Nzlcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDEwOTM1LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxODk3OVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjQzNTgsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjUwNzBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcFN0b3JtNVwiOiA3LFxuXHRcdFx0XHRcdFwidHJvb3BEYXJrNVwiOiA1LFxuXHRcdFx0XHRcdFwidHJvb3AyTVRhbms0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEFUTVA0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9BVFNUNVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA3NCxcblx0XHRcdFx0XCJzdGFyc1wiOiAyLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE4LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI1MTQzNzBmMi0wZDkyLTExZTctYWFjYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc2Myxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NTcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI2MzAzZjU1My02NjQxLTExZTYtYmVmZS0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJ0aG9yNjRcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBudWxsLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNzI2LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTcyNSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAwMzA5MDIsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA2NDU5LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMDk1MFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNzQ1OSxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTE5NTBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDExOTUwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDc0NTlcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcERhcms1XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcDJNVGFuazRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0FUTVA1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEFUTVA0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFN0b3JtNVwiOiA3XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA5OSxcblx0XHRcdFx0XCJzdGFyc1wiOiAyLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE4LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiMGFmNTQ4ZjgtMGQ5My0xMWU3LTk5MDItMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJCa2VJSVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NzAsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiA3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtODU3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiYWFhM2FmZTAtYTQxNS0xMWU0LWJiZjMtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiY2FwdGFpbiBndW5uZXI0XCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCJhYjcwNzZkZC0yMWNiLTExZTUtYTc0Mi0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkVuZ2xpc2hSZWJlbHNcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxOTcsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAyMjQsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTcsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDAzMTIxNyxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI4OTg4LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyOTQ3OFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjk5ODgsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDMwNDc4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAzNjQ3OCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA1MDk4OFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSGVyb0NyaW1zb25HdWFyZDRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wRGFyazVcIjogNSxcblx0XHRcdFx0XHRcInRyb29wQVRNUDRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wMk1UYW5rNFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BTdG9ybTVcIjogNyxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tUaWVGaWdodGVyM1wiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA1NSxcblx0XHRcdFx0XCJzdGFyc1wiOiAyLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE4LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCJjM2E0ZjI5MC0wZDkzLTExZTctOTkwMi0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc3Myxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NTcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJjZDRjZDZlYS1jOTZhLTExZTYtODFmZi0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJQdWdcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcImMzMjg2ODgzLWJkOTUtMTFlNS05OWY3LTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiTWV0YWxNb3ppbGxhXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTA3NCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC01MTYsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTMsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDAzMTUyNCxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDE2NzYzLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNTY1OFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTY3NjMsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE1NjU4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxODc3NCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAxODMyNlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU3Rvcm01XCI6IDcsXG5cdFx0XHRcdFx0XCJ0cm9vcERhcms1XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcEFUTVA0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcDJNVGFuazRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0FUU1Q1XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDYxLFxuXHRcdFx0XHRcInN0YXJzXCI6IDEsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTEsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTgsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjFlZjMyY2JhLTBkOTktMTFlNy05OTlkLTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiM2QyNThiN2MtNmY3Ny0xMWU1LTk2ZDItMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwic2F3eWVyXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI3MzMxNGIzNi02OTVlLTExZTQtYjMyZS0wNmRjOGMwMDRmYmRcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkNyYWlnZ29yc1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDc4NTcsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiA3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMzgwNSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc3Myxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NjQsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTcsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDAzMzc5NSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA4NjczLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI5MTI4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogOTY3Myxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAzMDEyOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogOTY3Myxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAzMDEyOFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjhcIjogNixcblx0XHRcdFx0XHRcInRyb29wTWVkaWM4XCI6IDMsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlYXZ5UmViZWw3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFZhbmd1YXJkN1wiOiAyLFxuXHRcdFx0XHRcdFwidHJvb3BBQVQxN1wiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BIYWlsZmlyZThcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0NoZXdiYWNjYTdcIjogMVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogOTQsXG5cdFx0XHRcdFwic3RhcnNcIjogMixcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMSxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAzMSxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGgxXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoMVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDcmVkaXRHZW5lcmF0b3JIZWFsdGgxXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcIjg4YTZmMTEzLTBkYWItMTFlNy04ZDA4LTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiOWZhZGUwMGQtZDg1OS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiQmtlSUlcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNzc2LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTg2NCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjk0OGJiNTRhLWYxMjAtMTFlNi05NTI0LTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcInNhZm9cIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjUxZDI3ODExLWE1ODEtMTFlNS05OWY3LTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiSVRBQ09NQkFUVEVOVElcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxMjM4LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTE4Nyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMyxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMDQxNzAzLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogOTc1Nyxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjM4M1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogOTc1Nyxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjM4M1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjU2ODQsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMzcyMDhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9Dcmltc29uR3VhcmQ0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcERhcms1XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcEFUTVA0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcDJNVGFuazRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU3Rvcm01XCI6IDcsXG5cdFx0XHRcdFx0XCJzcGVjaWFsQXR0YWNrVGllRmlnaHRlcjNcIjogM1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcDJNVGFuazRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wRGV3YmFjazRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU3Rvcm01XCI6IDNcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyN1wiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNVwiOiA0LFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNlwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogNTksXG5cdFx0XHRcdFwic3RhcnNcIjogMSxcblx0XHRcdFx0XCJtYW5pZmVzdFZlcnNpb25cIjogMTE3LFxuXHRcdFx0XHRcInBvdGVudGlhbE1lZGFsR2FpblwiOiAxMSxcblx0XHRcdFx0XCJkZWZlbmRlclBvdGVudGlhbE1lZGFsR2FpblwiOiAxMyxcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiM2Y0MDE2ZGYtMGRhYy0xMWU3LThkMDgtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJCa2VJSVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NjEsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAtMTUsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC04NjQsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCIxZmNmMmFjYi01MjA2LTExZTUtYWZkOC0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJrYWthcGVuZ1wiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogbnVsbCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAyNTUsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAzNDUsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMTIsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDA0MjAwNixcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNDQ1Myxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA2MDQ4XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTQ0NTMsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNjA0OFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjIwMTAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjIxNjhcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcERhcms1XCI6IDUsXG5cdFx0XHRcdFx0XCJ0cm9vcDJNVGFuazRcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0FUTVA1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEFUTVA0XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFN0b3JtNVwiOiA3LFxuXHRcdFx0XHRcdFwic3BlY2lhbEF0dGFja1RpZUZpZ2h0ZXIzXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDQ2LFxuXHRcdFx0XHRcInN0YXJzXCI6IDAsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTEsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogNixcblx0XHRcdFx0XCJyZXZlbmdlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJiYXR0bGVWZXJzaW9uXCI6IFwiMjEuMFwiLFxuXHRcdFx0XHRcImNtc1ZlcnNpb25cIjogXCIxODEzMTIyMDI5XCIsXG5cdFx0XHRcdFwic2VydmVyXCI6IGZhbHNlLFxuXHRcdFx0XHRcImF0dGFja2VyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiNDJkMzU5ZWMtMGRhZC0xMWU3LTk5OWQtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI1NGRjMDNjOC1mZGUyLTExZTYtOGJjNS0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJDcmljcmlyZWJlbGxlXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCIzZjE2MTQ5ZS00ZWE1LTExZTUtYTM5Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcInRvdG9ybzcyMjhcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNDIxLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogNyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTUxLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiOWZhZGUwMGQtZDg1OS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiQmtlSUlcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNzYxLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTg3MSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtNyxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMDQyNDg3LFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjE5ODUsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDcxMDdcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyOTg1LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA4MTA3XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA4MTA3LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIyOTg1XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyNlwiOiAyNixcblx0XHRcdFx0XHRcInRyb29wSGVyb0xlaWE2XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljNFwiOiAyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiYXR0YWNrZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImRlZmVuZGVyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJiYXNlRGFtYWdlUGVyY2VudFwiOiA5Myxcblx0XHRcdFx0XCJzdGFyc1wiOiAyLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDE5LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDJcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsQ29udHJhYmFuZEdlbmVyYXRvckhlYWx0aDJcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsQ3JlZGl0R2VuZXJhdG9ySGVhbHRoMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxXYWxsSGVhbHRoMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI1YzFlMDFlOS0wZTEyLTExZTctYjM1ZS0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImM3ODI5YzVlLTk5MTQtMTFlNi1iNWQ0LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcImNhcmJpblwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiZmE0M2UyY2MtZTU4Ni0xMWU2LTlmNmUtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJIYXBweVRvZ2V0aGVyX2tyXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogNzA0Nyxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDExLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtMzMxLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiOWZhZGUwMGQtZDg1OS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiQmtlSUlcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNzYxLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTg4Mixcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTEsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDA4NTg0NSxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDMzNTY0LFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMTA5NFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMzQ1NjQsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIyMDk0XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMjA5NCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAzNDU2NFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDhcIjogNCxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI4XCI6IDE1LFxuXHRcdFx0XHRcdFwidHJvb3BNYXJrc21hbjZcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVyb0xlaWE2XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDMzLFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxNb3J0YXJUdXJyZXREYW1hZ2UzXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGg0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEJ1cnN0VHVycmV0RGFtYWdlM1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI1MDc3ZGRmOC0wZTk4LTExZTctOTIzNi0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcImM2ZjA0NGI2LWVhZTYtMTFlNC05ZmQyLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcInlvbG9cIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBudWxsLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IG51bGwsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTE1MTgsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAxMSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTI3NDMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJCa2VJSVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NjEsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtODkzLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC0xMSxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWlzc2lvbklkXCI6IG51bGwsXG5cdFx0XHRcdFwiYXR0YWNrRGF0ZVwiOiAxNDkwMTQzNDIwLFxuXHRcdFx0XHRcImxvb3RlZFwiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE5OTk2LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDMwMDkyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZWFybmVkXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjA5OTYsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMzEwOTJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtYXhMb290YWJsZVwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIwOTk2LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDMxMDkyXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwidHJvb3BzRXhwZW5kZWRcIjoge1xuXHRcdFx0XHRcdFwidHJvb3BIZWF2eVJlYmVsOFwiOiAxLFxuXHRcdFx0XHRcdFwidHJvb3BNZWRpYzhcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSnVnZ2VybmF1dDlcIjogMSxcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjlcIjogMTVcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDM2LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxNYXRlcmlhbHNHZW5lcmF0b3JIZWFsdGg0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg1XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDb250cmFiYW5kR2VuZXJhdG9ySGVhbHRoNFwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxDcmVkaXRHZW5lcmF0b3JIZWFsdGg0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiYmF0dGxlSWRcIjogXCI2ODc1OTBhMS0wZjFlLTExZTctYWFjYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XCJhdHRhY2tlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjE5MWU5NzFlLWU5MTgtMTFlNS04Y2UzLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIktPTlwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcInJlYmVsXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiYTNiOGViNWEtMzU4Yi0xMWU2LThhNTktMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJLT05cIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAyNzM0LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMTUsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC0yMjE3LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImRlZmVuZGVyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiOWZhZGUwMGQtZDg1OS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiQmtlSUlcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJlbXBpcmVcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCI1NjhjN2U3Yy05ZGRkLTExZTYtYWJlYS0wNmM2NmEwMDRmNzZcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcImZjdWtcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiAxNzYxLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTkwOCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAtMTUsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDIwMTAwOCxcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDI3MzEyLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxOTExNlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjgzMTIsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDIwMTE2XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMDExNixcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyODMxMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wTWVyY2VuYXJ5UmViZWxHYW1vcnJlYW5XYXJyaW9yMlwiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3BTb2xkaWVyN1wiOiAyNFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImF0dGFja2VyR3VpbGRUcm9vcHNFeHBlbmRlZFwiOiB7fSxcblx0XHRcdFx0XCJkZWZlbmRlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiYmFzZURhbWFnZVBlcmNlbnRcIjogMTAwLFxuXHRcdFx0XHRcInN0YXJzXCI6IDMsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTUsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTUsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXRIZWFsdGg0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg1XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcImQ5MTg0OTA1LTBmYTQtMTFlNy1iYjliLTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMGM2ZmEwNzItZGJlMy0xMWU2LTk1YzEtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwiUkFaT1JCQUNLMTNcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjYzN2FhZWYxLWYyNzgtMTFlNS1hMGY0LTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiR29vc2VcIixcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ1wiOiA1MjU5LFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nRGVsdGFcIjogMyxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTkxMCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc2MSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC05MTEsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTMsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nXCI6IDAsXG5cdFx0XHRcdFx0XCJ0b3VybmFtZW50UmF0aW5nRGVsdGFcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1pc3Npb25JZFwiOiBudWxsLFxuXHRcdFx0XHRcImF0dGFja0RhdGVcIjogMTQ5MDI1ODc0Nixcblx0XHRcdFx0XCJsb290ZWRcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxNTYwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMDY0NVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImVhcm5lZFwiOiB7XG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDAsXG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDE1NzgwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIwODI1XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwibWF4TG9vdGFibGVcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxOTQxNCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyNjA5MFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInRyb29wc0V4cGVuZGVkXCI6IHtcblx0XHRcdFx0XHRcInRyb29wU29sZGllcjVcIjogMTksXG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEFBVDE1XCI6IDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDY3LFxuXHRcdFx0XHRcInN0YXJzXCI6IDEsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTEsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMjgsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFdhbGxIZWFsdGg0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFJhcGlkRmlyZVR1cnJldEhlYWx0aDFcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsU2FuZFNvbGRpZXIxXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJkZWZlbmRlckVxdWlwbWVudFwiOiBbXSxcblx0XHRcdFx0XCJwbGFuZXRJZFwiOiBcInBsYW5ldDFcIlxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJiYXR0bGVJZFwiOiBcImE4ZjU3NTkxLTBmZTctMTFlNy04NWUxLTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcImF0dGFja2VyXCI6IHtcblx0XHRcdFx0XHRcInBsYXllcklkXCI6IFwiMzhiMTFkNDctOWQ0ZS0xMWU2LWE1M2UtMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFx0XCJuYW1lXCI6IFwienNhZGFtXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwicmViZWxcIixcblx0XHRcdFx0XHRcImd1aWxkSWRcIjogXCIwMDk3ZWE1Ny1jZDkzLTExZTQtYWRhYy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcImd1aWxkTmFtZVwiOiBcIkpvaW5TdXBlckZvcmNlXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTYyNCxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDcsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC01NDMsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdcIjogMCxcblx0XHRcdFx0XHRcInRvdXJuYW1lbnRSYXRpbmdEZWx0YVwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZGVmZW5kZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCI5ZmFkZTAwZC1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJCa2VJSVwiLFxuXHRcdFx0XHRcdFwiZmFjdGlvblwiOiBcImVtcGlyZVwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjU2OGM3ZTdjLTlkZGQtMTFlNi1hYmVhLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiZmN1a1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NjEsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ1wiOiAtOTE4LFxuXHRcdFx0XHRcdFwiZGVmZW5zZVJhdGluZ0RlbHRhXCI6IC03LFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAyODc0NjYsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTg0MTQsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjQyMDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxOTQxNCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyNTIwMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTk0MTQsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjUyMDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9DaGV3YmFjY2E1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFdvb2tpZTVcIjogMyxcblx0XHRcdFx0XHRcInRyb29wTWVkaWM1XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcFQyQlRhbms1XCI6IDQsXG5cdFx0XHRcdFx0XCJ0cm9vcFNvbGRpZXI2XCI6IDEwLFxuXHRcdFx0XHRcdFwidHJvb3BSZWJlbFNwZWVkZXI0XCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDg5LFxuXHRcdFx0XHRcInN0YXJzXCI6IDIsXG5cdFx0XHRcdFwibWFuaWZlc3RWZXJzaW9uXCI6IDExNyxcblx0XHRcdFx0XCJwb3RlbnRpYWxNZWRhbEdhaW5cIjogMTEsXG5cdFx0XHRcdFwiZGVmZW5kZXJQb3RlbnRpYWxNZWRhbEdhaW5cIjogMTYsXG5cdFx0XHRcdFwicmV2ZW5nZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiYmF0dGxlVmVyc2lvblwiOiBcIjIxLjBcIixcblx0XHRcdFx0XCJjbXNWZXJzaW9uXCI6IFwiMTgxMzEyMjAyOVwiLFxuXHRcdFx0XHRcInNlcnZlclwiOiBmYWxzZSxcblx0XHRcdFx0XCJhdHRhY2tlckVxdWlwbWVudFwiOiBbXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxIUUhlYWx0aDRcIixcblx0XHRcdFx0XHRcImVxcFJlYmVsV2FsbEhlYWx0aDRcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImRlZmVuZGVyRXF1aXBtZW50XCI6IFtdLFxuXHRcdFx0XHRcInBsYW5ldElkXCI6IFwicGxhbmV0MVwiXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcImJhdHRsZUlkXCI6IFwiOTQ2MWI3MzEtMTA0Yy0xMWU3LWE4ZWMtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwiYXR0YWNrZXJcIjoge1xuXHRcdFx0XHRcdFwicGxheWVySWRcIjogXCJjMTE5NjdlNi1iODllLTExZTYtOGU1Yy0wNmNiNDQwMDRmNzlcIixcblx0XHRcdFx0XHRcIm5hbWVcIjogXCJsZXhcIixcblx0XHRcdFx0XHRcImZhY3Rpb25cIjogXCJyZWJlbFwiLFxuXHRcdFx0XHRcdFwiZ3VpbGRJZFwiOiBcIjFiZDczYWE3LTYzNzktMTFlNC1iZTE4LTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcdFwiZ3VpbGROYW1lXCI6IFwiQmF2YXJpYW5Db21tYW5kb1wiLFxuXHRcdFx0XHRcdFwiYXR0YWNrUmF0aW5nXCI6IDMxMTQsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdEZWx0YVwiOiAxMSxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdcIjogLTIwNCxcblx0XHRcdFx0XHRcImRlZmVuc2VSYXRpbmdEZWx0YVwiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJkZWZlbmRlclwiOiB7XG5cdFx0XHRcdFx0XCJwbGF5ZXJJZFwiOiBcIjlmYWRlMDBkLWQ4NTktMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcdFwibmFtZVwiOiBcIkJrZUlJXCIsXG5cdFx0XHRcdFx0XCJmYWN0aW9uXCI6IFwiZW1waXJlXCIsXG5cdFx0XHRcdFx0XCJndWlsZElkXCI6IFwiNTY4YzdlN2MtOWRkZC0xMWU2LWFiZWEtMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFx0XCJndWlsZE5hbWVcIjogXCJmY3VrXCIsXG5cdFx0XHRcdFx0XCJhdHRhY2tSYXRpbmdcIjogMTc2MSxcblx0XHRcdFx0XHRcImF0dGFja1JhdGluZ0RlbHRhXCI6IDAsXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC05MjksXG5cdFx0XHRcdFx0XCJkZWZlbnNlUmF0aW5nRGVsdGFcIjogLTExLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ1wiOiAwLFxuXHRcdFx0XHRcdFwidG91cm5hbWVudFJhdGluZ0RlbHRhXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJtaXNzaW9uSWRcIjogbnVsbCxcblx0XHRcdFx0XCJhdHRhY2tEYXRlXCI6IDE0OTAzMzA4MDEsXG5cdFx0XHRcdFwibG9vdGVkXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTc4NTAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjI2MDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJlYXJuZWRcIjoge1xuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwLFxuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxODg1MCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMzYwMlxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcIm1heExvb3RhYmxlXCI6IHtcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMCxcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTg4NTAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjM2MDJcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJ0cm9vcHNFeHBlbmRlZFwiOiB7XG5cdFx0XHRcdFx0XCJ0cm9vcEp1Z2dlcm5hdXQ3XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcEhlcm9DaGV3YmFjY2E2XCI6IDEsXG5cdFx0XHRcdFx0XCJ0cm9vcE1lZGljNlwiOiAzLFxuXHRcdFx0XHRcdFwidHJvb3BNYXJrc21hbjVcIjogMSxcblx0XHRcdFx0XHRcInRyb29wSGVhdnlSZWJlbDdcIjogNyxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2tYV2luZzZcIjogNSxcblx0XHRcdFx0XHRcInNwZWNpYWxBdHRhY2taOTUxXCI6IDFcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJhdHRhY2tlckd1aWxkVHJvb3BzRXhwZW5kZWRcIjoge30sXG5cdFx0XHRcdFwiZGVmZW5kZXJHdWlsZFRyb29wc0V4cGVuZGVkXCI6IHt9LFxuXHRcdFx0XHRcImJhc2VEYW1hZ2VQZXJjZW50XCI6IDEwMCxcblx0XHRcdFx0XCJzdGFyc1wiOiAzLFxuXHRcdFx0XHRcIm1hbmlmZXN0VmVyc2lvblwiOiAxMTcsXG5cdFx0XHRcdFwicG90ZW50aWFsTWVkYWxHYWluXCI6IDExLFxuXHRcdFx0XHRcImRlZmVuZGVyUG90ZW50aWFsTWVkYWxHYWluXCI6IDI3LFxuXHRcdFx0XHRcInJldmVuZ2VkXCI6IGZhbHNlLFxuXHRcdFx0XHRcImJhdHRsZVZlcnNpb25cIjogXCIyMS4wXCIsXG5cdFx0XHRcdFwiY21zVmVyc2lvblwiOiBcIjE4MTMxMjIwMjlcIixcblx0XHRcdFx0XCJzZXJ2ZXJcIjogZmFsc2UsXG5cdFx0XHRcdFwiYXR0YWNrZXJFcXVpcG1lbnRcIjogW1xuXHRcdFx0XHRcdFwiZXFwUmViZWxSYXBpZEZpcmVUdXJyZXREYW1hZ2UyXCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbEhRSGVhbHRoNVwiLFxuXHRcdFx0XHRcdFwiZXFwUmViZWxNYXRlcmlhbHNHZW5lcmF0b3JIZWFsdGg0XCIsXG5cdFx0XHRcdFx0XCJlcXBSZWJlbFNhbmRTb2xkaWVyMlwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZGVmZW5kZXJFcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCJcblx0XHRcdH1cblx0XHRdLFxuXHRcdFwiY2FtcGFpZ25zXCI6IHtcblx0XHRcdFwiY21wX2Z1ZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wX2Z1ZVwiLFxuXHRcdFx0XHRcInRpbWVab25lXCI6IDAsXG5cdFx0XHRcdFwiY29tcGxldGVkXCI6IHRydWUsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcInN3X2h0aF9vdXRwb3N0c1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwic3dfaHRoX291dHBvc3RzXCIsXG5cdFx0XHRcdFwidGltZVpvbmVcIjogMCxcblx0XHRcdFx0XCJjb21wbGV0ZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IGZhbHNlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfMF9oYl9lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfMF9oYl9lXCIsXG5cdFx0XHRcdFwidGltZVpvbmVcIjogMCxcblx0XHRcdFx0XCJjb21wbGV0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJjb2xsZWN0ZWRcIjogdHJ1ZSxcblx0XHRcdFx0XCJwb2ludHNcIjogMCxcblx0XHRcdFx0XCJpdGVtc1wiOiB7fVxuXHRcdFx0fSxcblx0XHRcdFwiY21wXzFfdXR0c19lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfMV91dHRzX2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiB0cnVlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfMl90c3dfZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wXzJfdHN3X2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiB0cnVlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfM190amdfZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiB0cnVlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfNF9zb3RtX2VcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInRpbWVab25lXCI6IDAsXG5cdFx0XHRcdFwiY29tcGxldGVkXCI6IHRydWUsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcImNtcF81X3RpaF9lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfNV90aWhfZVwiLFxuXHRcdFx0XHRcInRpbWVab25lXCI6IDAsXG5cdFx0XHRcdFwiY29tcGxldGVkXCI6IHRydWUsXG5cdFx0XHRcdFwiY29sbGVjdGVkXCI6IHRydWUsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH0sXG5cdFx0XHRcImNtcF83X2JzX2VcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiB0cnVlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfOF90YXRfZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiB0cnVlLFxuXHRcdFx0XHRcInBvaW50c1wiOiAwLFxuXHRcdFx0XHRcIml0ZW1zXCI6IHt9XG5cdFx0XHR9LFxuXHRcdFx0XCJjbXBfOV9zYXNfZVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY21wXzlfc2FzX2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiB0cnVlLFxuXHRcdFx0XHRcImNvbGxlY3RlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJwb2ludHNcIjogMCxcblx0XHRcdFx0XCJpdGVtc1wiOiB7fVxuXHRcdFx0fSxcblx0XHRcdFwiY21wXzEwX2JnaF9lXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjbXBfMTBfYmdoX2VcIixcblx0XHRcdFx0XCJ0aW1lWm9uZVwiOiAwLFxuXHRcdFx0XHRcImNvbXBsZXRlZFwiOiBmYWxzZSxcblx0XHRcdFx0XCJjb2xsZWN0ZWRcIjogZmFsc2UsXG5cdFx0XHRcdFwicG9pbnRzXCI6IDAsXG5cdFx0XHRcdFwiaXRlbXNcIjoge31cblx0XHRcdH1cblx0XHR9LFxuXHRcdFwibWlzc2lvbnNcIjoge1xuXHRcdFx0XCJmdWVfZGVmZW5kQmFzZU1pc3Npb25fMDBcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImZ1ZV9kZWZlbmRCYXNlTWlzc2lvbl8wMFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wX2Z1ZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNvbXBsZXRlZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJjMmNjMzMxMi1kODU5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIlJldGFpbkhRXCIsXG5cdFx0XHRcdFx0XCJBdm9pZENvbXBsZXRlTG9zc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJmdWVfaW1wSW50cm9CYXNlTWlzc2lvbl8wMFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiZnVlX2ltcEludHJvQmFzZU1pc3Npb25fMDBcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF9mdWVcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDb21wbGV0ZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZmMwNWRiZTAtZDg1OS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiZnVlX3JlYkludHJvQmFzZU1pc3Npb25fMDBcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImZ1ZV9yZWJJbnRyb0Jhc2VNaXNzaW9uXzAwXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfZnVlXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ29tcGxldGVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjI2ZWFmZjQ4LWQ4NWEtMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMDU4LFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDEwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcInN3X2h0aF9vdXRwb3N0X3NfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwic3dfaHRoX291dHBvc3Rfc18xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJzd19odGhfb3V0cG9zdHNcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJEZWZhdWx0XCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMCxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW10sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzBfaGJfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiOWE2NWZjYWQtZDg1YS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzJcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzBfaGJfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiN2U4Y2E5ZDctZDg1Yi0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNTAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveVF1YXJ0ZXJCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfMmFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfMmFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8wX2hiX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjBkMGRhZTY3LWQ4NWMtMTFlNi04MjU1LTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDUwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMV91dHRzX2VfM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzFfdXR0c19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9XYWxsX1QxXzI1XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8xX3V0dHNfZV80XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMV91dHRzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImM0YzQyYjc0LWQ4NWMtMTFlNi04MjU1LTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiUmV0YWluSFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8xX3V0dHNfZV81XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzFfdXR0c19lXzVcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xX3V0dHNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25UMkVtcFN0YXJwb3J0XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfNlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8xX3V0dHNfZV82XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMV91dHRzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImIyMzRmODNmLWQ4NWUtMTFlNi1hNTlmLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95UXVhcnRlckJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8xX3V0dHNfZV83XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzFfdXR0c19lXzdcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xX3V0dHNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd24yRW1wQ3JlR2VuXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMV91dHRzX2VfOVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8xX3V0dHNfZV85XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMV91dHRzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjIyZjQwOTNhLWQ4NWYtMTFlNi1hNTlmLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDUxOCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzFfdXR0c19lXzEwXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzFfdXR0c19lXzEwXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMl90c3dfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd240VHVycmV0c1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzJfdHN3X2VfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8yX3Rzd19lXzFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8yX3Rzd19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJhNmU0OTY0Ny1kODVmLTExZTYtYTU5Zi0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMl90c3dfZV8yXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzJfdHN3X2VfMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzJfdHN3X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duMVQxRW1wRmFjdG9yeVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzJfdHN3X2VfM1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8yX3Rzd19lXzNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8yX3Rzd19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJlYzU3NWQyYS1kODVmLTExZTYtYTU5Zi0wNjBhMzIwMDRmOGNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA1MDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95UXVhcnRlckJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8yX3Rzd19lXzRcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfMl90c3dfZV80XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMl90c3dfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd24yVDJFbXBDcmVkR2VuXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfMl90c3dfZV81XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzJfdHN3X2VfNVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzJfdHN3X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjYxMDBjOGE5LWQ4NjAtMTFlNi04YjUzLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95UXVhcnRlckJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8zX3RqZ19lXzFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfM190amdfZV8xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZTFkNmY1ZDItZDg2MC0xMWU2LThiNTMtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzNfdGpnX2VfMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8zX3RqZ19lXzJcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8zX3RqZ19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bjJUMkVtcEJhcnJhY2tzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfM190amdfZV8zXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzNfdGpnX2VfM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjE2YTY2NjU4LWQ4NjEtMTFlNi04YjUzLTA2ZTZlZTAwNGZiY1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA1MDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lRdWFydGVyQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzNfdGpnX2VfNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8zX3RqZ19lXzRcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8zX3RqZ19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI3OWU3YTQzNi1kODYxLTExZTYtOGI1My0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfM190amdfZV81XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzNfdGpnX2VfNVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duMVQyRW1wTWF0U3RvclwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzNfdGpnX2VfNlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8zX3RqZ19lXzZcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8zX3RqZ19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJjOWVmMDFlMS1kODYxLTExZTYtOGI1My0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfM190amdfZV83XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzNfdGpnX2VfN1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duMlQyRW1wUkZUdXJyZXRzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfM190amdfZV84XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzNfdGpnX2VfOFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzNfdGpnX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjI0MmY2OGJjLWQ4NjItMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95UXVhcnRlckJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF8zX3RqZ19lXzlcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfM190amdfZV85XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25UM0VtcEhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfM190amdfZV8xMFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF8zX3RqZ19lXzEwXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfM190amdfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiYzhiNTBiZGUtZDg2YS0xMWU2LTg3MDUtMDYxYzk4MDA0Zjc4XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIktpbGxfaW5mYW50cnlfdDFfMTBcIixcblx0XHRcdFx0XHRcIktpbGxfVHVza2VuSGVyb190MV8xXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZU1vcnRhcl9UMV8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8yXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDb21wbGV0ZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25fZW1waXJlQmFycmFja3NfVDNfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI4NTFhYmU0MC1kOTFkLTExZTYtOGI1My0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzRcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfNFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI1Y2YzOGNjMi1kOTFlLTExZTYtOGI1My0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzVcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfNVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCIyOTkyODMwMi1kOTFmLTExZTYtOGI1My0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzZcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfNlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI5NGE1ZGJiZC1kOTFmLTExZTYtODcwNS0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfN1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV83XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX3R1cnJldF90MV82XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfOFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV84XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX3dhbGxfdDFfNDBcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV85XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzlcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHtcblx0XHRcdFx0XHRcIlB2cF93aW5fMVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlB2cF93aW5fMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzEwXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzEwXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX3N0YXJwb3J0X3QyXzJcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2FtcF80X3NvdG1fZV8xMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF80X3NvdG1fZV8xMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzRfc290bV9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCIxNTkwMTE2ZS1kOTIxLTExZTYtODcwNS0wNjFjOTgwMDRmNzhcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzEyXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzEyXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImE5MTdlNjVhLWQ5MjItMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNF9zb3RtX2VfMTNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNhbXBfNF9zb3RtX2VfMTNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF80X3NvdG1fZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZjdlZTE3M2MtZDkyMi0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzRfc290bV9lXzE0XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzRfc290bV9lXzE0XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfNF9zb3RtX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcImI3M2Y0YjlmLWQ5MjMtMTFlNi1iNjRjLTA2YTc3ZTAwNGZiYlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDEwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNV90aWhfZV8xXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzVfdGloX2VfMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzVfdGloX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZU1hdGVyaWFsc0dlbmVyYXRvcl90M18zXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNV90aWhfZV8yXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzVfdGloX2VfMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzVfdGloX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZU9mZmVuc2VMYWJfdDFfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfM1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI2Y2Q0ZjdjNy1kYTk0LTExZTYtOGI1My0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyMDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzRcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl8xMl90M193YWxsc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfNVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzVcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI1YjAxY2UwZC1kYjhmLTExZTYtYmE3Yy0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMTAwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjYW1wXzVfdGloX2VfNlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2FtcF81X3RpaF9lXzZcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF81X3RpaF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJiZmE1MGQ2Mi1kYjhmLTExZTYtYmE0NS0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNV90aWhfZV83XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzVfdGloX2VfN1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzVfdGloX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZUNyZWRpdEdlbmVyYXRvcl90M18zXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNhbXBfNV90aWhfZV84XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjYW1wXzVfdGloX2VfOFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzVfdGloX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjVkMzYwMjAxLWRiOTEtMTFlNi1iYTQ1LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjY2ZWY1ZTI1LWRiOTItMTFlNi1iYTQ1LTA2MDMzYzAwNGY3N1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiS2lsbF9pbmZhbnRyeV90MV81XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzJcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzJcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjRmNGM4ODczLWRiOTMtMTFlNi05NWMxLTA2Mzg2NDAwNGY3NVwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyMTAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDIxMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJLaWxsX2luZmFudHJ5X3QxXzEwXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJLaWxsX2luZmFudHJ5X3QxXzVcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl83X2JzX2VfM1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNzc1MWExZGQtZGI5NC0xMWU2LTk1YzEtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl83X2JzX2VfNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfNFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNvbXBsZXRlZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVIUV90NF8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzVcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzVcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjA1YjVkNDczLWRkMGItMTFlNi05OTRjLTA2ZGM4YzAwNGZiZFwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95UXVhcnRlckJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl83X2JzX2VfNlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfNlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25fZW1waXJlVGFjdGljYWxDb21tYW5kX3QxXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl83X2JzX2VfN1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfN1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiODg5ZThhMTYtZGQxMi0xMWU2LThiNTMtMDZlNmVlMDA0ZmJjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV84XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV84XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCJlOGZjNTc5MC1kZDEyLTExZTYtOGI1My0wNmU2ZWUwMDRmYmNcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMjQwMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAyNDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiS2lsbF9pbmZhbnRyeV90MV81XCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95X3JlYmVsVGFjdGljYWxDb21tYW5kX3QxXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl83X2JzX2VfOVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfOVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZjA2N2JjOGYtZTY0OS0xMWU2LTg0MzItMDZjNjZhMDA0Zjc2XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDI2MDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMjYwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIktpbGxfaW5mYW50cnlfdDFfNVwiLFxuXHRcdFx0XHRcdFwiRGVzdHJveV9yZWJlbFRhY3RpY2FsQ29tbWFuZF90MV8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzEwXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV8xMFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMmUxZTY3MDQtZGQyZC0xMWU2LWI3NjktMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMTk0Nixcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJLaWxsX2luZmFudHJ5X3QxXzVcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl83X2JzX2VfMTFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfN19ic19lXzExXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfN19ic19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI2Y2I1NDA0YS1kZDE4LTExZTYtYmE0NS0wNjAzM2MwMDRmNzdcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzEyXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV8xMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25fZW1waXJlT2ZmZW5zZUxhYl90Ml8xXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfN19ic19lXzEzXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzdfYnNfZV8xM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzdfYnNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNvbXBsZXRlZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVUYWN0aWNhbENvbW1hbmRfdDJfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzdfYnNfZV8xNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl83X2JzX2VfMTRcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF83X2JzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjk4OTQ2ODJjLWU2NGEtMTFlNi04NDMyLTA2YzY2YTAwNGY3NlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAyODAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDM4MDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIixcblx0XHRcdFx0XHRcIktpbGxfaW5mYW50cnlfdDFfOFwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzhfdGF0X2VfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl84X3RhdF9lXzFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF84X3RhdF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCIyN2U0ZGE0Mi1kZGQ5LTExZTYtYjY0Yy0wNmE3N2UwMDRmYmJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOF90YXRfZV8yXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzhfdGF0X2VfMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjJmZDM1MjU5LWU2NGMtMTFlNi05YjM3LTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDE5NDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOF90YXRfZV8zXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzhfdGF0X2VfM1wiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX3N0YXJwb3J0X3Q0XzJcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl84X3RhdF9lXzRcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV80XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZjk5ZmI5YmMtZTVkOC0xMWU2LTk2YzgtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl84X3RhdF9lXzVcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV81XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZDY2OTJlNjctZTVkOS0xMWU2LTk2YzgtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDgwMDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogODAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl84X3RhdF9lXzZcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV82XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiYWVhNWVlNGItZTVkYS0xMWU2LTlmNmUtMDYzODY0MDA0Zjc1XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl84X3RhdF9lXzdcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV83XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IG51bGwsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJPd25fYmFycmFja3NfdDRfMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzhfdGF0X2VfOFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl84X3RhdF9lXzhcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF84X3RhdF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI4ZDkzYTFjMS1lNWRiLTExZTYtOWY2ZS0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiA3MDAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzhfdGF0X2VfOVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl84X3RhdF9lXzlcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF84X3RhdF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMyxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI1NWE5YjYzYi1lNWRjLTExZTYtOWY2ZS0wNjM4NjQwMDRmNzVcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHtcblx0XHRcdFx0XHRcImNyZWRpdHNcIjogMCxcblx0XHRcdFx0XHRcIm1hdGVyaWFsc1wiOiAwLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lBbGxCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzhfdGF0X2VfMTBcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOF90YXRfZV8xMFwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzhfdGF0X2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjIzNjFlNTE2LWU1ZGQtMTFlNi05NmM4LTA2OWRhNDAwNGY4YlwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOF90YXRfZV8xMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl84X3RhdF9lXzExXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMDZjYzQ3YTUtZTVkZS0xMWU2LTk2YzgtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl84X3RhdF9lXzEyXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzhfdGF0X2VfMTJcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF84X3RhdF9lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI3NTc3OTQwNS1lNWRlLTExZTYtOTZjOC0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOF90YXRfZV8xM1wiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl84X3RhdF9lXzEzXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOF90YXRfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDEsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZTA4NTQ3NGYtZTVkZS0xMWU2LTk2YzgtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJSZXRhaW5IUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzlfc2FzX2VfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl85X3Nhc19lXzFcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF85X3Nhc19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIk93bl9lbXBpcmVGYWN0b3J5X3Q0XzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl85X3Nhc19lXzJcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOV9zYXNfZV8yXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOV9zYXNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiNmEzYzhmMzAtZTVkZi0xMWU2LTk2YzgtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogOTAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl85X3Nhc19lXzNcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOV9zYXNfZV8zXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOV9zYXNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHtcblx0XHRcdFx0XHRcIlB2cF93aW5fMVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlB2cF93aW5fMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzlfc2FzX2VfNFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl85X3Nhc19lXzRcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF85X3Nhc19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI5NjI2YWExMy1lNWUwLTExZTYtOTZjOC0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOV9zYXNfZV81XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzlfc2FzX2VfNVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzlfc2FzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duX2VtcGlyZUJhcnJhY2tzX3Q0XzNcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl85X3Nhc19lXzZcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOV9zYXNfZV82XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOV9zYXNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiM2JjN2QxMmYtZTY0ZC0xMWU2LTliMzctMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogOTAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl85X3Nhc19lXzdcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOV9zYXNfZV83XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOV9zYXNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAyLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZTQ3MWZkY2YtZTY5NS0xMWU2LTk2YzgtMDY5ZGE0MDA0ZjhiXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogNTMxLFxuXHRcdFx0XHRcdFwiY29udHJhYmFuZFwiOiAwXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiRGVzdHJveUhhbGZCdWlsZGluZ3NcIixcblx0XHRcdFx0XHRcIkRlc3Ryb3lIUVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzlfc2FzX2VfOFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl85X3Nhc19lXzhcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF85X3Nhc19lXCIsXG5cdFx0XHRcdFwic3RhdHVzXCI6IFwiQ2xhaW1lZFwiLFxuXHRcdFx0XHRcImVhcm5lZFN0YXJzXCI6IDMsXG5cdFx0XHRcdFwiY291bnRlcnNcIjoge30sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogXCI4ZGEwMTQwMC1lNjk2LTExZTYtOTZjOC0wNjlkYTQwMDRmOGJcIixcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlJldGFpbkhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOV9zYXNfZV85XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzlfc2FzX2VfOVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzlfc2FzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjg1MDczNDczLWU2OWItMTFlNi1hMGQ5LTA2MWM5ODAwNGY3OFwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA4MDAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDgwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUhRXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfOV9zYXNfZV8xMFwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl85X3Nhc19lXzEwXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfOV9zYXNfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHtcblx0XHRcdFx0XHRcIlB2cF93aW5fMVwiOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiZ29hbHNcIjogMSxcblx0XHRcdFx0XCJsYXN0QmF0dGxlSWRcIjogbnVsbCxcblx0XHRcdFx0XCJsb290UmVtYWluaW5nXCI6IHt9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIlB2cF93aW5fMVwiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzlfc2FzX2VfMTFcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOV9zYXNfZV8xMVwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzlfc2FzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMSxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjBkMmVlOTlhLWU2YTEtMTFlNi04NDNmLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAxMDAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDEwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95SGFsZkJ1aWxkaW5nc1wiXG5cdFx0XHRcdF0sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9LFxuXHRcdFx0XCJjaGFwdGVyXzlfc2FzX2VfMTJcIjoge1xuXHRcdFx0XHRcInVpZFwiOiBcImNoYXB0ZXJfOV9zYXNfZV8xMlwiLFxuXHRcdFx0XHRcImNhbXBhaWduVWlkXCI6IFwiY21wXzlfc2FzX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMixcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjRiMTRlMjRiLTBkOTQtMTFlNy05OTAyLTA2Y2I0NDAwNGY3OVwiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiA3MDAwLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDcwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJEZXN0cm95X3N0b3J5UmViU2hpZWxkR2VuMVwiLFxuXHRcdFx0XHRcdFwiS2lsbF9oZXJvX090b1ZhbnM0XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfMTBfYmdoX2VfMVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMF9iZ2hfZV8xXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTBfYmdoX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duRW1waXJlUm9ja2V0VHVycmV0MV8yXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfMTBfYmdoX2VfMlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMF9iZ2hfZV8yXCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTBfYmdoX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBcIjQwODcyZGQ1LWU2YTItMTFlNi04NDNmLTA2MGEzMjAwNGY4Y1wiLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge1xuXHRcdFx0XHRcdFwiY3JlZGl0c1wiOiAzNzIyLFxuXHRcdFx0XHRcdFwibWF0ZXJpYWxzXCI6IDkwMDAsXG5cdFx0XHRcdFx0XCJjb250cmFiYW5kXCI6IDBcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJzYXRpc2ZpZWRHb2Fsc1wiOiBbXG5cdFx0XHRcdFx0XCJraWxsX2hlcm9fdDFfMVwiLFxuXHRcdFx0XHRcdFwiRGVzdHJveUFsbEJ1aWxkaW5nc1wiLFxuXHRcdFx0XHRcdFwia2lsbF92ZWhpY2xlX3QxXzFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl8xMF9iZ2hfZV8zXCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzEwX2JnaF9lXzNcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xMF9iZ2hfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiMTQxNWY2OGItZTZhMy0xMWU2LTg0M2YtMDYwYTMyMDA0ZjhjXCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDM1NDQsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95SFFcIlxuXHRcdFx0XHRdLFxuXHRcdFx0XHRcImdyaW5kTWlzc2lvblJldHJpZXNcIjogMFxuXHRcdFx0fSxcblx0XHRcdFwiY2hhcHRlcl8xMF9iZ2hfZV80XCI6IHtcblx0XHRcdFx0XCJ1aWRcIjogXCJjaGFwdGVyXzEwX2JnaF9lXzRcIixcblx0XHRcdFx0XCJjYW1wYWlnblVpZFwiOiBcImNtcF8xMF9iZ2hfZVwiLFxuXHRcdFx0XHRcInN0YXR1c1wiOiBcIkNsYWltZWRcIixcblx0XHRcdFx0XCJlYXJuZWRTdGFyc1wiOiAzLFxuXHRcdFx0XHRcImNvdW50ZXJzXCI6IHt9LFxuXHRcdFx0XHRcImdvYWxzXCI6IDMsXG5cdFx0XHRcdFwibGFzdEJhdHRsZUlkXCI6IFwiZjBiYTk1MmUtMGQ5NC0xMWU3LTk5MDItMDZjYjQ0MDA0Zjc5XCIsXG5cdFx0XHRcdFwibG9vdFJlbWFpbmluZ1wiOiB7XG5cdFx0XHRcdFx0XCJjcmVkaXRzXCI6IDgwMDAsXG5cdFx0XHRcdFx0XCJtYXRlcmlhbHNcIjogODAwMCxcblx0XHRcdFx0XHRcImNvbnRyYWJhbmRcIjogMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHRcInNhdGlzZmllZEdvYWxzXCI6IFtcblx0XHRcdFx0XHRcIkRlc3Ryb3lIYWxmQnVpbGRpbmdzXCIsXG5cdFx0XHRcdFx0XCJEZXN0cm95QWxsQnVpbGRpbmdzXCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfMTBfYmdoX2VfNVwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMF9iZ2hfZV81XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTBfYmdoX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJDbGFpbWVkXCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMyxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAxLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW1xuXHRcdFx0XHRcdFwiT3duSFE1XCJcblx0XHRcdFx0XSxcblx0XHRcdFx0XCJncmluZE1pc3Npb25SZXRyaWVzXCI6IDBcblx0XHRcdH0sXG5cdFx0XHRcImNoYXB0ZXJfMTBfYmdoX2VfNlwiOiB7XG5cdFx0XHRcdFwidWlkXCI6IFwiY2hhcHRlcl8xMF9iZ2hfZV82XCIsXG5cdFx0XHRcdFwiY2FtcGFpZ25VaWRcIjogXCJjbXBfMTBfYmdoX2VcIixcblx0XHRcdFx0XCJzdGF0dXNcIjogXCJEZWZhdWx0XCIsXG5cdFx0XHRcdFwiZWFybmVkU3RhcnNcIjogMCxcblx0XHRcdFx0XCJjb3VudGVyc1wiOiB7fSxcblx0XHRcdFx0XCJnb2Fsc1wiOiAzLFxuXHRcdFx0XHRcImxhc3RCYXR0bGVJZFwiOiBudWxsLFxuXHRcdFx0XHRcImxvb3RSZW1haW5pbmdcIjoge30sXG5cdFx0XHRcdFwic2F0aXNmaWVkR29hbHNcIjogW10sXG5cdFx0XHRcdFwiZ3JpbmRNaXNzaW9uUmV0cmllc1wiOiAwXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInRvdXJuYW1lbnRzXCI6IHt9LFxuXHRcdFwiaXNGdWVJblByb2dyZXNzXCI6IGZhbHNlLFxuXHRcdFwiRGFtYWdlZEJ1aWxkaW5nc1wiOiB7XG5cdFx0XHRcImJsZF85N1wiOiAxMDAsXG5cdFx0XHRcImJsZF8xMTdcIjogMTAwLFxuXHRcdFx0XCJibGRfNzFcIjogMTAwLFxuXHRcdFx0XCJibGRfODhcIjogMTAwLFxuXHRcdFx0XCJibGRfNTZcIjogMTAwLFxuXHRcdFx0XCJibGRfNzhcIjogMTAwLFxuXHRcdFx0XCJibGRfNzJcIjogMTAwLFxuXHRcdFx0XCJibGRfNTdcIjogMTAwLFxuXHRcdFx0XCJibGRfODdcIjogMTAwLFxuXHRcdFx0XCJibGRfMjFcIjogMTAwLFxuXHRcdFx0XCJibGRfNjlcIjogMTAwLFxuXHRcdFx0XCJibGRfMTE4XCI6IDEwMCxcblx0XHRcdFwiYmxkXzEwNFwiOiAxMDAsXG5cdFx0XHRcImJsZF83NFwiOiAxMDAsXG5cdFx0XHRcImJsZF85OFwiOiAxMDAsXG5cdFx0XHRcImJsZF8xNDhcIjogMTAwLFxuXHRcdFx0XCJibGRfMTQyXCI6IDEwMCxcblx0XHRcdFwiYmxkXzc1XCI6IDEwMCxcblx0XHRcdFwiYmxkXzIzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzEwMVwiOiAxMDAsXG5cdFx0XHRcImJsZF83N1wiOiAxMDAsXG5cdFx0XHRcImJsZF8yMlwiOiAxMDAsXG5cdFx0XHRcImJsZF8yNFwiOiAxMDAsXG5cdFx0XHRcImJsZF82MFwiOiAxMDAsXG5cdFx0XHRcImJsZF8xXCI6IDEwMCxcblx0XHRcdFwiYmxkXzEzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzE0M1wiOiAxMDAsXG5cdFx0XHRcImJsZF83M1wiOiAxMDAsXG5cdFx0XHRcImJsZF8xNFwiOiAxMDAsXG5cdFx0XHRcImJsZF84OVwiOiAxMDAsXG5cdFx0XHRcImJsZF81MlwiOiAxMDAsXG5cdFx0XHRcImJsZF81NFwiOiAxMDAsXG5cdFx0XHRcImJsZF8xMDVcIjogMTAwLFxuXHRcdFx0XCJibGRfMTAzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzE1XCI6IDEwMCxcblx0XHRcdFwiYmxkXzc2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzE2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzE3XCI6IDEwMCxcblx0XHRcdFwiYmxkXzExNFwiOiAxMDAsXG5cdFx0XHRcImJsZF8xMTVcIjogMTAwLFxuXHRcdFx0XCJibGRfOVwiOiAxMDAsXG5cdFx0XHRcImJsZF83XCI6IDEwMCxcblx0XHRcdFwiYmxkXzUzXCI6IDEwMCxcblx0XHRcdFwiYmxkXzE4XCI6IDEwMCxcblx0XHRcdFwiYmxkXzE5XCI6IDEwMCxcblx0XHRcdFwiYmxkXzU4XCI6IDEwMCxcblx0XHRcdFwiYmxkXzYxXCI6IDEwMCxcblx0XHRcdFwiYmxkXzIwXCI6IDEwMCxcblx0XHRcdFwiYmxkXzU1XCI6IDEwMCxcblx0XHRcdFwiYmxkXzEzN1wiOiAxMDAsXG5cdFx0XHRcImJsZF8xMDJcIjogMTAwLFxuXHRcdFx0XCJibGRfOTBcIjogMTAwLFxuXHRcdFx0XCJibGRfNjVcIjogMTAwLFxuXHRcdFx0XCJibGRfMTQ0XCI6IDEwMCxcblx0XHRcdFwiYmxkXzEzNlwiOiAxMDAsXG5cdFx0XHRcImJsZF8zXCI6IDEwMCxcblx0XHRcdFwiYmxkXzU5XCI6IDEwMCxcblx0XHRcdFwiYmxkXzI1XCI6IDEwMCxcblx0XHRcdFwiYmxkXzI2XCI6IDEwMCxcblx0XHRcdFwiYmxkXzY3XCI6IDgxLFxuXHRcdFx0XCJibGRfMTFcIjogMCxcblx0XHRcdFwiYmxkXzY2XCI6IDE1LFxuXHRcdFx0XCJibGRfODJcIjogMCxcblx0XHRcdFwiYmxkXzE0MFwiOiAwLFxuXHRcdFx0XCJibGRfMTU3XCI6IDAsXG5cdFx0XHRcImJsZF8xNTZcIjogMzIsXG5cdFx0XHRcImJsZF8xNTVcIjogMCxcblx0XHRcdFwiYmxkXzY0XCI6IDAsXG5cdFx0XHRcImJsZF84NlwiOiAwLFxuXHRcdFx0XCJibGRfMlwiOiAwLFxuXHRcdFx0XCJibGRfNjJcIjogNTQsXG5cdFx0XHRcImJsZF84NFwiOiAyOCxcblx0XHRcdFwiYmxkXzgzXCI6IDU0LFxuXHRcdFx0XCJibGRfNzlcIjogMCxcblx0XHRcdFwiYmxkXzE2MFwiOiAwLFxuXHRcdFx0XCJibGRfOFwiOiAwLFxuXHRcdFx0XCJibGRfNzBcIjogMCxcblx0XHRcdFwiYmxkXzZcIjogMCxcblx0XHRcdFwiYmxkXzVcIjogMCxcblx0XHRcdFwiYmxkXzEwNlwiOiA5LFxuXHRcdFx0XCJibGRfMTEzXCI6IDAsXG5cdFx0XHRcImJsZF8xMTJcIjogMCxcblx0XHRcdFwiYmxkXzRcIjogMCxcblx0XHRcdFwiYmxkXzg1XCI6IDAsXG5cdFx0XHRcImJsZF82M1wiOiAwLFxuXHRcdFx0XCJibGRfMTJcIjogMCxcblx0XHRcdFwiYmxkXzEwXCI6IDUsXG5cdFx0XHRcImJsZF8xMTBcIjogMCxcblx0XHRcdFwiYmxkXzE0MVwiOiAwLFxuXHRcdFx0XCJibGRfODFcIjogNzUsXG5cdFx0XHRcImJsZF84MFwiOiAwLFxuXHRcdFx0XCJibGRfMTExXCI6IDAsXG5cdFx0XHRcImJsZF8xMDdcIjogMCxcblx0XHRcdFwiYmxkXzY4XCI6IDAsXG5cdFx0XHRcImJsZF8xMDlcIjogMCxcblx0XHRcdFwiYmxkXzEwOFwiOiAwLFxuXHRcdFx0XCJibGRfMTU0XCI6IDAsXG5cdFx0XHRcImJsZF8xNTNcIjogMCxcblx0XHRcdFwiYmxkXzE1OVwiOiA5LFxuXHRcdFx0XCJibGRfMTU4XCI6IDAsXG5cdFx0XHRcImJsZF8xMzhcIjogMCxcblx0XHRcdFwiYmxkXzEzOVwiOiAwLFxuXHRcdFx0XCJibGRfMTE2XCI6IDAsXG5cdFx0XHRcImJsZF85MVwiOiAwXG5cdFx0fSxcblx0XHRcImRldmljZUluZm9cIjoge30sXG5cdFx0XCJ0aW1lWm9uZU9mZnNldFwiOiAtNSxcblx0XHRcImNvbnRyYWN0c1wiOiBbXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BTdG9ybTVcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDIwNTYsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzEwNVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BEYXJrNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjA1Nixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfNTZcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wRGFyazVcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDIwNTYsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzcxXCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjA4MSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjEwNixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcERhcms1XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMTA2LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF81NlwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BEYXJrNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjEwNixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfNzFcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wU3Rvcm01XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMTMxLFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8xMDVcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wU3Rvcm01XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMTU2LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8xMDVcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wRGFyazVcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDIxNTYsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzU2XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcERhcms1XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMTU2LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF83MVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BTdG9ybTVcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDIxODEsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzEwNVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3AyTVRhbms0XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMTgzLFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8xMzZcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wQVRNUDRcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDIxOTcsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzYwXCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjIwNixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcERhcms1XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMjA2LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF81NlwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BEYXJrNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjIwNixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfNzFcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wU3Rvcm01XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMjMxLFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8xMDVcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wU3Rvcm01XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMjU2LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8xMDVcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wRGFyazVcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDIyNTYsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzU2XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcERhcms1XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMjU2LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF83MVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BIZXJvQ3JpbXNvbkd1YXJkNFwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjI2OSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJIZXJvXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF85N1wiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BTdG9ybTVcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDIyODEsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzEwNVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BTdG9ybTVcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDIzMDYsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzEwNVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BEYXJrNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjMwNixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfNTZcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wRGFyazVcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDIzMDYsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiVHJvb3BcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzcxXCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjMzMSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjM1Nixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcERhcms1XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMzU2LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF81NlwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BEYXJrNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjM1Nixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfNzFcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wU3Rvcm01XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyMzgxLFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8xMDVcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wU3Rvcm01XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDQyNDA2LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlRyb29wXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8xMDVcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcInRyb29wMk1UYW5rNFwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjQyMyxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTM2XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJzcGVjaWFsQXR0YWNrVGllRmlnaHRlcjNcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDI0MjMsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiU3BlY2lhbEF0dGFja1wiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTM3XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjQzMSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjQ1Nixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjQ4MSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjUwNixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjUzMSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjU1Nixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjU4MSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjYwNixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjYzMSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjY1Nixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjY4MSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjcwNixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjczMSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0Mjc1Nixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0Mjc4MSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJ0cm9vcFN0b3JtNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA0MjgwNixcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJUcm9vcFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTA1XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJzcGVjaWFsQXR0YWNrVGllRmlnaHRlcjNcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDMxNDMsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiU3BlY2lhbEF0dGFja1wiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTM3XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJzcGVjaWFsQXR0YWNrVGllRmlnaHRlcjNcIixcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwNDM4NjMsXG5cdFx0XHRcdFwiY29udHJhY3RUeXBlXCI6IFwiU3BlY2lhbEF0dGFja1wiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfMTM3XCIsXG5cdFx0XHRcdFwicGVya0lkc1wiOiBbXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCJ1aWRcIjogXCJlbXBpcmVUcmFwU3RyaWtlQU9FNFwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA3MzUzMCxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJVcGdyYWRlXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8xMzhcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVRyYXBTdHJpa2VBT0U0XCIsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDg1MjM4LFxuXHRcdFx0XHRcImNvbnRyYWN0VHlwZVwiOiBcIlVwZ3JhZGVcIixcblx0XHRcdFx0XCJidWlsZGluZ0lkXCI6IFwiYmxkXzEzOVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwiZW1waXJlQ3JlZGl0R2VuZXJhdG9yNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDEwMTQxNyxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJVcGdyYWRlXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8yNFwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwidWlkXCI6IFwidHJvb3BIZXJvQ3JpbXNvbkd1YXJkNVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDEwMjk0MSxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJSZXNlYXJjaFwiLFxuXHRcdFx0XHRcImJ1aWxkaW5nSWRcIjogXCJibGRfNzRcIixcblx0XHRcdFx0XCJwZXJrSWRzXCI6IFtdXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcInVpZFwiOiBcImVtcGlyZVN0YXJwb3J0NVwiLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDExNTg1NCxcblx0XHRcdFx0XCJjb250cmFjdFR5cGVcIjogXCJVcGdyYWRlXCIsXG5cdFx0XHRcdFwiYnVpbGRpbmdJZFwiOiBcImJsZF8yNVwiLFxuXHRcdFx0XHRcInBlcmtJZHNcIjogW11cblx0XHRcdH1cblx0XHRdLFxuXHRcdFwiZnJvemVuQnVpbGRpbmdzXCI6IFtdLFxuXHRcdFwiaXNDb25uZWN0ZWRBY2NvdW50XCI6IHRydWUsXG5cdFx0XCJwdnBUYXJnZXRTZXJ2ZWRUaW1lXCI6IDE0OTAzMzA2NzMsXG5cdFx0XCJpbnRyb3NcIjogW10sXG5cdFx0XCJsYXN0TWlzc2lvblwiOiBcImNoYXB0ZXJfMTBfYmdoX2VfNlwiLFxuXHRcdFwiaXNSYXRlSW5jZW50aXZpemVkXCI6IGZhbHNlLFxuXHRcdFwibGFzdFBheW1lbnRUaW1lXCI6IDE0ODU2MDk4NTcsXG5cdFx0XCJsYXN0V2FyUGFydGljaXBhdGlvblRpbWVcIjogMTQ4NzQ3NTg2OSxcblx0XHRcImlkZW50aXR5U3dpdGNoVGltZXNcIjoge30sXG5cdFx0XCJvcGVuT2ZmZXJcIjogbnVsbCxcblx0XHRcInVubG9ja2VkUGxhbmV0c1wiOiBbXSxcblx0XHRcInJlbG9jYXRpb25TdGFyQ291bnRcIjogLTEsXG5cdFx0XCJob2xvbmV0UmV3YXJkc1wiOiBbXG5cdFx0XHRcInJld2FyZF9zZWN1cml0eURyb2lkX2VfbHRyXCIsXG5cdFx0XHRcInJld2FyZF9kZXNCaW9tZV9lX2x0clwiLFxuXHRcdFx0XCJyZXdhcmRfZm9yQmlvbWVfZV9sdHJcIlxuXHRcdF0sXG5cdFx0XCJwbGF5ZXJPYmplY3RpdmVzXCI6IHtcblx0XHRcdFwicGxhbmV0MVwiOiB7XG5cdFx0XHRcdFwiZ3JvdXBJZFwiOiBcIm9ial90YXRvb2luZV9zZXJpZXMxMF81XCIsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0ODk5OTY4MDAsXG5cdFx0XHRcdFwiZ3JhY2VUaW1lXCI6IDE0OTAwNzk2MDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiAxNDkwMDgzMjAwLFxuXHRcdFx0XHRcInByb2dyZXNzXCI6IFtcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kZXBsb3lfZGV3YmFja19lYXN5X2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogNCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDQsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwicmV3YXJkZWRcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZG9uYXRlX3NvY2lhbF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDE0LFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogMTUsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2Rlc3Ryb3lfbWF0ZXJpYWxzc3RvcmFnZV9oYXJkX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMixcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDIsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwicmV3YXJkZWRcIlxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XVxuXHRcdFx0fSxcblx0XHRcdFwicGxhbmV0OFwiOiB7XG5cdFx0XHRcdFwiZ3JvdXBJZFwiOiBcIm9ial9mb3Jlc3RPcHNfeWF2aW5fMTlcIixcblx0XHRcdFx0XCJzdGFydFRpbWVcIjogMTQ4OTk5NjgwMCxcblx0XHRcdFx0XCJncmFjZVRpbWVcIjogMTQ5MDA3OTYwMCxcblx0XHRcdFx0XCJlbmRUaW1lXCI6IDE0OTAwODMyMDAsXG5cdFx0XHRcdFwicHJvZ3Jlc3NcIjogW1xuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX2RlcGxveV9zY291dF9lYXN5X2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDEyLFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kb25hdGVfc29jaWFsX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDE1LFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9mb3Jlc3RPcHNfZGVwbG95X2RhcmtfaGFyZF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiA3LFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9LFxuXHRcdFx0XCJwbGFuZXQyM1wiOiB7XG5cdFx0XHRcdFwiZ3JvdXBJZFwiOiBcIm9ial90ZmFfc2VyaWVzMTBfNVwiLFxuXHRcdFx0XHRcInN0YXJ0VGltZVwiOiAxNDg5OTk2ODAwLFxuXHRcdFx0XHRcImdyYWNlVGltZVwiOiAxNDkwMDc5NjAwLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA4MzIwMCxcblx0XHRcdFx0XCJwcm9ncmVzc1wiOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZGVzdHJveV90YWN0aWNhbGNvbW1hbmRfZWFzeV9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAxLFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9yZWNlaXZlX3NvY2lhbF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAxNSxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfdHJhaW5fdGVjaG5pY2lhbl9oYXJkX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDQsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRcInBsYW5ldDIxXCI6IHtcblx0XHRcdFx0XCJncm91cElkXCI6IFwib2JqX2hvdGhfc2VyaWVzMTBfNVwiLFxuXHRcdFx0XHRcInN0YXJ0VGltZVwiOiAxNDg5OTk2ODAwLFxuXHRcdFx0XHRcImdyYWNlVGltZVwiOiAxNDkwMDc5NjAwLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA4MzIwMCxcblx0XHRcdFx0XCJwcm9ncmVzc1wiOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZGVwbG95X3R5cGVfaGVyb19lYXN5X2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDEsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX3JlY2VpdmVfc29jaWFsX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDE1LFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9kZXBsb3lfYXRhdF9oYXJkX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDEsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRcInBsYW5ldDNcIjoge1xuXHRcdFx0XHRcImdyb3VwSWRcIjogXCJvYmpfZGFuZG9yYW5fc2VyaWVzMTBfNVwiLFxuXHRcdFx0XHRcInN0YXJ0VGltZVwiOiAxNDg5OTk2ODAwLFxuXHRcdFx0XHRcImdyYWNlVGltZVwiOiAxNDkwMDc5NjAwLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA4MzIwMCxcblx0XHRcdFx0XCJwcm9ncmVzc1wiOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZGVwbG95X2VtcGlyZXNwZWVkZXJfZWFzeV9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAyLFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial9yZWNlaXZlX3NvY2lhbF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAxNSxcblx0XHRcdFx0XHRcdFwic3RhdGVcIjogXCJhY3RpdmVcIlxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfZGVwbG95X3N0b3JtX2hhcmRfZVwiLFxuXHRcdFx0XHRcdFx0XCJocVwiOiA1LFxuXHRcdFx0XHRcdFx0XCJjb3VudFwiOiAwLFxuXHRcdFx0XHRcdFx0XCJ0YXJnZXRcIjogMjgsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9XG5cdFx0XHRcdF1cblx0XHRcdH0sXG5cdFx0XHRcInBsYW5ldDZcIjoge1xuXHRcdFx0XHRcImdyb3VwSWRcIjogXCJvYmpfZXJraXRfc2VyaWVzMTBfNVwiLFxuXHRcdFx0XHRcInN0YXJ0VGltZVwiOiAxNDg5OTk2ODAwLFxuXHRcdFx0XHRcImdyYWNlVGltZVwiOiAxNDkwMDc5NjAwLFxuXHRcdFx0XHRcImVuZFRpbWVcIjogMTQ5MDA4MzIwMCxcblx0XHRcdFx0XCJwcm9ncmVzc1wiOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJ1aWRcIjogXCJvYmpfdHJhaW5fZGV3YmFja19lYXN5X2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDQsXG5cdFx0XHRcdFx0XHRcInN0YXRlXCI6IFwiYWN0aXZlXCJcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFwidWlkXCI6IFwib2JqX3JlY2VpdmVfc29jaWFsX2VcIixcblx0XHRcdFx0XHRcdFwiaHFcIjogNSxcblx0XHRcdFx0XHRcdFwiY291bnRcIjogMCxcblx0XHRcdFx0XHRcdFwidGFyZ2V0XCI6IDE1LFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcInVpZFwiOiBcIm9ial90cmFpbl90aWVib21iZXJfaGFyZF9lXCIsXG5cdFx0XHRcdFx0XHRcImhxXCI6IDUsXG5cdFx0XHRcdFx0XHRcImNvdW50XCI6IDAsXG5cdFx0XHRcdFx0XHRcInRhcmdldFwiOiAzLFxuXHRcdFx0XHRcdFx0XCJzdGF0ZVwiOiBcImFjdGl2ZVwiXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRdXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcImxhc3RPYmplY3RpdmVDaGVja1RpbWVcIjogMTQ5MDA0MTM0Nixcblx0XHRcInJhaWRzXCI6IHtcblx0XHRcdFwicGxhbmV0MVwiOiB7XG5cdFx0XHRcdFwicGxhbmV0SWRcIjogXCJwbGFuZXQxXCIsXG5cdFx0XHRcdFwicmFpZElkXCI6IFwicmFpZF9UYXRvb2luZTJcIixcblx0XHRcdFx0XCJyYWlkUG9vbElkXCI6IFwicmFpZHBvb2xfdGF0X2hxNV9lXCIsXG5cdFx0XHRcdFwicmFpZE1pc3Npb25JZFwiOiBcInJhaWRfdGF0X2VfaHE1XzFcIixcblx0XHRcdFx0XCJyZXRyaWVkXCI6IG51bGwsXG5cdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0OTAwNTQ0MDAsXG5cdFx0XHRcdFwiZW5kVGltZVwiOiBudWxsLFxuXHRcdFx0XHRcImxhc3RSYWlkU3RhcnNcIjogMSxcblx0XHRcdFx0XCJsYXN0UmFpZElkXCI6IFwicmFpZF9UYXRvb2luZTFcIixcblx0XHRcdFx0XCJsYXN0UmFpZFBvb2xJZFwiOiBcInJhaWRwb29sX2Rlc0Jpb21lX2hxNV9lXCIsXG5cdFx0XHRcdFwibGFzdFJhaWRNaXNzaW9uSWRcIjogXCJyYWlkX2Rlc0Jpb21lX2VfaHE1XzNcIixcblx0XHRcdFx0XCJuZXh0UmFpZFN0YXJ0VGltZVwiOiAxNDkwMDk3NjAwXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRcInBlcmtzSW5mb1wiOiB7XG5cdFx0XHRcInBlcmtzXCI6IHtcblx0XHRcdFx0XCJhY3RpdmF0ZWRQZXJrc1wiOiBbXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJwZXJrSWRcIjogXCJwZXJrX0NDYW5fVERyZDRcIixcblx0XHRcdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0ODU1ODA2NDcsXG5cdFx0XHRcdFx0XHRcImVuZFRpbWVcIjogMTQ4NTYyMzg0N1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJwZXJrSWRcIjogXCJwZXJrX0NCYXJfQ0NhbjRcIixcblx0XHRcdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0ODU1ODA2NDksXG5cdFx0XHRcdFx0XHRcImVuZFRpbWVcIjogMTQ4NTYyMzg0OVxuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJwZXJrSWRcIjogXCJwZXJrX0NCYXJfQ0ZhYzRcIixcblx0XHRcdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0ODU1ODA2NTMsXG5cdFx0XHRcdFx0XHRcImVuZFRpbWVcIjogMTQ4NTYyMzg1M1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0XCJwZXJrSWRcIjogXCJwZXJrX0NGYWNfQ0NhbjNcIixcblx0XHRcdFx0XHRcdFwic3RhcnRUaW1lXCI6IDE0ODU1ODA2NTUsXG5cdFx0XHRcdFx0XHRcImVuZFRpbWVcIjogMTQ4NTYyMzg1NVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XSxcblx0XHRcdFx0XCJjb29sZG93bnNcIjoge1xuXHRcdFx0XHRcdFwiQ0Nhbl9URHJkXCI6IDE0ODU2ODE0NDcsXG5cdFx0XHRcdFx0XCJDQmFyX0NDYW5cIjogMTQ4NTY4MTQ0OSxcblx0XHRcdFx0XHRcIkNCYXJfQ0ZhY1wiOiAxNDg1NjgxNDUzLFxuXHRcdFx0XHRcdFwiQ0ZhY19DQ2FuXCI6IDE0ODU2ODE0NTVcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJoYXNBY3RpdmF0ZWRGaXJzdFBlcmtcIjogdHJ1ZVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0XCJhcm1vcnlJbmZvXCI6IHtcblx0XHRcdFwiZmlyc3RDcmF0ZVB1cmNoYXNlZFwiOiBmYWxzZVxuXHRcdH0sXG5cdFx0XCJhY3RpdmVBcm1vcnlcIjoge1xuXHRcdFx0XCJlcXVpcG1lbnRcIjogW10sXG5cdFx0XHRcImNhcGFjaXR5XCI6IG51bGxcblx0XHR9LFxuXHRcdFwic2hhcmRzXCI6IHtcblx0XHRcdFwic2hyZF90cm9vcEVtcGlyZUpvaGhhclwiOiA2LFxuXHRcdFx0XCJzaHJkX3Ryb29wU2hvY2tcIjogMixcblx0XHRcdFwic2hyZF9zcGVjaWFsQXR0YWNrVGllQWR2YW5jZWRcIjogMlxuXHRcdH0sXG5cdFx0XCJ0cm9vcERvbmF0aW9uUHJvZ3Jlc3NcIjoge1xuXHRcdFx0XCJkb25hdGlvbkNvdW50XCI6IDEwLFxuXHRcdFx0XCJsYXN0VHJhY2tlZERvbmF0aW9uVGltZVwiOiAxNDkwMDQxNDU0LFxuXHRcdFx0XCJyZXBEb25hdGlvbkNvb2xkb3duRW5kVGltZVwiOiAxNDkwMDc5NjAwXG5cdFx0fVxuXHR9LFxuXHRcInNjYWxhcnNcIjoge1xuXHRcdFwiYXR0YWNrc0xvc3RcIjogMjAsXG5cdFx0XCJhdHRhY2tzV29uXCI6IDI1OSxcblx0XHRcImRlZmVuc2VzTG9zdFwiOiAxNTEsXG5cdFx0XCJkZWZlbnNlc1dvblwiOiAyMSxcblx0XHRcImF0dGFja3NTdGFydGVkXCI6IDI4MSxcblx0XHRcImF0dGFja3NDb21wbGV0ZWRcIjogMjc5LFxuXHRcdFwiYXR0YWNrUmF0aW5nXCI6IDE3NjEsXG5cdFx0XCJkZWZlbnNlUmF0aW5nXCI6IC05MjksXG5cdFx0XCJ4cFwiOiAwLFxuXHRcdFwiTkYxMjE5XCI6IDFcblx0fSxcblx0XCJuYW1lXCI6IFwiQmtlSUlcIlxufTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2RhdGEvOWZhZGUwMGQtZDg1OS0xMWU2LWI2NGMtMDZhNzdlMDA0ZmJiQDE0OTAzODY0NDYuanNvblxuLy8gbW9kdWxlIGlkID0gMTA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBUklBRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIFByb3BlcnRpZXM6IHtcbiAgICAvLyBHbG9iYWwgU3RhdGVzIGFuZCBQcm9wZXJ0aWVzXG4gICAgJ2FyaWEtY3VycmVudCc6IDAsIC8vIHN0YXRlXG4gICAgJ2FyaWEtZGV0YWlscyc6IDAsXG4gICAgJ2FyaWEtZGlzYWJsZWQnOiAwLCAvLyBzdGF0ZVxuICAgICdhcmlhLWhpZGRlbic6IDAsIC8vIHN0YXRlXG4gICAgJ2FyaWEtaW52YWxpZCc6IDAsIC8vIHN0YXRlXG4gICAgJ2FyaWEta2V5c2hvcnRjdXRzJzogMCxcbiAgICAnYXJpYS1sYWJlbCc6IDAsXG4gICAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzogMCxcbiAgICAvLyBXaWRnZXQgQXR0cmlidXRlc1xuICAgICdhcmlhLWF1dG9jb21wbGV0ZSc6IDAsXG4gICAgJ2FyaWEtY2hlY2tlZCc6IDAsXG4gICAgJ2FyaWEtZXhwYW5kZWQnOiAwLFxuICAgICdhcmlhLWhhc3BvcHVwJzogMCxcbiAgICAnYXJpYS1sZXZlbCc6IDAsXG4gICAgJ2FyaWEtbW9kYWwnOiAwLFxuICAgICdhcmlhLW11bHRpbGluZSc6IDAsXG4gICAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogMCxcbiAgICAnYXJpYS1vcmllbnRhdGlvbic6IDAsXG4gICAgJ2FyaWEtcGxhY2Vob2xkZXInOiAwLFxuICAgICdhcmlhLXByZXNzZWQnOiAwLFxuICAgICdhcmlhLXJlYWRvbmx5JzogMCxcbiAgICAnYXJpYS1yZXF1aXJlZCc6IDAsXG4gICAgJ2FyaWEtc2VsZWN0ZWQnOiAwLFxuICAgICdhcmlhLXNvcnQnOiAwLFxuICAgICdhcmlhLXZhbHVlbWF4JzogMCxcbiAgICAnYXJpYS12YWx1ZW1pbic6IDAsXG4gICAgJ2FyaWEtdmFsdWVub3cnOiAwLFxuICAgICdhcmlhLXZhbHVldGV4dCc6IDAsXG4gICAgLy8gTGl2ZSBSZWdpb24gQXR0cmlidXRlc1xuICAgICdhcmlhLWF0b21pYyc6IDAsXG4gICAgJ2FyaWEtYnVzeSc6IDAsXG4gICAgJ2FyaWEtbGl2ZSc6IDAsXG4gICAgJ2FyaWEtcmVsZXZhbnQnOiAwLFxuICAgIC8vIERyYWctYW5kLURyb3AgQXR0cmlidXRlc1xuICAgICdhcmlhLWRyb3BlZmZlY3QnOiAwLFxuICAgICdhcmlhLWdyYWJiZWQnOiAwLFxuICAgIC8vIFJlbGF0aW9uc2hpcCBBdHRyaWJ1dGVzXG4gICAgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCc6IDAsXG4gICAgJ2FyaWEtY29sY291bnQnOiAwLFxuICAgICdhcmlhLWNvbGluZGV4JzogMCxcbiAgICAnYXJpYS1jb2xzcGFuJzogMCxcbiAgICAnYXJpYS1jb250cm9scyc6IDAsXG4gICAgJ2FyaWEtZGVzY3JpYmVkYnknOiAwLFxuICAgICdhcmlhLWVycm9ybWVzc2FnZSc6IDAsXG4gICAgJ2FyaWEtZmxvd3RvJzogMCxcbiAgICAnYXJpYS1sYWJlbGxlZGJ5JzogMCxcbiAgICAnYXJpYS1vd25zJzogMCxcbiAgICAnYXJpYS1wb3NpbnNldCc6IDAsXG4gICAgJ2FyaWEtcm93Y291bnQnOiAwLFxuICAgICdhcmlhLXJvd2luZGV4JzogMCxcbiAgICAnYXJpYS1yb3dzcGFuJzogMCxcbiAgICAnYXJpYS1zZXRzaXplJzogMFxuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lczoge30sXG4gIERPTVByb3BlcnR5TmFtZXM6IHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFSSUFET01Qcm9wZXJ0eUNvbmZpZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9BUklBRE9NUHJvcGVydHlDb25maWcuanNcbi8vIG1vZHVsZSBpZCA9IDExMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcblxudmFyIGZvY3VzTm9kZSA9IHJlcXVpcmUoJ2ZianMvbGliL2ZvY3VzTm9kZScpO1xuXG52YXIgQXV0b0ZvY3VzVXRpbHMgPSB7XG4gIGZvY3VzRE9NQ29tcG9uZW50OiBmdW5jdGlvbiAoKSB7XG4gICAgZm9jdXNOb2RlKFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRvRm9jdXNVdGlscztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9BdXRvRm9jdXNVdGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMTEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50UHJvcGFnYXRvcnMgPSByZXF1aXJlKCcuL0V2ZW50UHJvcGFnYXRvcnMnKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlID0gcmVxdWlyZSgnLi9GYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUnKTtcbnZhciBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50Jyk7XG52YXIgU3ludGhldGljSW5wdXRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljSW5wdXRFdmVudCcpO1xuXG52YXIgRU5EX0tFWUNPREVTID0gWzksIDEzLCAyNywgMzJdOyAvLyBUYWIsIFJldHVybiwgRXNjLCBTcGFjZVxudmFyIFNUQVJUX0tFWUNPREUgPSAyMjk7XG5cbnZhciBjYW5Vc2VDb21wb3NpdGlvbkV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdDb21wb3NpdGlvbkV2ZW50JyBpbiB3aW5kb3c7XG5cbnZhciBkb2N1bWVudE1vZGUgPSBudWxsO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkge1xuICBkb2N1bWVudE1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG59XG5cbi8vIFdlYmtpdCBvZmZlcnMgYSB2ZXJ5IHVzZWZ1bCBgdGV4dElucHV0YCBldmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvXG4vLyBkaXJlY3RseSByZXByZXNlbnQgYGJlZm9yZUlucHV0YC4gVGhlIElFIGB0ZXh0aW5wdXRgIGV2ZW50IGlzIG5vdCBhc1xuLy8gdXNlZnVsLCBzbyB3ZSBkb24ndCB1c2UgaXQuXG52YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ1RleHRFdmVudCcgaW4gd2luZG93ICYmICFkb2N1bWVudE1vZGUgJiYgIWlzUHJlc3RvKCk7XG5cbi8vIEluIElFOSssIHdlIGhhdmUgYWNjZXNzIHRvIGNvbXBvc2l0aW9uIGV2ZW50cywgYnV0IHRoZSBkYXRhIHN1cHBsaWVkXG4vLyBieSB0aGUgbmF0aXZlIGNvbXBvc2l0aW9uZW5kIGV2ZW50IG1heSBiZSBpbmNvcnJlY3QuIEphcGFuZXNlIGlkZW9ncmFwaGljXG4vLyBzcGFjZXMsIGZvciBpbnN0YW5jZSAoXFx1MzAwMCkgYXJlIG5vdCByZWNvcmRlZCBjb3JyZWN0bHkuXG52YXIgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8IGRvY3VtZW50TW9kZSAmJiBkb2N1bWVudE1vZGUgPiA4ICYmIGRvY3VtZW50TW9kZSA8PSAxMSk7XG5cbi8qKlxuICogT3BlcmEgPD0gMTIgaW5jbHVkZXMgVGV4dEV2ZW50IGluIHdpbmRvdywgYnV0IGRvZXMgbm90IGZpcmVcbiAqIHRleHQgaW5wdXQgZXZlbnRzLiBSZWx5IG9uIGtleXByZXNzIGluc3RlYWQuXG4gKi9cbmZ1bmN0aW9uIGlzUHJlc3RvKCkge1xuICB2YXIgb3BlcmEgPSB3aW5kb3cub3BlcmE7XG4gIHJldHVybiB0eXBlb2Ygb3BlcmEgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvcGVyYS52ZXJzaW9uID09PSAnZnVuY3Rpb24nICYmIHBhcnNlSW50KG9wZXJhLnZlcnNpb24oKSwgMTApIDw9IDEyO1xufVxuXG52YXIgU1BBQ0VCQVJfQ09ERSA9IDMyO1xudmFyIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFNQQUNFQkFSX0NPREUpO1xuXG4vLyBFdmVudHMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgbmFtZXMuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYmVmb3JlSW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uQmVmb3JlSW5wdXQnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkJlZm9yZUlucHV0Q2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogWyd0b3BDb21wb3NpdGlvbkVuZCcsICd0b3BLZXlQcmVzcycsICd0b3BUZXh0SW5wdXQnLCAndG9wUGFzdGUnXVxuICB9LFxuICBjb21wb3NpdGlvbkVuZDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25Db21wb3NpdGlvbkVuZCcsXG4gICAgICBjYXB0dXJlZDogJ29uQ29tcG9zaXRpb25FbmRDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcEJsdXInLCAndG9wQ29tcG9zaXRpb25FbmQnLCAndG9wS2V5RG93bicsICd0b3BLZXlQcmVzcycsICd0b3BLZXlVcCcsICd0b3BNb3VzZURvd24nXVxuICB9LFxuICBjb21wb3NpdGlvblN0YXJ0OiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkNvbXBvc2l0aW9uU3RhcnQnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlJ1xuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcEJsdXInLCAndG9wQ29tcG9zaXRpb25TdGFydCcsICd0b3BLZXlEb3duJywgJ3RvcEtleVByZXNzJywgJ3RvcEtleVVwJywgJ3RvcE1vdXNlRG93biddXG4gIH0sXG4gIGNvbXBvc2l0aW9uVXBkYXRlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6ICdvbkNvbXBvc2l0aW9uVXBkYXRlJyxcbiAgICAgIGNhcHR1cmVkOiAnb25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wQmx1cicsICd0b3BDb21wb3NpdGlvblVwZGF0ZScsICd0b3BLZXlEb3duJywgJ3RvcEtleVByZXNzJywgJ3RvcEtleVVwJywgJ3RvcE1vdXNlRG93biddXG4gIH1cbn07XG5cbi8vIFRyYWNrIHdoZXRoZXIgd2UndmUgZXZlciBoYW5kbGVkIGEga2V5cHJlc3Mgb24gdGhlIHNwYWNlIGtleS5cbnZhciBoYXNTcGFjZUtleXByZXNzID0gZmFsc2U7XG5cbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBuYXRpdmUga2V5cHJlc3MgZXZlbnQgaXMgYXNzdW1lZCB0byBiZSBhIGNvbW1hbmQuXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgRmlyZWZveCBmaXJlcyBga2V5cHJlc3NgIGV2ZW50cyBmb3Iga2V5IGNvbW1hbmRzXG4gKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiAobmF0aXZlRXZlbnQuY3RybEtleSB8fCBuYXRpdmVFdmVudC5hbHRLZXkgfHwgbmF0aXZlRXZlbnQubWV0YUtleSkgJiZcbiAgLy8gY3RybEtleSAmJiBhbHRLZXkgaXMgZXF1aXZhbGVudCB0byBBbHRHciwgYW5kIGlzIG5vdCBhIGNvbW1hbmQuXG4gICEobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpO1xufVxuXG4vKipcbiAqIFRyYW5zbGF0ZSBuYXRpdmUgdG9wIGxldmVsIGV2ZW50cyBpbnRvIGV2ZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGVcbiAqIEByZXR1cm4ge29iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSAndG9wQ29tcG9zaXRpb25TdGFydCc6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uRW5kJzpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uVXBkYXRlJzpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuICB9XG59XG5cbi8qKlxuICogRG9lcyBvdXIgZmFsbGJhY2sgYmVzdC1ndWVzcyBtb2RlbCB0aGluayB0aGlzIGV2ZW50IHNpZ25pZmllcyB0aGF0XG4gKiBjb21wb3NpdGlvbiBoYXMgYmVndW4/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09ICd0b3BLZXlEb3duJyAmJiBuYXRpdmVFdmVudC5rZXlDb2RlID09PSBTVEFSVF9LRVlDT0RFO1xufVxuXG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIG1vZGUgdGhpbmsgdGhhdCB0aGlzIGV2ZW50IGlzIHRoZSBlbmQgb2YgY29tcG9zaXRpb24/XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgJ3RvcEtleVVwJzpcbiAgICAgIC8vIENvbW1hbmQga2V5cyBpbnNlcnQgb3IgY2xlYXIgSU1FIGlucHV0LlxuICAgICAgcmV0dXJuIEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMTtcbiAgICBjYXNlICd0b3BLZXlEb3duJzpcbiAgICAgIC8vIEV4cGVjdCBJTUUga2V5Q29kZSBvbiBlYWNoIGtleWRvd24uIElmIHdlIGdldCBhbnkgb3RoZXJcbiAgICAgIC8vIGNvZGUgd2UgbXVzdCBoYXZlIGV4aXRlZCBlYXJsaWVyLlxuICAgICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmtleUNvZGUgIT09IFNUQVJUX0tFWUNPREU7XG4gICAgY2FzZSAndG9wS2V5UHJlc3MnOlxuICAgIGNhc2UgJ3RvcE1vdXNlRG93bic6XG4gICAgY2FzZSAndG9wQmx1cic6XG4gICAgICAvLyBFdmVudHMgYXJlIG5vdCBwb3NzaWJsZSB3aXRob3V0IGNhbmNlbGxpbmcgSU1FLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEdvb2dsZSBJbnB1dCBUb29scyBwcm92aWRlcyBjb21wb3NpdGlvbiBkYXRhIHZpYSBhIEN1c3RvbUV2ZW50LFxuICogd2l0aCB0aGUgYGRhdGFgIHByb3BlcnR5IHBvcHVsYXRlZCBpbiB0aGUgYGRldGFpbGAgb2JqZWN0LiBJZiB0aGlzXG4gKiBpcyBhdmFpbGFibGUgb24gdGhlIGV2ZW50IG9iamVjdCwgdXNlIGl0LiBJZiBub3QsIHRoaXMgaXMgYSBwbGFpblxuICogY29tcG9zaXRpb24gZXZlbnQgYW5kIHdlIGhhdmUgbm90aGluZyBzcGVjaWFsIHRvIGV4dHJhY3QuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50XG4gKiBAcmV0dXJuIHs/c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIGlmICh0eXBlb2YgZGV0YWlsID09PSAnb2JqZWN0JyAmJiAnZGF0YScgaW4gZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5kYXRhO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBUcmFjayB0aGUgY3VycmVudCBJTUUgY29tcG9zaXRpb24gZmFsbGJhY2sgb2JqZWN0LCBpZiBhbnkuXG52YXIgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcblxuLyoqXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RDb21wb3NpdGlvbkV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBldmVudFR5cGU7XG4gIHZhciBmYWxsYmFja0RhdGE7XG5cbiAgaWYgKGNhblVzZUNvbXBvc2l0aW9uRXZlbnQpIHtcbiAgICBldmVudFR5cGUgPSBnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSh0b3BMZXZlbFR5cGUpO1xuICB9IGVsc2UgaWYgKCFjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICBpZiAoaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZDtcbiAgfVxuXG4gIGlmICghZXZlbnRUeXBlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAodXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEpIHtcbiAgICAvLyBUaGUgY3VycmVudCBjb21wb3NpdGlvbiBpcyBzdG9yZWQgc3RhdGljYWxseSBhbmQgbXVzdCBub3QgYmVcbiAgICAvLyBvdmVyd3JpdHRlbiB3aGlsZSBjb21wb3NpdGlvbiBjb250aW51ZXMuXG4gICAgaWYgKCFjdXJyZW50Q29tcG9zaXRpb24gJiYgZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQpIHtcbiAgICAgIGN1cnJlbnRDb21wb3NpdGlvbiA9IEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5nZXRQb29sZWQobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kKSB7XG4gICAgICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgICAgIGZhbGxiYWNrRGF0YSA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGV2ZW50ID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gIGlmIChmYWxsYmFja0RhdGEpIHtcbiAgICAvLyBJbmplY3QgZGF0YSBnZW5lcmF0ZWQgZnJvbSBmYWxsYmFjayBwYXRoIGludG8gdGhlIHN5bnRoZXRpYyBldmVudC5cbiAgICAvLyBUaGlzIG1hdGNoZXMgdGhlIHByb3BlcnR5IG9mIG5hdGl2ZSBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlLlxuICAgIGV2ZW50LmRhdGEgPSBmYWxsYmFja0RhdGE7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1c3RvbURhdGEgPSBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBpZiAoY3VzdG9tRGF0YSAhPT0gbnVsbCkge1xuICAgICAgZXZlbnQuZGF0YSA9IGN1c3RvbURhdGE7XG4gICAgfVxuICB9XG5cbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBzdHJpbmcgY29ycmVzcG9uZGluZyB0byB0aGlzIGBiZWZvcmVJbnB1dGAgZXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uRW5kJzpcbiAgICAgIHJldHVybiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBjYXNlICd0b3BLZXlQcmVzcyc6XG4gICAgICAvKipcbiAgICAgICAqIElmIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudHMgYXJlIGF2YWlsYWJsZSwgb3VyIGdvYWwgaXMgdG8gbWFrZVxuICAgICAgICogdXNlIG9mIHRoZW0uIEhvd2V2ZXIsIHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlOiB0aGUgc3BhY2ViYXIga2V5LlxuICAgICAgICogSW4gV2Via2l0LCBwcmV2ZW50aW5nIGRlZmF1bHQgb24gYSBzcGFjZWJhciBgdGV4dElucHV0YCBldmVudFxuICAgICAgICogY2FuY2VscyBjaGFyYWN0ZXIgaW5zZXJ0aW9uLCBidXQgaXQgKmFsc28qIGNhdXNlcyB0aGUgYnJvd3NlclxuICAgICAgICogdG8gZmFsbCBiYWNrIHRvIGl0cyBkZWZhdWx0IHNwYWNlYmFyIGJlaGF2aW9yIG9mIHNjcm9sbGluZyB0aGVcbiAgICAgICAqIHBhZ2UuXG4gICAgICAgKlxuICAgICAgICogVHJhY2tpbmcgYXQ6XG4gICAgICAgKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzU1MTAzXG4gICAgICAgKlxuICAgICAgICogVG8gYXZvaWQgdGhpcyBpc3N1ZSwgdXNlIHRoZSBrZXlwcmVzcyBldmVudCBhcyBpZiBubyBgdGV4dElucHV0YFxuICAgICAgICogZXZlbnQgaXMgYXZhaWxhYmxlLlxuICAgICAgICovXG4gICAgICB2YXIgd2hpY2ggPSBuYXRpdmVFdmVudC53aGljaDtcbiAgICAgIGlmICh3aGljaCAhPT0gU1BBQ0VCQVJfQ09ERSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9IHRydWU7XG4gICAgICByZXR1cm4gU1BBQ0VCQVJfQ0hBUjtcblxuICAgIGNhc2UgJ3RvcFRleHRJbnB1dCc6XG4gICAgICAvLyBSZWNvcmQgdGhlIGNoYXJhY3RlcnMgdG8gYmUgYWRkZWQgdG8gdGhlIERPTS5cbiAgICAgIHZhciBjaGFycyA9IG5hdGl2ZUV2ZW50LmRhdGE7XG5cbiAgICAgIC8vIElmIGl0J3MgYSBzcGFjZWJhciBjaGFyYWN0ZXIsIGFzc3VtZSB0aGF0IHdlIGhhdmUgYWxyZWFkeSBoYW5kbGVkXG4gICAgICAvLyBpdCBhdCB0aGUga2V5cHJlc3MgbGV2ZWwgYW5kIGJhaWwgaW1tZWRpYXRlbHkuIEFuZHJvaWQgQ2hyb21lXG4gICAgICAvLyBkb2Vzbid0IGdpdmUgdXMga2V5Y29kZXMsIHNvIHdlIG5lZWQgdG8gYmxhY2tsaXN0IGl0LlxuICAgICAgaWYgKGNoYXJzID09PSBTUEFDRUJBUl9DSEFSICYmIGhhc1NwYWNlS2V5cHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjaGFycztcblxuICAgIGRlZmF1bHQ6XG4gICAgICAvLyBGb3Igb3RoZXIgbmF0aXZlIGV2ZW50IHR5cGVzLCBkbyBub3RoaW5nLlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuLyoqXG4gKiBGb3IgYnJvd3NlcnMgdGhhdCBkbyBub3QgcHJvdmlkZSB0aGUgYHRleHRJbnB1dGAgZXZlbnQsIGV4dHJhY3QgdGhlXG4gKiBhcHByb3ByaWF0ZSBzdHJpbmcgdG8gdXNlIGZvciBTeW50aGV0aWNJbnB1dEV2ZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0b3BMZXZlbFR5cGUgUmVjb3JkIGZyb20gYEV2ZW50Q29uc3RhbnRzYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFRoZSBmYWxsYmFjayBzdHJpbmcgZm9yIHRoaXMgYGJlZm9yZUlucHV0YCBldmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBjb21wb3NpbmcgKElNRSkgYW5kIHVzaW5nIGEgZmFsbGJhY2sgdG8gZG8gc28sXG4gIC8vIHRyeSB0byBleHRyYWN0IHRoZSBjb21wb3NlZCBjaGFyYWN0ZXJzIGZyb20gdGhlIGZhbGxiYWNrIG9iamVjdC5cbiAgLy8gSWYgY29tcG9zaXRpb24gZXZlbnQgaXMgYXZhaWxhYmxlLCB3ZSBleHRyYWN0IGEgc3RyaW5nIG9ubHkgYXRcbiAgLy8gY29tcG9zaXRpb25ldmVudCwgb3RoZXJ3aXNlIGV4dHJhY3QgaXQgYXQgZmFsbGJhY2sgZXZlbnRzLlxuICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcENvbXBvc2l0aW9uRW5kJyB8fCAhY2FuVXNlQ29tcG9zaXRpb25FdmVudCAmJiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICAgIHZhciBjaGFycyA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucmVsZWFzZShjdXJyZW50Q29tcG9zaXRpb24pO1xuICAgICAgY3VycmVudENvbXBvc2l0aW9uID0gbnVsbDtcbiAgICAgIHJldHVybiBjaGFycztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgJ3RvcFBhc3RlJzpcbiAgICAgIC8vIElmIGEgcGFzdGUgZXZlbnQgb2NjdXJzIGFmdGVyIGEga2V5cHJlc3MsIHRocm93IG91dCB0aGUgaW5wdXRcbiAgICAgIC8vIGNoYXJzLiBQYXN0ZSBldmVudHMgc2hvdWxkIG5vdCBsZWFkIHRvIEJlZm9yZUlucHV0IGV2ZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgJ3RvcEtleVByZXNzJzpcbiAgICAgIC8qKlxuICAgICAgICogQXMgb2YgdjI3LCBGaXJlZm94IG1heSBmaXJlIGtleXByZXNzIGV2ZW50cyBldmVuIHdoZW4gbm8gY2hhcmFjdGVyXG4gICAgICAgKiB3aWxsIGJlIGluc2VydGVkLiBBIGZldyBwb3NzaWJpbGl0aWVzOlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyBgMGAuIEFycm93IGtleXMsIEVzYyBrZXksIGV0Yy5cbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgdGhlIHByZXNzZWQga2V5IGNvZGUsIGJ1dCBubyBjaGFyIGlzIGF2YWlsYWJsZS5cbiAgICAgICAqICAgRXg6ICdBbHRHciArIGRgIGluIFBvbGlzaC4gVGhlcmUgaXMgbm8gbW9kaWZpZWQgY2hhcmFjdGVyIGZvclxuICAgICAgICogICB0aGlzIGtleSBjb21iaW5hdGlvbiBhbmQgbm8gY2hhcmFjdGVyIGlzIGluc2VydGVkIGludG8gdGhlXG4gICAgICAgKiAgIGRvY3VtZW50LCBidXQgRkYgZmlyZXMgdGhlIGtleXByZXNzIGZvciBjaGFyIGNvZGUgYDEwMGAgYW55d2F5LlxuICAgICAgICogICBObyBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgYSBjb21tYW5kIGNvbWJpbmF0aW9uIGlzXG4gICAgICAgKiAgIGJlaW5nIHVzZWQuIEV4OiBgQ21kK0NgLiBObyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQsIGFuZCBub1xuICAgICAgICogICBgaW5wdXRgIGV2ZW50IHdpbGwgb2NjdXIuXG4gICAgICAgKi9cbiAgICAgIGlmIChuYXRpdmVFdmVudC53aGljaCAmJiAhaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgJ3RvcENvbXBvc2l0aW9uRW5kJzpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA/IG51bGwgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEV4dHJhY3QgYSBTeW50aGV0aWNJbnB1dEV2ZW50IGZvciBgYmVmb3JlSW5wdXRgLCBiYXNlZCBvbiBlaXRoZXIgbmF0aXZlXG4gKiBgdGV4dElucHV0YCBvciBmYWxsYmFjayBiZWhhdmlvci5cbiAqXG4gKiBAcmV0dXJuIHs/b2JqZWN0fSBBIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBjaGFycztcblxuICBpZiAoY2FuVXNlVGV4dElucHV0RXZlbnQpIHtcbiAgICBjaGFycyA9IGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gIH0gZWxzZSB7XG4gICAgY2hhcnMgPSBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gIH1cblxuICAvLyBJZiBubyBjaGFyYWN0ZXJzIGFyZSBiZWluZyBpbnNlcnRlZCwgbm8gQmVmb3JlSW5wdXQgZXZlbnQgc2hvdWxkXG4gIC8vIGJlIGZpcmVkLlxuICBpZiAoIWNoYXJzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZXZlbnQgPSBTeW50aGV0aWNJbnB1dEV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLmJlZm9yZUlucHV0LCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gIGV2ZW50LmRhdGEgPSBjaGFycztcbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBgb25CZWZvcmVJbnB1dGAgZXZlbnQgdG8gbWF0Y2hcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1LyNldmVudHMtaW5wdXRldmVudHMuXG4gKlxuICogVGhpcyBldmVudCBwbHVnaW4gaXMgYmFzZWQgb24gdGhlIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudFxuICogYXZhaWxhYmxlIGluIENocm9tZSwgU2FmYXJpLCBPcGVyYSwgYW5kIElFLiBUaGlzIGV2ZW50IGZpcmVzIGFmdGVyXG4gKiBgb25LZXlQcmVzc2AgYW5kIGBvbkNvbXBvc2l0aW9uRW5kYCwgYnV0IGJlZm9yZSBgb25JbnB1dGAuXG4gKlxuICogYGJlZm9yZUlucHV0YCBpcyBzcGVjJ2QgYnV0IG5vdCBpbXBsZW1lbnRlZCBpbiBhbnkgYnJvd3NlcnMsIGFuZFxuICogdGhlIGBpbnB1dGAgZXZlbnQgZG9lcyBub3QgcHJvdmlkZSBhbnkgdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgaGFzXG4gKiBhY3R1YWxseSBiZWVuIGFkZGVkLCBjb250cmFyeSB0byB0aGUgc3BlYy4gVGh1cywgYHRleHRJbnB1dGAgaXMgdGhlIGJlc3RcbiAqIGF2YWlsYWJsZSBldmVudCB0byBpZGVudGlmeSB0aGUgY2hhcmFjdGVycyB0aGF0IGhhdmUgYWN0dWFsbHkgYmVlbiBpbnNlcnRlZFxuICogaW50byB0aGUgdGFyZ2V0IG5vZGUuXG4gKlxuICogVGhpcyBwbHVnaW4gaXMgYWxzbyByZXNwb25zaWJsZSBmb3IgZW1pdHRpbmcgYGNvbXBvc2l0aW9uYCBldmVudHMsIHRodXNcbiAqIGFsbG93aW5nIHVzIHRvIHNoYXJlIGNvbXBvc2l0aW9uIGZhbGxiYWNrIGNvZGUgZm9yIGJvdGggYGJlZm9yZUlucHV0YCBhbmRcbiAqIGBjb21wb3NpdGlvbmAgZXZlbnQgdHlwZXMuXG4gKi9cbnZhciBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIFtleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCksIGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KV07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmVmb3JlSW5wdXRFdmVudFBsdWdpbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENTU1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9DU1NQcm9wZXJ0eScpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcblxudmFyIGNhbWVsaXplU3R5bGVOYW1lID0gcmVxdWlyZSgnZmJqcy9saWIvY2FtZWxpemVTdHlsZU5hbWUnKTtcbnZhciBkYW5nZXJvdXNTdHlsZVZhbHVlID0gcmVxdWlyZSgnLi9kYW5nZXJvdXNTdHlsZVZhbHVlJyk7XG52YXIgaHlwaGVuYXRlU3R5bGVOYW1lID0gcmVxdWlyZSgnZmJqcy9saWIvaHlwaGVuYXRlU3R5bGVOYW1lJyk7XG52YXIgbWVtb2l6ZVN0cmluZ09ubHkgPSByZXF1aXJlKCdmYmpzL2xpYi9tZW1vaXplU3RyaW5nT25seScpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBwcm9jZXNzU3R5bGVOYW1lID0gbWVtb2l6ZVN0cmluZ09ubHkoZnVuY3Rpb24gKHN0eWxlTmFtZSkge1xuICByZXR1cm4gaHlwaGVuYXRlU3R5bGVOYW1lKHN0eWxlTmFtZSk7XG59KTtcblxudmFyIGhhc1Nob3J0aGFuZFByb3BlcnR5QnVnID0gZmFsc2U7XG52YXIgc3R5bGVGbG9hdEFjY2Vzc29yID0gJ2Nzc0Zsb2F0JztcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgdmFyIHRlbXBTdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICB0cnkge1xuICAgIC8vIElFOCB0aHJvd3MgXCJJbnZhbGlkIGFyZ3VtZW50LlwiIGlmIHJlc2V0dGluZyBzaG9ydGhhbmQgc3R5bGUgcHJvcGVydGllcy5cbiAgICB0ZW1wU3R5bGUuZm9udCA9ICcnO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaGFzU2hvcnRoYW5kUHJvcGVydHlCdWcgPSB0cnVlO1xuICB9XG4gIC8vIElFOCBvbmx5IHN1cHBvcnRzIGFjY2Vzc2luZyBjc3NGbG9hdCAoc3RhbmRhcmQpIGFzIHN0eWxlRmxvYXRcbiAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5jc3NGbG9hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3R5bGVGbG9hdEFjY2Vzc29yID0gJ3N0eWxlRmxvYXQnO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vICdtc1RyYW5zZm9ybScgaXMgY29ycmVjdCwgYnV0IHRoZSBvdGhlciBwcmVmaXhlcyBzaG91bGQgYmUgY2FwaXRhbGl6ZWRcbiAgdmFyIGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybiA9IC9eKD86d2Via2l0fG1venxvKVtBLVpdLztcblxuICAvLyBzdHlsZSB2YWx1ZXMgc2hvdWxkbid0IGNvbnRhaW4gYSBzZW1pY29sb25cbiAgdmFyIGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiA9IC87XFxzKiQvO1xuXG4gIHZhciB3YXJuZWRTdHlsZU5hbWVzID0ge307XG4gIHZhciB3YXJuZWRTdHlsZVZhbHVlcyA9IHt9O1xuICB2YXIgd2FybmVkRm9yTmFOVmFsdWUgPSBmYWxzZTtcblxuICB2YXIgd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUgPSBmdW5jdGlvbiAobmFtZSwgb3duZXIpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPyVzJywgbmFtZSwgY2FtZWxpemVTdHlsZU5hbWUobmFtZSksIGNoZWNrUmVuZGVyTWVzc2FnZShvd25lcikpIDogdm9pZCAwO1xuICB9O1xuXG4gIHZhciB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUgPSBmdW5jdGlvbiAobmFtZSwgb3duZXIpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCB2ZW5kb3ItcHJlZml4ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8lcycsIG5hbWUsIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpKSA6IHZvaWQgMDtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlLCBvd25lcikge1xuICAgIGlmICh3YXJuZWRTdHlsZVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgJiYgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1N0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuXFwndCBjb250YWluIGEgc2VtaWNvbG9uLiVzICcgKyAnVHJ5IFwiJXM6ICVzXCIgaW5zdGVhZC4nLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpLCBuYW1lLCB2YWx1ZS5yZXBsYWNlKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiwgJycpKSA6IHZvaWQgMDtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVJc05hTiA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgb3duZXIpIHtcbiAgICBpZiAod2FybmVkRm9yTmFOVmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRGb3JOYU5WYWx1ZSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgTmFOYCBpcyBhbiBpbnZhbGlkIHZhbHVlIGZvciB0aGUgYCVzYCBjc3Mgc3R5bGUgcHJvcGVydHkuJXMnLCBuYW1lLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpKSA6IHZvaWQgMDtcbiAgfTtcblxuICB2YXIgY2hlY2tSZW5kZXJNZXNzYWdlID0gZnVuY3Rpb24gKG93bmVyKSB7XG4gICAgaWYgKG93bmVyKSB7XG4gICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHsqfSB2YWx1ZVxuICAgKiBAcGFyYW0ge1JlYWN0RE9NQ29tcG9uZW50fSBjb21wb25lbnRcbiAgICovXG4gIHZhciB3YXJuVmFsaWRTdHlsZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSwgY29tcG9uZW50KSB7XG4gICAgdmFyIG93bmVyO1xuICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgfVxuICAgIGlmIChuYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShuYW1lLCBvd25lcik7XG4gICAgfSBlbHNlIGlmIChiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4udGVzdChuYW1lKSkge1xuICAgICAgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lKG5hbWUsIG93bmVyKTtcbiAgICB9IGVsc2UgaWYgKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybi50ZXN0KHZhbHVlKSkge1xuICAgICAgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uKG5hbWUsIHZhbHVlLCBvd25lcik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsdWUpKSB7XG4gICAgICB3YXJuU3R5bGVWYWx1ZUlzTmFOKG5hbWUsIHZhbHVlLCBvd25lcik7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIE9wZXJhdGlvbnMgZm9yIGRlYWxpbmcgd2l0aCBDU1MgcHJvcGVydGllcy5cbiAqL1xudmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9IHtcblxuICAvKipcbiAgICogU2VyaWFsaXplcyBhIG1hcHBpbmcgb2Ygc3R5bGUgcHJvcGVydGllcyBmb3IgdXNlIGFzIGlubGluZSBzdHlsZXM6XG4gICAqXG4gICAqICAgPiBjcmVhdGVNYXJrdXBGb3JTdHlsZXMoe3dpZHRoOiAnMjAwcHgnLCBoZWlnaHQ6IDB9KVxuICAgKiAgIFwid2lkdGg6MjAwcHg7aGVpZ2h0OjA7XCJcbiAgICpcbiAgICogVW5kZWZpbmVkIHZhbHVlcyBhcmUgaWdub3JlZCBzbyB0aGF0IGRlY2xhcmF0aXZlIHByb2dyYW1taW5nIGlzIGVhc2llci5cbiAgICogVGhlIHJlc3VsdCBzaG91bGQgYmUgSFRNTC1lc2NhcGVkIGJlZm9yZSBpbnNlcnRpb24gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gICAqIEBwYXJhbSB7UmVhY3RET01Db21wb25lbnR9IGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHs/c3RyaW5nfVxuICAgKi9cbiAgY3JlYXRlTWFya3VwRm9yU3R5bGVzOiBmdW5jdGlvbiAoc3R5bGVzLCBjb21wb25lbnQpIHtcbiAgICB2YXIgc2VyaWFsaXplZCA9ICcnO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGVWYWx1ZSA9IHN0eWxlc1tzdHlsZU5hbWVdO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FyblZhbGlkU3R5bGUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlLCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKHN0eWxlVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBzZXJpYWxpemVkICs9IHByb2Nlc3NTdHlsZU5hbWUoc3R5bGVOYW1lKSArICc6JztcbiAgICAgICAgc2VyaWFsaXplZCArPSBkYW5nZXJvdXNTdHlsZVZhbHVlKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSwgY29tcG9uZW50KSArICc7JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQgfHwgbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogU2V0cyB0aGUgdmFsdWUgZm9yIG11bHRpcGxlIHN0eWxlcyBvbiBhIG5vZGUuICBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhc1xuICAgKiAnJyAoZW1wdHkgc3RyaW5nKSwgdGhlIGNvcnJlc3BvbmRpbmcgc3R5bGUgcHJvcGVydHkgd2lsbCBiZSB1bnNldC5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXNcbiAgICogQHBhcmFtIHtSZWFjdERPTUNvbXBvbmVudH0gY29tcG9uZW50XG4gICAqL1xuICBzZXRWYWx1ZUZvclN0eWxlczogZnVuY3Rpb24gKG5vZGUsIHN0eWxlcywgY29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkhvc3RPcGVyYXRpb24oe1xuICAgICAgICBpbnN0YW5jZUlEOiBjb21wb25lbnQuX2RlYnVnSUQsXG4gICAgICAgIHR5cGU6ICd1cGRhdGUgc3R5bGVzJyxcbiAgICAgICAgcGF5bG9hZDogc3R5bGVzXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdLCBjb21wb25lbnQpO1xuICAgICAgfVxuICAgICAgdmFyIHN0eWxlVmFsdWUgPSBkYW5nZXJvdXNTdHlsZVZhbHVlKHN0eWxlTmFtZSwgc3R5bGVzW3N0eWxlTmFtZV0sIGNvbXBvbmVudCk7XG4gICAgICBpZiAoc3R5bGVOYW1lID09PSAnZmxvYXQnIHx8IHN0eWxlTmFtZSA9PT0gJ2Nzc0Zsb2F0Jykge1xuICAgICAgICBzdHlsZU5hbWUgPSBzdHlsZUZsb2F0QWNjZXNzb3I7XG4gICAgICB9XG4gICAgICBpZiAoc3R5bGVWYWx1ZSkge1xuICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gc3R5bGVWYWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBleHBhbnNpb24gPSBoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyAmJiBDU1NQcm9wZXJ0eS5zaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNbc3R5bGVOYW1lXTtcbiAgICAgICAgaWYgKGV4cGFuc2lvbikge1xuICAgICAgICAgIC8vIFNob3J0aGFuZCBwcm9wZXJ0eSB0aGF0IElFOCB3b24ndCBsaWtlIHVuc2V0dGluZywgc28gdW5zZXQgZWFjaFxuICAgICAgICAgIC8vIGNvbXBvbmVudCB0byBwbGFjYXRlIGl0XG4gICAgICAgICAgZm9yICh2YXIgaW5kaXZpZHVhbFN0eWxlTmFtZSBpbiBleHBhbnNpb24pIHtcbiAgICAgICAgICAgIHN0eWxlW2luZGl2aWR1YWxTdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDExNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoJy4vRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRUYXJnZXQnKTtcbnZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50U3VwcG9ydGVkJyk7XG52YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gcmVxdWlyZSgnLi9pc1RleHRJbnB1dEVsZW1lbnQnKTtcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIGNoYW5nZToge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25DaGFuZ2UnLFxuICAgICAgY2FwdHVyZWQ6ICdvbkNoYW5nZUNhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wQmx1cicsICd0b3BDaGFuZ2UnLCAndG9wQ2xpY2snLCAndG9wRm9jdXMnLCAndG9wSW5wdXQnLCAndG9wS2V5RG93bicsICd0b3BLZXlVcCcsICd0b3BTZWxlY3Rpb25DaGFuZ2UnXVxuICB9XG59O1xuXG4vKipcbiAqIEZvciBJRSBzaGltc1xuICovXG52YXIgYWN0aXZlRWxlbWVudCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG5cbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjaGFuZ2VgIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHNob3VsZFVzZUNoYW5nZUV2ZW50KGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ3NlbGVjdCcgfHwgbm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAnZmlsZSc7XG59XG5cbnZhciBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBmYWxzZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgLy8gU2VlIGBoYW5kbGVDaGFuZ2VgIGNvbW1lbnQgYmVsb3dcbiAgZG9lc0NoYW5nZUV2ZW50QnViYmxlID0gaXNFdmVudFN1cHBvcnRlZCgnY2hhbmdlJykgJiYgKCFkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOCk7XG59XG5cbmZ1bmN0aW9uIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuY2hhbmdlLCBhY3RpdmVFbGVtZW50SW5zdCwgbmF0aXZlRXZlbnQsIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSk7XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG5cbiAgLy8gSWYgY2hhbmdlIGFuZCBwcm9wZXJ0eWNoYW5nZSBidWJibGVkLCB3ZSdkIGp1c3QgYmluZCB0byBpdCBsaWtlIGFsbCB0aGVcbiAgLy8gb3RoZXIgZXZlbnRzIGFuZCBoYXZlIGl0IGdvIHRocm91Z2ggUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLiBTaW5jZSBpdFxuICAvLyBkb2Vzbid0LCB3ZSBtYW51YWxseSBsaXN0ZW4gZm9yIHRoZSBldmVudHMgYW5kIHNvIHdlIGhhdmUgdG8gZW5xdWV1ZSBhbmRcbiAgLy8gcHJvY2VzcyB0aGUgYWJzdHJhY3QgZXZlbnQgbWFudWFsbHkuXG4gIC8vXG4gIC8vIEJhdGNoaW5nIGlzIG5lY2Vzc2FyeSBoZXJlIGluIG9yZGVyIHRvIGVuc3VyZSB0aGF0IGFsbCBldmVudCBoYW5kbGVycyBydW5cbiAgLy8gYmVmb3JlIHRoZSBuZXh0IHJlcmVuZGVyIChpbmNsdWRpbmcgZXZlbnQgaGFuZGxlcnMgYXR0YWNoZWQgdG8gYW5jZXN0b3JcbiAgLy8gZWxlbWVudHMgaW5zdGVhZCBvZiBkaXJlY3RseSBvbiB0aGUgaW5wdXQpLiBXaXRob3V0IHRoaXMsIGNvbnRyb2xsZWRcbiAgLy8gY29tcG9uZW50cyBkb24ndCB3b3JrIHByb3Blcmx5IGluIGNvbmp1bmN0aW9uIHdpdGggZXZlbnQgYnViYmxpbmcgYmVjYXVzZVxuICAvLyB0aGUgY29tcG9uZW50IGlzIHJlcmVuZGVyZWQgYW5kIHRoZSB2YWx1ZSByZXZlcnRlZCBiZWZvcmUgYWxsIHRoZSBldmVudFxuICAvLyBoYW5kbGVycyBjYW4gcnVuLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MDguXG4gIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhydW5FdmVudEluQmF0Y2gsIGV2ZW50KTtcbn1cblxuZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGV2ZW50KSB7XG4gIEV2ZW50UGx1Z2luSHViLmVucXVldWVFdmVudHMoZXZlbnQpO1xuICBFdmVudFBsdWdpbkh1Yi5wcm9jZXNzRXZlbnRRdWV1ZShmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgYWN0aXZlRWxlbWVudCA9IHRhcmdldDtcbiAgYWN0aXZlRWxlbWVudEluc3QgPSB0YXJnZXRJbnN0O1xuICBhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xufVxuXG5mdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpIHtcbiAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFjdGl2ZUVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uY2hhbmdlJywgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCk7XG4gIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcENoYW5nZScpIHtcbiAgICByZXR1cm4gdGFyZ2V0SW5zdDtcbiAgfVxufVxuZnVuY3Rpb24gaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTgodG9wTGV2ZWxUeXBlLCB0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcEZvY3VzJykge1xuICAgIC8vIHN0b3BXYXRjaGluZygpIHNob3VsZCBiZSBhIG5vb3AgaGVyZSBidXQgd2UgY2FsbCBpdCBqdXN0IGluIGNhc2Ugd2VcbiAgICAvLyBtaXNzZWQgYSBibHVyIGV2ZW50IHNvbWVob3cuXG4gICAgc3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgoKTtcbiAgICBzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgodGFyZ2V0LCB0YXJnZXRJbnN0KTtcbiAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BCbHVyJykge1xuICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gIH1cbn1cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG52YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50cy5cbiAgLy8gSUUxMCsgZmlyZSBpbnB1dCBldmVudHMgdG8gb2Z0ZW4sIHN1Y2ggd2hlbiBhIHBsYWNlaG9sZGVyXG4gIC8vIGNoYW5nZXMgb3Igd2hlbiBhbiBpbnB1dCB3aXRoIGEgcGxhY2Vob2xkZXIgaXMgZm9jdXNlZC5cbiAgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gaXNFdmVudFN1cHBvcnRlZCgnaW5wdXQnKSAmJiAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiAxMSk7XG59XG5cbi8qKlxuICogKEZvciBJRSA8PTExKSBSZXBsYWNlbWVudCBnZXR0ZXIvc2V0dGVyIGZvciB0aGUgYHZhbHVlYCBwcm9wZXJ0eSB0aGF0IGdldHNcbiAqIHNldCBvbiB0aGUgYWN0aXZlIGVsZW1lbnQuXG4gKi9cbnZhciBuZXdWYWx1ZVByb3AgPSB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhY3RpdmVFbGVtZW50VmFsdWVQcm9wLmdldC5jYWxsKHRoaXMpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAvLyBDYXN0IHRvIGEgc3RyaW5nIHNvIHdlIGNhbiBkbyBlcXVhbGl0eSBjaGVja3MuXG4gICAgYWN0aXZlRWxlbWVudFZhbHVlID0gJycgKyB2YWw7XG4gICAgYWN0aXZlRWxlbWVudFZhbHVlUHJvcC5zZXQuY2FsbCh0aGlzLCB2YWwpO1xuICB9XG59O1xuXG4vKipcbiAqIChGb3IgSUUgPD0xMSkgU3RhcnRzIHRyYWNraW5nIHByb3BlcnR5Y2hhbmdlIGV2ZW50cyBvbiB0aGUgcGFzc2VkLWluIGVsZW1lbnRcbiAqIGFuZCBvdmVycmlkZSB0aGUgdmFsdWUgcHJvcGVydHkgc28gdGhhdCB3ZSBjYW4gZGlzdGluZ3Vpc2ggdXNlciBldmVudHMgZnJvbVxuICogdmFsdWUgY2hhbmdlcyBpbiBKUy5cbiAqL1xuZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICBhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3Q7XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IHRhcmdldC52YWx1ZTtcbiAgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LmNvbnN0cnVjdG9yLnByb3RvdHlwZSwgJ3ZhbHVlJyk7XG5cbiAgLy8gTm90IGd1YXJkZWQgaW4gYSBjYW5EZWZpbmVQcm9wZXJ0eSBjaGVjazogSUU4IHN1cHBvcnRzIGRlZmluZVByb3BlcnR5IG9ubHlcbiAgLy8gb24gRE9NIGVsZW1lbnRzXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3RpdmVFbGVtZW50LCAndmFsdWUnLCBuZXdWYWx1ZVByb3ApO1xuICBpZiAoYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCkge1xuICAgIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdwcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlLCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiAoRm9yIElFIDw9MTEpIFJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBjdXJyZW50bHktdHJhY2tlZCBlbGVtZW50LFxuICogaWYgYW55IGV4aXN0cy5cbiAqL1xuZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSB7XG4gIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGRlbGV0ZSByZXN0b3JlcyB0aGUgb3JpZ2luYWwgcHJvcGVydHkgZGVmaW5pdGlvblxuICBkZWxldGUgYWN0aXZlRWxlbWVudC52YWx1ZTtcblxuICBpZiAoYWN0aXZlRWxlbWVudC5kZXRhY2hFdmVudCkge1xuICAgIGFjdGl2ZUVsZW1lbnQuZGV0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdwcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlLCBmYWxzZSk7XG4gIH1cblxuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50VmFsdWUgPSBudWxsO1xuICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gbnVsbDtcbn1cblxuLyoqXG4gKiAoRm9yIElFIDw9MTEpIEhhbmRsZXMgYSBwcm9wZXJ0eWNoYW5nZSBldmVudCwgc2VuZGluZyBhIGBjaGFuZ2VgIGV2ZW50IGlmXG4gKiB0aGUgdmFsdWUgb2YgdGhlIGFjdGl2ZSBlbGVtZW50IGhhcyBjaGFuZ2VkLlxuICovXG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICE9PSAndmFsdWUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciB2YWx1ZSA9IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQudmFsdWU7XG4gIGlmICh2YWx1ZSA9PT0gYWN0aXZlRWxlbWVudFZhbHVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IHZhbHVlO1xuXG4gIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpO1xufVxuXG4vKipcbiAqIElmIGEgYGNoYW5nZWAgZXZlbnQgc2hvdWxkIGJlIGZpcmVkLCByZXR1cm5zIHRoZSB0YXJnZXQncyBJRC5cbiAqL1xuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0KSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BJbnB1dCcpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgKGkuZS4sIG5vdCBJRTggb3IgSUU5KSwgdGhlIGlucHV0IGV2ZW50IGlzIGV4YWN0bHlcbiAgICAvLyB3aGF0IHdlIHdhbnQgc28gZmFsbCB0aHJvdWdoIGhlcmUgYW5kIHRyaWdnZXIgYW4gYWJzdHJhY3QgZXZlbnRcbiAgICByZXR1cm4gdGFyZ2V0SW5zdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUodG9wTGV2ZWxUeXBlLCB0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcEZvY3VzJykge1xuICAgIC8vIEluIElFOCwgd2UgY2FuIGNhcHR1cmUgYWxtb3N0IGFsbCAudmFsdWUgY2hhbmdlcyBieSBhZGRpbmcgYVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIGhhbmRsZXIgYW5kIGxvb2tpbmcgZm9yIGV2ZW50cyB3aXRoIHByb3BlcnR5TmFtZVxuICAgIC8vIGVxdWFsIHRvICd2YWx1ZSdcbiAgICAvLyBJbiBJRTktMTEsIHByb3BlcnR5Y2hhbmdlIGZpcmVzIGZvciBtb3N0IGlucHV0IGV2ZW50cyBidXQgaXMgYnVnZ3kgYW5kXG4gICAgLy8gZG9lc24ndCBmaXJlIHdoZW4gdGV4dCBpcyBkZWxldGVkLCBidXQgY29udmVuaWVudGx5LCBzZWxlY3Rpb25jaGFuZ2VcbiAgICAvLyBhcHBlYXJzIHRvIGZpcmUgaW4gYWxsIG9mIHRoZSByZW1haW5pbmcgY2FzZXMgc28gd2UgY2F0Y2ggdGhvc2UgYW5kXG4gICAgLy8gZm9yd2FyZCB0aGUgZXZlbnQgaWYgdGhlIHZhbHVlIGhhcyBjaGFuZ2VkXG4gICAgLy8gSW4gZWl0aGVyIGNhc2UsIHdlIGRvbid0IHdhbnQgdG8gY2FsbCB0aGUgZXZlbnQgaGFuZGxlciBpZiB0aGUgdmFsdWVcbiAgICAvLyBpcyBjaGFuZ2VkIGZyb20gSlMgc28gd2UgcmVkZWZpbmUgYSBzZXR0ZXIgZm9yIGAudmFsdWVgIHRoYXQgdXBkYXRlc1xuICAgIC8vIG91ciBhY3RpdmVFbGVtZW50VmFsdWUgdmFyaWFibGUsIGFsbG93aW5nIHVzIHRvIGlnbm9yZSB0aG9zZSBjaGFuZ2VzXG4gICAgLy9cbiAgICAvLyBzdG9wV2F0Y2hpbmcoKSBzaG91bGQgYmUgYSBub29wIGhlcmUgYnV0IHdlIGNhbGwgaXQganVzdCBpbiBjYXNlIHdlXG4gICAgLy8gbWlzc2VkIGEgYmx1ciBldmVudCBzb21laG93LlxuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gICAgc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRhcmdldCwgdGFyZ2V0SW5zdCk7XG4gIH0gZWxzZSBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wQmx1cicpIHtcbiAgICBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpO1xuICB9XG59XG5cbi8vIEZvciBJRTggYW5kIElFOS5cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50SUUodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0KSB7XG4gIGlmICh0b3BMZXZlbFR5cGUgPT09ICd0b3BTZWxlY3Rpb25DaGFuZ2UnIHx8IHRvcExldmVsVHlwZSA9PT0gJ3RvcEtleVVwJyB8fCB0b3BMZXZlbFR5cGUgPT09ICd0b3BLZXlEb3duJykge1xuICAgIC8vIE9uIHRoZSBzZWxlY3Rpb25jaGFuZ2UgZXZlbnQsIHRoZSB0YXJnZXQgaXMganVzdCBkb2N1bWVudCB3aGljaCBpc24ndFxuICAgIC8vIGhlbHBmdWwgZm9yIHVzIHNvIGp1c3QgY2hlY2sgYWN0aXZlRWxlbWVudCBpbnN0ZWFkLlxuICAgIC8vXG4gICAgLy8gOTklIG9mIHRoZSB0aW1lLCBrZXlkb3duIGFuZCBrZXl1cCBhcmVuJ3QgbmVjZXNzYXJ5LiBJRTggZmFpbHMgdG8gZmlyZVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIG9uIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhZnRlciBzZXR0aW5nIGB2YWx1ZWAgZnJvbSBhXG4gICAgLy8gc2NyaXB0IGFuZCBmaXJlcyBvbmx5IGtleWRvd24sIGtleXByZXNzLCBrZXl1cC4gQ2F0Y2hpbmcga2V5dXAgdXN1YWxseVxuICAgIC8vIGdldHMgaXQgYW5kIGNhdGNoaW5nIGtleWRvd24gbGV0cyB1cyBmaXJlIGFuIGV2ZW50IGZvciB0aGUgZmlyc3RcbiAgICAvLyBrZXlzdHJva2UgaWYgdXNlciBkb2VzIGEga2V5IHJlcGVhdCAoaXQnbGwgYmUgYSBsaXR0bGUgZGVsYXllZDogcmlnaHRcbiAgICAvLyBiZWZvcmUgdGhlIHNlY29uZCBrZXlzdHJva2UpLiBPdGhlciBpbnB1dCBtZXRob2RzIChlLmcuLCBwYXN0ZSkgc2VlbSB0b1xuICAgIC8vIGZpcmUgc2VsZWN0aW9uY2hhbmdlIG5vcm1hbGx5LlxuICAgIGlmIChhY3RpdmVFbGVtZW50ICYmIGFjdGl2ZUVsZW1lbnQudmFsdWUgIT09IGFjdGl2ZUVsZW1lbnRWYWx1ZSkge1xuICAgICAgYWN0aXZlRWxlbWVudFZhbHVlID0gYWN0aXZlRWxlbWVudC52YWx1ZTtcbiAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50SW5zdDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGNsaWNrYCBldmVudFxuICovXG5mdW5jdGlvbiBzaG91bGRVc2VDbGlja0V2ZW50KGVsZW0pIHtcbiAgLy8gVXNlIHRoZSBgY2xpY2tgIGV2ZW50IHRvIGRldGVjdCBjaGFuZ2VzIHRvIGNoZWNrYm94IGFuZCByYWRpbyBpbnB1dHMuXG4gIC8vIFRoaXMgYXBwcm9hY2ggd29ya3MgYWNyb3NzIGFsbCBicm93c2Vycywgd2hlcmVhcyBgY2hhbmdlYCBkb2VzIG5vdCBmaXJlXG4gIC8vIHVudGlsIGBibHVyYCBpbiBJRTguXG4gIHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0JyAmJiAoZWxlbS50eXBlID09PSAnY2hlY2tib3gnIHx8IGVsZW0udHlwZSA9PT0gJ3JhZGlvJyk7XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCkge1xuICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wQ2xpY2snKSB7XG4gICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gIH1cbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvbkNoYW5nZWAgZXZlbnQgdGhhdCBub3JtYWxpemVzIGNoYW5nZSBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLiBUaGlzIGV2ZW50IGZpcmVzIGF0IGEgdGltZSB3aGVuIGl0J3MgcG9zc2libGUgdG9cbiAqIGNoYW5nZSB0aGUgZWxlbWVudCdzIHZhbHVlIHdpdGhvdXQgc2VlaW5nIGEgZmxpY2tlci5cbiAqXG4gKiBTdXBwb3J0ZWQgZWxlbWVudHMgYXJlOlxuICogLSBpbnB1dCAoc2VlIGBpc1RleHRJbnB1dEVsZW1lbnRgKVxuICogLSB0ZXh0YXJlYVxuICogLSBzZWxlY3RcbiAqL1xudmFyIENoYW5nZUV2ZW50UGx1Z2luID0ge1xuXG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIHRhcmdldE5vZGUgPSB0YXJnZXRJbnN0ID8gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UodGFyZ2V0SW5zdCkgOiB3aW5kb3c7XG5cbiAgICB2YXIgZ2V0VGFyZ2V0SW5zdEZ1bmMsIGhhbmRsZUV2ZW50RnVuYztcbiAgICBpZiAoc2hvdWxkVXNlQ2hhbmdlRXZlbnQodGFyZ2V0Tm9kZSkpIHtcbiAgICAgIGlmIChkb2VzQ2hhbmdlRXZlbnRCdWJibGUpIHtcbiAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFODtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0YXJnZXROb2RlKSkge1xuICAgICAgaWYgKGlzSW5wdXRFdmVudFN1cHBvcnRlZCkge1xuICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudElFO1xuICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzaG91bGRVc2VDbGlja0V2ZW50KHRhcmdldE5vZGUpKSB7XG4gICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50O1xuICAgIH1cblxuICAgIGlmIChnZXRUYXJnZXRJbnN0RnVuYykge1xuICAgICAgdmFyIGluc3QgPSBnZXRUYXJnZXRJbnN0RnVuYyh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpO1xuICAgICAgaWYgKGluc3QpIHtcbiAgICAgICAgdmFyIGV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuY2hhbmdlLCBpbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICBldmVudC50eXBlID0gJ2NoYW5nZSc7XG4gICAgICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFuZGxlRXZlbnRGdW5jKSB7XG4gICAgICBoYW5kbGVFdmVudEZ1bmModG9wTGV2ZWxUeXBlLCB0YXJnZXROb2RlLCB0YXJnZXRJbnN0KTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDaGFuZ2VFdmVudFBsdWdpbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9DaGFuZ2VFdmVudFBsdWdpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTE1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBET01MYXp5VHJlZSA9IHJlcXVpcmUoJy4vRE9NTGF6eVRyZWUnKTtcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgPSByZXF1aXJlKCdmYmpzL2xpYi9jcmVhdGVOb2Rlc0Zyb21NYXJrdXAnKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgRGFuZ2VyID0ge1xuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhIG5vZGUgd2l0aCBhIHN0cmluZyBvZiBtYXJrdXAgYXQgaXRzIGN1cnJlbnQgcG9zaXRpb24gd2l0aGluIGl0c1xuICAgKiBwYXJlbnQuIFRoZSBtYXJrdXAgbXVzdCByZW5kZXIgaW50byBhIHNpbmdsZSByb290IG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gb2xkQ2hpbGQgQ2hpbGQgbm9kZSB0byByZXBsYWNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWFya3VwIE1hcmt1cCB0byByZW5kZXIgaW4gcGxhY2Ugb2YgdGhlIGNoaWxkIG5vZGUuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IGZ1bmN0aW9uIChvbGRDaGlsZCwgbWFya3VwKSB7XG4gICAgIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVuZGVyIG1hcmt1cCBpbiBhIHdvcmtlciB0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlIGdsb2JhbGx5IGJlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlIFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkgZm9yIHNlcnZlciByZW5kZXJpbmcuJykgOiBfcHJvZEludmFyaWFudCgnNTYnKSA6IHZvaWQgMDtcbiAgICAhbWFya3VwID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IE1pc3NpbmcgbWFya3VwLicpIDogX3Byb2RJbnZhcmlhbnQoJzU3JykgOiB2b2lkIDA7XG4gICAgIShvbGRDaGlsZC5ub2RlTmFtZSAhPT0gJ0hUTUwnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVwbGFjZSBtYXJrdXAgb2YgdGhlIDxodG1sPiBub2RlLiBUaGlzIGlzIGJlY2F1c2UgYnJvd3NlciBxdWlya3MgbWFrZSB0aGlzIHVucmVsaWFibGUgYW5kL29yIHNsb3cuIElmIHlvdSB3YW50IHRvIHJlbmRlciB0byB0aGUgcm9vdCB5b3UgbXVzdCB1c2Ugc2VydmVyIHJlbmRlcmluZy4gU2VlIFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkuJykgOiBfcHJvZEludmFyaWFudCgnNTgnKSA6IHZvaWQgMDtcblxuICAgIGlmICh0eXBlb2YgbWFya3VwID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIG5ld0NoaWxkID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cCwgZW1wdHlGdW5jdGlvbilbMF07XG4gICAgICBvbGRDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdDaGlsZCwgb2xkQ2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBET01MYXp5VHJlZS5yZXBsYWNlQ2hpbGRXaXRoVHJlZShvbGRDaGlsZCwgbWFya3VwKTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEYW5nZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvRGFuZ2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBNb2R1bGUgdGhhdCBpcyBpbmplY3RhYmxlIGludG8gYEV2ZW50UGx1Z2luSHViYCwgdGhhdCBzcGVjaWZpZXMgYVxuICogZGV0ZXJtaW5pc3RpYyBvcmRlcmluZyBvZiBgRXZlbnRQbHVnaW5gcy4gQSBjb252ZW5pZW50IHdheSB0byByZWFzb24gYWJvdXRcbiAqIHBsdWdpbnMsIHdpdGhvdXQgaGF2aW5nIHRvIHBhY2thZ2UgZXZlcnkgb25lIG9mIHRoZW0uIFRoaXMgaXMgYmV0dGVyIHRoYW5cbiAqIGhhdmluZyBwbHVnaW5zIGJlIG9yZGVyZWQgaW4gdGhlIHNhbWUgb3JkZXIgdGhhdCB0aGV5IGFyZSBpbmplY3RlZCBiZWNhdXNlXG4gKiB0aGF0IG9yZGVyaW5nIHdvdWxkIGJlIGluZmx1ZW5jZWQgYnkgdGhlIHBhY2thZ2luZyBvcmRlci5cbiAqIGBSZXNwb25kZXJFdmVudFBsdWdpbmAgbXVzdCBvY2N1ciBiZWZvcmUgYFNpbXBsZUV2ZW50UGx1Z2luYCBzbyB0aGF0XG4gKiBwcmV2ZW50aW5nIGRlZmF1bHQgb24gZXZlbnRzIGlzIGNvbnZlbmllbnQgaW4gYFNpbXBsZUV2ZW50UGx1Z2luYCBoYW5kbGVycy5cbiAqL1xuXG52YXIgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIgPSBbJ1Jlc3BvbmRlckV2ZW50UGx1Z2luJywgJ1NpbXBsZUV2ZW50UGx1Z2luJywgJ1RhcEV2ZW50UGx1Z2luJywgJ0VudGVyTGVhdmVFdmVudFBsdWdpbicsICdDaGFuZ2VFdmVudFBsdWdpbicsICdTZWxlY3RFdmVudFBsdWdpbicsICdCZWZvcmVJbnB1dEV2ZW50UGx1Z2luJ107XG5cbm1vZHVsZS5leHBvcnRzID0gRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIuanNcbi8vIG1vZHVsZSBpZCA9IDExN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoJy4vRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgbW91c2VFbnRlcjoge1xuICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbk1vdXNlRW50ZXInLFxuICAgIGRlcGVuZGVuY2llczogWyd0b3BNb3VzZU91dCcsICd0b3BNb3VzZU92ZXInXVxuICB9LFxuICBtb3VzZUxlYXZlOiB7XG4gICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTW91c2VMZWF2ZScsXG4gICAgZGVwZW5kZW5jaWVzOiBbJ3RvcE1vdXNlT3V0JywgJ3RvcE1vdXNlT3ZlciddXG4gIH1cbn07XG5cbnZhciBFbnRlckxlYXZlRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICAvKipcbiAgICogRm9yIGFsbW9zdCBldmVyeSBpbnRlcmFjdGlvbiB3ZSBjYXJlIGFib3V0LCB0aGVyZSB3aWxsIGJlIGJvdGggYSB0b3AtbGV2ZWxcbiAgICogYG1vdXNlb3ZlcmAgYW5kIGBtb3VzZW91dGAgZXZlbnQgdGhhdCBvY2N1cnMuIE9ubHkgdXNlIGBtb3VzZW91dGAgc28gdGhhdFxuICAgKiB3ZSBkbyBub3QgZXh0cmFjdCBkdXBsaWNhdGUgZXZlbnRzLiBIb3dldmVyLCBtb3ZpbmcgdGhlIG1vdXNlIGludG8gdGhlXG4gICAqIGJyb3dzZXIgZnJvbSBvdXRzaWRlIHdpbGwgbm90IGZpcmUgYSBgbW91c2VvdXRgIGV2ZW50LiBJbiB0aGlzIGNhc2UsIHdlIHVzZVxuICAgKiB0aGUgYG1vdXNlb3ZlcmAgdG9wLWxldmVsIGV2ZW50LlxuICAgKi9cbiAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcE1vdXNlT3ZlcicgJiYgKG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQuZnJvbUVsZW1lbnQpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRvcExldmVsVHlwZSAhPT0gJ3RvcE1vdXNlT3V0JyAmJiB0b3BMZXZlbFR5cGUgIT09ICd0b3BNb3VzZU92ZXInKSB7XG4gICAgICAvLyBNdXN0IG5vdCBiZSBhIG1vdXNlIGluIG9yIG1vdXNlIG91dCAtIGlnbm9yaW5nLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHdpbjtcbiAgICBpZiAobmF0aXZlRXZlbnRUYXJnZXQud2luZG93ID09PSBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgICAgLy8gYG5hdGl2ZUV2ZW50VGFyZ2V0YCBpcyBwcm9iYWJseSBhIHdpbmRvdyBvYmplY3QuXG4gICAgICB3aW4gPSBuYXRpdmVFdmVudFRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVE9ETzogRmlndXJlIG91dCB3aHkgYG93bmVyRG9jdW1lbnRgIGlzIHNvbWV0aW1lcyB1bmRlZmluZWQgaW4gSUU4LlxuICAgICAgdmFyIGRvYyA9IG5hdGl2ZUV2ZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIHdpbiA9IGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luID0gd2luZG93O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBmcm9tO1xuICAgIHZhciB0bztcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSAndG9wTW91c2VPdXQnKSB7XG4gICAgICBmcm9tID0gdGFyZ2V0SW5zdDtcbiAgICAgIHZhciByZWxhdGVkID0gbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC50b0VsZW1lbnQ7XG4gICAgICB0byA9IHJlbGF0ZWQgPyBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVsYXRlZCkgOiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNb3ZpbmcgdG8gYSBub2RlIGZyb20gb3V0c2lkZSB0aGUgd2luZG93LlxuICAgICAgZnJvbSA9IG51bGw7XG4gICAgICB0byA9IHRhcmdldEluc3Q7XG4gICAgfVxuXG4gICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICAvLyBOb3RoaW5nIHBlcnRhaW5zIHRvIG91ciBtYW5hZ2VkIGNvbXBvbmVudHMuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgZnJvbU5vZGUgPSBmcm9tID09IG51bGwgPyB3aW4gOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShmcm9tKTtcbiAgICB2YXIgdG9Ob2RlID0gdG8gPT0gbnVsbCA/IHdpbiA6IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRvKTtcblxuICAgIHZhciBsZWF2ZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMubW91c2VMZWF2ZSwgZnJvbSwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBsZWF2ZS50eXBlID0gJ21vdXNlbGVhdmUnO1xuICAgIGxlYXZlLnRhcmdldCA9IGZyb21Ob2RlO1xuICAgIGxlYXZlLnJlbGF0ZWRUYXJnZXQgPSB0b05vZGU7XG5cbiAgICB2YXIgZW50ZXIgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLm1vdXNlRW50ZXIsIHRvLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGVudGVyLnR5cGUgPSAnbW91c2VlbnRlcic7XG4gICAgZW50ZXIudGFyZ2V0ID0gdG9Ob2RlO1xuICAgIGVudGVyLnJlbGF0ZWRUYXJnZXQgPSBmcm9tTm9kZTtcblxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbSwgdG8pO1xuXG4gICAgcmV0dXJuIFtsZWF2ZSwgZW50ZXJdO1xuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL0VudGVyTGVhdmVFdmVudFBsdWdpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG5cbnZhciBnZXRUZXh0Q29udGVudEFjY2Vzc29yID0gcmVxdWlyZSgnLi9nZXRUZXh0Q29udGVudEFjY2Vzc29yJyk7XG5cbi8qKlxuICogVGhpcyBoZWxwZXIgY2xhc3Mgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRleHQgY29udGVudCBvZiBhIHRhcmdldCBub2RlLFxuICogYWxsb3dpbmcgY29tcGFyaXNvbiBvZiBjb250ZW50IGJlZm9yZSBhbmQgYWZ0ZXIgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBJZGVudGlmeSB0aGUgbm9kZSB3aGVyZSBzZWxlY3Rpb24gY3VycmVudGx5IGJlZ2lucywgdGhlbiBvYnNlcnZlXG4gKiBib3RoIGl0cyB0ZXh0IGNvbnRlbnQgYW5kIGl0cyBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBET00uIFNpbmNlIHRoZVxuICogYnJvd3NlciBtYXkgbmF0aXZlbHkgcmVwbGFjZSB0aGUgdGFyZ2V0IG5vZGUgZHVyaW5nIGNvbXBvc2l0aW9uLCB3ZSBjYW5cbiAqIHVzZSBpdHMgcG9zaXRpb24gdG8gZmluZCBpdHMgcmVwbGFjZW1lbnQuXG4gKlxuICogQHBhcmFtIHtET01FdmVudFRhcmdldH0gcm9vdFxuICovXG5mdW5jdGlvbiBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUocm9vdCkge1xuICB0aGlzLl9yb290ID0gcm9vdDtcbiAgdGhpcy5fc3RhcnRUZXh0ID0gdGhpcy5nZXRUZXh0KCk7XG4gIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IG51bGw7XG59XG5cbl9hc3NpZ24oRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLnByb3RvdHlwZSwge1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgdGhpcy5fc3RhcnRUZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9mYWxsYmFja1RleHQgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCB0ZXh0IG9mIGlucHV0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXRUZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCd2YWx1ZScgaW4gdGhpcy5fcm9vdCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3Jvb3QudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9yb290W2dldFRleHRDb250ZW50QWNjZXNzb3IoKV07XG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgZGlmZmVyaW5nIHN1YnN0cmluZyBiZXR3ZWVuIHRoZSBpbml0aWFsbHkgc3RvcmVkXG4gICAqIHRleHQgY29udGVudCBhbmQgdGhlIGN1cnJlbnQgY29udGVudC5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0RGF0YTogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9mYWxsYmFja1RleHQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0O1xuICAgIHZhciBzdGFydFZhbHVlID0gdGhpcy5fc3RhcnRUZXh0O1xuICAgIHZhciBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoO1xuICAgIHZhciBlbmQ7XG4gICAgdmFyIGVuZFZhbHVlID0gdGhpcy5nZXRUZXh0KCk7XG4gICAgdmFyIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcblxuICAgIGZvciAoc3RhcnQgPSAwOyBzdGFydCA8IHN0YXJ0TGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydF0gIT09IGVuZFZhbHVlW3N0YXJ0XSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbWluRW5kID0gc3RhcnRMZW5ndGggLSBzdGFydDtcbiAgICBmb3IgKGVuZCA9IDE7IGVuZCA8PSBtaW5FbmQ7IGVuZCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gIT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNsaWNlVGFpbCA9IGVuZCA+IDEgPyAxIC0gZW5kIDogdW5kZWZpbmVkO1xuICAgIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IGVuZFZhbHVlLnNsaWNlKHN0YXJ0LCBzbGljZVRhaWwpO1xuICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gIH1cbn0pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xuXG52YXIgTVVTVF9VU0VfUFJPUEVSVFkgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uTVVTVF9VU0VfUFJPUEVSVFk7XG52YXIgSEFTX0JPT0xFQU5fVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUU7XG52YXIgSEFTX05VTUVSSUNfVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX05VTUVSSUNfVkFMVUU7XG52YXIgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU7XG52YXIgSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFO1xuXG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0ge1xuICBpc0N1c3RvbUF0dHJpYnV0ZTogUmVnRXhwLnByb3RvdHlwZS50ZXN0LmJpbmQobmV3IFJlZ0V4cCgnXihkYXRhfGFyaWEpLVsnICsgRE9NUHJvcGVydHkuQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKSksXG4gIFByb3BlcnRpZXM6IHtcbiAgICAvKipcbiAgICAgKiBTdGFuZGFyZCBQcm9wZXJ0aWVzXG4gICAgICovXG4gICAgYWNjZXB0OiAwLFxuICAgIGFjY2VwdENoYXJzZXQ6IDAsXG4gICAgYWNjZXNzS2V5OiAwLFxuICAgIGFjdGlvbjogMCxcbiAgICBhbGxvd0Z1bGxTY3JlZW46IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGFsbG93VHJhbnNwYXJlbmN5OiAwLFxuICAgIGFsdDogMCxcbiAgICAvLyBzcGVjaWZpZXMgdGFyZ2V0IGNvbnRleHQgZm9yIGxpbmtzIHdpdGggYHByZWxvYWRgIHR5cGVcbiAgICBhczogMCxcbiAgICBhc3luYzogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYXV0b0NvbXBsZXRlOiAwLFxuICAgIC8vIGF1dG9Gb2N1cyBpcyBwb2x5ZmlsbGVkL25vcm1hbGl6ZWQgYnkgQXV0b0ZvY3VzVXRpbHNcbiAgICAvLyBhdXRvRm9jdXM6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGF1dG9QbGF5OiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjYXB0dXJlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjZWxsUGFkZGluZzogMCxcbiAgICBjZWxsU3BhY2luZzogMCxcbiAgICBjaGFyU2V0OiAwLFxuICAgIGNoYWxsZW5nZTogMCxcbiAgICBjaGVja2VkOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNpdGU6IDAsXG4gICAgY2xhc3NJRDogMCxcbiAgICBjbGFzc05hbWU6IDAsXG4gICAgY29sczogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgY29sU3BhbjogMCxcbiAgICBjb250ZW50OiAwLFxuICAgIGNvbnRlbnRFZGl0YWJsZTogMCxcbiAgICBjb250ZXh0TWVudTogMCxcbiAgICBjb250cm9sczogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY29vcmRzOiAwLFxuICAgIGNyb3NzT3JpZ2luOiAwLFxuICAgIGRhdGE6IDAsIC8vIEZvciBgPG9iamVjdCAvPmAgYWN0cyBhcyBgc3JjYC5cbiAgICBkYXRlVGltZTogMCxcbiAgICAnZGVmYXVsdCc6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRlZmVyOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBkaXI6IDAsXG4gICAgZGlzYWJsZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRvd25sb2FkOiBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFLFxuICAgIGRyYWdnYWJsZTogMCxcbiAgICBlbmNUeXBlOiAwLFxuICAgIGZvcm06IDAsXG4gICAgZm9ybUFjdGlvbjogMCxcbiAgICBmb3JtRW5jVHlwZTogMCxcbiAgICBmb3JtTWV0aG9kOiAwLFxuICAgIGZvcm1Ob1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBmb3JtVGFyZ2V0OiAwLFxuICAgIGZyYW1lQm9yZGVyOiAwLFxuICAgIGhlYWRlcnM6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIGhpZGRlbjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgaGlnaDogMCxcbiAgICBocmVmOiAwLFxuICAgIGhyZWZMYW5nOiAwLFxuICAgIGh0bWxGb3I6IDAsXG4gICAgaHR0cEVxdWl2OiAwLFxuICAgIGljb246IDAsXG4gICAgaWQ6IDAsXG4gICAgaW5wdXRNb2RlOiAwLFxuICAgIGludGVncml0eTogMCxcbiAgICBpczogMCxcbiAgICBrZXlQYXJhbXM6IDAsXG4gICAga2V5VHlwZTogMCxcbiAgICBraW5kOiAwLFxuICAgIGxhYmVsOiAwLFxuICAgIGxhbmc6IDAsXG4gICAgbGlzdDogMCxcbiAgICBsb29wOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBsb3c6IDAsXG4gICAgbWFuaWZlc3Q6IDAsXG4gICAgbWFyZ2luSGVpZ2h0OiAwLFxuICAgIG1hcmdpbldpZHRoOiAwLFxuICAgIG1heDogMCxcbiAgICBtYXhMZW5ndGg6IDAsXG4gICAgbWVkaWE6IDAsXG4gICAgbWVkaWFHcm91cDogMCxcbiAgICBtZXRob2Q6IDAsXG4gICAgbWluOiAwLFxuICAgIG1pbkxlbmd0aDogMCxcbiAgICAvLyBDYXV0aW9uOyBgb3B0aW9uLnNlbGVjdGVkYCBpcyBub3QgdXBkYXRlZCBpZiBgc2VsZWN0Lm11bHRpcGxlYCBpc1xuICAgIC8vIGRpc2FibGVkIHdpdGggYHJlbW92ZUF0dHJpYnV0ZWAuXG4gICAgbXVsdGlwbGU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbXV0ZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgbmFtZTogMCxcbiAgICBub25jZTogMCxcbiAgICBub1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBvcGVuOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBvcHRpbXVtOiAwLFxuICAgIHBhdHRlcm46IDAsXG4gICAgcGxhY2Vob2xkZXI6IDAsXG4gICAgcGxheXNJbmxpbmU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHBvc3RlcjogMCxcbiAgICBwcmVsb2FkOiAwLFxuICAgIHByb2ZpbGU6IDAsXG4gICAgcmFkaW9Hcm91cDogMCxcbiAgICByZWFkT25seTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgcmVmZXJyZXJQb2xpY3k6IDAsXG4gICAgcmVsOiAwLFxuICAgIHJlcXVpcmVkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICByZXZlcnNlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgcm9sZTogMCxcbiAgICByb3dzOiBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICByb3dTcGFuOiBIQVNfTlVNRVJJQ19WQUxVRSxcbiAgICBzYW5kYm94OiAwLFxuICAgIHNjb3BlOiAwLFxuICAgIHNjb3BlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgc2Nyb2xsaW5nOiAwLFxuICAgIHNlYW1sZXNzOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzZWxlY3RlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBzaGFwZTogMCxcbiAgICBzaXplOiBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBzaXplczogMCxcbiAgICBzcGFuOiBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBzcGVsbENoZWNrOiAwLFxuICAgIHNyYzogMCxcbiAgICBzcmNEb2M6IDAsXG4gICAgc3JjTGFuZzogMCxcbiAgICBzcmNTZXQ6IDAsXG4gICAgc3RhcnQ6IEhBU19OVU1FUklDX1ZBTFVFLFxuICAgIHN0ZXA6IDAsXG4gICAgc3R5bGU6IDAsXG4gICAgc3VtbWFyeTogMCxcbiAgICB0YWJJbmRleDogMCxcbiAgICB0YXJnZXQ6IDAsXG4gICAgdGl0bGU6IDAsXG4gICAgLy8gU2V0dGluZyAudHlwZSB0aHJvd3Mgb24gbm9uLTxpbnB1dD4gdGFnc1xuICAgIHR5cGU6IDAsXG4gICAgdXNlTWFwOiAwLFxuICAgIHZhbHVlOiAwLFxuICAgIHdpZHRoOiAwLFxuICAgIHdtb2RlOiAwLFxuICAgIHdyYXA6IDAsXG5cbiAgICAvKipcbiAgICAgKiBSREZhIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBhYm91dDogMCxcbiAgICBkYXRhdHlwZTogMCxcbiAgICBpbmxpc3Q6IDAsXG4gICAgcHJlZml4OiAwLFxuICAgIC8vIHByb3BlcnR5IGlzIGFsc28gc3VwcG9ydGVkIGZvciBPcGVuR3JhcGggaW4gbWV0YSB0YWdzLlxuICAgIHByb3BlcnR5OiAwLFxuICAgIHJlc291cmNlOiAwLFxuICAgICd0eXBlb2YnOiAwLFxuICAgIHZvY2FiOiAwLFxuXG4gICAgLyoqXG4gICAgICogTm9uLXN0YW5kYXJkIFByb3BlcnRpZXNcbiAgICAgKi9cbiAgICAvLyBhdXRvQ2FwaXRhbGl6ZSBhbmQgYXV0b0NvcnJlY3QgYXJlIHN1cHBvcnRlZCBpbiBNb2JpbGUgU2FmYXJpIGZvclxuICAgIC8vIGtleWJvYXJkIGhpbnRzLlxuICAgIGF1dG9DYXBpdGFsaXplOiAwLFxuICAgIGF1dG9Db3JyZWN0OiAwLFxuICAgIC8vIGF1dG9TYXZlIGFsbG93cyBXZWJLaXQvQmxpbmsgdG8gcGVyc2lzdCB2YWx1ZXMgb2YgaW5wdXQgZmllbGRzIG9uIHBhZ2UgcmVsb2Fkc1xuICAgIGF1dG9TYXZlOiAwLFxuICAgIC8vIGNvbG9yIGlzIGZvciBTYWZhcmkgbWFzay1pY29uIGxpbmtcbiAgICBjb2xvcjogMCxcbiAgICAvLyBpdGVtUHJvcCwgaXRlbVNjb3BlLCBpdGVtVHlwZSBhcmUgZm9yXG4gICAgLy8gTWljcm9kYXRhIHN1cHBvcnQuIFNlZSBodHRwOi8vc2NoZW1hLm9yZy9kb2NzL2dzLmh0bWxcbiAgICBpdGVtUHJvcDogMCxcbiAgICBpdGVtU2NvcGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGl0ZW1UeXBlOiAwLFxuICAgIC8vIGl0ZW1JRCBhbmQgaXRlbVJlZiBhcmUgZm9yIE1pY3JvZGF0YSBzdXBwb3J0IGFzIHdlbGwgYnV0XG4gICAgLy8gb25seSBzcGVjaWZpZWQgaW4gdGhlIFdIQVRXRyBzcGVjIGRvY3VtZW50LiBTZWVcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9taWNyb2RhdGEuaHRtbCNtaWNyb2RhdGEtZG9tLWFwaVxuICAgIGl0ZW1JRDogMCxcbiAgICBpdGVtUmVmOiAwLFxuICAgIC8vIHJlc3VsdHMgc2hvdyBsb29raW5nIGdsYXNzIGljb24gYW5kIHJlY2VudCBzZWFyY2hlcyBvbiBpbnB1dFxuICAgIC8vIHNlYXJjaCBmaWVsZHMgaW4gV2ViS2l0L0JsaW5rXG4gICAgcmVzdWx0czogMCxcbiAgICAvLyBJRS1vbmx5IGF0dHJpYnV0ZSB0aGF0IHNwZWNpZmllcyBzZWN1cml0eSByZXN0cmljdGlvbnMgb24gYW4gaWZyYW1lXG4gICAgLy8gYXMgYW4gYWx0ZXJuYXRpdmUgdG8gdGhlIHNhbmRib3ggYXR0cmlidXRlIG9uIElFPDEwXG4gICAgc2VjdXJpdHk6IDAsXG4gICAgLy8gSUUtb25seSBhdHRyaWJ1dGUgdGhhdCBjb250cm9scyBmb2N1cyBiZWhhdmlvclxuICAgIHVuc2VsZWN0YWJsZTogMFxuICB9LFxuICBET01BdHRyaWJ1dGVOYW1lczoge1xuICAgIGFjY2VwdENoYXJzZXQ6ICdhY2NlcHQtY2hhcnNldCcsXG4gICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxuICAgIGh0bWxGb3I6ICdmb3InLFxuICAgIGh0dHBFcXVpdjogJ2h0dHAtZXF1aXYnXG4gIH0sXG4gIERPTVByb3BlcnR5TmFtZXM6IHt9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhUTUxET01Qcm9wZXJ0eUNvbmZpZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9IVE1MRE9NUHJvcGVydHlDb25maWcuanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcblxudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciBLZXlFc2NhcGVVdGlscyA9IHJlcXVpcmUoJy4vS2V5RXNjYXBlVXRpbHMnKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIFJlYWN0Q29tcG9uZW50VHJlZUhvb2s7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAvLyBUZW1wb3JhcnkgaGFjay5cbiAgLy8gSW5saW5lIHJlcXVpcmVzIGRvbid0IHdvcmsgd2VsbCB3aXRoIEplc3Q6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI0MFxuICAvLyBSZW1vdmUgdGhlIGlubGluZSByZXF1aXJlcyB3aGVuIHdlIGRvbid0IG5lZWQgdGhlbSBhbnltb3JlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MTc4XG4gIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xufVxuXG5mdW5jdGlvbiBpbnN0YW50aWF0ZUNoaWxkKGNoaWxkSW5zdGFuY2VzLCBjaGlsZCwgbmFtZSwgc2VsZkRlYnVnSUQpIHtcbiAgLy8gV2UgZm91bmQgYSBjb21wb25lbnQgaW5zdGFuY2UuXG4gIHZhciBrZXlVbmlxdWUgPSBjaGlsZEluc3RhbmNlc1tuYW1lXSA9PT0gdW5kZWZpbmVkO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghUmVhY3RDb21wb25lbnRUcmVlSG9vaykge1xuICAgICAgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rJyk7XG4gICAgfVxuICAgIGlmICgha2V5VW5pcXVlKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2ZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgKyAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLiVzJywgS2V5RXNjYXBlVXRpbHMudW5lc2NhcGUobmFtZSksIFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoc2VsZkRlYnVnSUQpKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgaWYgKGNoaWxkICE9IG51bGwgJiYga2V5VW5pcXVlKSB7XG4gICAgY2hpbGRJbnN0YW5jZXNbbmFtZV0gPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGNoaWxkLCB0cnVlKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlYWN0Q2hpbGRSZWNvbmNpbGVyIHByb3ZpZGVzIGhlbHBlcnMgZm9yIGluaXRpYWxpemluZyBvciB1cGRhdGluZyBhIHNldCBvZlxuICogY2hpbGRyZW4uIEl0cyBvdXRwdXQgaXMgc3VpdGFibGUgZm9yIHBhc3NpbmcgaXQgb250byBSZWFjdE11bHRpQ2hpbGQgd2hpY2hcbiAqIGRvZXMgZGlmZmVkIHJlb3JkZXJpbmcgYW5kIGluc2VydGlvbi5cbiAqL1xudmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0ge1xuICAvKipcbiAgICogR2VuZXJhdGVzIGEgXCJtb3VudCBpbWFnZVwiIGZvciBlYWNoIG9mIHRoZSBzdXBwbGllZCBjaGlsZHJlbi4gSW4gdGhlIGNhc2VcbiAgICogb2YgYFJlYWN0RE9NQ29tcG9uZW50YCwgYSBtb3VudCBpbWFnZSBpcyBhIHN0cmluZyBvZiBtYXJrdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmVzdGVkQ2hpbGROb2RlcyBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICogQHJldHVybiB7P29iamVjdH0gQSBzZXQgb2YgY2hpbGQgaW5zdGFuY2VzLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGluc3RhbnRpYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChuZXN0ZWRDaGlsZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCwgc2VsZkRlYnVnSUQgLy8gMCBpbiBwcm9kdWN0aW9uIGFuZCBmb3Igcm9vdHNcbiAgKSB7XG4gICAgaWYgKG5lc3RlZENoaWxkTm9kZXMgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBjaGlsZEluc3RhbmNlcyA9IHt9O1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRyYXZlcnNlQWxsQ2hpbGRyZW4obmVzdGVkQ2hpbGROb2RlcywgZnVuY3Rpb24gKGNoaWxkSW5zdHMsIGNoaWxkLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBpbnN0YW50aWF0ZUNoaWxkKGNoaWxkSW5zdHMsIGNoaWxkLCBuYW1lLCBzZWxmRGVidWdJRCk7XG4gICAgICB9LCBjaGlsZEluc3RhbmNlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYXZlcnNlQWxsQ2hpbGRyZW4obmVzdGVkQ2hpbGROb2RlcywgaW5zdGFudGlhdGVDaGlsZCwgY2hpbGRJbnN0YW5jZXMpO1xuICAgIH1cbiAgICByZXR1cm4gY2hpbGRJbnN0YW5jZXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHJlbmRlcmVkIGNoaWxkcmVuIGFuZCByZXR1cm5zIGEgbmV3IHNldCBvZiBjaGlsZHJlbi5cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q2hpbGRyZW4gUHJldmlvdXNseSBpbml0aWFsaXplZCBzZXQgb2YgY2hpbGRyZW4uXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENoaWxkcmVuIEZsYXQgY2hpbGQgZWxlbWVudCBtYXBzLlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4gez9vYmplY3R9IEEgbmV3IHNldCBvZiBjaGlsZCBpbnN0YW5jZXMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgbW91bnRJbWFnZXMsIHJlbW92ZWROb2RlcywgdHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCBjb250ZXh0LCBzZWxmRGVidWdJRCAvLyAwIGluIHByb2R1Y3Rpb24gYW5kIGZvciByb290c1xuICApIHtcbiAgICAvLyBXZSBjdXJyZW50bHkgZG9uJ3QgaGF2ZSBhIHdheSB0byB0cmFjayBtb3ZlcyBoZXJlIGJ1dCBpZiB3ZSB1c2UgaXRlcmF0b3JzXG4gICAgLy8gaW5zdGVhZCBvZiBmb3IuLmluIHdlIGNhbiB6aXAgdGhlIGl0ZXJhdG9ycyBhbmQgY2hlY2sgaWYgYW4gaXRlbSBoYXNcbiAgICAvLyBtb3ZlZC5cbiAgICAvLyBUT0RPOiBJZiBub3RoaW5nIGhhcyBjaGFuZ2VkLCByZXR1cm4gdGhlIHByZXZDaGlsZHJlbiBvYmplY3Qgc28gdGhhdCB3ZVxuICAgIC8vIGNhbiBxdWlja2x5IGJhaWxvdXQgaWYgbm90aGluZyBoYXMgY2hhbmdlZC5cbiAgICBpZiAoIW5leHRDaGlsZHJlbiAmJiAhcHJldkNoaWxkcmVuKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBuYW1lO1xuICAgIHZhciBwcmV2Q2hpbGQ7XG4gICAgZm9yIChuYW1lIGluIG5leHRDaGlsZHJlbikge1xuICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRyZW4gJiYgcHJldkNoaWxkcmVuW25hbWVdO1xuICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldkNoaWxkICYmIHByZXZDaGlsZC5fY3VycmVudEVsZW1lbnQ7XG4gICAgICB2YXIgbmV4dEVsZW1lbnQgPSBuZXh0Q2hpbGRyZW5bbmFtZV07XG4gICAgICBpZiAocHJldkNoaWxkICE9IG51bGwgJiYgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KSkge1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudChwcmV2Q2hpbGQsIG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIG5leHRDaGlsZHJlbltuYW1lXSA9IHByZXZDaGlsZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcmV2Q2hpbGQpIHtcbiAgICAgICAgICByZW1vdmVkTm9kZXNbbmFtZV0gPSBSZWFjdFJlY29uY2lsZXIuZ2V0SG9zdE5vZGUocHJldkNoaWxkKTtcbiAgICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChwcmV2Q2hpbGQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgY2hpbGQgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0J3MgbW91bnRlZC5cbiAgICAgICAgdmFyIG5leHRDaGlsZEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0RWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgIG5leHRDaGlsZHJlbltuYW1lXSA9IG5leHRDaGlsZEluc3RhbmNlO1xuICAgICAgICAvLyBDcmVhdGluZyBtb3VudCBpbWFnZSBub3cgZW5zdXJlcyByZWZzIGFyZSByZXNvbHZlZCBpbiByaWdodCBvcmRlclxuICAgICAgICAvLyAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzcxMDEgZm9yIGV4cGxhbmF0aW9uKS5cbiAgICAgICAgdmFyIG5leHRDaGlsZE1vdW50SW1hZ2UgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQobmV4dENoaWxkSW5zdGFuY2UsIHRyYW5zYWN0aW9uLCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgY29udGV4dCwgc2VsZkRlYnVnSUQpO1xuICAgICAgICBtb3VudEltYWdlcy5wdXNoKG5leHRDaGlsZE1vdW50SW1hZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBVbm1vdW50IGNoaWxkcmVuIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuICAgIGZvciAobmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkgJiYgIShuZXh0Q2hpbGRyZW4gJiYgbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSkge1xuICAgICAgICBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIHJlbW92ZWROb2Rlc1tuYW1lXSA9IFJlYWN0UmVjb25jaWxlci5nZXRIb3N0Tm9kZShwcmV2Q2hpbGQpO1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChwcmV2Q2hpbGQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVubW91bnRzIGFsbCByZW5kZXJlZCBjaGlsZHJlbi4gVGhpcyBzaG91bGQgYmUgdXNlZCB0byBjbGVhbiB1cCBjaGlsZHJlblxuICAgKiB3aGVuIHRoaXMgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAgICpcbiAgICogQHBhcmFtIHs/b2JqZWN0fSByZW5kZXJlZENoaWxkcmVuIFByZXZpb3VzbHkgaW5pdGlhbGl6ZWQgc2V0IG9mIGNoaWxkcmVuLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHVubW91bnRDaGlsZHJlbjogZnVuY3Rpb24gKHJlbmRlcmVkQ2hpbGRyZW4sIHNhZmVseSkge1xuICAgIGZvciAodmFyIG5hbWUgaW4gcmVuZGVyZWRDaGlsZHJlbikge1xuICAgICAgaWYgKHJlbmRlcmVkQ2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgdmFyIHJlbmRlcmVkQ2hpbGQgPSByZW5kZXJlZENoaWxkcmVuW25hbWVdO1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChyZW5kZXJlZENoaWxkLCBzYWZlbHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2hpbGRSZWNvbmNpbGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0Q2hpbGRSZWNvbmNpbGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zJyk7XG52YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL1JlYWN0RE9NSURPcGVyYXRpb25zJyk7XG5cbi8qKlxuICogQWJzdHJhY3RzIGF3YXkgYWxsIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIHJlY29uY2lsZXIgdGhhdCByZXF1aXJlcyBrbm93bGVkZ2Ugb2ZcbiAqIHRoZSBicm93c2VyIGNvbnRleHQuIFRPRE86IFRoZXNlIGNhbGxlcnMgc2hvdWxkIGJlIHJlZmFjdG9yZWQgdG8gYXZvaWQgdGhlXG4gKiBuZWVkIGZvciB0aGlzIGluamVjdGlvbi5cbiAqL1xudmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0ge1xuXG4gIHByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6IFJlYWN0RE9NSURPcGVyYXRpb25zLmRhbmdlcm91c2x5UHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyxcblxuICByZXBsYWNlTm9kZVdpdGhNYXJrdXA6IERPTUNoaWxkcmVuT3BlcmF0aW9ucy5kYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cFxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKSxcbiAgICBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3QnKTtcbnZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSZWFjdEVycm9yVXRpbHMgPSByZXF1aXJlKCcuL1JlYWN0RXJyb3JVdGlscycpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcbnZhciBSZWFjdE5vZGVUeXBlcyA9IHJlcXVpcmUoJy4vUmVhY3ROb2RlVHlwZXMnKTtcbnZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgY2hlY2tSZWFjdFR5cGVTcGVjID0gcmVxdWlyZSgnLi9jaGVja1JlYWN0VHlwZVNwZWMnKTtcbn1cblxudmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciBzaGFsbG93RXF1YWwgPSByZXF1aXJlKCdmYmpzL2xpYi9zaGFsbG93RXF1YWwnKTtcbnZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgQ29tcG9zaXRlVHlwZXMgPSB7XG4gIEltcHVyZUNsYXNzOiAwLFxuICBQdXJlQ2xhc3M6IDEsXG4gIFN0YXRlbGVzc0Z1bmN0aW9uYWw6IDJcbn07XG5cbmZ1bmN0aW9uIFN0YXRlbGVzc0NvbXBvbmVudChDb21wb25lbnQpIHt9XG5TdGF0ZWxlc3NDb21wb25lbnQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENvbXBvbmVudCA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHRoaXMpLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICB2YXIgZWxlbWVudCA9IENvbXBvbmVudCh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQsIHRoaXMudXBkYXRlcik7XG4gIHdhcm5JZkludmFsaWRFbGVtZW50KENvbXBvbmVudCwgZWxlbWVudCk7XG4gIHJldHVybiBlbGVtZW50O1xufTtcblxuZnVuY3Rpb24gd2FybklmSW52YWxpZEVsZW1lbnQoQ29tcG9uZW50LCBlbGVtZW50KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSB8fCBSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSwgJyVzKC4uLik6IEEgdmFsaWQgUmVhY3QgZWxlbWVudCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlICcgKyAncmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUNvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcywgJyVzKC4uLik6IGNoaWxkQ29udGV4dFR5cGVzIGNhbm5vdCBiZSBkZWZpbmVkIG9uIGEgZnVuY3Rpb25hbCBjb21wb25lbnQuJywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gIHJldHVybiAhIShDb21wb25lbnQucHJvdG90eXBlICYmIENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbmZ1bmN0aW9uIGlzUHVyZUNvbXBvbmVudChDb21wb25lbnQpIHtcbiAgcmV0dXJuICEhKENvbXBvbmVudC5wcm90b3R5cGUgJiYgQ29tcG9uZW50LnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCk7XG59XG5cbi8vIFNlcGFyYXRlZCBpbnRvIGEgZnVuY3Rpb24gdG8gY29udGFpbiBkZW9wdGltaXphdGlvbnMgY2F1c2VkIGJ5IHRyeS9maW5hbGx5LlxuZnVuY3Rpb24gbWVhc3VyZUxpZmVDeWNsZVBlcmYoZm4sIGRlYnVnSUQsIHRpbWVyVHlwZSkge1xuICBpZiAoZGVidWdJRCA9PT0gMCkge1xuICAgIC8vIFRvcC1sZXZlbCB3cmFwcGVycyAoc2VlIFJlYWN0TW91bnQpIGFuZCBlbXB0eSBjb21wb25lbnRzIChzZWVcbiAgICAvLyBSZWFjdERPTUVtcHR5Q29tcG9uZW50KSBhcmUgaW52aXNpYmxlIHRvIGhvb2tzIGFuZCBkZXZ0b29scy5cbiAgICAvLyBCb3RoIGFyZSBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIHRoYXQgc2hvdWxkIGdvIGF3YXkgaW4gdGhlIGZ1dHVyZS5cbiAgICByZXR1cm4gZm4oKTtcbiAgfVxuXG4gIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIoZGVidWdJRCwgdGltZXJUeXBlKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcihkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICB9XG59XG5cbi8qKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tIFRoZSBMaWZlLUN5Y2xlIG9mIGEgQ29tcG9zaXRlIENvbXBvbmVudCAtLS0tLS0tLS0tLS0tLS0tLS1cbiAqXG4gKiAtIGNvbnN0cnVjdG9yOiBJbml0aWFsaXphdGlvbiBvZiBzdGF0ZS4gVGhlIGluc3RhbmNlIGlzIG5vdyByZXRhaW5lZC5cbiAqICAgLSBjb21wb25lbnRXaWxsTW91bnRcbiAqICAgLSByZW5kZXJcbiAqICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnNdXG4gKiAgICAgLSBbY2hpbGRyZW4ncyBjb21wb25lbnRXaWxsTW91bnQgYW5kIHJlbmRlcl1cbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudERpZE1vdW50XVxuICogICAgIC0gY29tcG9uZW50RGlkTW91bnRcbiAqXG4gKiAgICAgICBVcGRhdGUgUGhhc2VzOlxuICogICAgICAgLSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChvbmx5IGNhbGxlZCBpZiBwYXJlbnQgdXBkYXRlZClcbiAqICAgICAgIC0gc2hvdWxkQ29tcG9uZW50VXBkYXRlXG4gKiAgICAgICAgIC0gY29tcG9uZW50V2lsbFVwZGF0ZVxuICogICAgICAgICAgIC0gcmVuZGVyXG4gKiAgICAgICAgICAgLSBbY2hpbGRyZW4ncyBjb25zdHJ1Y3RvcnMgb3IgcmVjZWl2ZSBwcm9wcyBwaGFzZXNdXG4gKiAgICAgICAgIC0gY29tcG9uZW50RGlkVXBkYXRlXG4gKlxuICogICAgIC0gY29tcG9uZW50V2lsbFVubW91bnRcbiAqICAgICAtIFtjaGlsZHJlbidzIGNvbXBvbmVudFdpbGxVbm1vdW50XVxuICogICAtIFtjaGlsZHJlbiBkZXN0cm95ZWRdXG4gKiAtIChkZXN0cm95ZWQpOiBUaGUgaW5zdGFuY2UgaXMgbm93IGJsYW5rLCByZWxlYXNlZCBieSBSZWFjdCBhbmQgcmVhZHkgZm9yIEdDLlxuICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKi9cblxuLyoqXG4gKiBBbiBpbmNyZW1lbnRpbmcgSUQgYXNzaWduZWQgdG8gZWFjaCBjb21wb25lbnQgd2hlbiBpdCBpcyBtb3VudGVkLiBUaGlzIGlzXG4gKiB1c2VkIHRvIGVuZm9yY2UgdGhlIG9yZGVyIGluIHdoaWNoIGBSZWFjdFVwZGF0ZXNgIHVwZGF0ZXMgZGlydHkgY29tcG9uZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgbmV4dE1vdW50SUQgPSAxO1xuXG4vKipcbiAqIEBsZW5kcyB7UmVhY3RDb21wb3NpdGVDb21wb25lbnQucHJvdG90eXBlfVxuICovXG52YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSB7XG5cbiAgLyoqXG4gICAqIEJhc2UgY29uc3RydWN0b3IgZm9yIGFsbCBjb21wb3NpdGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICAgKiBAZmluYWxcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSAwO1xuICAgIHRoaXMuX2NvbXBvc2l0ZVR5cGUgPSBudWxsO1xuICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICB0aGlzLl9ob3N0UGFyZW50ID0gbnVsbDtcbiAgICB0aGlzLl9ob3N0Q29udGFpbmVySW5mbyA9IG51bGw7XG5cbiAgICAvLyBTZWUgUmVhY3RVcGRhdGVRdWV1ZVxuICAgIHRoaXMuX3VwZGF0ZUJhdGNoTnVtYmVyID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuICAgIHRoaXMuX3JlbmRlcmVkTm9kZVR5cGUgPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gbnVsbDtcbiAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLl9tb3VudE9yZGVyID0gMDtcbiAgICB0aGlzLl90b3BMZXZlbFdyYXBwZXIgPSBudWxsO1xuXG4gICAgLy8gU2VlIFJlYWN0VXBkYXRlcyBhbmQgUmVhY3RVcGRhdGVRdWV1ZS5cbiAgICB0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcblxuICAgIC8vIENvbXBvbmVudFdpbGxVbm1vdW50IHNoYWxsIG9ubHkgYmUgY2FsbGVkIG9uY2VcbiAgICB0aGlzLl9jYWxsZWRDb21wb25lbnRXaWxsVW5tb3VudCA9IGZhbHNlO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHRoaXMuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gZmFsc2U7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgY29tcG9uZW50LCByZW5kZXJzIG1hcmt1cCwgYW5kIHJlZ2lzdGVycyBldmVudCBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbnxSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0gez9vYmplY3R9IGhvc3RQYXJlbnRcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBob3N0Q29udGFpbmVySW5mb1xuICAgKiBAcGFyYW0gez9vYmplY3R9IGNvbnRleHRcbiAgICogQHJldHVybiB7P3N0cmluZ30gUmVuZGVyZWQgbWFya3VwIHRvIGJlIGluc2VydGVkIGludG8gdGhlIERPTS5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5fbW91bnRPcmRlciA9IG5leHRNb3VudElEKys7XG4gICAgdGhpcy5faG9zdFBhcmVudCA9IGhvc3RQYXJlbnQ7XG4gICAgdGhpcy5faG9zdENvbnRhaW5lckluZm8gPSBob3N0Q29udGFpbmVySW5mbztcblxuICAgIHZhciBwdWJsaWNQcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgIHZhciBwdWJsaWNDb250ZXh0ID0gdGhpcy5fcHJvY2Vzc0NvbnRleHQoY29udGV4dCk7XG5cbiAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcblxuICAgIHZhciB1cGRhdGVRdWV1ZSA9IHRyYW5zYWN0aW9uLmdldFVwZGF0ZVF1ZXVlKCk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBwdWJsaWMgY2xhc3NcbiAgICB2YXIgZG9Db25zdHJ1Y3QgPSBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KTtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2NvbnN0cnVjdENvbXBvbmVudChkb0NvbnN0cnVjdCwgcHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIHVwZGF0ZVF1ZXVlKTtcbiAgICB2YXIgcmVuZGVyZWRFbGVtZW50O1xuXG4gICAgLy8gU3VwcG9ydCBmdW5jdGlvbmFsIGNvbXBvbmVudHNcbiAgICBpZiAoIWRvQ29uc3RydWN0ICYmIChpbnN0ID09IG51bGwgfHwgaW5zdC5yZW5kZXIgPT0gbnVsbCkpIHtcbiAgICAgIHJlbmRlcmVkRWxlbWVudCA9IGluc3Q7XG4gICAgICB3YXJuSWZJbnZhbGlkRWxlbWVudChDb21wb25lbnQsIHJlbmRlcmVkRWxlbWVudCk7XG4gICAgICAhKGluc3QgPT09IG51bGwgfHwgaW5zdCA9PT0gZmFsc2UgfHwgUmVhY3QuaXNWYWxpZEVsZW1lbnQoaW5zdCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzKC4uLik6IEEgdmFsaWQgUmVhY3QgZWxlbWVudCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlIHJldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC4nLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpIDogX3Byb2RJbnZhcmlhbnQoJzEwNScsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBpbnN0ID0gbmV3IFN0YXRlbGVzc0NvbXBvbmVudChDb21wb25lbnQpO1xuICAgICAgdGhpcy5fY29tcG9zaXRlVHlwZSA9IENvbXBvc2l0ZVR5cGVzLlN0YXRlbGVzc0Z1bmN0aW9uYWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1B1cmVDb21wb25lbnQoQ29tcG9uZW50KSkge1xuICAgICAgICB0aGlzLl9jb21wb3NpdGVUeXBlID0gQ29tcG9zaXRlVHlwZXMuUHVyZUNsYXNzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fY29tcG9zaXRlVHlwZSA9IENvbXBvc2l0ZVR5cGVzLkltcHVyZUNsYXNzO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgbGF0ZXIgaW4gX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCwgYnV0IGFkZCBhbiBlYXJseVxuICAgICAgLy8gd2FybmluZyBub3cgdG8gaGVscCBkZWJ1Z2dpbmdcbiAgICAgIGlmIChpbnN0LnJlbmRlciA9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogTm8gYHJlbmRlcmAgbWV0aG9kIGZvdW5kIG9uIHRoZSByZXR1cm5lZCBjb21wb25lbnQgJyArICdpbnN0YW5jZTogeW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBkZWZpbmUgYHJlbmRlcmAuJywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BzTXV0YXRlZCA9IGluc3QucHJvcHMgIT09IHB1YmxpY1Byb3BzO1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGluc3QucHJvcHMgPT09IHVuZGVmaW5lZCB8fCAhcHJvcHNNdXRhdGVkLCAnJXMoLi4uKTogV2hlbiBjYWxsaW5nIHN1cGVyKCkgaW4gYCVzYCwgbWFrZSBzdXJlIHRvIHBhc3MgJyArICd1cCB0aGUgc2FtZSBwcm9wcyB0aGF0IHlvdXIgY29tcG9uZW50XFwncyBjb25zdHJ1Y3RvciB3YXMgcGFzc2VkLicsIGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudE5hbWUpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIC8vIFRoZXNlIHNob3VsZCBiZSBzZXQgdXAgaW4gdGhlIGNvbnN0cnVjdG9yLCBidXQgYXMgYSBjb252ZW5pZW5jZSBmb3JcbiAgICAvLyBzaW1wbGVyIGNsYXNzIGFic3RyYWN0aW9ucywgd2Ugc2V0IHRoZW0gdXAgYWZ0ZXIgdGhlIGZhY3QuXG4gICAgaW5zdC5wcm9wcyA9IHB1YmxpY1Byb3BzO1xuICAgIGluc3QuY29udGV4dCA9IHB1YmxpY0NvbnRleHQ7XG4gICAgaW5zdC5yZWZzID0gZW1wdHlPYmplY3Q7XG4gICAgaW5zdC51cGRhdGVyID0gdXBkYXRlUXVldWU7XG5cbiAgICB0aGlzLl9pbnN0YW5jZSA9IGluc3Q7XG5cbiAgICAvLyBTdG9yZSBhIHJlZmVyZW5jZSBmcm9tIHRoZSBpbnN0YW5jZSBiYWNrIHRvIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvblxuICAgIFJlYWN0SW5zdGFuY2VNYXAuc2V0KGluc3QsIHRoaXMpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFNpbmNlIHBsYWluIEpTIGNsYXNzZXMgYXJlIGRlZmluZWQgd2l0aG91dCBhbnkgc3BlY2lhbCBpbml0aWFsaXphdGlvblxuICAgICAgLy8gbG9naWMsIHdlIGNhbiBub3QgY2F0Y2ggY29tbW9uIGVycm9ycyBlYXJseS4gVGhlcmVmb3JlLCB3ZSBoYXZlIHRvXG4gICAgICAvLyBjYXRjaCB0aGVtIGhlcmUsIGF0IGluaXRpYWxpemF0aW9uIHRpbWUsIGluc3RlYWQuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5nZXRJbml0aWFsU3RhdGUgfHwgaW5zdC5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQgfHwgaW5zdC5zdGF0ZSwgJ2dldEluaXRpYWxTdGF0ZSB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiAnICsgJ1RoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGNsYXNzZXMgY3JlYXRlZCB1c2luZyBSZWFjdC5jcmVhdGVDbGFzcy4gJyArICdEaWQgeW91IG1lYW4gdG8gZGVmaW5lIGEgc3RhdGUgcHJvcGVydHkgaW5zdGVhZD8nLCB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpbnN0LmdldERlZmF1bHRQcm9wcyB8fCBpbnN0LmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCwgJ2dldERlZmF1bHRQcm9wcyB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiAnICsgJ1RoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGNsYXNzZXMgY3JlYXRlZCB1c2luZyBSZWFjdC5jcmVhdGVDbGFzcy4gJyArICdVc2UgYSBzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIGRlZmF1bHRQcm9wcyBpbnN0ZWFkLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QucHJvcFR5cGVzLCAncHJvcFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSBzdGF0aWMgJyArICdwcm9wZXJ0eSB0byBkZWZpbmUgcHJvcFR5cGVzIGluc3RlYWQuJywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5jb250ZXh0VHlwZXMsICdjb250ZXh0VHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhICcgKyAnc3RhdGljIHByb3BlcnR5IHRvIGRlZmluZSBjb250ZXh0VHlwZXMgaW5zdGVhZC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiBpbnN0LmNvbXBvbmVudFNob3VsZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICsgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICsgJ2V4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3QuY29tcG9uZW50RGlkVW5tb3VudCAhPT0gJ2Z1bmN0aW9uJywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnREaWRVbm1vdW50KCkuIEJ1dCB0aGVyZSBpcyBubyBzdWNoIGxpZmVjeWNsZSBtZXRob2QuICcgKyAnRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxVbm1vdW50KCk/JywgdGhpcy5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgaW5zdC5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzICE9PSAnZnVuY3Rpb24nLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMoKS4gRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKT8nLCB0aGlzLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB2YXIgaW5pdGlhbFN0YXRlID0gaW5zdC5zdGF0ZTtcbiAgICBpZiAoaW5pdGlhbFN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGluc3Quc3RhdGUgPSBpbml0aWFsU3RhdGUgPSBudWxsO1xuICAgIH1cbiAgICAhKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGluaXRpYWxTdGF0ZSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLnN0YXRlOiBtdXN0IGJlIHNldCB0byBhbiBvYmplY3Qgb3IgbnVsbCcsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogX3Byb2RJbnZhcmlhbnQoJzEwNicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdm9pZCAwO1xuXG4gICAgdGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgPSBudWxsO1xuICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuICAgIHZhciBtYXJrdXA7XG4gICAgaWYgKGluc3QudW5zdGFibGVfaGFuZGxlRXJyb3IpIHtcbiAgICAgIG1hcmt1cCA9IHRoaXMucGVyZm9ybUluaXRpYWxNb3VudFdpdGhFcnJvckhhbmRsaW5nKHJlbmRlcmVkRWxlbWVudCwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWFya3VwID0gdGhpcy5wZXJmb3JtSW5pdGlhbE1vdW50KHJlbmRlcmVkRWxlbWVudCwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdC5jb21wb25lbnREaWRNb3VudCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGluc3QuY29tcG9uZW50RGlkTW91bnQoKTtcbiAgICAgICAgICB9LCBfdGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudERpZE1vdW50Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnN0LmNvbXBvbmVudERpZE1vdW50LCBpbnN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIF9jb25zdHJ1Y3RDb21wb25lbnQ6IGZ1bmN0aW9uIChkb0NvbnN0cnVjdCwgcHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIHVwZGF0ZVF1ZXVlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnN0cnVjdENvbXBvbmVudFdpdGhvdXRPd25lcihkb0NvbnN0cnVjdCwgcHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIHVwZGF0ZVF1ZXVlKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5fY29uc3RydWN0Q29tcG9uZW50V2l0aG91dE93bmVyKGRvQ29uc3RydWN0LCBwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgdXBkYXRlUXVldWUpO1xuICAgIH1cbiAgfSxcblxuICBfY29uc3RydWN0Q29tcG9uZW50V2l0aG91dE93bmVyOiBmdW5jdGlvbiAoZG9Db25zdHJ1Y3QsIHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCB1cGRhdGVRdWV1ZSkge1xuICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuXG4gICAgaWYgKGRvQ29uc3RydWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICByZXR1cm4gbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQ29tcG9uZW50KHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCB1cGRhdGVRdWV1ZSk7XG4gICAgICAgIH0sIHRoaXMuX2RlYnVnSUQsICdjdG9yJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgdXBkYXRlUXVldWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoaXMgY2FuIHN0aWxsIGJlIGFuIGluc3RhbmNlIGluIGNhc2Ugb2YgZmFjdG9yeSBjb21wb25lbnRzXG4gICAgLy8gYnV0IHdlJ2xsIGNvdW50IHRoaXMgYXMgdGltZSBzcGVudCByZW5kZXJpbmcgYXMgdGhlIG1vcmUgY29tbW9uIGNhc2UuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBtZWFzdXJlTGlmZUN5Y2xlUGVyZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBDb21wb25lbnQocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIHVwZGF0ZVF1ZXVlKTtcbiAgICAgIH0sIHRoaXMuX2RlYnVnSUQsICdyZW5kZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgdXBkYXRlUXVldWUpO1xuICAgIH1cbiAgfSxcblxuICBwZXJmb3JtSW5pdGlhbE1vdW50V2l0aEVycm9ySGFuZGxpbmc6IGZ1bmN0aW9uIChyZW5kZXJlZEVsZW1lbnQsIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBtYXJrdXA7XG4gICAgdmFyIGNoZWNrcG9pbnQgPSB0cmFuc2FjdGlvbi5jaGVja3BvaW50KCk7XG4gICAgdHJ5IHtcbiAgICAgIG1hcmt1cCA9IHRoaXMucGVyZm9ybUluaXRpYWxNb3VudChyZW5kZXJlZEVsZW1lbnQsIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gUm9sbCBiYWNrIHRvIGNoZWNrcG9pbnQsIGhhbmRsZSBlcnJvciAod2hpY2ggbWF5IGFkZCBpdGVtcyB0byB0aGUgdHJhbnNhY3Rpb24pLCBhbmQgdGFrZSBhIG5ldyBjaGVja3BvaW50XG4gICAgICB0cmFuc2FjdGlvbi5yb2xsYmFjayhjaGVja3BvaW50KTtcbiAgICAgIHRoaXMuX2luc3RhbmNlLnVuc3RhYmxlX2hhbmRsZUVycm9yKGUpO1xuICAgICAgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlKSB7XG4gICAgICAgIHRoaXMuX2luc3RhbmNlLnN0YXRlID0gdGhpcy5fcHJvY2Vzc1BlbmRpbmdTdGF0ZSh0aGlzLl9pbnN0YW5jZS5wcm9wcywgdGhpcy5faW5zdGFuY2UuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBjaGVja3BvaW50ID0gdHJhbnNhY3Rpb24uY2hlY2twb2ludCgpO1xuXG4gICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudC51bm1vdW50Q29tcG9uZW50KHRydWUpO1xuICAgICAgdHJhbnNhY3Rpb24ucm9sbGJhY2soY2hlY2twb2ludCk7XG5cbiAgICAgIC8vIFRyeSBhZ2FpbiAtIHdlJ3ZlIGluZm9ybWVkIHRoZSBjb21wb25lbnQgYWJvdXQgdGhlIGVycm9yLCBzbyB0aGV5IGNhbiByZW5kZXIgYW4gZXJyb3IgbWVzc2FnZSB0aGlzIHRpbWUuXG4gICAgICAvLyBJZiB0aGlzIHRocm93cyBhZ2FpbiwgdGhlIGVycm9yIHdpbGwgYnViYmxlIHVwIChhbmQgY2FuIGJlIGNhdWdodCBieSBhIGhpZ2hlciBlcnJvciBib3VuZGFyeSkuXG4gICAgICBtYXJrdXAgPSB0aGlzLnBlcmZvcm1Jbml0aWFsTW91bnQocmVuZGVyZWRFbGVtZW50LCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm4gbWFya3VwO1xuICB9LFxuXG4gIHBlcmZvcm1Jbml0aWFsTW91bnQ6IGZ1bmN0aW9uIChyZW5kZXJlZEVsZW1lbnQsIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG5cbiAgICB2YXIgZGVidWdJRCA9IDA7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGRlYnVnSUQgPSB0aGlzLl9kZWJ1Z0lEO1xuICAgIH1cblxuICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxNb3VudCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgICB9LCBkZWJ1Z0lELCAnY29tcG9uZW50V2lsbE1vdW50Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgfVxuICAgICAgLy8gV2hlbiBtb3VudGluZywgY2FsbHMgdG8gYHNldFN0YXRlYCBieSBgY29tcG9uZW50V2lsbE1vdW50YCB3aWxsIHNldFxuICAgICAgLy8gYHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlYCB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIuXG4gICAgICBpZiAodGhpcy5fcGVuZGluZ1N0YXRlUXVldWUpIHtcbiAgICAgICAgaW5zdC5zdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUoaW5zdC5wcm9wcywgaW5zdC5jb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiBub3QgYSBzdGF0ZWxlc3MgY29tcG9uZW50LCB3ZSBub3cgcmVuZGVyXG4gICAgaWYgKHJlbmRlcmVkRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKTtcbiAgICB9XG5cbiAgICB2YXIgbm9kZVR5cGUgPSBSZWFjdE5vZGVUeXBlcy5nZXRUeXBlKHJlbmRlcmVkRWxlbWVudCk7XG4gICAgdGhpcy5fcmVuZGVyZWROb2RlVHlwZSA9IG5vZGVUeXBlO1xuICAgIHZhciBjaGlsZCA9IHRoaXMuX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQocmVuZGVyZWRFbGVtZW50LCBub2RlVHlwZSAhPT0gUmVhY3ROb2RlVHlwZXMuRU1QVFkgLyogc2hvdWxkSGF2ZURlYnVnSUQgKi9cbiAgICApO1xuICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gY2hpbGQ7XG5cbiAgICB2YXIgbWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCB0cmFuc2FjdGlvbiwgaG9zdFBhcmVudCwgaG9zdENvbnRhaW5lckluZm8sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCksIGRlYnVnSUQpO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChkZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIHZhciBjaGlsZERlYnVnSURzID0gY2hpbGQuX2RlYnVnSUQgIT09IDAgPyBbY2hpbGQuX2RlYnVnSURdIDogW107XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKGRlYnVnSUQsIGNoaWxkRGVidWdJRHMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtYXJrdXA7XG4gIH0sXG5cbiAgZ2V0SG9zdE5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUmVhY3RSZWNvbmNpbGVyLmdldEhvc3ROb2RlKHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVsZWFzZXMgYW55IHJlc291cmNlcyBhbGxvY2F0ZWQgYnkgYG1vdW50Q29tcG9uZW50YC5cbiAgICpcbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHNhZmVseSkge1xuICAgIGlmICghdGhpcy5fcmVuZGVyZWRDb21wb25lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuXG4gICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFVubW91bnQgJiYgIWluc3QuX2NhbGxlZENvbXBvbmVudFdpbGxVbm1vdW50KSB7XG4gICAgICBpbnN0Ll9jYWxsZWRDb21wb25lbnRXaWxsVW5tb3VudCA9IHRydWU7XG5cbiAgICAgIGlmIChzYWZlbHkpIHtcbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLmdldE5hbWUoKSArICcuY29tcG9uZW50V2lsbFVubW91bnQoKSc7XG4gICAgICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sobmFtZSwgaW5zdC5jb21wb25lbnRXaWxsVW5tb3VudC5iaW5kKGluc3QpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGluc3QuY29tcG9uZW50V2lsbFVubW91bnQoKTtcbiAgICAgICAgICB9LCB0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50V2lsbFVubW91bnQnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcmVuZGVyZWRDb21wb25lbnQpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LCBzYWZlbHkpO1xuICAgICAgdGhpcy5fcmVuZGVyZWROb2RlVHlwZSA9IG51bGw7XG4gICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gUmVzZXQgcGVuZGluZyBmaWVsZHNcbiAgICAvLyBFdmVuIGlmIHRoaXMgY29tcG9uZW50IGlzIHNjaGVkdWxlZCBmb3IgYW5vdGhlciB1cGRhdGUgaW4gUmVhY3RVcGRhdGVzLFxuICAgIC8vIGl0IHdvdWxkIHN0aWxsIGJlIGlnbm9yZWQgYmVjYXVzZSB0aGVzZSBmaWVsZHMgYXJlIHJlc2V0LlxuICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgdGhpcy5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG4gICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuXG4gICAgLy8gVGhlc2UgZmllbGRzIGRvIG5vdCByZWFsbHkgbmVlZCB0byBiZSByZXNldCBzaW5jZSB0aGlzIG9iamVjdCBpcyBub1xuICAgIC8vIGxvbmdlciBhY2Nlc3NpYmxlLlxuICAgIHRoaXMuX2NvbnRleHQgPSBudWxsO1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSAwO1xuICAgIHRoaXMuX3RvcExldmVsV3JhcHBlciA9IG51bGw7XG5cbiAgICAvLyBEZWxldGUgdGhlIHJlZmVyZW5jZSBmcm9tIHRoZSBpbnN0YW5jZSB0byB0aGlzIGludGVybmFsIHJlcHJlc2VudGF0aW9uXG4gICAgLy8gd2hpY2ggYWxsb3cgdGhlIGludGVybmFscyB0byBiZSBwcm9wZXJseSBjbGVhbmVkIHVwIGV2ZW4gaWYgdGhlIHVzZXJcbiAgICAvLyBsZWFrcyBhIHJlZmVyZW5jZSB0byB0aGUgcHVibGljIGluc3RhbmNlLlxuICAgIFJlYWN0SW5zdGFuY2VNYXAucmVtb3ZlKGluc3QpO1xuXG4gICAgLy8gU29tZSBleGlzdGluZyBjb21wb25lbnRzIHJlbHkgb24gaW5zdC5wcm9wcyBldmVuIGFmdGVyIHRoZXkndmUgYmVlblxuICAgIC8vIGRlc3Ryb3llZCAoaW4gZXZlbnQgaGFuZGxlcnMpLlxuICAgIC8vIFRPRE86IGluc3QucHJvcHMgPSBudWxsO1xuICAgIC8vIFRPRE86IGluc3Quc3RhdGUgPSBudWxsO1xuICAgIC8vIFRPRE86IGluc3QuY29udGV4dCA9IG51bGw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEZpbHRlcnMgdGhlIGNvbnRleHQgb2JqZWN0IHRvIG9ubHkgY29udGFpbiBrZXlzIHNwZWNpZmllZCBpblxuICAgKiBgY29udGV4dFR5cGVzYFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX21hc2tDb250ZXh0OiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgIHZhciBjb250ZXh0VHlwZXMgPSBDb21wb25lbnQuY29udGV4dFR5cGVzO1xuICAgIGlmICghY29udGV4dFR5cGVzKSB7XG4gICAgICByZXR1cm4gZW1wdHlPYmplY3Q7XG4gICAgfVxuICAgIHZhciBtYXNrZWRDb250ZXh0ID0ge307XG4gICAgZm9yICh2YXIgY29udGV4dE5hbWUgaW4gY29udGV4dFR5cGVzKSB7XG4gICAgICBtYXNrZWRDb250ZXh0W2NvbnRleHROYW1lXSA9IGNvbnRleHRbY29udGV4dE5hbWVdO1xuICAgIH1cbiAgICByZXR1cm4gbWFza2VkQ29udGV4dDtcbiAgfSxcblxuICAvKipcbiAgICogRmlsdGVycyB0aGUgY29udGV4dCBvYmplY3QgdG8gb25seSBjb250YWluIGtleXMgc3BlY2lmaWVkIGluXG4gICAqIGBjb250ZXh0VHlwZXNgLCBhbmQgYXNzZXJ0cyB0aGF0IHRoZXkgYXJlIHZhbGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHs/b2JqZWN0fVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NDb250ZXh0OiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgIHZhciBtYXNrZWRDb250ZXh0ID0gdGhpcy5fbWFza0NvbnRleHQoY29udGV4dCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgICAgaWYgKENvbXBvbmVudC5jb250ZXh0VHlwZXMpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tDb250ZXh0VHlwZXMoQ29tcG9uZW50LmNvbnRleHRUeXBlcywgbWFza2VkQ29udGV4dCwgJ2NvbnRleHQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjdXJyZW50Q29udGV4dFxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfcHJvY2Vzc0NoaWxkQ29udGV4dDogZnVuY3Rpb24gKGN1cnJlbnRDb250ZXh0KSB7XG4gICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICB2YXIgY2hpbGRDb250ZXh0O1xuXG4gICAgaWYgKGluc3QuZ2V0Q2hpbGRDb250ZXh0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpblByb2Nlc3NpbmdDaGlsZENvbnRleHQoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjaGlsZENvbnRleHQgPSBpbnN0LmdldENoaWxkQ29udGV4dCgpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZFByb2Nlc3NpbmdDaGlsZENvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGRDb250ZXh0ID0gaW5zdC5nZXRDaGlsZENvbnRleHQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY2hpbGRDb250ZXh0KSB7XG4gICAgICAhKHR5cGVvZiBDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMgPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5nZXRDaGlsZENvbnRleHQoKTogY2hpbGRDb250ZXh0VHlwZXMgbXVzdCBiZSBkZWZpbmVkIGluIG9yZGVyIHRvIHVzZSBnZXRDaGlsZENvbnRleHQoKS4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IF9wcm9kSW52YXJpYW50KCcxMDcnLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrQ29udGV4dFR5cGVzKENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcywgY2hpbGRDb250ZXh0LCAnY2hpbGRDb250ZXh0Jyk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBuYW1lIGluIGNoaWxkQ29udGV4dCkge1xuICAgICAgICAhKG5hbWUgaW4gQ29tcG9uZW50LmNoaWxkQ29udGV4dFR5cGVzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5nZXRDaGlsZENvbnRleHQoKToga2V5IFwiJXNcIiBpcyBub3QgZGVmaW5lZCBpbiBjaGlsZENvbnRleHRUeXBlcy4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLCBuYW1lKSA6IF9wcm9kSW52YXJpYW50KCcxMDgnLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLCBuYW1lKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfYXNzaWduKHt9LCBjdXJyZW50Q29udGV4dCwgY2hpbGRDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRDb250ZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBBc3NlcnQgdGhhdCB0aGUgY29udGV4dCB0eXBlcyBhcmUgdmFsaWRcbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHR5cGVTcGVjcyBNYXAgb2YgY29udGV4dCBmaWVsZCB0byBhIFJlYWN0UHJvcFR5cGVcbiAgICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyBSdW50aW1lIHZhbHVlcyB0aGF0IG5lZWQgdG8gYmUgdHlwZS1jaGVja2VkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9jaGVja0NvbnRleHRUeXBlczogZnVuY3Rpb24gKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjaGVja1JlYWN0VHlwZVNwZWModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCB0aGlzLmdldE5hbWUoKSwgbnVsbCwgdGhpcy5fZGVidWdJRCk7XG4gICAgfVxuICB9LFxuXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uIChuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIG5leHRDb250ZXh0KSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG4gICAgdmFyIHByZXZDb250ZXh0ID0gdGhpcy5fY29udGV4dDtcblxuICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcblxuICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQsIHByZXZDb250ZXh0LCBuZXh0Q29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIGFueSBvZiBgX3BlbmRpbmdFbGVtZW50YCwgYF9wZW5kaW5nU3RhdGVRdWV1ZWAsIG9yIGBfcGVuZGluZ0ZvcmNlVXBkYXRlYFxuICAgKiBpcyBzZXQsIHVwZGF0ZSB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24pIHtcbiAgICBpZiAodGhpcy5fcGVuZGluZ0VsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQodGhpcywgdGhpcy5fcGVuZGluZ0VsZW1lbnQsIHRyYW5zYWN0aW9uLCB0aGlzLl9jb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlICE9PSBudWxsIHx8IHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSkge1xuICAgICAgdGhpcy51cGRhdGVDb21wb25lbnQodHJhbnNhY3Rpb24sIHRoaXMuX2N1cnJlbnRFbGVtZW50LCB0aGlzLl9jdXJyZW50RWxlbWVudCwgdGhpcy5fY29udGV4dCwgdGhpcy5fY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoTnVtYmVyID0gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gYW4gdXBkYXRlIHRvIGEgbW91bnRlZCBjb21wb25lbnQuIFRoZSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIGFuZFxuICAgKiBzaG91bGRDb21wb25lbnRVcGRhdGUgbWV0aG9kcyBhcmUgY2FsbGVkLCB0aGVuIChhc3N1bWluZyB0aGUgdXBkYXRlIGlzbid0XG4gICAqIHNraXBwZWQpIHRoZSByZW1haW5pbmcgdXBkYXRlIGxpZmVjeWNsZSBtZXRob2RzIGFyZSBjYWxsZWQgYW5kIHRoZSBET01cbiAgICogcmVwcmVzZW50YXRpb24gaXMgdXBkYXRlZC5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAqIFNvcGhpc3RpY2F0ZWQgY2xpZW50cyBtYXkgd2lzaCB0byBvdmVycmlkZSB0aGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBwcmV2UGFyZW50RWxlbWVudFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dFBhcmVudEVsZW1lbnRcbiAgICogQGludGVybmFsXG4gICAqIEBvdmVycmlkYWJsZVxuICAgKi9cbiAgdXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByZXZQYXJlbnRFbGVtZW50LCBuZXh0UGFyZW50RWxlbWVudCwgcHJldlVubWFza2VkQ29udGV4dCwgbmV4dFVubWFza2VkQ29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgIShpbnN0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0F0dGVtcHRlZCB0byB1cGRhdGUgY29tcG9uZW50IGAlc2AgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIHVubW91bnRlZCAob3IgZmFpbGVkIHRvIG1vdW50KS4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IF9wcm9kSW52YXJpYW50KCcxMzYnLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IHZvaWQgMDtcblxuICAgIHZhciB3aWxsUmVjZWl2ZSA9IGZhbHNlO1xuICAgIHZhciBuZXh0Q29udGV4dDtcblxuICAgIC8vIERldGVybWluZSBpZiB0aGUgY29udGV4dCBoYXMgY2hhbmdlZCBvciBub3RcbiAgICBpZiAodGhpcy5fY29udGV4dCA9PT0gbmV4dFVubWFza2VkQ29udGV4dCkge1xuICAgICAgbmV4dENvbnRleHQgPSBpbnN0LmNvbnRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRDb250ZXh0ID0gdGhpcy5fcHJvY2Vzc0NvbnRleHQobmV4dFVubWFza2VkQ29udGV4dCk7XG4gICAgICB3aWxsUmVjZWl2ZSA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHByZXZQcm9wcyA9IHByZXZQYXJlbnRFbGVtZW50LnByb3BzO1xuICAgIHZhciBuZXh0UHJvcHMgPSBuZXh0UGFyZW50RWxlbWVudC5wcm9wcztcblxuICAgIC8vIE5vdCBhIHNpbXBsZSBzdGF0ZSB1cGRhdGUgYnV0IGEgcHJvcHMgdXBkYXRlXG4gICAgaWYgKHByZXZQYXJlbnRFbGVtZW50ICE9PSBuZXh0UGFyZW50RWxlbWVudCkge1xuICAgICAgd2lsbFJlY2VpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFuIHVwZGF0ZSBoZXJlIHdpbGwgc2NoZWR1bGUgYW4gdXBkYXRlIGJ1dCBpbW1lZGlhdGVseSBzZXRcbiAgICAvLyBfcGVuZGluZ1N0YXRlUXVldWUgd2hpY2ggd2lsbCBlbnN1cmUgdGhhdCBhbnkgc3RhdGUgdXBkYXRlcyBnZXRzXG4gICAgLy8gaW1tZWRpYXRlbHkgcmVjb25jaWxlZCBpbnN0ZWFkIG9mIHdhaXRpbmcgZm9yIHRoZSBuZXh0IGJhdGNoLlxuICAgIGlmICh3aWxsUmVjZWl2ZSAmJiBpbnN0LmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIG1lYXN1cmVMaWZlQ3ljbGVQZXJmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuICAgICAgICB9LCB0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zdC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBuZXh0U3RhdGUgPSB0aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuICAgIHZhciBzaG91bGRVcGRhdGUgPSB0cnVlO1xuXG4gICAgaWYgKCF0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUpIHtcbiAgICAgIGlmIChpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IG1lYXN1cmVMaWZlQ3ljbGVQZXJmKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgICAgICAgIH0sIHRoaXMuX2RlYnVnSUQsICdzaG91bGRDb21wb25lbnRVcGRhdGUnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaG91bGRVcGRhdGUgPSBpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5fY29tcG9zaXRlVHlwZSA9PT0gQ29tcG9zaXRlVHlwZXMuUHVyZUNsYXNzKSB7XG4gICAgICAgICAgc2hvdWxkVXBkYXRlID0gIXNoYWxsb3dFcXVhbChwcmV2UHJvcHMsIG5leHRQcm9wcykgfHwgIXNoYWxsb3dFcXVhbChpbnN0LnN0YXRlLCBuZXh0U3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHNob3VsZFVwZGF0ZSAhPT0gdW5kZWZpbmVkLCAnJXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk6IFJldHVybmVkIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIGEgJyArICdib29sZWFuIHZhbHVlLiBNYWtlIHN1cmUgdG8gcmV0dXJuIHRydWUgb3IgZmFsc2UuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgdGhpcy5fdXBkYXRlQmF0Y2hOdW1iZXIgPSBudWxsO1xuICAgIGlmIChzaG91bGRVcGRhdGUpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgLy8gV2lsbCBzZXQgYHRoaXMucHJvcHNgLCBgdGhpcy5zdGF0ZWAgYW5kIGB0aGlzLmNvbnRleHRgLlxuICAgICAgdGhpcy5fcGVyZm9ybUNvbXBvbmVudFVwZGF0ZShuZXh0UGFyZW50RWxlbWVudCwgbmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0LCB0cmFuc2FjdGlvbiwgbmV4dFVubWFza2VkQ29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIGl0J3MgZGV0ZXJtaW5lZCB0aGF0IGEgY29tcG9uZW50IHNob3VsZCBub3QgdXBkYXRlLCB3ZSBzdGlsbCB3YW50XG4gICAgICAvLyB0byBzZXQgcHJvcHMgYW5kIHN0YXRlIGJ1dCB3ZSBzaG9ydGN1dCB0aGUgcmVzdCBvZiB0aGUgdXBkYXRlLlxuICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0UGFyZW50RWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbnRleHQgPSBuZXh0VW5tYXNrZWRDb250ZXh0O1xuICAgICAgaW5zdC5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgIGluc3Quc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgICBpbnN0LmNvbnRleHQgPSBuZXh0Q29udGV4dDtcbiAgICB9XG4gIH0sXG5cbiAgX3Byb2Nlc3NQZW5kaW5nU3RhdGU6IGZ1bmN0aW9uIChwcm9wcywgY29udGV4dCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgdmFyIHF1ZXVlID0gdGhpcy5fcGVuZGluZ1N0YXRlUXVldWU7XG4gICAgdmFyIHJlcGxhY2UgPSB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlO1xuICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG5cbiAgICBpZiAoIXF1ZXVlKSB7XG4gICAgICByZXR1cm4gaW5zdC5zdGF0ZTtcbiAgICB9XG5cbiAgICBpZiAocmVwbGFjZSAmJiBxdWV1ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHJldHVybiBxdWV1ZVswXTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFN0YXRlID0gX2Fzc2lnbih7fSwgcmVwbGFjZSA/IHF1ZXVlWzBdIDogaW5zdC5zdGF0ZSk7XG4gICAgZm9yICh2YXIgaSA9IHJlcGxhY2UgPyAxIDogMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFydGlhbCA9IHF1ZXVlW2ldO1xuICAgICAgX2Fzc2lnbihuZXh0U3RhdGUsIHR5cGVvZiBwYXJ0aWFsID09PSAnZnVuY3Rpb24nID8gcGFydGlhbC5jYWxsKGluc3QsIG5leHRTdGF0ZSwgcHJvcHMsIGNvbnRleHQpIDogcGFydGlhbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgfSxcblxuICAvKipcbiAgICogTWVyZ2VzIG5ldyBwcm9wcyBhbmQgc3RhdGUsIG5vdGlmaWVzIGRlbGVnYXRlIG1ldGhvZHMgb2YgdXBkYXRlIGFuZFxuICAgKiBwZXJmb3JtcyB1cGRhdGUuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudCBOZXh0IGVsZW1lbnRcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wcyBOZXh0IHB1YmxpYyBvYmplY3QgdG8gc2V0IGFzIHByb3BlcnRpZXMuXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlIE5leHQgb2JqZWN0IHRvIHNldCBhcyBzdGF0ZS5cbiAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXh0Q29udGV4dCBOZXh0IHB1YmxpYyBvYmplY3QgdG8gc2V0IGFzIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHs/b2JqZWN0fSB1bm1hc2tlZENvbnRleHRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wZXJmb3JtQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCwgdHJhbnNhY3Rpb24sIHVubWFza2VkQ29udGV4dCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcblxuICAgIHZhciBoYXNDb21wb25lbnREaWRVcGRhdGUgPSBCb29sZWFuKGluc3QuY29tcG9uZW50RGlkVXBkYXRlKTtcbiAgICB2YXIgcHJldlByb3BzO1xuICAgIHZhciBwcmV2U3RhdGU7XG4gICAgdmFyIHByZXZDb250ZXh0O1xuICAgIGlmIChoYXNDb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgIHByZXZQcm9wcyA9IGluc3QucHJvcHM7XG4gICAgICBwcmV2U3RhdGUgPSBpbnN0LnN0YXRlO1xuICAgICAgcHJldkNvbnRleHQgPSBpbnN0LmNvbnRleHQ7XG4gICAgfVxuXG4gICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFVwZGF0ZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBpbnN0LmNvbXBvbmVudFdpbGxVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICAgICAgfSwgdGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudFdpbGxVcGRhdGUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3QuY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgdGhpcy5fY29udGV4dCA9IHVubWFza2VkQ29udGV4dDtcbiAgICBpbnN0LnByb3BzID0gbmV4dFByb3BzO1xuICAgIGluc3Quc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgaW5zdC5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG5cbiAgICB0aGlzLl91cGRhdGVSZW5kZXJlZENvbXBvbmVudCh0cmFuc2FjdGlvbiwgdW5tYXNrZWRDb250ZXh0KTtcblxuICAgIGlmIChoYXNDb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIG1lYXN1cmVMaWZlQ3ljbGVQZXJmKGluc3QuY29tcG9uZW50RGlkVXBkYXRlLmJpbmQoaW5zdCwgcHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSwgX3RoaXMyLl9kZWJ1Z0lELCAnY29tcG9uZW50RGlkVXBkYXRlJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnN0LmNvbXBvbmVudERpZFVwZGF0ZS5iaW5kKGluc3QsIHByZXZQcm9wcywgcHJldlN0YXRlLCBwcmV2Q29udGV4dCksIGluc3QpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ2FsbCB0aGUgY29tcG9uZW50J3MgYHJlbmRlcmAgbWV0aG9kIGFuZCB1cGRhdGUgdGhlIERPTSBhY2NvcmRpbmdseS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIF91cGRhdGVSZW5kZXJlZENvbXBvbmVudDogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZXZDb21wb25lbnRJbnN0YW5jZSA9IHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50O1xuICAgIHZhciBwcmV2UmVuZGVyZWRFbGVtZW50ID0gcHJldkNvbXBvbmVudEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcbiAgICB2YXIgbmV4dFJlbmRlcmVkRWxlbWVudCA9IHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudCgpO1xuXG4gICAgdmFyIGRlYnVnSUQgPSAwO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBkZWJ1Z0lEID0gdGhpcy5fZGVidWdJRDtcbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldlJlbmRlcmVkRWxlbWVudCwgbmV4dFJlbmRlcmVkRWxlbWVudCkpIHtcbiAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KHByZXZDb21wb25lbnRJbnN0YW5jZSwgbmV4dFJlbmRlcmVkRWxlbWVudCwgdHJhbnNhY3Rpb24sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb2xkSG9zdE5vZGUgPSBSZWFjdFJlY29uY2lsZXIuZ2V0SG9zdE5vZGUocHJldkNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDb21wb25lbnRJbnN0YW5jZSwgZmFsc2UpO1xuXG4gICAgICB2YXIgbm9kZVR5cGUgPSBSZWFjdE5vZGVUeXBlcy5nZXRUeXBlKG5leHRSZW5kZXJlZEVsZW1lbnQpO1xuICAgICAgdGhpcy5fcmVuZGVyZWROb2RlVHlwZSA9IG5vZGVUeXBlO1xuICAgICAgdmFyIGNoaWxkID0gdGhpcy5faW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0UmVuZGVyZWRFbGVtZW50LCBub2RlVHlwZSAhPT0gUmVhY3ROb2RlVHlwZXMuRU1QVFkgLyogc2hvdWxkSGF2ZURlYnVnSUQgKi9cbiAgICAgICk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IGNoaWxkO1xuXG4gICAgICB2YXIgbmV4dE1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudChjaGlsZCwgdHJhbnNhY3Rpb24sIHRoaXMuX2hvc3RQYXJlbnQsIHRoaXMuX2hvc3RDb250YWluZXJJbmZvLCB0aGlzLl9wcm9jZXNzQ2hpbGRDb250ZXh0KGNvbnRleHQpLCBkZWJ1Z0lEKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGRlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICB2YXIgY2hpbGREZWJ1Z0lEcyA9IGNoaWxkLl9kZWJ1Z0lEICE9PSAwID8gW2NoaWxkLl9kZWJ1Z0lEXSA6IFtdO1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKGRlYnVnSUQsIGNoaWxkRGVidWdJRHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlcGxhY2VOb2RlV2l0aE1hcmt1cChvbGRIb3N0Tm9kZSwgbmV4dE1hcmt1cCwgcHJldkNvbXBvbmVudEluc3RhbmNlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRkZW4gaW4gc2hhbGxvdyByZW5kZXJpbmcuXG4gICAqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9yZXBsYWNlTm9kZVdpdGhNYXJrdXA6IGZ1bmN0aW9uIChvbGRIb3N0Tm9kZSwgbmV4dE1hcmt1cCwgcHJldkluc3RhbmNlKSB7XG4gICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5yZXBsYWNlTm9kZVdpdGhNYXJrdXAob2xkSG9zdE5vZGUsIG5leHRNYXJrdXAsIHByZXZJbnN0YW5jZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnRXaXRob3V0T3duZXJPckNvbnRleHQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgIHZhciByZW5kZXJlZEVsZW1lbnQ7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmVuZGVyZWRFbGVtZW50ID0gbWVhc3VyZUxpZmVDeWNsZVBlcmYoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gaW5zdC5yZW5kZXIoKTtcbiAgICAgIH0sIHRoaXMuX2RlYnVnSUQsICdyZW5kZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVuZGVyZWRFbGVtZW50ID0gaW5zdC5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gV2UgYWxsb3cgYXV0by1tb2NrcyB0byBwcm9jZWVkIGFzIGlmIHRoZXkncmUgcmV0dXJuaW5nIG51bGwuXG4gICAgICBpZiAocmVuZGVyZWRFbGVtZW50ID09PSB1bmRlZmluZWQgJiYgaW5zdC5yZW5kZXIuX2lzTW9ja0Z1bmN0aW9uKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgcHJvYmFibHkgYmFkIHByYWN0aWNlLiBDb25zaWRlciB3YXJuaW5nIGhlcmUgYW5kXG4gICAgICAgIC8vIGRlcHJlY2F0aW5nIHRoaXMgY29udmVuaWVuY2UuXG4gICAgICAgIHJlbmRlcmVkRWxlbWVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbmRlcmVkRWxlbWVudDtcbiAgfSxcblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVuZGVyZWRFbGVtZW50O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nIHx8IHRoaXMuX2NvbXBvc2l0ZVR5cGUgIT09IENvbXBvc2l0ZVR5cGVzLlN0YXRlbGVzc0Z1bmN0aW9uYWwpIHtcbiAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVuZGVyZWRFbGVtZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50V2l0aG91dE93bmVyT3JDb250ZXh0KCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVuZGVyZWRFbGVtZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50V2l0aG91dE93bmVyT3JDb250ZXh0KCk7XG4gICAgfVxuICAgICEoXG4gICAgLy8gVE9ETzogQW4gYGlzVmFsaWROb2RlYCBmdW5jdGlvbiB3b3VsZCBwcm9iYWJseSBiZSBtb3JlIGFwcHJvcHJpYXRlXG4gICAgcmVuZGVyZWRFbGVtZW50ID09PSBudWxsIHx8IHJlbmRlcmVkRWxlbWVudCA9PT0gZmFsc2UgfHwgUmVhY3QuaXNWYWxpZEVsZW1lbnQocmVuZGVyZWRFbGVtZW50KSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMucmVuZGVyKCk6IEEgdmFsaWQgUmVhY3QgZWxlbWVudCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlIHJldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IF9wcm9kSW52YXJpYW50KCcxMDknLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IHZvaWQgMDtcblxuICAgIHJldHVybiByZW5kZXJlZEVsZW1lbnQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIExhemlseSBhbGxvY2F0ZXMgdGhlIHJlZnMgb2JqZWN0IGFuZCBzdG9yZXMgYGNvbXBvbmVudGAgYXMgYHJlZmAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgUmVmZXJlbmNlIG5hbWUuXG4gICAqIEBwYXJhbSB7Y29tcG9uZW50fSBjb21wb25lbnQgQ29tcG9uZW50IHRvIHN0b3JlIGFzIGByZWZgLlxuICAgKiBAZmluYWxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIGF0dGFjaFJlZjogZnVuY3Rpb24gKHJlZiwgY29tcG9uZW50KSB7XG4gICAgdmFyIGluc3QgPSB0aGlzLmdldFB1YmxpY0luc3RhbmNlKCk7XG4gICAgIShpbnN0ICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1N0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBoYXZlIHJlZnMuJykgOiBfcHJvZEludmFyaWFudCgnMTEwJykgOiB2b2lkIDA7XG4gICAgdmFyIHB1YmxpY0NvbXBvbmVudEluc3RhbmNlID0gY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50ICYmIGNvbXBvbmVudC5nZXROYW1lID8gY29tcG9uZW50LmdldE5hbWUoKSA6ICdhIGNvbXBvbmVudCc7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwdWJsaWNDb21wb25lbnRJbnN0YW5jZSAhPSBudWxsIHx8IGNvbXBvbmVudC5fY29tcG9zaXRlVHlwZSAhPT0gQ29tcG9zaXRlVHlwZXMuU3RhdGVsZXNzRnVuY3Rpb25hbCwgJ1N0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzICcgKyAnKFNlZSByZWYgXCIlc1wiIGluICVzIGNyZWF0ZWQgYnkgJXMpLiAnICsgJ0F0dGVtcHRzIHRvIGFjY2VzcyB0aGlzIHJlZiB3aWxsIGZhaWwuJywgcmVmLCBjb21wb25lbnROYW1lLCB0aGlzLmdldE5hbWUoKSkgOiB2b2lkIDA7XG4gICAgfVxuICAgIHZhciByZWZzID0gaW5zdC5yZWZzID09PSBlbXB0eU9iamVjdCA/IGluc3QucmVmcyA9IHt9IDogaW5zdC5yZWZzO1xuICAgIHJlZnNbcmVmXSA9IHB1YmxpY0NvbXBvbmVudEluc3RhbmNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRhY2hlcyBhIHJlZmVyZW5jZSBuYW1lLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVmIE5hbWUgdG8gZGVyZWZlcmVuY2UuXG4gICAqIEBmaW5hbFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZGV0YWNoUmVmOiBmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIHJlZnMgPSB0aGlzLmdldFB1YmxpY0luc3RhbmNlKCkucmVmcztcbiAgICBkZWxldGUgcmVmc1tyZWZdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgYSB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBjb21wb25lbnQgdGhhdCBjYW4gYmUgdXNlZCB0byBpZGVudGlmeSBpdFxuICAgKiBpbiBlcnJvciBtZXNzYWdlcy5cbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgbmFtZSBvciBudWxsLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGdldE5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdHlwZSA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gdGhpcy5faW5zdGFuY2UgJiYgdGhpcy5faW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgY29uc3RydWN0b3IgJiYgY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLm5hbWUgfHwgbnVsbDtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRoZSBwdWJsaWNseSBhY2Nlc3NpYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgY29tcG9uZW50IC0gaS5lLiB3aGF0XG4gICAqIGlzIGV4cG9zZWQgYnkgcmVmcyBhbmQgcmV0dXJuZWQgYnkgcmVuZGVyLiBDYW4gYmUgbnVsbCBmb3Igc3RhdGVsZXNzXG4gICAqIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIEByZXR1cm4ge1JlYWN0Q29tcG9uZW50fSB0aGUgcHVibGljIGNvbXBvbmVudCBpbnN0YW5jZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXRQdWJsaWNJbnN0YW5jZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgaWYgKHRoaXMuX2NvbXBvc2l0ZVR5cGUgPT09IENvbXBvc2l0ZVR5cGVzLlN0YXRlbGVzc0Z1bmN0aW9uYWwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdDtcbiAgfSxcblxuICAvLyBTdHViXG4gIF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OiBudWxsXG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RDb21wb3NpdGVDb21wb25lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDEyM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuLyogZ2xvYmFsIGhhc093blByb3BlcnR5OnRydWUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpLFxuICAgIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBBdXRvRm9jdXNVdGlscyA9IHJlcXVpcmUoJy4vQXV0b0ZvY3VzVXRpbHMnKTtcbnZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5T3BlcmF0aW9ucycpO1xudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIERPTU5hbWVzcGFjZXMgPSByZXF1aXJlKCcuL0RPTU5hbWVzcGFjZXMnKTtcbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5T3BlcmF0aW9ucycpO1xudmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xudmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luUmVnaXN0cnknKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50RmxhZ3MgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50RmxhZ3MnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0RE9NSW5wdXQgPSByZXF1aXJlKCcuL1JlYWN0RE9NSW5wdXQnKTtcbnZhciBSZWFjdERPTU9wdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RET01PcHRpb24nKTtcbnZhciBSZWFjdERPTVNlbGVjdCA9IHJlcXVpcmUoJy4vUmVhY3RET01TZWxlY3QnKTtcbnZhciBSZWFjdERPTVRleHRhcmVhID0gcmVxdWlyZSgnLi9SZWFjdERPTVRleHRhcmVhJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG52YXIgUmVhY3RNdWx0aUNoaWxkID0gcmVxdWlyZSgnLi9SZWFjdE11bHRpQ2hpbGQnKTtcbnZhciBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uJyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoJy4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgaXNFdmVudFN1cHBvcnRlZCA9IHJlcXVpcmUoJy4vaXNFdmVudFN1cHBvcnRlZCcpO1xudmFyIHNoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ2ZianMvbGliL3NoYWxsb3dFcXVhbCcpO1xudmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IHJlcXVpcmUoJy4vdmFsaWRhdGVET01OZXN0aW5nJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIEZsYWdzID0gUmVhY3RET01Db21wb25lbnRGbGFncztcbnZhciBkZWxldGVMaXN0ZW5lciA9IEV2ZW50UGx1Z2luSHViLmRlbGV0ZUxpc3RlbmVyO1xudmFyIGdldE5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZTtcbnZhciBsaXN0ZW5UbyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5saXN0ZW5UbztcbnZhciByZWdpc3RyYXRpb25OYW1lTW9kdWxlcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXM7XG5cbi8vIEZvciBxdWlja2x5IG1hdGNoaW5nIGNoaWxkcmVuIHR5cGUsIHRvIHRlc3QgaWYgY2FuIGJlIHRyZWF0ZWQgYXMgY29udGVudC5cbnZhciBDT05URU5UX1RZUEVTID0geyAnc3RyaW5nJzogdHJ1ZSwgJ251bWJlcic6IHRydWUgfTtcblxudmFyIFNUWUxFID0gJ3N0eWxlJztcbnZhciBIVE1MID0gJ19faHRtbCc7XG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGNoaWxkcmVuOiBudWxsLFxuICBkYW5nZXJvdXNseVNldElubmVySFRNTDogbnVsbCxcbiAgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nOiBudWxsXG59O1xuXG4vLyBOb2RlIHR5cGUgZm9yIGRvY3VtZW50IGZyYWdtZW50cyAoTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFKS5cbnZhciBET0NfRlJBR01FTlRfVFlQRSA9IDExO1xuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oaW50ZXJuYWxJbnN0YW5jZSkge1xuICBpZiAoaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIHZhciBvd25lciA9IGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lciB8fCBudWxsO1xuICAgIGlmIChvd25lcikge1xuICAgICAgdmFyIG5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICByZXR1cm4gJyBUaGlzIERPTSBub2RlIHdhcyByZW5kZXJlZCBieSBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGZyaWVuZGx5U3RyaW5naWZ5KG9iaikge1xuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICByZXR1cm4gJ1snICsgb2JqLm1hcChmcmllbmRseVN0cmluZ2lmeSkuam9pbignLCAnKSArICddJztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHBhaXJzID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgdmFyIGtleUVzY2FwZWQgPSAvXlthLXokX11bXFx3JF9dKiQvaS50ZXN0KGtleSkgPyBrZXkgOiBKU09OLnN0cmluZ2lmeShrZXkpO1xuICAgICAgICAgIHBhaXJzLnB1c2goa2V5RXNjYXBlZCArICc6ICcgKyBmcmllbmRseVN0cmluZ2lmeShvYmpba2V5XSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJ3snICsgcGFpcnMuam9pbignLCAnKSArICd9JztcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuICdbZnVuY3Rpb24gb2JqZWN0XSc7XG4gIH1cbiAgLy8gRGlmZmVycyBmcm9tIEpTT04uc3RyaW5naWZ5IGluIHRoYXQgdW5kZWZpbmVkIGJlY2F1c2UgdW5kZWZpbmVkIGFuZCB0aGF0XG4gIC8vIGluZiBhbmQgbmFuIGRvbid0IGJlY29tZSBudWxsXG4gIHJldHVybiBTdHJpbmcob2JqKTtcbn1cblxudmFyIHN0eWxlTXV0YXRpb25XYXJuaW5nID0ge307XG5cbmZ1bmN0aW9uIGNoZWNrQW5kV2FybkZvck11dGF0ZWRTdHlsZShzdHlsZTEsIHN0eWxlMiwgY29tcG9uZW50KSB7XG4gIGlmIChzdHlsZTEgPT0gbnVsbCB8fCBzdHlsZTIgPT0gbnVsbCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoc2hhbGxvd0VxdWFsKHN0eWxlMSwgc3R5bGUyKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50Ll90YWc7XG4gIHZhciBvd25lciA9IGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICB2YXIgb3duZXJOYW1lO1xuICBpZiAob3duZXIpIHtcbiAgICBvd25lck5hbWUgPSBvd25lci5nZXROYW1lKCk7XG4gIH1cblxuICB2YXIgaGFzaCA9IG93bmVyTmFtZSArICd8JyArIGNvbXBvbmVudE5hbWU7XG5cbiAgaWYgKHN0eWxlTXV0YXRpb25XYXJuaW5nLmhhc093blByb3BlcnR5KGhhc2gpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3R5bGVNdXRhdGlvbldhcm5pbmdbaGFzaF0gPSB0cnVlO1xuXG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYCVzYCB3YXMgcGFzc2VkIGEgc3R5bGUgb2JqZWN0IHRoYXQgaGFzIHByZXZpb3VzbHkgYmVlbiBtdXRhdGVkLiAnICsgJ011dGF0aW5nIGBzdHlsZWAgaXMgZGVwcmVjYXRlZC4gQ29uc2lkZXIgY2xvbmluZyBpdCBiZWZvcmVoYW5kLiBDaGVjayAnICsgJ3RoZSBgcmVuZGVyYCAlcy4gUHJldmlvdXMgc3R5bGU6ICVzLiBNdXRhdGVkIHN0eWxlOiAlcy4nLCBjb21wb25lbnROYW1lLCBvd25lciA/ICdvZiBgJyArIG93bmVyTmFtZSArICdgJyA6ICd1c2luZyA8JyArIGNvbXBvbmVudE5hbWUgKyAnPicsIGZyaWVuZGx5U3RyaW5naWZ5KHN0eWxlMSksIGZyaWVuZGx5U3RyaW5naWZ5KHN0eWxlMikpIDogdm9pZCAwO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnRcbiAqIEBwYXJhbSB7P29iamVjdH0gcHJvcHNcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0VmFsaWRQcm9wcyhjb21wb25lbnQsIHByb3BzKSB7XG4gIGlmICghcHJvcHMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gTm90ZSB0aGUgdXNlIG9mIGA9PWAgd2hpY2ggY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZC5cbiAgaWYgKHZvaWRFbGVtZW50VGFnc1tjb21wb25lbnQuX3RhZ10pIHtcbiAgICAhKHByb3BzLmNoaWxkcmVuID09IG51bGwgJiYgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMgaXMgYSB2b2lkIGVsZW1lbnQgdGFnIGFuZCBtdXN0IG5laXRoZXIgaGF2ZSBgY2hpbGRyZW5gIG5vciB1c2UgYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4lcycsIGNvbXBvbmVudC5fdGFnLCBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lciA/ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgJyArIGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQuX293bmVyLmdldE5hbWUoKSArICcuJyA6ICcnKSA6IF9wcm9kSW52YXJpYW50KCcxMzcnLCBjb21wb25lbnQuX3RhZywgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIgPyAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICcgKyBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLicgOiAnJykgOiB2b2lkIDA7XG4gIH1cbiAgaWYgKHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAhKHByb3BzLmNoaWxkcmVuID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0NhbiBvbmx5IHNldCBvbmUgb2YgYGNoaWxkcmVuYCBvciBgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLicpIDogX3Byb2RJbnZhcmlhbnQoJzYwJykgOiB2b2lkIDA7XG4gICAgISh0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT09ICdvYmplY3QnICYmIEhUTUwgaW4gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Bwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAgbXVzdCBiZSBpbiB0aGUgZm9ybSBge19faHRtbDogLi4ufWAuIFBsZWFzZSB2aXNpdCBodHRwczovL2ZiLm1lL3JlYWN0LWludmFyaWFudC1kYW5nZXJvdXNseS1zZXQtaW5uZXItaHRtbCBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKSA6IF9wcm9kSW52YXJpYW50KCc2MScpIDogdm9pZCAwO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHJvcHMuaW5uZXJIVE1MID09IG51bGwsICdEaXJlY3RseSBzZXR0aW5nIHByb3BlcnR5IGBpbm5lckhUTUxgIGlzIG5vdCBwZXJtaXR0ZWQuICcgKyAnRm9yIG1vcmUgaW5mb3JtYXRpb24sIGxvb2t1cCBkb2N1bWVudGF0aW9uIG9uIGBkYW5nZXJvdXNseVNldElubmVySFRNTGAuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHJvcHMuc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHx8ICFwcm9wcy5jb250ZW50RWRpdGFibGUgfHwgcHJvcHMuY2hpbGRyZW4gPT0gbnVsbCwgJ0EgY29tcG9uZW50IGlzIGBjb250ZW50RWRpdGFibGVgIGFuZCBjb250YWlucyBgY2hpbGRyZW5gIG1hbmFnZWQgYnkgJyArICdSZWFjdC4gSXQgaXMgbm93IHlvdXIgcmVzcG9uc2liaWxpdHkgdG8gZ3VhcmFudGVlIHRoYXQgbm9uZSBvZiAnICsgJ3Rob3NlIG5vZGVzIGFyZSB1bmV4cGVjdGVkbHkgbW9kaWZpZWQgb3IgZHVwbGljYXRlZC4gVGhpcyBpcyAnICsgJ3Byb2JhYmx5IG5vdCBpbnRlbnRpb25hbC4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5vbkZvY3VzSW4gPT0gbnVsbCAmJiBwcm9wcy5vbkZvY3VzT3V0ID09IG51bGwsICdSZWFjdCB1c2VzIG9uRm9jdXMgYW5kIG9uQmx1ciBpbnN0ZWFkIG9mIG9uRm9jdXNJbiBhbmQgb25Gb2N1c091dC4gJyArICdBbGwgUmVhY3QgZXZlbnRzIGFyZSBub3JtYWxpemVkIHRvIGJ1YmJsZSwgc28gb25Gb2N1c0luIGFuZCBvbkZvY3VzT3V0ICcgKyAnYXJlIG5vdCBuZWVkZWQvc3VwcG9ydGVkIGJ5IFJlYWN0LicpIDogdm9pZCAwO1xuICB9XG4gICEocHJvcHMuc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2YgcHJvcHMuc3R5bGUgPT09ICdvYmplY3QnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUaGUgYHN0eWxlYCBwcm9wIGV4cGVjdHMgYSBtYXBwaW5nIGZyb20gc3R5bGUgcHJvcGVydGllcyB0byB2YWx1ZXMsIG5vdCBhIHN0cmluZy4gRm9yIGV4YW1wbGUsIHN0eWxlPXt7bWFyZ2luUmlnaHQ6IHNwYWNpbmcgKyBcXCdlbVxcJ319IHdoZW4gdXNpbmcgSlNYLiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkpIDogX3Byb2RJbnZhcmlhbnQoJzYyJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkpIDogdm9pZCAwO1xufVxuXG5mdW5jdGlvbiBlbnF1ZXVlUHV0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIsIHRyYW5zYWN0aW9uKSB7XG4gIGlmICh0cmFuc2FjdGlvbiBpbnN0YW5jZW9mIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBJRTggaGFzIG5vIEFQSSBmb3IgZXZlbnQgY2FwdHVyaW5nIGFuZCB0aGUgYG9uU2Nyb2xsYCBldmVudCBkb2Vzbid0XG4gICAgLy8gYnViYmxlLlxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHJlZ2lzdHJhdGlvbk5hbWUgIT09ICdvblNjcm9sbCcgfHwgaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSksICdUaGlzIGJyb3dzZXIgZG9lc25cXCd0IHN1cHBvcnQgdGhlIGBvblNjcm9sbGAgZXZlbnQnKSA6IHZvaWQgMDtcbiAgfVxuICB2YXIgY29udGFpbmVySW5mbyA9IGluc3QuX2hvc3RDb250YWluZXJJbmZvO1xuICB2YXIgaXNEb2N1bWVudEZyYWdtZW50ID0gY29udGFpbmVySW5mby5fbm9kZSAmJiBjb250YWluZXJJbmZvLl9ub2RlLm5vZGVUeXBlID09PSBET0NfRlJBR01FTlRfVFlQRTtcbiAgdmFyIGRvYyA9IGlzRG9jdW1lbnRGcmFnbWVudCA/IGNvbnRhaW5lckluZm8uX25vZGUgOiBjb250YWluZXJJbmZvLl9vd25lckRvY3VtZW50O1xuICBsaXN0ZW5UbyhyZWdpc3RyYXRpb25OYW1lLCBkb2MpO1xuICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHB1dExpc3RlbmVyLCB7XG4gICAgaW5zdDogaW5zdCxcbiAgICByZWdpc3RyYXRpb25OYW1lOiByZWdpc3RyYXRpb25OYW1lLFxuICAgIGxpc3RlbmVyOiBsaXN0ZW5lclxuICB9KTtcbn1cblxuZnVuY3Rpb24gcHV0TGlzdGVuZXIoKSB7XG4gIHZhciBsaXN0ZW5lclRvUHV0ID0gdGhpcztcbiAgRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXIobGlzdGVuZXJUb1B1dC5pbnN0LCBsaXN0ZW5lclRvUHV0LnJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyVG9QdXQubGlzdGVuZXIpO1xufVxuXG5mdW5jdGlvbiBpbnB1dFBvc3RNb3VudCgpIHtcbiAgdmFyIGluc3QgPSB0aGlzO1xuICBSZWFjdERPTUlucHV0LnBvc3RNb3VudFdyYXBwZXIoaW5zdCk7XG59XG5cbmZ1bmN0aW9uIHRleHRhcmVhUG9zdE1vdW50KCkge1xuICB2YXIgaW5zdCA9IHRoaXM7XG4gIFJlYWN0RE9NVGV4dGFyZWEucG9zdE1vdW50V3JhcHBlcihpbnN0KTtcbn1cblxuZnVuY3Rpb24gb3B0aW9uUG9zdE1vdW50KCkge1xuICB2YXIgaW5zdCA9IHRoaXM7XG4gIFJlYWN0RE9NT3B0aW9uLnBvc3RNb3VudFdyYXBwZXIoaW5zdCk7XG59XG5cbnZhciBzZXRBbmRWYWxpZGF0ZUNvbnRlbnRDaGlsZERldiA9IGVtcHR5RnVuY3Rpb247XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBzZXRBbmRWYWxpZGF0ZUNvbnRlbnRDaGlsZERldiA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgdmFyIGhhc0V4aXN0aW5nQ29udGVudCA9IHRoaXMuX2NvbnRlbnREZWJ1Z0lEICE9IG51bGw7XG4gICAgdmFyIGRlYnVnSUQgPSB0aGlzLl9kZWJ1Z0lEO1xuICAgIC8vIFRoaXMgSUQgcmVwcmVzZW50cyB0aGUgaW5saW5lZCBjaGlsZCB0aGF0IGhhcyBubyBiYWNraW5nIGluc3RhbmNlOlxuICAgIHZhciBjb250ZW50RGVidWdJRCA9IC1kZWJ1Z0lEO1xuXG4gICAgaWYgKGNvbnRlbnQgPT0gbnVsbCkge1xuICAgICAgaWYgKGhhc0V4aXN0aW5nQ29udGVudCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Vbm1vdW50Q29tcG9uZW50KHRoaXMuX2NvbnRlbnREZWJ1Z0lEKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX2NvbnRlbnREZWJ1Z0lEID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YWxpZGF0ZURPTU5lc3RpbmcobnVsbCwgU3RyaW5nKGNvbnRlbnQpLCB0aGlzLCB0aGlzLl9hbmNlc3RvckluZm8pO1xuICAgIHRoaXMuX2NvbnRlbnREZWJ1Z0lEID0gY29udGVudERlYnVnSUQ7XG4gICAgaWYgKGhhc0V4aXN0aW5nQ29udGVudCkge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVmb3JlVXBkYXRlQ29tcG9uZW50KGNvbnRlbnREZWJ1Z0lELCBjb250ZW50KTtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVwZGF0ZUNvbXBvbmVudChjb250ZW50RGVidWdJRCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZm9yZU1vdW50Q29tcG9uZW50KGNvbnRlbnREZWJ1Z0lELCBjb250ZW50LCBkZWJ1Z0lEKTtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk1vdW50Q29tcG9uZW50KGNvbnRlbnREZWJ1Z0lEKTtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKGRlYnVnSUQsIFtjb250ZW50RGVidWdJRF0pO1xuICAgIH1cbiAgfTtcbn1cblxuLy8gVGhlcmUgYXJlIHNvIG1hbnkgbWVkaWEgZXZlbnRzLCBpdCBtYWtlcyBzZW5zZSB0byBqdXN0XG4vLyBtYWludGFpbiBhIGxpc3QgcmF0aGVyIHRoYW4gY3JlYXRlIGEgYHRyYXBCdWJibGVkRXZlbnRgIGZvciBlYWNoXG52YXIgbWVkaWFFdmVudHMgPSB7XG4gIHRvcEFib3J0OiAnYWJvcnQnLFxuICB0b3BDYW5QbGF5OiAnY2FucGxheScsXG4gIHRvcENhblBsYXlUaHJvdWdoOiAnY2FucGxheXRocm91Z2gnLFxuICB0b3BEdXJhdGlvbkNoYW5nZTogJ2R1cmF0aW9uY2hhbmdlJyxcbiAgdG9wRW1wdGllZDogJ2VtcHRpZWQnLFxuICB0b3BFbmNyeXB0ZWQ6ICdlbmNyeXB0ZWQnLFxuICB0b3BFbmRlZDogJ2VuZGVkJyxcbiAgdG9wRXJyb3I6ICdlcnJvcicsXG4gIHRvcExvYWRlZERhdGE6ICdsb2FkZWRkYXRhJyxcbiAgdG9wTG9hZGVkTWV0YWRhdGE6ICdsb2FkZWRtZXRhZGF0YScsXG4gIHRvcExvYWRTdGFydDogJ2xvYWRzdGFydCcsXG4gIHRvcFBhdXNlOiAncGF1c2UnLFxuICB0b3BQbGF5OiAncGxheScsXG4gIHRvcFBsYXlpbmc6ICdwbGF5aW5nJyxcbiAgdG9wUHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gIHRvcFJhdGVDaGFuZ2U6ICdyYXRlY2hhbmdlJyxcbiAgdG9wU2Vla2VkOiAnc2Vla2VkJyxcbiAgdG9wU2Vla2luZzogJ3NlZWtpbmcnLFxuICB0b3BTdGFsbGVkOiAnc3RhbGxlZCcsXG4gIHRvcFN1c3BlbmQ6ICdzdXNwZW5kJyxcbiAgdG9wVGltZVVwZGF0ZTogJ3RpbWV1cGRhdGUnLFxuICB0b3BWb2x1bWVDaGFuZ2U6ICd2b2x1bWVjaGFuZ2UnLFxuICB0b3BXYWl0aW5nOiAnd2FpdGluZydcbn07XG5cbmZ1bmN0aW9uIHRyYXBCdWJibGVkRXZlbnRzTG9jYWwoKSB7XG4gIHZhciBpbnN0ID0gdGhpcztcbiAgLy8gSWYgYSBjb21wb25lbnQgcmVuZGVycyB0byBudWxsIG9yIGlmIGFub3RoZXIgY29tcG9uZW50IGZhdGFscyBhbmQgY2F1c2VzXG4gIC8vIHRoZSBzdGF0ZSBvZiB0aGUgdHJlZSB0byBiZSBjb3JydXB0ZWQsIGBub2RlYCBoZXJlIGNhbiBiZSBudWxsLlxuICAhaW5zdC5fcm9vdE5vZGVJRCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdNdXN0IGJlIG1vdW50ZWQgdG8gdHJhcCBldmVudHMnKSA6IF9wcm9kSW52YXJpYW50KCc2MycpIDogdm9pZCAwO1xuICB2YXIgbm9kZSA9IGdldE5vZGUoaW5zdCk7XG4gICFub2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RyYXBCdWJibGVkRXZlbnQoLi4uKTogUmVxdWlyZXMgbm9kZSB0byBiZSByZW5kZXJlZC4nKSA6IF9wcm9kSW52YXJpYW50KCc2NCcpIDogdm9pZCAwO1xuXG4gIHN3aXRjaCAoaW5zdC5fdGFnKSB7XG4gICAgY2FzZSAnaWZyYW1lJzpcbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wTG9hZCcsICdsb2FkJywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndmlkZW8nOlxuICAgIGNhc2UgJ2F1ZGlvJzpcblxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtdO1xuICAgICAgLy8gQ3JlYXRlIGxpc3RlbmVyIGZvciBlYWNoIG1lZGlhIGV2ZW50XG4gICAgICBmb3IgKHZhciBldmVudCBpbiBtZWRpYUV2ZW50cykge1xuICAgICAgICBpZiAobWVkaWFFdmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XG4gICAgICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycy5wdXNoKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KGV2ZW50LCBtZWRpYUV2ZW50c1tldmVudF0sIG5vZGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnc291cmNlJzpcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcEVycm9yJywgJ2Vycm9yJywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW1nJzpcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcEVycm9yJywgJ2Vycm9yJywgbm9kZSksIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KCd0b3BMb2FkJywgJ2xvYWQnLCBub2RlKV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdmb3JtJzpcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoJ3RvcFJlc2V0JywgJ3Jlc2V0Jywgbm9kZSksIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KCd0b3BTdWJtaXQnLCAnc3VibWl0Jywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudCgndG9wSW52YWxpZCcsICdpbnZhbGlkJywgbm9kZSldO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9zdFVwZGF0ZVNlbGVjdFdyYXBwZXIoKSB7XG4gIFJlYWN0RE9NU2VsZWN0LnBvc3RVcGRhdGVXcmFwcGVyKHRoaXMpO1xufVxuXG4vLyBGb3IgSFRNTCwgY2VydGFpbiB0YWdzIHNob3VsZCBvbWl0IHRoZWlyIGNsb3NlIHRhZy4gV2Uga2VlcCBhIHdoaXRlbGlzdCBmb3Jcbi8vIHRob3NlIHNwZWNpYWwtY2FzZSB0YWdzLlxuXG52YXIgb21pdHRlZENsb3NlVGFncyA9IHtcbiAgJ2FyZWEnOiB0cnVlLFxuICAnYmFzZSc6IHRydWUsXG4gICdicic6IHRydWUsXG4gICdjb2wnOiB0cnVlLFxuICAnZW1iZWQnOiB0cnVlLFxuICAnaHInOiB0cnVlLFxuICAnaW1nJzogdHJ1ZSxcbiAgJ2lucHV0JzogdHJ1ZSxcbiAgJ2tleWdlbic6IHRydWUsXG4gICdsaW5rJzogdHJ1ZSxcbiAgJ21ldGEnOiB0cnVlLFxuICAncGFyYW0nOiB0cnVlLFxuICAnc291cmNlJzogdHJ1ZSxcbiAgJ3RyYWNrJzogdHJ1ZSxcbiAgJ3dicic6IHRydWVcbn07XG5cbnZhciBuZXdsaW5lRWF0aW5nVGFncyA9IHtcbiAgJ2xpc3RpbmcnOiB0cnVlLFxuICAncHJlJzogdHJ1ZSxcbiAgJ3RleHRhcmVhJzogdHJ1ZVxufTtcblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBjYW5ub3QgaGF2ZSBjaGlsZHJlbi4gVGhpcyBoYXMgdGhlIHNhbWUgcHVycG9zZSBhc1xuLy8gYG9taXR0ZWRDbG9zZVRhZ3NgIGV4Y2VwdCB0aGF0IGBtZW51aXRlbWAgc2hvdWxkIHN0aWxsIGhhdmUgaXRzIGNsb3NpbmcgdGFnLlxuXG52YXIgdm9pZEVsZW1lbnRUYWdzID0gX2Fzc2lnbih7XG4gICdtZW51aXRlbSc6IHRydWVcbn0sIG9taXR0ZWRDbG9zZVRhZ3MpO1xuXG4vLyBXZSBhY2NlcHQgYW55IHRhZyB0byBiZSByZW5kZXJlZCBidXQgc2luY2UgdGhpcyBnZXRzIGluamVjdGVkIGludG8gYXJiaXRyYXJ5XG4vLyBIVE1MLCB3ZSB3YW50IHRvIG1ha2Ugc3VyZSB0aGF0IGl0J3MgYSBzYWZlIHRhZy5cbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSL1JFQy14bWwvI05ULU5hbWVcblxudmFyIFZBTElEX1RBR19SRUdFWCA9IC9eW2EtekEtWl1bYS16QS1aOl9cXC5cXC1cXGRdKiQvOyAvLyBTaW1wbGlmaWVkIHN1YnNldFxudmFyIHZhbGlkYXRlZFRhZ0NhY2hlID0ge307XG52YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKSB7XG4gIGlmICghaGFzT3duUHJvcGVydHkuY2FsbCh2YWxpZGF0ZWRUYWdDYWNoZSwgdGFnKSkge1xuICAgICFWQUxJRF9UQUdfUkVHRVgudGVzdCh0YWcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0ludmFsaWQgdGFnOiAlcycsIHRhZykgOiBfcHJvZEludmFyaWFudCgnNjUnLCB0YWcpIDogdm9pZCAwO1xuICAgIHZhbGlkYXRlZFRhZ0NhY2hlW3RhZ10gPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQ3VzdG9tQ29tcG9uZW50KHRhZ05hbWUsIHByb3BzKSB7XG4gIHJldHVybiB0YWdOYW1lLmluZGV4T2YoJy0nKSA+PSAwIHx8IHByb3BzLmlzICE9IG51bGw7XG59XG5cbnZhciBnbG9iYWxJZENvdW50ZXIgPSAxO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgUmVhY3QgY2xhc3MgdGhhdCBpcyBpZGVtcG90ZW50IGFuZCBjYXBhYmxlIG9mIGNvbnRhaW5pbmcgb3RoZXJcbiAqIFJlYWN0IGNvbXBvbmVudHMuIEl0IGFjY2VwdHMgZXZlbnQgbGlzdGVuZXJzIGFuZCBET00gcHJvcGVydGllcyB0aGF0IGFyZVxuICogdmFsaWQgYWNjb3JkaW5nIHRvIGBET01Qcm9wZXJ0eWAuXG4gKlxuICogIC0gRXZlbnQgbGlzdGVuZXJzOiBgb25DbGlja2AsIGBvbk1vdXNlRG93bmAsIGV0Yy5cbiAqICAtIERPTSBwcm9wZXJ0aWVzOiBgY2xhc3NOYW1lYCwgYG5hbWVgLCBgdGl0bGVgLCBldGMuXG4gKlxuICogVGhlIGBzdHlsZWAgcHJvcGVydHkgZnVuY3Rpb25zIGRpZmZlcmVudGx5IGZyb20gdGhlIERPTSBBUEkuIEl0IGFjY2VwdHMgYW5cbiAqIG9iamVjdCBtYXBwaW5nIG9mIHN0eWxlIHByb3BlcnRpZXMgdG8gdmFsdWVzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBSZWFjdERPTUNvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RNdWx0aUNoaWxkXG4gKi9cbmZ1bmN0aW9uIFJlYWN0RE9NQ29tcG9uZW50KGVsZW1lbnQpIHtcbiAgdmFyIHRhZyA9IGVsZW1lbnQudHlwZTtcbiAgdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKTtcbiAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICB0aGlzLl90YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgdGhpcy5fbmFtZXNwYWNlVVJJID0gbnVsbDtcbiAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMuX3ByZXZpb3VzU3R5bGUgPSBudWxsO1xuICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gIHRoaXMuX2hvc3ROb2RlID0gbnVsbDtcbiAgdGhpcy5faG9zdFBhcmVudCA9IG51bGw7XG4gIHRoaXMuX3Jvb3ROb2RlSUQgPSAwO1xuICB0aGlzLl9kb21JRCA9IDA7XG4gIHRoaXMuX2hvc3RDb250YWluZXJJbmZvID0gbnVsbDtcbiAgdGhpcy5fd3JhcHBlclN0YXRlID0gbnVsbDtcbiAgdGhpcy5fdG9wTGV2ZWxXcmFwcGVyID0gbnVsbDtcbiAgdGhpcy5fZmxhZ3MgPSAwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHRoaXMuX2FuY2VzdG9ySW5mbyA9IG51bGw7XG4gICAgc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLCBudWxsKTtcbiAgfVxufVxuXG5SZWFjdERPTUNvbXBvbmVudC5kaXNwbGF5TmFtZSA9ICdSZWFjdERPTUNvbXBvbmVudCc7XG5cblJlYWN0RE9NQ29tcG9uZW50Lk1peGluID0ge1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgcm9vdCB0YWcgbWFya3VwIHRoZW4gcmVjdXJzZXMuIFRoaXMgbWV0aG9kIGhhcyBzaWRlIGVmZmVjdHMgYW5kXG4gICAqIGlzIG5vdCBpZGVtcG90ZW50LlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7P1JlYWN0RE9NQ29tcG9uZW50fSB0aGUgcGFyZW50IGNvbXBvbmVudCBpbnN0YW5jZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IGluZm8gYWJvdXQgdGhlIGhvc3QgY29udGFpbmVyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNvbXB1dGVkIG1hcmt1cC5cbiAgICovXG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCBjb250ZXh0KSB7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IGdsb2JhbElkQ291bnRlcisrO1xuICAgIHRoaXMuX2RvbUlEID0gaG9zdENvbnRhaW5lckluZm8uX2lkQ291bnRlcisrO1xuICAgIHRoaXMuX2hvc3RQYXJlbnQgPSBob3N0UGFyZW50O1xuICAgIHRoaXMuX2hvc3RDb250YWluZXJJbmZvID0gaG9zdENvbnRhaW5lckluZm87XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdhdWRpbyc6XG4gICAgICBjYXNlICdmb3JtJzpcbiAgICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgICBjYXNlICdpbWcnOlxuICAgICAgY2FzZSAnbGluayc6XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgY2FzZSAnc291cmNlJzpcbiAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgdGhpcy5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgICAgIGxpc3RlbmVyczogbnVsbFxuICAgICAgICB9O1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYXBCdWJibGVkRXZlbnRzTG9jYWwsIHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgUmVhY3RET01JbnB1dC5tb3VudFdyYXBwZXIodGhpcywgcHJvcHMsIGhvc3RQYXJlbnQpO1xuICAgICAgICBwcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0SG9zdFByb3BzKHRoaXMsIHByb3BzKTtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0cmFwQnViYmxlZEV2ZW50c0xvY2FsLCB0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdvcHRpb24nOlxuICAgICAgICBSZWFjdERPTU9wdGlvbi5tb3VudFdyYXBwZXIodGhpcywgcHJvcHMsIGhvc3RQYXJlbnQpO1xuICAgICAgICBwcm9wcyA9IFJlYWN0RE9NT3B0aW9uLmdldEhvc3RQcm9wcyh0aGlzLCBwcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgUmVhY3RET01TZWxlY3QubW91bnRXcmFwcGVyKHRoaXMsIHByb3BzLCBob3N0UGFyZW50KTtcbiAgICAgICAgcHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXRIb3N0UHJvcHModGhpcywgcHJvcHMpO1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYXBCdWJibGVkRXZlbnRzTG9jYWwsIHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgUmVhY3RET01UZXh0YXJlYS5tb3VudFdyYXBwZXIodGhpcywgcHJvcHMsIGhvc3RQYXJlbnQpO1xuICAgICAgICBwcm9wcyA9IFJlYWN0RE9NVGV4dGFyZWEuZ2V0SG9zdFByb3BzKHRoaXMsIHByb3BzKTtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0cmFwQnViYmxlZEV2ZW50c0xvY2FsLCB0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgYXNzZXJ0VmFsaWRQcm9wcyh0aGlzLCBwcm9wcyk7XG5cbiAgICAvLyBXZSBjcmVhdGUgdGFncyBpbiB0aGUgbmFtZXNwYWNlIG9mIHRoZWlyIHBhcmVudCBjb250YWluZXIsIGV4Y2VwdCBIVE1MXG4gICAgLy8gdGFncyBnZXQgbm8gbmFtZXNwYWNlLlxuICAgIHZhciBuYW1lc3BhY2VVUkk7XG4gICAgdmFyIHBhcmVudFRhZztcbiAgICBpZiAoaG9zdFBhcmVudCAhPSBudWxsKSB7XG4gICAgICBuYW1lc3BhY2VVUkkgPSBob3N0UGFyZW50Ll9uYW1lc3BhY2VVUkk7XG4gICAgICBwYXJlbnRUYWcgPSBob3N0UGFyZW50Ll90YWc7XG4gICAgfSBlbHNlIGlmIChob3N0Q29udGFpbmVySW5mby5fdGFnKSB7XG4gICAgICBuYW1lc3BhY2VVUkkgPSBob3N0Q29udGFpbmVySW5mby5fbmFtZXNwYWNlVVJJO1xuICAgICAgcGFyZW50VGFnID0gaG9zdENvbnRhaW5lckluZm8uX3RhZztcbiAgICB9XG4gICAgaWYgKG5hbWVzcGFjZVVSSSA9PSBudWxsIHx8IG5hbWVzcGFjZVVSSSA9PT0gRE9NTmFtZXNwYWNlcy5zdmcgJiYgcGFyZW50VGFnID09PSAnZm9yZWlnbm9iamVjdCcpIHtcbiAgICAgIG5hbWVzcGFjZVVSSSA9IERPTU5hbWVzcGFjZXMuaHRtbDtcbiAgICB9XG4gICAgaWYgKG5hbWVzcGFjZVVSSSA9PT0gRE9NTmFtZXNwYWNlcy5odG1sKSB7XG4gICAgICBpZiAodGhpcy5fdGFnID09PSAnc3ZnJykge1xuICAgICAgICBuYW1lc3BhY2VVUkkgPSBET01OYW1lc3BhY2VzLnN2ZztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fdGFnID09PSAnbWF0aCcpIHtcbiAgICAgICAgbmFtZXNwYWNlVVJJID0gRE9NTmFtZXNwYWNlcy5tYXRobWw7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX25hbWVzcGFjZVVSSSA9IG5hbWVzcGFjZVVSSTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgcGFyZW50SW5mbztcbiAgICAgIGlmIChob3N0UGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgcGFyZW50SW5mbyA9IGhvc3RQYXJlbnQuX2FuY2VzdG9ySW5mbztcbiAgICAgIH0gZWxzZSBpZiAoaG9zdENvbnRhaW5lckluZm8uX3RhZykge1xuICAgICAgICBwYXJlbnRJbmZvID0gaG9zdENvbnRhaW5lckluZm8uX2FuY2VzdG9ySW5mbztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnRJbmZvKSB7XG4gICAgICAgIC8vIHBhcmVudEluZm8gc2hvdWxkIGFsd2F5cyBiZSBwcmVzZW50IGV4Y2VwdCBmb3IgdGhlIHRvcC1sZXZlbFxuICAgICAgICAvLyBjb21wb25lbnQgd2hlbiBzZXJ2ZXIgcmVuZGVyaW5nXG4gICAgICAgIHZhbGlkYXRlRE9NTmVzdGluZyh0aGlzLl90YWcsIG51bGwsIHRoaXMsIHBhcmVudEluZm8pO1xuICAgICAgfVxuICAgICAgdGhpcy5fYW5jZXN0b3JJbmZvID0gdmFsaWRhdGVET01OZXN0aW5nLnVwZGF0ZWRBbmNlc3RvckluZm8ocGFyZW50SW5mbywgdGhpcy5fdGFnLCB0aGlzKTtcbiAgICB9XG5cbiAgICB2YXIgbW91bnRJbWFnZTtcbiAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSBob3N0Q29udGFpbmVySW5mby5fb3duZXJEb2N1bWVudDtcbiAgICAgIHZhciBlbDtcbiAgICAgIGlmIChuYW1lc3BhY2VVUkkgPT09IERPTU5hbWVzcGFjZXMuaHRtbCkge1xuICAgICAgICBpZiAodGhpcy5fdGFnID09PSAnc2NyaXB0Jykge1xuICAgICAgICAgIC8vIENyZWF0ZSB0aGUgc2NyaXB0IHZpYSAuaW5uZXJIVE1MIHNvIGl0cyBcInBhcnNlci1pbnNlcnRlZFwiIGZsYWcgaXNcbiAgICAgICAgICAvLyBzZXQgdG8gdHJ1ZSBhbmQgaXQgZG9lcyBub3QgZXhlY3V0ZVxuICAgICAgICAgIHZhciBkaXYgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHZhciB0eXBlID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gJzwnICsgdHlwZSArICc+PC8nICsgdHlwZSArICc+JztcbiAgICAgICAgICBlbCA9IGRpdi5yZW1vdmVDaGlsZChkaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcHMuaXMpIHtcbiAgICAgICAgICBlbCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlLCBwcm9wcy5pcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2VwYXJhdGUgZWxzZSBicmFuY2ggaW5zdGVhZCBvZiB1c2luZyBgcHJvcHMuaXMgfHwgdW5kZWZpbmVkYCBhYm92ZSBiZWN1YXNlIG9mIGEgRmlyZWZveCBidWcuXG4gICAgICAgICAgLy8gU2VlIGRpc2N1c3Npb24gaW4gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNjg5NlxuICAgICAgICAgIC8vIGFuZCBkaXNjdXNzaW9uIGluIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEyNzYyNDBcbiAgICAgICAgICBlbCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUpO1xuICAgICAgfVxuICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZSh0aGlzLCBlbCk7XG4gICAgICB0aGlzLl9mbGFncyB8PSBGbGFncy5oYXNDYWNoZWRDaGlsZE5vZGVzO1xuICAgICAgaWYgKCF0aGlzLl9ob3N0UGFyZW50KSB7XG4gICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRBdHRyaWJ1dGVGb3JSb290KGVsKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3VwZGF0ZURPTVByb3BlcnRpZXMobnVsbCwgcHJvcHMsIHRyYW5zYWN0aW9uKTtcbiAgICAgIHZhciBsYXp5VHJlZSA9IERPTUxhenlUcmVlKGVsKTtcbiAgICAgIHRoaXMuX2NyZWF0ZUluaXRpYWxDaGlsZHJlbih0cmFuc2FjdGlvbiwgcHJvcHMsIGNvbnRleHQsIGxhenlUcmVlKTtcbiAgICAgIG1vdW50SW1hZ2UgPSBsYXp5VHJlZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHRhZ09wZW4gPSB0aGlzLl9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzKHRyYW5zYWN0aW9uLCBwcm9wcyk7XG4gICAgICB2YXIgdGFnQ29udGVudCA9IHRoaXMuX2NyZWF0ZUNvbnRlbnRNYXJrdXAodHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0KTtcbiAgICAgIGlmICghdGFnQ29udGVudCAmJiBvbWl0dGVkQ2xvc2VUYWdzW3RoaXMuX3RhZ10pIHtcbiAgICAgICAgbW91bnRJbWFnZSA9IHRhZ09wZW4gKyAnLz4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbW91bnRJbWFnZSA9IHRhZ09wZW4gKyAnPicgKyB0YWdDb250ZW50ICsgJzwvJyArIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUgKyAnPic7XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3dpdGNoICh0aGlzLl90YWcpIHtcbiAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnB1dFBvc3RNb3VudCwgdGhpcyk7XG4gICAgICAgIGlmIChwcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0ZXh0YXJlYVBvc3RNb3VudCwgdGhpcyk7XG4gICAgICAgIGlmIChwcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGlmIChwcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgIGlmIChwcm9wcy5hdXRvRm9jdXMpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUob3B0aW9uUG9zdE1vdW50LCB0aGlzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vdW50SW1hZ2U7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciB0aGUgb3BlbiB0YWcgYW5kIGFsbCBhdHRyaWJ1dGVzLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBoYXMgc2lkZSBlZmZlY3RzIGJlY2F1c2UgZXZlbnRzIGdldCByZWdpc3RlcmVkLlxuICAgKlxuICAgKiBJdGVyYXRpbmcgb3ZlciBvYmplY3QgcHJvcGVydGllcyBpcyBmYXN0ZXIgdGhhbiBpdGVyYXRpbmcgb3ZlciBhcnJheXMuXG4gICAqIEBzZWUgaHR0cDovL2pzcGVyZi5jb20vb2JqLXZzLWFyci1pdGVyYXRpb25cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE1hcmt1cCBvZiBvcGVuaW5nIHRhZy5cbiAgICovXG4gIF9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzOiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByb3BzKSB7XG4gICAgdmFyIHJldCA9ICc8JyArIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG5cbiAgICBmb3IgKHZhciBwcm9wS2V5IGluIHByb3BzKSB7XG4gICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BLZXldO1xuICAgICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgICAgICBlbnF1ZXVlUHV0TGlzdGVuZXIodGhpcywgcHJvcEtleSwgcHJvcFZhbHVlLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChwcm9wS2V5ID09PSBTVFlMRSkge1xuICAgICAgICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIC8vIFNlZSBgX3VwZGF0ZURPTVByb3BlcnRpZXNgLiBzdHlsZSBibG9ja1xuICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlID0gcHJvcFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvcFZhbHVlID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBfYXNzaWduKHt9LCBwcm9wcy5zdHlsZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb3BWYWx1ZSA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JTdHlsZXMocHJvcFZhbHVlLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbWFya3VwID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX3RhZyAhPSBudWxsICYmIGlzQ3VzdG9tQ29tcG9uZW50KHRoaXMuX3RhZywgcHJvcHMpKSB7XG4gICAgICAgICAgaWYgKCFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgICAgbWFya3VwID0gRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvckN1c3RvbUF0dHJpYnV0ZShwcm9wS2V5LCBwcm9wVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXJrdXAgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yUHJvcGVydHkocHJvcEtleSwgcHJvcFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWFya3VwKSB7XG4gICAgICAgICAgcmV0ICs9ICcgJyArIG1hcmt1cDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZvciBzdGF0aWMgcGFnZXMsIG5vIG5lZWQgdG8gcHV0IFJlYWN0IElEIGFuZCBjaGVja3N1bS4gU2F2ZXMgbG90cyBvZlxuICAgIC8vIGJ5dGVzLlxuICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuX2hvc3RQYXJlbnQpIHtcbiAgICAgIHJldCArPSAnICcgKyBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yUm9vdCgpO1xuICAgIH1cbiAgICByZXQgKz0gJyAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHRoaXMuX2RvbUlEKTtcbiAgICByZXR1cm4gcmV0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIG1hcmt1cCBmb3IgdGhlIGNvbnRlbnQgYmV0d2VlbiB0aGUgdGFncy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcm9wc1xuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IENvbnRlbnQgbWFya3VwLlxuICAgKi9cbiAgX2NyZWF0ZUNvbnRlbnRNYXJrdXA6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgcmV0ID0gJyc7XG5cbiAgICAvLyBJbnRlbnRpb25hbCB1c2Ugb2YgIT0gdG8gYXZvaWQgY2F0Y2hpbmcgemVyby9mYWxzZS5cbiAgICB2YXIgaW5uZXJIVE1MID0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG4gICAgaWYgKGlubmVySFRNTCAhPSBudWxsKSB7XG4gICAgICBpZiAoaW5uZXJIVE1MLl9faHRtbCAhPSBudWxsKSB7XG4gICAgICAgIHJldCA9IGlubmVySFRNTC5fX2h0bWw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250ZW50VG9Vc2UgPSBDT05URU5UX1RZUEVTW3R5cGVvZiBwcm9wcy5jaGlsZHJlbl0gPyBwcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgICB2YXIgY2hpbGRyZW5Ub1VzZSA9IGNvbnRlbnRUb1VzZSAhPSBudWxsID8gbnVsbCA6IHByb3BzLmNoaWxkcmVuO1xuICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IFZhbGlkYXRlIHRoYXQgdGV4dCBpcyBhbGxvd2VkIGFzIGEgY2hpbGQgb2YgdGhpcyBub2RlXG4gICAgICAgIHJldCA9IGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcihjb250ZW50VG9Vc2UpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHNldEFuZFZhbGlkYXRlQ29udGVudENoaWxkRGV2LmNhbGwodGhpcywgY29udGVudFRvVXNlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjaGlsZHJlblRvVXNlICE9IG51bGwpIHtcbiAgICAgICAgdmFyIG1vdW50SW1hZ2VzID0gdGhpcy5tb3VudENoaWxkcmVuKGNoaWxkcmVuVG9Vc2UsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgcmV0ID0gbW91bnRJbWFnZXMuam9pbignJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuZXdsaW5lRWF0aW5nVGFnc1t0aGlzLl90YWddICYmIHJldC5jaGFyQXQoMCkgPT09ICdcXG4nKSB7XG4gICAgICAvLyB0ZXh0L2h0bWwgaWdub3JlcyB0aGUgZmlyc3QgY2hhcmFjdGVyIGluIHRoZXNlIHRhZ3MgaWYgaXQncyBhIG5ld2xpbmVcbiAgICAgIC8vIFByZWZlciB0byBicmVhayBhcHBsaWNhdGlvbi94bWwgb3ZlciB0ZXh0L2h0bWwgKGZvciBub3cpIGJ5IGFkZGluZ1xuICAgICAgLy8gYSBuZXdsaW5lIHNwZWNpZmljYWxseSB0byBnZXQgZWF0ZW4gYnkgdGhlIHBhcnNlci4gKEFsdGVybmF0ZWx5IGZvclxuICAgICAgLy8gdGV4dGFyZWFzLCByZXBsYWNpbmcgXCJeXFxuXCIgd2l0aCBcIlxcclxcblwiIGRvZXNuJ3QgZ2V0IGVhdGVuLCBhbmQgdGhlIGZpcnN0XG4gICAgICAvLyBcXHIgaXMgbm9ybWFsaXplZCBvdXQgYnkgSFRNTFRleHRBcmVhRWxlbWVudCN2YWx1ZS4pXG4gICAgICAvLyBTZWU6IDxodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sLXBvbHlnbG90LyNuZXdsaW5lcy1pbi10ZXh0YXJlYS1hbmQtcHJlPlxuICAgICAgLy8gU2VlOiA8aHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjZWxlbWVudC1yZXN0cmljdGlvbnM+XG4gICAgICAvLyBTZWU6IDxodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9zeW50YXguaHRtbCNuZXdsaW5lcz5cbiAgICAgIC8vIFNlZTogUGFyc2luZyBvZiBcInRleHRhcmVhXCIgXCJsaXN0aW5nXCIgYW5kIFwicHJlXCIgZWxlbWVudHNcbiAgICAgIC8vICBmcm9tIDxodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW5ib2R5PlxuICAgICAgcmV0dXJuICdcXG4nICsgcmV0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgfSxcblxuICBfY3JlYXRlSW5pdGlhbENoaWxkcmVuOiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0LCBsYXp5VHJlZSkge1xuICAgIC8vIEludGVudGlvbmFsIHVzZSBvZiAhPSB0byBhdm9pZCBjYXRjaGluZyB6ZXJvL2ZhbHNlLlxuICAgIHZhciBpbm5lckhUTUwgPSBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTDtcbiAgICBpZiAoaW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAgIGlmIChpbm5lckhUTUwuX19odG1sICE9IG51bGwpIHtcbiAgICAgICAgRE9NTGF6eVRyZWUucXVldWVIVE1MKGxhenlUcmVlLCBpbm5lckhUTUwuX19odG1sKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbnRlbnRUb1VzZSA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIHByb3BzLmNoaWxkcmVuXSA/IHByb3BzLmNoaWxkcmVuIDogbnVsbDtcbiAgICAgIHZhciBjaGlsZHJlblRvVXNlID0gY29udGVudFRvVXNlICE9IG51bGwgPyBudWxsIDogcHJvcHMuY2hpbGRyZW47XG4gICAgICAvLyBUT0RPOiBWYWxpZGF0ZSB0aGF0IHRleHQgaXMgYWxsb3dlZCBhcyBhIGNoaWxkIG9mIHRoaXMgbm9kZVxuICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIEF2b2lkIHNldHRpbmcgdGV4dENvbnRlbnQgd2hlbiB0aGUgdGV4dCBpcyBlbXB0eS4gSW4gSUUxMSBzZXR0aW5nXG4gICAgICAgIC8vIHRleHRDb250ZW50IG9uIGEgdGV4dCBhcmVhIHdpbGwgY2F1c2UgdGhlIHBsYWNlaG9sZGVyIHRvIG5vdFxuICAgICAgICAvLyBzaG93IHdpdGhpbiB0aGUgdGV4dGFyZWEgdW50aWwgaXQgaGFzIGJlZW4gZm9jdXNlZCBhbmQgYmx1cnJlZCBhZ2Fpbi5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy82NzMxI2lzc3VlY29tbWVudC0yNTQ4NzQ1NTNcbiAgICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPT0gJycpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLCBjb250ZW50VG9Vc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBET01MYXp5VHJlZS5xdWV1ZVRleHQobGF6eVRyZWUsIGNvbnRlbnRUb1VzZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRyZW5Ub1VzZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBtb3VudEltYWdlcyA9IHRoaXMubW91bnRDaGlsZHJlbihjaGlsZHJlblRvVXNlLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbW91bnRJbWFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBtb3VudEltYWdlc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY2VpdmVzIGEgbmV4dCBlbGVtZW50IGFuZCB1cGRhdGVzIHRoZSBjb21wb25lbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gbmV4dEVsZW1lbnRcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAqL1xuICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbiAobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0RWxlbWVudDtcbiAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBjb250ZXh0KTtcbiAgfSxcblxuICAvKipcbiAgICogVXBkYXRlcyBhIERPTSBjb21wb25lbnQgYWZ0ZXIgaXQgaGFzIGFscmVhZHkgYmVlbiBhbGxvY2F0ZWQgYW5kXG4gICAqIGF0dGFjaGVkIHRvIHRoZSBET00uIFJlY29uY2lsZXMgdGhlIHJvb3QgRE9NIG5vZGUsIHRoZW4gcmVjdXJzZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IHByZXZFbGVtZW50XG4gICAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBuZXh0RWxlbWVudFxuICAgKiBAaW50ZXJuYWxcbiAgICogQG92ZXJyaWRhYmxlXG4gICAqL1xuICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uICh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBjb250ZXh0KSB7XG4gICAgdmFyIGxhc3RQcm9wcyA9IHByZXZFbGVtZW50LnByb3BzO1xuICAgIHZhciBuZXh0UHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0SG9zdFByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0SG9zdFByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01PcHRpb24uZ2V0SG9zdFByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NT3B0aW9uLmdldEhvc3RQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NU2VsZWN0LmdldEhvc3RQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXRIb3N0UHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NVGV4dGFyZWEuZ2V0SG9zdFByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NVGV4dGFyZWEuZ2V0SG9zdFByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGFzc2VydFZhbGlkUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbik7XG4gICAgdGhpcy5fdXBkYXRlRE9NQ2hpbGRyZW4obGFzdFByb3BzLCBuZXh0UHJvcHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcblxuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgd3JhcHBlciBhcm91bmQgaW5wdXRzICphZnRlciogdXBkYXRpbmcgcHJvcHMuIFRoaXMgaGFzIHRvXG4gICAgICAgIC8vIGhhcHBlbiBhZnRlciBgX3VwZGF0ZURPTVByb3BlcnRpZXNgLiBPdGhlcndpc2UgSFRNTDUgaW5wdXQgdmFsaWRhdGlvbnNcbiAgICAgICAgLy8gcmFpc2Ugd2FybmluZ3MgYW5kIHByZXZlbnQgdGhlIG5ldyB2YWx1ZSBmcm9tIGJlaW5nIGFzc2lnbmVkLlxuICAgICAgICBSZWFjdERPTUlucHV0LnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICBSZWFjdERPTVRleHRhcmVhLnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgLy8gPHNlbGVjdD4gdmFsdWUgdXBkYXRlIG5lZWRzIHRvIG9jY3VyIGFmdGVyIDxvcHRpb24+IGNoaWxkcmVuXG4gICAgICAgIC8vIHJlY29uY2lsaWF0aW9uXG4gICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUocG9zdFVwZGF0ZVNlbGVjdFdyYXBwZXIsIHRoaXMpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlY29uY2lsZXMgdGhlIHByb3BlcnRpZXMgYnkgZGV0ZWN0aW5nIGRpZmZlcmVuY2VzIGluIHByb3BlcnR5IHZhbHVlcyBhbmRcbiAgICogdXBkYXRpbmcgdGhlIERPTSBhcyBuZWNlc3NhcnkuIFRoaXMgZnVuY3Rpb24gaXMgcHJvYmFibHkgdGhlIHNpbmdsZSBtb3N0XG4gICAqIGNyaXRpY2FsIHBhdGggZm9yIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbi5cbiAgICpcbiAgICogVE9ETzogQmVuY2htYXJrIHdoZXRoZXIgY2hlY2tpbmcgZm9yIGNoYW5nZWQgdmFsdWVzIGluIG1lbW9yeSBhY3R1YWxseVxuICAgKiAgICAgICBpbXByb3ZlcyBwZXJmb3JtYW5jZSAoZXNwZWNpYWxseSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudHMpLlxuICAgKiBUT0RPOiBCZW5jaG1hcmsgdGhlIGVmZmVjdHMgb2YgcHV0dGluZyB0aGlzIGF0IHRoZSB0b3Agc2luY2UgOTklIG9mIHByb3BzXG4gICAqICAgICAgIGRvIG5vdCBjaGFuZ2UgZm9yIGEgZ2l2ZW4gcmVjb25jaWxpYXRpb24uXG4gICAqIFRPRE86IEJlbmNobWFyayBhcmVhcyB0aGF0IGNhbiBiZSBpbXByb3ZlZCB3aXRoIGNhY2hpbmcuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBsYXN0UHJvcHNcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0gez9ET01FbGVtZW50fSBub2RlXG4gICAqL1xuICBfdXBkYXRlRE9NUHJvcGVydGllczogZnVuY3Rpb24gKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbikge1xuICAgIHZhciBwcm9wS2V5O1xuICAgIHZhciBzdHlsZU5hbWU7XG4gICAgdmFyIHN0eWxlVXBkYXRlcztcbiAgICBmb3IgKHByb3BLZXkgaW4gbGFzdFByb3BzKSB7XG4gICAgICBpZiAobmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8ICFsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbGFzdFByb3BzW3Byb3BLZXldID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgdmFyIGxhc3RTdHlsZSA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5O1xuICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0U3R5bGUpIHtcbiAgICAgICAgICBpZiAobGFzdFN0eWxlLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgaWYgKGxhc3RQcm9wc1twcm9wS2V5XSkge1xuICAgICAgICAgIC8vIE9ubHkgY2FsbCBkZWxldGVMaXN0ZW5lciBpZiB0aGVyZSB3YXMgYSBsaXN0ZW5lciBwcmV2aW91c2x5IG9yXG4gICAgICAgICAgLy8gZWxzZSB3aWxsRGVsZXRlTGlzdGVuZXIgZ2V0cyBjYWxsZWQgd2hlbiB0aGVyZSB3YXNuJ3QgYWN0dWFsbHkgYVxuICAgICAgICAgIC8vIGxpc3RlbmVyIChlLmcuLCBvbkNsaWNrPXtudWxsfSlcbiAgICAgICAgICBkZWxldGVMaXN0ZW5lcih0aGlzLCBwcm9wS2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0N1c3RvbUNvbXBvbmVudCh0aGlzLl90YWcsIGxhc3RQcm9wcykpIHtcbiAgICAgICAgaWYgKCFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvckF0dHJpYnV0ZShnZXROb2RlKHRoaXMpLCBwcm9wS2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW3Byb3BLZXldIHx8IERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHByb3BLZXkpKSB7XG4gICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KGdldE5vZGUodGhpcyksIHByb3BLZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHByb3BLZXkgaW4gbmV4dFByb3BzKSB7XG4gICAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG4gICAgICB2YXIgbGFzdFByb3AgPSBwcm9wS2V5ID09PSBTVFlMRSA/IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5IDogbGFzdFByb3BzICE9IG51bGwgPyBsYXN0UHJvcHNbcHJvcEtleV0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCBuZXh0UHJvcCA9PT0gbGFzdFByb3AgfHwgbmV4dFByb3AgPT0gbnVsbCAmJiBsYXN0UHJvcCA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkU3R5bGUodGhpcy5fcHJldmlvdXNTdHlsZUNvcHksIHRoaXMuX3ByZXZpb3VzU3R5bGUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZSA9IG5leHRQcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0UHJvcCA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gX2Fzc2lnbih7fSwgbmV4dFByb3ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdFByb3ApIHtcbiAgICAgICAgICAvLyBVbnNldCBzdHlsZXMgb24gYGxhc3RQcm9wYCBidXQgbm90IG9uIGBuZXh0UHJvcGAuXG4gICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFByb3ApIHtcbiAgICAgICAgICAgIGlmIChsYXN0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpICYmICghbmV4dFByb3AgfHwgIW5leHRQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpKSB7XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gVXBkYXRlIHN0eWxlcyB0aGF0IGNoYW5nZWQgc2luY2UgYGxhc3RQcm9wYC5cbiAgICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBuZXh0UHJvcCkge1xuICAgICAgICAgICAgaWYgKG5leHRQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiYgbGFzdFByb3Bbc3R5bGVOYW1lXSAhPT0gbmV4dFByb3Bbc3R5bGVOYW1lXSkge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gbmV4dFByb3Bbc3R5bGVOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUmVsaWVzIG9uIGB1cGRhdGVTdHlsZXNCeUlEYCBub3QgbXV0YXRpbmcgYHN0eWxlVXBkYXRlc2AuXG4gICAgICAgICAgc3R5bGVVcGRhdGVzID0gbmV4dFByb3A7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgaWYgKG5leHRQcm9wKSB7XG4gICAgICAgICAgZW5xdWV1ZVB1dExpc3RlbmVyKHRoaXMsIHByb3BLZXksIG5leHRQcm9wLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdFByb3ApIHtcbiAgICAgICAgICBkZWxldGVMaXN0ZW5lcih0aGlzLCBwcm9wS2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0N1c3RvbUNvbXBvbmVudCh0aGlzLl90YWcsIG5leHRQcm9wcykpIHtcbiAgICAgICAgaWYgKCFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvckF0dHJpYnV0ZShnZXROb2RlKHRoaXMpLCBwcm9wS2V5LCBuZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wS2V5XSB8fCBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICB2YXIgbm9kZSA9IGdldE5vZGUodGhpcyk7XG4gICAgICAgIC8vIElmIHdlJ3JlIHVwZGF0aW5nIHRvIG51bGwgb3IgdW5kZWZpbmVkLCB3ZSBzaG91bGQgcmVtb3ZlIHRoZSBwcm9wZXJ0eVxuICAgICAgICAvLyBmcm9tIHRoZSBET00gbm9kZSBpbnN0ZWFkIG9mIGluYWR2ZXJ0ZW50bHkgc2V0dGluZyB0byBhIHN0cmluZy4gVGhpc1xuICAgICAgICAvLyBicmluZ3MgdXMgaW4gbGluZSB3aXRoIHRoZSBzYW1lIGJlaGF2aW9yIHdlIGhhdmUgb24gaW5pdGlhbCByZW5kZXIuXG4gICAgICAgIGlmIChuZXh0UHJvcCAhPSBudWxsKSB7XG4gICAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgcHJvcEtleSwgbmV4dFByb3ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIHByb3BLZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdHlsZVVwZGF0ZXMpIHtcbiAgICAgIENTU1Byb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclN0eWxlcyhnZXROb2RlKHRoaXMpLCBzdHlsZVVwZGF0ZXMsIHRoaXMpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVjb25jaWxlcyB0aGUgY2hpbGRyZW4gd2l0aCB0aGUgdmFyaW91cyBwcm9wZXJ0aWVzIHRoYXQgYWZmZWN0IHRoZVxuICAgKiBjaGlsZHJlbiBjb250ZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbGFzdFByb3BzXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gY29udGV4dFxuICAgKi9cbiAgX3VwZGF0ZURPTUNoaWxkcmVuOiBmdW5jdGlvbiAobGFzdFByb3BzLCBuZXh0UHJvcHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgdmFyIGxhc3RDb250ZW50ID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgbGFzdFByb3BzLmNoaWxkcmVuXSA/IGxhc3RQcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgdmFyIG5leHRDb250ZW50ID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgbmV4dFByb3BzLmNoaWxkcmVuXSA/IG5leHRQcm9wcy5jaGlsZHJlbiA6IG51bGw7XG5cbiAgICB2YXIgbGFzdEh0bWwgPSBsYXN0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiYgbGFzdFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbDtcbiAgICB2YXIgbmV4dEh0bWwgPSBuZXh0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiYgbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbDtcblxuICAgIC8vIE5vdGUgdGhlIHVzZSBvZiBgIT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG4gICAgdmFyIGxhc3RDaGlsZHJlbiA9IGxhc3RDb250ZW50ICE9IG51bGwgPyBudWxsIDogbGFzdFByb3BzLmNoaWxkcmVuO1xuICAgIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0Q29udGVudCAhPSBudWxsID8gbnVsbCA6IG5leHRQcm9wcy5jaGlsZHJlbjtcblxuICAgIC8vIElmIHdlJ3JlIHN3aXRjaGluZyBmcm9tIGNoaWxkcmVuIHRvIGNvbnRlbnQvaHRtbCBvciB2aWNlIHZlcnNhLCByZW1vdmVcbiAgICAvLyB0aGUgb2xkIGNvbnRlbnRcbiAgICB2YXIgbGFzdEhhc0NvbnRlbnRPckh0bWwgPSBsYXN0Q29udGVudCAhPSBudWxsIHx8IGxhc3RIdG1sICE9IG51bGw7XG4gICAgdmFyIG5leHRIYXNDb250ZW50T3JIdG1sID0gbmV4dENvbnRlbnQgIT0gbnVsbCB8fCBuZXh0SHRtbCAhPSBudWxsO1xuICAgIGlmIChsYXN0Q2hpbGRyZW4gIT0gbnVsbCAmJiBuZXh0Q2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihudWxsLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSBlbHNlIGlmIChsYXN0SGFzQ29udGVudE9ySHRtbCAmJiAhbmV4dEhhc0NvbnRlbnRPckh0bWwpIHtcbiAgICAgIHRoaXMudXBkYXRlVGV4dENvbnRlbnQoJycpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0Q2hpbGRyZW4odGhpcy5fZGVidWdJRCwgW10pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXh0Q29udGVudCAhPSBudWxsKSB7XG4gICAgICBpZiAobGFzdENvbnRlbnQgIT09IG5leHRDb250ZW50KSB7XG4gICAgICAgIHRoaXMudXBkYXRlVGV4dENvbnRlbnQoJycgKyBuZXh0Q29udGVudCk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLCBuZXh0Q29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5leHRIdG1sICE9IG51bGwpIHtcbiAgICAgIGlmIChsYXN0SHRtbCAhPT0gbmV4dEh0bWwpIHtcbiAgICAgICAgdGhpcy51cGRhdGVNYXJrdXAoJycgKyBuZXh0SHRtbCk7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbih0aGlzLl9kZWJ1Z0lELCBbXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0Q2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLCBudWxsKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihuZXh0Q2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0SG9zdE5vZGU6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0Tm9kZSh0aGlzKTtcbiAgfSxcblxuICAvKipcbiAgICogRGVzdHJveXMgYWxsIGV2ZW50IHJlZ2lzdHJhdGlvbnMgZm9yIHRoaXMgaW5zdGFuY2UuIERvZXMgbm90IHJlbW92ZSBmcm9tXG4gICAqIHRoZSBET00uIFRoYXQgbXVzdCBiZSBkb25lIGJ5IHRoZSBwYXJlbnQuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHNhZmVseSkge1xuICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICBjYXNlICdhdWRpbyc6XG4gICAgICBjYXNlICdmb3JtJzpcbiAgICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgICBjYXNlICdpbWcnOlxuICAgICAgY2FzZSAnbGluayc6XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgY2FzZSAnc291cmNlJzpcbiAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnM7XG4gICAgICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGlzdGVuZXJzW2ldLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICBjYXNlICdib2R5JzpcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbXBvbmVudHMgbGlrZSA8aHRtbD4gPGhlYWQ+IGFuZCA8Ym9keT4gY2FuJ3QgYmUgcmVtb3ZlZCBvciBhZGRlZFxuICAgICAgICAgKiBlYXNpbHkgaW4gYSBjcm9zcy1icm93c2VyIHdheSwgaG93ZXZlciBpdCdzIHZhbHVhYmxlIHRvIGJlIGFibGUgdG9cbiAgICAgICAgICogdGFrZSBhZHZhbnRhZ2Ugb2YgUmVhY3QncyByZWNvbmNpbGlhdGlvbiBmb3Igc3R5bGluZyBhbmQgPHRpdGxlPlxuICAgICAgICAgKiBtYW5hZ2VtZW50LiBTbyB3ZSBqdXN0IGRvY3VtZW50IGl0IGFuZCB0aHJvdyBpbiBkYW5nZXJvdXMgY2FzZXMuXG4gICAgICAgICAqL1xuICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnPCVzPiB0cmllZCB0byB1bm1vdW50LiBCZWNhdXNlIG9mIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGl0IGlzIGltcG9zc2libGUgdG8gdW5tb3VudCBzb21lIHRvcC1sZXZlbCBjb21wb25lbnRzIChlZyA8aHRtbD4sIDxoZWFkPiwgYW5kIDxib2R5PikgcmVsaWFibHkgYW5kIGVmZmljaWVudGx5LiBUbyBmaXggdGhpcywgaGF2ZSBhIHNpbmdsZSB0b3AtbGV2ZWwgY29tcG9uZW50IHRoYXQgbmV2ZXIgdW5tb3VudHMgcmVuZGVyIHRoZXNlIGVsZW1lbnRzLicsIHRoaXMuX3RhZykgOiBfcHJvZEludmFyaWFudCgnNjYnLCB0aGlzLl90YWcpIDogdm9pZCAwO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aGlzLnVubW91bnRDaGlsZHJlbihzYWZlbHkpO1xuICAgIFJlYWN0RE9NQ29tcG9uZW50VHJlZS51bmNhY2hlTm9kZSh0aGlzKTtcbiAgICBFdmVudFBsdWdpbkh1Yi5kZWxldGVBbGxMaXN0ZW5lcnModGhpcyk7XG4gICAgdGhpcy5fcm9vdE5vZGVJRCA9IDA7XG4gICAgdGhpcy5fZG9tSUQgPSAwO1xuICAgIHRoaXMuX3dyYXBwZXJTdGF0ZSA9IG51bGw7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgc2V0QW5kVmFsaWRhdGVDb250ZW50Q2hpbGREZXYuY2FsbCh0aGlzLCBudWxsKTtcbiAgICB9XG4gIH0sXG5cbiAgZ2V0UHVibGljSW5zdGFuY2U6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0Tm9kZSh0aGlzKTtcbiAgfVxuXG59O1xuXG5fYXNzaWduKFJlYWN0RE9NQ29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RET01Db21wb25lbnQuTWl4aW4sIFJlYWN0TXVsdGlDaGlsZC5NaXhpbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db21wb25lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01Db21wb25lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDEyNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gcmVxdWlyZSgnLi92YWxpZGF0ZURPTU5lc3RpbmcnKTtcblxudmFyIERPQ19OT0RFX1RZUEUgPSA5O1xuXG5mdW5jdGlvbiBSZWFjdERPTUNvbnRhaW5lckluZm8odG9wTGV2ZWxXcmFwcGVyLCBub2RlKSB7XG4gIHZhciBpbmZvID0ge1xuICAgIF90b3BMZXZlbFdyYXBwZXI6IHRvcExldmVsV3JhcHBlcixcbiAgICBfaWRDb3VudGVyOiAxLFxuICAgIF9vd25lckRvY3VtZW50OiBub2RlID8gbm9kZS5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSA/IG5vZGUgOiBub2RlLm93bmVyRG9jdW1lbnQgOiBudWxsLFxuICAgIF9ub2RlOiBub2RlLFxuICAgIF90YWc6IG5vZGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsLFxuICAgIF9uYW1lc3BhY2VVUkk6IG5vZGUgPyBub2RlLm5hbWVzcGFjZVVSSSA6IG51bGxcbiAgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpbmZvLl9hbmNlc3RvckluZm8gPSBub2RlID8gdmFsaWRhdGVET01OZXN0aW5nLnVwZGF0ZWRBbmNlc3RvckluZm8obnVsbCwgaW5mby5fdGFnLCBudWxsKSA6IG51bGw7XG4gIH1cbiAgcmV0dXJuIGluZm87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db250YWluZXJJbmZvO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NQ29udGFpbmVySW5mby5qc1xuLy8gbW9kdWxlIGlkID0gMTI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgRE9NTGF6eVRyZWUgPSByZXF1aXJlKCcuL0RPTUxhenlUcmVlJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcblxudmFyIFJlYWN0RE9NRW1wdHlDb21wb25lbnQgPSBmdW5jdGlvbiAoaW5zdGFudGlhdGUpIHtcbiAgLy8gUmVhY3RDb21wb3NpdGVDb21wb25lbnQgdXNlcyB0aGlzOlxuICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG51bGw7XG4gIC8vIFJlYWN0RE9NQ29tcG9uZW50VHJlZSB1c2VzIHRoZXNlOlxuICB0aGlzLl9ob3N0Tm9kZSA9IG51bGw7XG4gIHRoaXMuX2hvc3RQYXJlbnQgPSBudWxsO1xuICB0aGlzLl9ob3N0Q29udGFpbmVySW5mbyA9IG51bGw7XG4gIHRoaXMuX2RvbUlEID0gMDtcbn07XG5fYXNzaWduKFJlYWN0RE9NRW1wdHlDb21wb25lbnQucHJvdG90eXBlLCB7XG4gIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAodHJhbnNhY3Rpb24sIGhvc3RQYXJlbnQsIGhvc3RDb250YWluZXJJbmZvLCBjb250ZXh0KSB7XG4gICAgdmFyIGRvbUlEID0gaG9zdENvbnRhaW5lckluZm8uX2lkQ291bnRlcisrO1xuICAgIHRoaXMuX2RvbUlEID0gZG9tSUQ7XG4gICAgdGhpcy5faG9zdFBhcmVudCA9IGhvc3RQYXJlbnQ7XG4gICAgdGhpcy5faG9zdENvbnRhaW5lckluZm8gPSBob3N0Q29udGFpbmVySW5mbztcblxuICAgIHZhciBub2RlVmFsdWUgPSAnIHJlYWN0LWVtcHR5OiAnICsgdGhpcy5fZG9tSUQgKyAnICc7XG4gICAgaWYgKHRyYW5zYWN0aW9uLnVzZUNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBvd25lckRvY3VtZW50ID0gaG9zdENvbnRhaW5lckluZm8uX293bmVyRG9jdW1lbnQ7XG4gICAgICB2YXIgbm9kZSA9IG93bmVyRG9jdW1lbnQuY3JlYXRlQ29tbWVudChub2RlVmFsdWUpO1xuICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZSh0aGlzLCBub2RlKTtcbiAgICAgIHJldHVybiBET01MYXp5VHJlZShub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRyYW5zYWN0aW9uLnJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgICAgIC8vIE5vcm1hbGx5IHdlJ2QgaW5zZXJ0IGEgY29tbWVudCBub2RlLCBidXQgc2luY2UgdGhpcyBpcyBhIHNpdHVhdGlvblxuICAgICAgICAvLyB3aGVyZSBSZWFjdCB3b24ndCB0YWtlIG92ZXIgKHN0YXRpYyBwYWdlcyksIHdlIGNhbiBzaW1wbHkgcmV0dXJuXG4gICAgICAgIC8vIG5vdGhpbmcuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHJldHVybiAnPCEtLScgKyBub2RlVmFsdWUgKyAnLS0+JztcbiAgICB9XG4gIH0sXG4gIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uICgpIHt9LFxuICBnZXRIb3N0Tm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0aGlzKTtcbiAgfSxcbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKCkge1xuICAgIFJlYWN0RE9NQ29tcG9uZW50VHJlZS51bmNhY2hlTm9kZSh0aGlzKTtcbiAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01FbXB0eUNvbXBvbmVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTUVtcHR5Q29tcG9uZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxMjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcblxuLyoqXG4gKiBPcGVyYXRpb25zIHVzZWQgdG8gcHJvY2VzcyB1cGRhdGVzIHRvIERPTSBub2Rlcy5cbiAqL1xudmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0ge1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgY29tcG9uZW50J3MgY2hpbGRyZW4gYnkgcHJvY2Vzc2luZyBhIHNlcmllcyBvZiB1cGRhdGVzLlxuICAgKlxuICAgKiBAcGFyYW0ge2FycmF5PG9iamVjdD59IHVwZGF0ZXMgTGlzdCBvZiB1cGRhdGUgY29uZmlndXJhdGlvbnMuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBmdW5jdGlvbiAocGFyZW50SW5zdCwgdXBkYXRlcykge1xuICAgIHZhciBub2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UocGFyZW50SW5zdCk7XG4gICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnByb2Nlc3NVcGRhdGVzKG5vZGUsIHVwZGF0ZXMpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSURPcGVyYXRpb25zO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NSURPcGVyYXRpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSAxMjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKSxcbiAgICBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMnKTtcbnZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZSgnLi9MaW5rZWRWYWx1ZVV0aWxzJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIGRpZFdhcm5WYWx1ZUxpbmsgPSBmYWxzZTtcbnZhciBkaWRXYXJuQ2hlY2tlZExpbmsgPSBmYWxzZTtcbnZhciBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUgPSBmYWxzZTtcbnZhciBkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkID0gZmFsc2U7XG52YXIgZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCA9IGZhbHNlO1xudmFyIGRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgLy8gRE9NIGNvbXBvbmVudCBpcyBzdGlsbCBtb3VudGVkOyB1cGRhdGVcbiAgICBSZWFjdERPTUlucHV0LnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNDb250cm9sbGVkKHByb3BzKSB7XG4gIHZhciB1c2VzQ2hlY2tlZCA9IHByb3BzLnR5cGUgPT09ICdjaGVja2JveCcgfHwgcHJvcHMudHlwZSA9PT0gJ3JhZGlvJztcbiAgcmV0dXJuIHVzZXNDaGVja2VkID8gcHJvcHMuY2hlY2tlZCAhPSBudWxsIDogcHJvcHMudmFsdWUgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGFuIDxpbnB1dD4gaG9zdCBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyB0aGVzZSBvcHRpb25hbFxuICogcHJvcHM6IGBjaGVja2VkYCwgYHZhbHVlYCwgYGRlZmF1bHRDaGVja2VkYCwgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICpcbiAqIElmIGBjaGVja2VkYCBvciBgdmFsdWVgIGFyZSBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zXG4gKiB0aGF0IGFmZmVjdCB0aGUgY2hlY2tlZCBzdGF0ZSBvciB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiB0aGV5IGFyZSBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgbm90XG4gKiB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBwcm9wcyBtdXN0IGNoYW5nZSBpbiBvcmRlciBmb3JcbiAqIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCBhcyB1bmNoZWNrZWQgKG9yIGBkZWZhdWx0Q2hlY2tlZGApXG4gKiB3aXRoIGFuIGVtcHR5IHZhbHVlIChvciBgZGVmYXVsdFZhbHVlYCkuXG4gKlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDEyL1dELWh0bWw1LTIwMTIxMDI1L3RoZS1pbnB1dC1lbGVtZW50Lmh0bWxcbiAqL1xudmFyIFJlYWN0RE9NSW5wdXQgPSB7XG4gIGdldEhvc3RQcm9wczogZnVuY3Rpb24gKGluc3QsIHByb3BzKSB7XG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgdmFyIGNoZWNrZWQgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldENoZWNrZWQocHJvcHMpO1xuXG4gICAgdmFyIGhvc3RQcm9wcyA9IF9hc3NpZ24oe1xuICAgICAgLy8gTWFrZSBzdXJlIHdlIHNldCAudHlwZSBiZWZvcmUgYW55IG90aGVyIHByb3BlcnRpZXMgKHNldHRpbmcgLnZhbHVlXG4gICAgICAvLyBiZWZvcmUgLnR5cGUgbWVhbnMgLnZhbHVlIGlzIGxvc3QgaW4gSUUxMSBhbmQgYmVsb3cpXG4gICAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgICAvLyBNYWtlIHN1cmUgd2Ugc2V0IC5zdGVwIGJlZm9yZSAudmFsdWUgKHNldHRpbmcgLnZhbHVlIGJlZm9yZSAuc3RlcFxuICAgICAgLy8gbWVhbnMgLnZhbHVlIGlzIHJvdW5kZWQgb24gbW91bnQsIGJhc2VkIHVwb24gc3RlcCBwcmVjaXNpb24pXG4gICAgICBzdGVwOiB1bmRlZmluZWQsXG4gICAgICAvLyBNYWtlIHN1cmUgd2Ugc2V0IC5taW4gJiAubWF4IGJlZm9yZSAudmFsdWUgKHRvIGVuc3VyZSBwcm9wZXIgb3JkZXJcbiAgICAgIC8vIGluIGNvcm5lciBjYXNlcyBzdWNoIGFzIG1pbiBvciBtYXggZGVyaXZpbmcgZnJvbSB2YWx1ZSwgZS5nLiBJc3N1ZSAjNzE3MClcbiAgICAgIG1pbjogdW5kZWZpbmVkLFxuICAgICAgbWF4OiB1bmRlZmluZWRcbiAgICB9LCBwcm9wcywge1xuICAgICAgZGVmYXVsdENoZWNrZWQ6IHVuZGVmaW5lZCxcbiAgICAgIGRlZmF1bHRWYWx1ZTogdW5kZWZpbmVkLFxuICAgICAgdmFsdWU6IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUsXG4gICAgICBjaGVja2VkOiBjaGVja2VkICE9IG51bGwgPyBjaGVja2VkIDogaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkLFxuICAgICAgb25DaGFuZ2U6IGluc3QuX3dyYXBwZXJTdGF0ZS5vbkNoYW5nZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhvc3RQcm9wcztcbiAgfSxcblxuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBMaW5rZWRWYWx1ZVV0aWxzLmNoZWNrUHJvcFR5cGVzKCdpbnB1dCcsIHByb3BzLCBpbnN0Ll9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuXG4gICAgICB2YXIgb3duZXIgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG5cbiAgICAgIGlmIChwcm9wcy52YWx1ZUxpbmsgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbHVlTGluaykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2B2YWx1ZUxpbmtgIHByb3Agb24gYGlucHV0YCBpcyBkZXByZWNhdGVkOyBzZXQgYHZhbHVlYCBhbmQgYG9uQ2hhbmdlYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuVmFsdWVMaW5rID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5jaGVja2VkTGluayAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuQ2hlY2tlZExpbmspIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgY2hlY2tlZExpbmtgIHByb3Agb24gYGlucHV0YCBpcyBkZXByZWNhdGVkOyBzZXQgYHZhbHVlYCBhbmQgYG9uQ2hhbmdlYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuQ2hlY2tlZExpbmsgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLmNoZWNrZWQgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMgY29udGFpbnMgYW4gaW5wdXQgb2YgdHlwZSAlcyB3aXRoIGJvdGggY2hlY2tlZCBhbmQgZGVmYXVsdENoZWNrZWQgcHJvcHMuICcgKyAnSW5wdXQgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIGNoZWNrZWQgcHJvcCwgb3IgdGhlIGRlZmF1bHRDaGVja2VkIHByb3AsIGJ1dCBub3QgJyArICdib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycsIG93bmVyICYmIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnLCBwcm9wcy50eXBlKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMgY29udGFpbnMgYW4gaW5wdXQgb2YgdHlwZSAlcyB3aXRoIGJvdGggdmFsdWUgYW5kIGRlZmF1bHRWYWx1ZSBwcm9wcy4gJyArICdJbnB1dCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnLCBvd25lciAmJiBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JywgcHJvcHMudHlwZSkgOiB2b2lkIDA7XG4gICAgICAgIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7XG4gICAgICBpbml0aWFsQ2hlY2tlZDogcHJvcHMuY2hlY2tlZCAhPSBudWxsID8gcHJvcHMuY2hlY2tlZCA6IHByb3BzLmRlZmF1bHRDaGVja2VkLFxuICAgICAgaW5pdGlhbFZhbHVlOiBwcm9wcy52YWx1ZSAhPSBudWxsID8gcHJvcHMudmFsdWUgOiBkZWZhdWx0VmFsdWUsXG4gICAgICBsaXN0ZW5lcnM6IG51bGwsXG4gICAgICBvbkNoYW5nZTogX2hhbmRsZUNoYW5nZS5iaW5kKGluc3QpXG4gICAgfTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUuY29udHJvbGxlZCA9IGlzQ29udHJvbGxlZChwcm9wcyk7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZVdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgdmFyIHByb3BzID0gaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGNvbnRyb2xsZWQgPSBpc0NvbnRyb2xsZWQocHJvcHMpO1xuICAgICAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuXG4gICAgICBpZiAoIWluc3QuX3dyYXBwZXJTdGF0ZS5jb250cm9sbGVkICYmIGNvbnRyb2xsZWQgJiYgIWRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyBpcyBjaGFuZ2luZyBhbiB1bmNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSBjb250cm9sbGVkLiAnICsgJ0lucHV0IGVsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiAnICsgJ0RlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4gTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycsIG93bmVyICYmIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnLCBwcm9wcy50eXBlKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaW5zdC5fd3JhcHBlclN0YXRlLmNvbnRyb2xsZWQgJiYgIWNvbnRyb2xsZWQgJiYgIWRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyBpcyBjaGFuZ2luZyBhIGNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSB1bmNvbnRyb2xsZWQuICcgKyAnSW5wdXQgZWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuICcgKyAnRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuQ29udHJvbGxlZFRvVW5jb250cm9sbGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBTaG91bGRuJ3QgdGhpcyBiZSBnZXRDaGVja2VkKHByb3BzKT9cbiAgICB2YXIgY2hlY2tlZCA9IHByb3BzLmNoZWNrZWQ7XG4gICAgaWYgKGNoZWNrZWQgIT0gbnVsbCkge1xuICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkoUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCksICdjaGVja2VkJywgY2hlY2tlZCB8fCBmYWxzZSk7XG4gICAgfVxuXG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuXG4gICAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgdmFyIG5ld1ZhbHVlID0gJycgKyB2YWx1ZTtcblxuICAgICAgLy8gVG8gYXZvaWQgc2lkZSBlZmZlY3RzIChzdWNoIGFzIGxvc2luZyB0ZXh0IHNlbGVjdGlvbiksIG9ubHkgc2V0IHZhbHVlIGlmIGNoYW5nZWRcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gbm9kZS52YWx1ZSkge1xuICAgICAgICBub2RlLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9wcy52YWx1ZSA9PSBudWxsICYmIHByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIEluIENocm9tZSwgYXNzaWduaW5nIGRlZmF1bHRWYWx1ZSB0byBjZXJ0YWluIGlucHV0IHR5cGVzIHRyaWdnZXJzIGlucHV0IHZhbGlkYXRpb24uXG4gICAgICAgIC8vIEZvciBudW1iZXIgaW5wdXRzLCB0aGUgZGlzcGxheSB2YWx1ZSBsb3NlcyB0cmFpbGluZyBkZWNpbWFsIHBvaW50cy4gRm9yIGVtYWlsIGlucHV0cyxcbiAgICAgICAgLy8gQ2hyb21lIHJhaXNlcyBcIlRoZSBzcGVjaWZpZWQgdmFsdWUgPHg+IGlzIG5vdCBhIHZhbGlkIGVtYWlsIGFkZHJlc3NcIi5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSGVyZSB3ZSBjaGVjayB0byBzZWUgaWYgdGhlIGRlZmF1bHRWYWx1ZSBoYXMgYWN0dWFsbHkgY2hhbmdlZCwgYXZvaWRpbmcgdGhlc2UgcHJvYmxlbXNcbiAgICAgICAgLy8gd2hlbiB0aGUgdXNlciBpcyBpbnB1dHRpbmcgdGV4dFxuICAgICAgICAvL1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzcyNTNcbiAgICAgICAgaWYgKG5vZGUuZGVmYXVsdFZhbHVlICE9PSAnJyArIHByb3BzLmRlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gJycgKyBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5jaGVja2VkID09IG51bGwgJiYgcHJvcHMuZGVmYXVsdENoZWNrZWQgIT0gbnVsbCkge1xuICAgICAgICBub2RlLmRlZmF1bHRDaGVja2VkID0gISFwcm9wcy5kZWZhdWx0Q2hlY2tlZDtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgcG9zdE1vdW50V3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcblxuICAgIC8vIFRoaXMgaXMgaW4gcG9zdE1vdW50IGJlY2F1c2Ugd2UgbmVlZCBhY2Nlc3MgdG8gdGhlIERPTSBub2RlLCB3aGljaCBpcyBub3RcbiAgICAvLyBhdmFpbGFibGUgdW50aWwgYWZ0ZXIgdGhlIGNvbXBvbmVudCBoYXMgbW91bnRlZC5cbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuXG4gICAgLy8gRGV0YWNoIHZhbHVlIGZyb20gZGVmYXVsdFZhbHVlLiBXZSB3b24ndCBkbyBhbnl0aGluZyBpZiB3ZSdyZSB3b3JraW5nIG9uXG4gICAgLy8gc3VibWl0IG9yIHJlc2V0IGlucHV0cyBhcyB0aG9zZSB2YWx1ZXMgJiBkZWZhdWx0VmFsdWVzIGFyZSBsaW5rZWQuIFRoZXlcbiAgICAvLyBhcmUgbm90IHJlc2V0YWJsZSBub2RlcyBzbyB0aGlzIG9wZXJhdGlvbiBkb2Vzbid0IG1hdHRlciBhbmQgYWN0dWFsbHlcbiAgICAvLyByZW1vdmVzIGJyb3dzZXItZGVmYXVsdCB2YWx1ZXMgKGVnIFwiU3VibWl0IFF1ZXJ5XCIpIHdoZW4gbm8gdmFsdWUgaXNcbiAgICAvLyBwcm92aWRlZC5cblxuICAgIHN3aXRjaCAocHJvcHMudHlwZSkge1xuICAgICAgY2FzZSAnc3VibWl0JzpcbiAgICAgIGNhc2UgJ3Jlc2V0JzpcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjb2xvcic6XG4gICAgICBjYXNlICdkYXRlJzpcbiAgICAgIGNhc2UgJ2RhdGV0aW1lJzpcbiAgICAgIGNhc2UgJ2RhdGV0aW1lLWxvY2FsJzpcbiAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgIGNhc2UgJ3RpbWUnOlxuICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgIC8vIFRoaXMgZml4ZXMgdGhlIG5vLXNob3cgaXNzdWUgb24gaU9TIFNhZmFyaSBhbmQgQW5kcm9pZCBDaHJvbWU6XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzIzM1xuICAgICAgICBub2RlLnZhbHVlID0gJyc7XG4gICAgICAgIG5vZGUudmFsdWUgPSBub2RlLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBub2RlLnZhbHVlID0gbm9kZS52YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gTm9ybWFsbHksIHdlJ2QganVzdCBkbyBgbm9kZS5jaGVja2VkID0gbm9kZS5jaGVja2VkYCB1cG9uIGluaXRpYWwgbW91bnQsIGxlc3MgdGhpcyBidWdcbiAgICAvLyB0aGlzIGlzIG5lZWRlZCB0byB3b3JrIGFyb3VuZCBhIGNocm9tZSBidWcgd2hlcmUgc2V0dGluZyBkZWZhdWx0Q2hlY2tlZFxuICAgIC8vIHdpbGwgc29tZXRpbWVzIGluZmx1ZW5jZSB0aGUgdmFsdWUgb2YgY2hlY2tlZCAoZXZlbiBhZnRlciBkZXRhY2htZW50KS5cbiAgICAvLyBSZWZlcmVuY2U6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTYwODQxNlxuICAgIC8vIFdlIG5lZWQgdG8gdGVtcG9yYXJpbHkgdW5zZXQgbmFtZSB0byBhdm9pZCBkaXNydXB0aW5nIHJhZGlvIGJ1dHRvbiBncm91cHMuXG4gICAgdmFyIG5hbWUgPSBub2RlLm5hbWU7XG4gICAgaWYgKG5hbWUgIT09ICcnKSB7XG4gICAgICBub2RlLm5hbWUgPSAnJztcbiAgICB9XG4gICAgbm9kZS5kZWZhdWx0Q2hlY2tlZCA9ICFub2RlLmRlZmF1bHRDaGVja2VkO1xuICAgIG5vZGUuZGVmYXVsdENoZWNrZWQgPSAhbm9kZS5kZWZhdWx0Q2hlY2tlZDtcbiAgICBpZiAobmFtZSAhPT0gJycpIHtcbiAgICAgIG5vZGUubmFtZSA9IG5hbWU7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuXG4gIHZhciByZXR1cm5WYWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZXhlY3V0ZU9uQ2hhbmdlKHByb3BzLCBldmVudCk7XG5cbiAgLy8gSGVyZSB3ZSB1c2UgYXNhcCB0byB3YWl0IHVudGlsIGFsbCB1cGRhdGVzIGhhdmUgcHJvcGFnYXRlZCwgd2hpY2hcbiAgLy8gaXMgaW1wb3J0YW50IHdoZW4gdXNpbmcgY29udHJvbGxlZCBjb21wb25lbnRzIHdpdGhpbiBsYXllcnM6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTY5OFxuICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgdGhpcyk7XG5cbiAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICBpZiAocHJvcHMudHlwZSA9PT0gJ3JhZGlvJyAmJiBuYW1lICE9IG51bGwpIHtcbiAgICB2YXIgcm9vdE5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0aGlzKTtcbiAgICB2YXIgcXVlcnlSb290ID0gcm9vdE5vZGU7XG5cbiAgICB3aGlsZSAocXVlcnlSb290LnBhcmVudE5vZGUpIHtcbiAgICAgIHF1ZXJ5Um9vdCA9IHF1ZXJ5Um9vdC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIC8vIElmIGByb290Tm9kZS5mb3JtYCB3YXMgbm9uLW51bGwsIHRoZW4gd2UgY291bGQgdHJ5IGBmb3JtLmVsZW1lbnRzYCxcbiAgICAvLyBidXQgdGhhdCBzb21ldGltZXMgYmVoYXZlcyBzdHJhbmdlbHkgaW4gSUU4LiBXZSBjb3VsZCBhbHNvIHRyeSB1c2luZ1xuICAgIC8vIGBmb3JtLmdldEVsZW1lbnRzQnlOYW1lYCwgYnV0IHRoYXQgd2lsbCBvbmx5IHJldHVybiBkaXJlY3QgY2hpbGRyZW5cbiAgICAvLyBhbmQgd29uJ3QgaW5jbHVkZSBpbnB1dHMgdGhhdCB1c2UgdGhlIEhUTUw1IGBmb3JtPWAgYXR0cmlidXRlLiBTaW5jZVxuICAgIC8vIHRoZSBpbnB1dCBtaWdodCBub3QgZXZlbiBiZSBpbiBhIGZvcm0sIGxldCdzIGp1c3QgdXNlIHRoZSBnbG9iYWxcbiAgICAvLyBgcXVlcnlTZWxlY3RvckFsbGAgdG8gZW5zdXJlIHdlIGRvbid0IG1pc3MgYW55dGhpbmcuXG4gICAgdmFyIGdyb3VwID0gcXVlcnlSb290LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W25hbWU9JyArIEpTT04uc3RyaW5naWZ5KCcnICsgbmFtZSkgKyAnXVt0eXBlPVwicmFkaW9cIl0nKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBvdGhlck5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChvdGhlck5vZGUgPT09IHJvb3ROb2RlIHx8IG90aGVyTm9kZS5mb3JtICE9PSByb290Tm9kZS5mb3JtKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGlmIHJhZGlvIGJ1dHRvbnMgcmVuZGVyZWQgYnkgZGlmZmVyZW50IGNvcGllcyBvZiBSZWFjdFxuICAgICAgLy8gYW5kIHRoZSBzYW1lIG5hbWUgYXJlIHJlbmRlcmVkIGludG8gdGhlIHNhbWUgZm9ybSAoc2FtZSBhcyAjMTkzOSkuXG4gICAgICAvLyBUaGF0J3MgcHJvYmFibHkgb2theTsgd2UgZG9uJ3Qgc3VwcG9ydCBpdCBqdXN0IGFzIHdlIGRvbid0IHN1cHBvcnRcbiAgICAgIC8vIG1peGluZyBSZWFjdCByYWRpbyBidXR0b25zIHdpdGggbm9uLVJlYWN0IG9uZXMuXG4gICAgICB2YXIgb3RoZXJJbnN0YW5jZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG90aGVyTm9kZSk7XG4gICAgICAhb3RoZXJJbnN0YW5jZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdERPTUlucHV0OiBNaXhpbmcgUmVhY3QgYW5kIG5vbi1SZWFjdCByYWRpbyBpbnB1dHMgd2l0aCB0aGUgc2FtZSBgbmFtZWAgaXMgbm90IHN1cHBvcnRlZC4nKSA6IF9wcm9kSW52YXJpYW50KCc5MCcpIDogdm9pZCAwO1xuICAgICAgLy8gSWYgdGhpcyBpcyBhIGNvbnRyb2xsZWQgcmFkaW8gYnV0dG9uIGdyb3VwLCBmb3JjaW5nIHRoZSBpbnB1dCB0aGF0XG4gICAgICAvLyB3YXMgcHJldmlvdXNseSBjaGVja2VkIHRvIHVwZGF0ZSB3aWxsIGNhdXNlIGl0IHRvIGJlIGNvbWUgcmUtY2hlY2tlZFxuICAgICAgLy8gYXMgYXBwcm9wcmlhdGUuXG4gICAgICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgb3RoZXJJbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSW5wdXQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01JbnB1dC5qc1xuLy8gbW9kdWxlIGlkID0gMTI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3QnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0RE9NU2VsZWN0ID0gcmVxdWlyZSgnLi9SZWFjdERPTVNlbGVjdCcpO1xuXG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbnZhciBkaWRXYXJuSW52YWxpZE9wdGlvbkNoaWxkcmVuID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihjaGlsZHJlbikge1xuICB2YXIgY29udGVudCA9ICcnO1xuXG4gIC8vIEZsYXR0ZW4gY2hpbGRyZW4gYW5kIHdhcm4gaWYgdGhleSBhcmVuJ3Qgc3RyaW5ncyBvciBudW1iZXJzO1xuICAvLyBpbnZhbGlkIHR5cGVzIGFyZSBpZ25vcmVkLlxuICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICBjb250ZW50ICs9IGNoaWxkO1xuICAgIH0gZWxzZSBpZiAoIWRpZFdhcm5JbnZhbGlkT3B0aW9uQ2hpbGRyZW4pIHtcbiAgICAgIGRpZFdhcm5JbnZhbGlkT3B0aW9uQ2hpbGRyZW4gPSB0cnVlO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdPbmx5IHN0cmluZ3MgYW5kIG51bWJlcnMgYXJlIHN1cHBvcnRlZCBhcyA8b3B0aW9uPiBjaGlsZHJlbi4nKSA6IHZvaWQgMDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb250ZW50O1xufVxuXG4vKipcbiAqIEltcGxlbWVudHMgYW4gPG9wdGlvbj4gaG9zdCBjb21wb25lbnQgdGhhdCB3YXJucyB3aGVuIGBzZWxlY3RlZGAgaXMgc2V0LlxuICovXG52YXIgUmVhY3RET01PcHRpb24gPSB7XG4gIG1vdW50V3JhcHBlcjogZnVuY3Rpb24gKGluc3QsIHByb3BzLCBob3N0UGFyZW50KSB7XG4gICAgLy8gVE9ETyAoeXVuZ3N0ZXJzKTogUmVtb3ZlIHN1cHBvcnQgZm9yIGBzZWxlY3RlZGAgaW4gPG9wdGlvbj4uXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLnNlbGVjdGVkID09IG51bGwsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgb24gPHNlbGVjdD4gaW5zdGVhZCBvZiAnICsgJ3NldHRpbmcgYHNlbGVjdGVkYCBvbiA8b3B0aW9uPi4nKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICAvLyBMb29rIHVwIHdoZXRoZXIgdGhpcyBvcHRpb24gaXMgJ3NlbGVjdGVkJ1xuICAgIHZhciBzZWxlY3RWYWx1ZSA9IG51bGw7XG4gICAgaWYgKGhvc3RQYXJlbnQgIT0gbnVsbCkge1xuICAgICAgdmFyIHNlbGVjdFBhcmVudCA9IGhvc3RQYXJlbnQ7XG5cbiAgICAgIGlmIChzZWxlY3RQYXJlbnQuX3RhZyA9PT0gJ29wdGdyb3VwJykge1xuICAgICAgICBzZWxlY3RQYXJlbnQgPSBzZWxlY3RQYXJlbnQuX2hvc3RQYXJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3RQYXJlbnQgIT0gbnVsbCAmJiBzZWxlY3RQYXJlbnQuX3RhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgc2VsZWN0VmFsdWUgPSBSZWFjdERPTVNlbGVjdC5nZXRTZWxlY3RWYWx1ZUNvbnRleHQoc2VsZWN0UGFyZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgdmFsdWUgaXMgbnVsbCAoZS5nLiwgbm8gc3BlY2lmaWVkIHZhbHVlIG9yIGFmdGVyIGluaXRpYWwgbW91bnQpXG4gICAgLy8gb3IgbWlzc2luZyAoZS5nLiwgZm9yIDxkYXRhbGlzdD4pLCB3ZSBkb24ndCBjaGFuZ2UgcHJvcHMuc2VsZWN0ZWRcbiAgICB2YXIgc2VsZWN0ZWQgPSBudWxsO1xuICAgIGlmIChzZWxlY3RWYWx1ZSAhPSBudWxsKSB7XG4gICAgICB2YXIgdmFsdWU7XG4gICAgICBpZiAocHJvcHMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICB2YWx1ZSA9IHByb3BzLnZhbHVlICsgJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGZsYXR0ZW5DaGlsZHJlbihwcm9wcy5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBzZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2VsZWN0VmFsdWUpKSB7XG4gICAgICAgIC8vIG11bHRpcGxlXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0VmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoJycgKyBzZWxlY3RWYWx1ZVtpXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWQgPSAnJyArIHNlbGVjdFZhbHVlID09PSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7IHNlbGVjdGVkOiBzZWxlY3RlZCB9O1xuICB9LFxuXG4gIHBvc3RNb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgLy8gdmFsdWU9XCJcIiBzaG91bGQgbWFrZSBhIHZhbHVlIGF0dHJpYnV0ZSAoIzYyMTkpXG4gICAgdmFyIHByb3BzID0gaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgaWYgKHByb3BzLnZhbHVlICE9IG51bGwpIHtcbiAgICAgIHZhciBub2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZSgndmFsdWUnLCBwcm9wcy52YWx1ZSk7XG4gICAgfVxuICB9LFxuXG4gIGdldEhvc3RQcm9wczogZnVuY3Rpb24gKGluc3QsIHByb3BzKSB7XG4gICAgdmFyIGhvc3RQcm9wcyA9IF9hc3NpZ24oeyBzZWxlY3RlZDogdW5kZWZpbmVkLCBjaGlsZHJlbjogdW5kZWZpbmVkIH0sIHByb3BzKTtcblxuICAgIC8vIFJlYWQgc3RhdGUgb25seSBmcm9tIGluaXRpYWwgbW91bnQgYmVjYXVzZSA8c2VsZWN0PiB1cGRhdGVzIHZhbHVlXG4gICAgLy8gbWFudWFsbHk7IHdlIG5lZWQgdGhlIGluaXRpYWwgc3RhdGUgb25seSBmb3Igc2VydmVyIHJlbmRlcmluZ1xuICAgIGlmIChpbnN0Ll93cmFwcGVyU3RhdGUuc2VsZWN0ZWQgIT0gbnVsbCkge1xuICAgICAgaG9zdFByb3BzLnNlbGVjdGVkID0gaW5zdC5fd3JhcHBlclN0YXRlLnNlbGVjdGVkO1xuICAgIH1cblxuICAgIHZhciBjb250ZW50ID0gZmxhdHRlbkNoaWxkcmVuKHByb3BzLmNoaWxkcmVuKTtcblxuICAgIGlmIChjb250ZW50KSB7XG4gICAgICBob3N0UHJvcHMuY2hpbGRyZW4gPSBjb250ZW50O1xuICAgIH1cblxuICAgIHJldHVybiBob3N0UHJvcHM7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTU9wdGlvbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTU9wdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0ID0gcmVxdWlyZSgnLi9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0Jyk7XG52YXIgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvciA9IHJlcXVpcmUoJy4vZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcicpO1xuXG4vKipcbiAqIFdoaWxlIGBpc0NvbGxhcHNlZGAgaXMgYXZhaWxhYmxlIG9uIHRoZSBTZWxlY3Rpb24gb2JqZWN0IGFuZCBgY29sbGFwc2VkYFxuICogaXMgYXZhaWxhYmxlIG9uIHRoZSBSYW5nZSBvYmplY3QsIElFMTEgc29tZXRpbWVzIGdldHMgdGhlbSB3cm9uZy5cbiAqIElmIHRoZSBhbmNob3IvZm9jdXMgbm9kZXMgYW5kIG9mZnNldHMgYXJlIHRoZSBzYW1lLCB0aGUgcmFuZ2UgaXMgY29sbGFwc2VkLlxuICovXG5mdW5jdGlvbiBpc0NvbGxhcHNlZChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQsIGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpIHtcbiAgcmV0dXJuIGFuY2hvck5vZGUgPT09IGZvY3VzTm9kZSAmJiBhbmNob3JPZmZzZXQgPT09IGZvY3VzT2Zmc2V0O1xufVxuXG4vKipcbiAqIEdldCB0aGUgYXBwcm9wcmlhdGUgYW5jaG9yIGFuZCBmb2N1cyBub2RlL29mZnNldCBwYWlycyBmb3IgSUUuXG4gKlxuICogVGhlIGNhdGNoIGhlcmUgaXMgdGhhdCBJRSdzIHNlbGVjdGlvbiBBUEkgZG9lc24ndCBwcm92aWRlIGluZm9ybWF0aW9uXG4gKiBhYm91dCB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgZm9yd2FyZCBvciBiYWNrd2FyZCwgc28gd2UgaGF2ZSB0b1xuICogYmVoYXZlIGFzIHRob3VnaCBpdCdzIGFsd2F5cyBmb3J3YXJkLlxuICpcbiAqIElFIHRleHQgZGlmZmVycyBmcm9tIG1vZGVybiBzZWxlY3Rpb24gaW4gdGhhdCBpdCBiZWhhdmVzIGFzIHRob3VnaFxuICogYmxvY2sgZWxlbWVudHMgZW5kIHdpdGggYSBuZXcgbGluZS4gVGhpcyBtZWFucyBjaGFyYWN0ZXIgb2Zmc2V0cyB3aWxsXG4gKiBkaWZmZXIgYmV0d2VlbiB0aGUgdHdvIEFQSXMuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldElFT2Zmc2V0cyhub2RlKSB7XG4gIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5zZWxlY3Rpb247XG4gIHZhciBzZWxlY3RlZFJhbmdlID0gc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gIHZhciBzZWxlY3RlZExlbmd0aCA9IHNlbGVjdGVkUmFuZ2UudGV4dC5sZW5ndGg7XG5cbiAgLy8gRHVwbGljYXRlIHNlbGVjdGlvbiBzbyB3ZSBjYW4gbW92ZSByYW5nZSB3aXRob3V0IGJyZWFraW5nIHVzZXIgc2VsZWN0aW9uLlxuICB2YXIgZnJvbVN0YXJ0ID0gc2VsZWN0ZWRSYW5nZS5kdXBsaWNhdGUoKTtcbiAgZnJvbVN0YXJ0Lm1vdmVUb0VsZW1lbnRUZXh0KG5vZGUpO1xuICBmcm9tU3RhcnQuc2V0RW5kUG9pbnQoJ0VuZFRvU3RhcnQnLCBzZWxlY3RlZFJhbmdlKTtcblxuICB2YXIgc3RhcnRPZmZzZXQgPSBmcm9tU3RhcnQudGV4dC5sZW5ndGg7XG4gIHZhciBlbmRPZmZzZXQgPSBzdGFydE9mZnNldCArIHNlbGVjdGVkTGVuZ3RoO1xuXG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0T2Zmc2V0LFxuICAgIGVuZDogZW5kT2Zmc2V0XG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRNb2Rlcm5PZmZzZXRzKG5vZGUpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24gJiYgd2luZG93LmdldFNlbGVjdGlvbigpO1xuXG4gIGlmICghc2VsZWN0aW9uIHx8IHNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgYW5jaG9yTm9kZSA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICB2YXIgYW5jaG9yT2Zmc2V0ID0gc2VsZWN0aW9uLmFuY2hvck9mZnNldDtcbiAgdmFyIGZvY3VzTm9kZSA9IHNlbGVjdGlvbi5mb2N1c05vZGU7XG4gIHZhciBmb2N1c09mZnNldCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcblxuICB2YXIgY3VycmVudFJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG5cbiAgLy8gSW4gRmlyZWZveCwgcmFuZ2Uuc3RhcnRDb250YWluZXIgYW5kIHJhbmdlLmVuZENvbnRhaW5lciBjYW4gYmUgXCJhbm9ueW1vdXNcbiAgLy8gZGl2c1wiLCBlLmcuIHRoZSB1cC9kb3duIGJ1dHRvbnMgb24gYW4gPGlucHV0IHR5cGU9XCJudW1iZXJcIj4uIEFub255bW91c1xuICAvLyBkaXZzIGRvIG5vdCBzZWVtIHRvIGV4cG9zZSBwcm9wZXJ0aWVzLCB0cmlnZ2VyaW5nIGEgXCJQZXJtaXNzaW9uIGRlbmllZFxuICAvLyBlcnJvclwiIGlmIGFueSBvZiBpdHMgcHJvcGVydGllcyBhcmUgYWNjZXNzZWQuIFRoZSBvbmx5IHNlZW1pbmdseSBwb3NzaWJsZVxuICAvLyB3YXkgdG8gYXZvaWQgZXJyb3JpbmcgaXMgdG8gYWNjZXNzIGEgcHJvcGVydHkgdGhhdCB0eXBpY2FsbHkgd29ya3MgZm9yXG4gIC8vIG5vbi1hbm9ueW1vdXMgZGl2cyBhbmQgY2F0Y2ggYW55IGVycm9yIHRoYXQgbWF5IG90aGVyd2lzZSBhcmlzZS4gU2VlXG4gIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTIwODQyN1xuICB0cnkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgIGN1cnJlbnRSYW5nZS5zdGFydENvbnRhaW5lci5ub2RlVHlwZTtcbiAgICBjdXJyZW50UmFuZ2UuZW5kQ29udGFpbmVyLm5vZGVUeXBlO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIElmIHRoZSBub2RlIGFuZCBvZmZzZXQgdmFsdWVzIGFyZSB0aGUgc2FtZSwgdGhlIHNlbGVjdGlvbiBpcyBjb2xsYXBzZWQuXG4gIC8vIGBTZWxlY3Rpb24uaXNDb2xsYXBzZWRgIGlzIGF2YWlsYWJsZSBuYXRpdmVseSwgYnV0IElFIHNvbWV0aW1lcyBnZXRzXG4gIC8vIHRoaXMgdmFsdWUgd3JvbmcuXG4gIHZhciBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKHNlbGVjdGlvbi5hbmNob3JOb2RlLCBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LCBzZWxlY3Rpb24uZm9jdXNOb2RlLCBzZWxlY3Rpb24uZm9jdXNPZmZzZXQpO1xuXG4gIHZhciByYW5nZUxlbmd0aCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkID8gMCA6IGN1cnJlbnRSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcblxuICB2YXIgdGVtcFJhbmdlID0gY3VycmVudFJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgdGVtcFJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhub2RlKTtcbiAgdGVtcFJhbmdlLnNldEVuZChjdXJyZW50UmFuZ2Uuc3RhcnRDb250YWluZXIsIGN1cnJlbnRSYW5nZS5zdGFydE9mZnNldCk7XG5cbiAgdmFyIGlzVGVtcFJhbmdlQ29sbGFwc2VkID0gaXNDb2xsYXBzZWQodGVtcFJhbmdlLnN0YXJ0Q29udGFpbmVyLCB0ZW1wUmFuZ2Uuc3RhcnRPZmZzZXQsIHRlbXBSYW5nZS5lbmRDb250YWluZXIsIHRlbXBSYW5nZS5lbmRPZmZzZXQpO1xuXG4gIHZhciBzdGFydCA9IGlzVGVtcFJhbmdlQ29sbGFwc2VkID8gMCA6IHRlbXBSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgdmFyIGVuZCA9IHN0YXJ0ICsgcmFuZ2VMZW5ndGg7XG5cbiAgLy8gRGV0ZWN0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBiYWNrd2FyZC5cbiAgdmFyIGRldGVjdGlvblJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0U3RhcnQoYW5jaG9yTm9kZSwgYW5jaG9yT2Zmc2V0KTtcbiAgZGV0ZWN0aW9uUmFuZ2Uuc2V0RW5kKGZvY3VzTm9kZSwgZm9jdXNPZmZzZXQpO1xuICB2YXIgaXNCYWNrd2FyZCA9IGRldGVjdGlvblJhbmdlLmNvbGxhcHNlZDtcblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBpc0JhY2t3YXJkID8gZW5kIDogc3RhcnQsXG4gICAgZW5kOiBpc0JhY2t3YXJkID8gc3RhcnQgOiBlbmRcbiAgfTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cbmZ1bmN0aW9uIHNldElFT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLmR1cGxpY2F0ZSgpO1xuICB2YXIgc3RhcnQsIGVuZDtcblxuICBpZiAob2Zmc2V0cy5lbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICBlbmQgPSBzdGFydDtcbiAgfSBlbHNlIGlmIChvZmZzZXRzLnN0YXJ0ID4gb2Zmc2V0cy5lbmQpIHtcbiAgICBzdGFydCA9IG9mZnNldHMuZW5kO1xuICAgIGVuZCA9IG9mZnNldHMuc3RhcnQ7XG4gIH0gZWxzZSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IG9mZnNldHMuZW5kO1xuICB9XG5cbiAgcmFuZ2UubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICByYW5nZS5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHJhbmdlKTtcbiAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICByYW5nZS5zZWxlY3QoKTtcbn1cblxuLyoqXG4gKiBJbiBtb2Rlcm4gbm9uLUlFIGJyb3dzZXJzLCB3ZSBjYW4gc3VwcG9ydCBib3RoIGZvcndhcmQgYW5kIGJhY2t3YXJkXG4gKiBzZWxlY3Rpb25zLlxuICpcbiAqIE5vdGU6IElFMTArIHN1cHBvcnRzIHRoZSBTZWxlY3Rpb24gb2JqZWN0LCBidXQgaXQgZG9lcyBub3Qgc3VwcG9ydFxuICogdGhlIGBleHRlbmRgIG1ldGhvZCwgd2hpY2ggbWVhbnMgdGhhdCBldmVuIGluIG1vZGVybiBJRSwgaXQncyBub3QgcG9zc2libGVcbiAqIHRvIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlIGEgYmFja3dhcmQgc2VsZWN0aW9uLiBUaHVzLCBmb3IgYWxsIElFXG4gKiB2ZXJzaW9ucywgd2UgdXNlIHRoZSBvbGQgSUUgQVBJIHRvIGNyZWF0ZSBvdXIgc2VsZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cbmZ1bmN0aW9uIHNldE1vZGVybk9mZnNldHMobm9kZSwgb2Zmc2V0cykge1xuICBpZiAoIXdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICB2YXIgbGVuZ3RoID0gbm9kZVtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldLmxlbmd0aDtcbiAgdmFyIHN0YXJ0ID0gTWF0aC5taW4ob2Zmc2V0cy5zdGFydCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IG9mZnNldHMuZW5kID09PSB1bmRlZmluZWQgPyBzdGFydCA6IE1hdGgubWluKG9mZnNldHMuZW5kLCBsZW5ndGgpO1xuXG4gIC8vIElFIDExIHVzZXMgbW9kZXJuIHNlbGVjdGlvbiwgYnV0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZXh0ZW5kIG1ldGhvZC5cbiAgLy8gRmxpcCBiYWNrd2FyZCBzZWxlY3Rpb25zLCBzbyB3ZSBjYW4gc2V0IHdpdGggYSBzaW5nbGUgcmFuZ2UuXG4gIGlmICghc2VsZWN0aW9uLmV4dGVuZCAmJiBzdGFydCA+IGVuZCkge1xuICAgIHZhciB0ZW1wID0gZW5kO1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gdGVtcDtcbiAgfVxuXG4gIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgc3RhcnQpO1xuICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBlbmQpO1xuXG4gIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIpIHtcbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0TWFya2VyLm5vZGUsIHN0YXJ0TWFya2VyLm9mZnNldCk7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgc2VsZWN0aW9uLmV4dGVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLnNldEVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdXNlSUVPZmZzZXRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdzZWxlY3Rpb24nIGluIGRvY3VtZW50ICYmICEoJ2dldFNlbGVjdGlvbicgaW4gd2luZG93KTtcblxudmFyIFJlYWN0RE9NU2VsZWN0aW9uID0ge1xuICAvKipcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gICAqL1xuICBnZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBnZXRJRU9mZnNldHMgOiBnZXRNb2Rlcm5PZmZzZXRzLFxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAgICogQHBhcmFtIHtvYmplY3R9IG9mZnNldHNcbiAgICovXG4gIHNldE9mZnNldHM6IHVzZUlFT2Zmc2V0cyA/IHNldElFT2Zmc2V0cyA6IHNldE1vZGVybk9mZnNldHNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Rpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01TZWxlY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDEzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3REZWZhdWx0SW5qZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdERlZmF1bHRJbmplY3Rpb24nKTtcbnZhciBSZWFjdFNlcnZlclJlbmRlcmluZyA9IHJlcXVpcmUoJy4vUmVhY3RTZXJ2ZXJSZW5kZXJpbmcnKTtcbnZhciBSZWFjdFZlcnNpb24gPSByZXF1aXJlKCcuL1JlYWN0VmVyc2lvbicpO1xuXG5SZWFjdERlZmF1bHRJbmplY3Rpb24uaW5qZWN0KCk7XG5cbnZhciBSZWFjdERPTVNlcnZlciA9IHtcbiAgcmVuZGVyVG9TdHJpbmc6IFJlYWN0U2VydmVyUmVuZGVyaW5nLnJlbmRlclRvU3RyaW5nLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogUmVhY3RTZXJ2ZXJSZW5kZXJpbmcucmVuZGVyVG9TdGF0aWNNYXJrdXAsXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlcnZlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERPTVNlcnZlci5qc1xuLy8gbW9kdWxlIGlkID0gMTMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50JyksXG4gICAgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zJyk7XG52YXIgRE9NTGF6eVRyZWUgPSByZXF1aXJlKCcuL0RPTUxhenlUcmVlJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcblxudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoJy4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gcmVxdWlyZSgnLi92YWxpZGF0ZURPTU5lc3RpbmcnKTtcblxuLyoqXG4gKiBUZXh0IG5vZGVzIHZpb2xhdGUgYSBjb3VwbGUgYXNzdW1wdGlvbnMgdGhhdCBSZWFjdCBtYWtlcyBhYm91dCBjb21wb25lbnRzOlxuICpcbiAqICAtIFdoZW4gbW91bnRpbmcgdGV4dCBpbnRvIHRoZSBET00sIGFkamFjZW50IHRleHQgbm9kZXMgYXJlIG1lcmdlZC5cbiAqICAtIFRleHQgbm9kZXMgY2Fubm90IGJlIGFzc2lnbmVkIGEgUmVhY3Qgcm9vdCBJRC5cbiAqXG4gKiBUaGlzIGNvbXBvbmVudCBpcyB1c2VkIHRvIHdyYXAgc3RyaW5ncyBiZXR3ZWVuIGNvbW1lbnQgbm9kZXMgc28gdGhhdCB0aGV5XG4gKiBjYW4gdW5kZXJnbyB0aGUgc2FtZSByZWNvbmNpbGlhdGlvbiB0aGF0IGlzIGFwcGxpZWQgdG8gZWxlbWVudHMuXG4gKlxuICogVE9ETzogSW52ZXN0aWdhdGUgcmVwcmVzZW50aW5nIFJlYWN0IGNvbXBvbmVudHMgaW4gdGhlIERPTSB3aXRoIHRleHQgbm9kZXMuXG4gKlxuICogQGNsYXNzIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogQGV4dGVuZHMgUmVhY3RDb21wb25lbnRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgLy8gVE9ETzogVGhpcyBpcyByZWFsbHkgYSBSZWFjdFRleHQgKFJlYWN0Tm9kZSksIG5vdCBhIFJlYWN0RWxlbWVudFxuICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IHRleHQ7XG4gIHRoaXMuX3N0cmluZ1RleHQgPSAnJyArIHRleHQ7XG4gIC8vIFJlYWN0RE9NQ29tcG9uZW50VHJlZSB1c2VzIHRoZXNlOlxuICB0aGlzLl9ob3N0Tm9kZSA9IG51bGw7XG4gIHRoaXMuX2hvc3RQYXJlbnQgPSBudWxsO1xuXG4gIC8vIFByb3BlcnRpZXNcbiAgdGhpcy5fZG9tSUQgPSAwO1xuICB0aGlzLl9tb3VudEluZGV4ID0gMDtcbiAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBudWxsO1xuICB0aGlzLl9jb21tZW50Tm9kZXMgPSBudWxsO1xufTtcblxuX2Fzc2lnbihSZWFjdERPTVRleHRDb21wb25lbnQucHJvdG90eXBlLCB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIG1hcmt1cCBmb3IgdGhpcyB0ZXh0IG5vZGUuIFRoaXMgbm9kZSBpcyBub3QgaW50ZW5kZWQgdG8gaGF2ZVxuICAgKiBhbnkgZmVhdHVyZXMgYmVzaWRlcyBjb250YWluaW5nIHRleHQgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIGZvciB0aGlzIHRleHQgbm9kZS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24gKHRyYW5zYWN0aW9uLCBob3N0UGFyZW50LCBob3N0Q29udGFpbmVySW5mbywgY29udGV4dCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgcGFyZW50SW5mbztcbiAgICAgIGlmIChob3N0UGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgcGFyZW50SW5mbyA9IGhvc3RQYXJlbnQuX2FuY2VzdG9ySW5mbztcbiAgICAgIH0gZWxzZSBpZiAoaG9zdENvbnRhaW5lckluZm8gIT0gbnVsbCkge1xuICAgICAgICBwYXJlbnRJbmZvID0gaG9zdENvbnRhaW5lckluZm8uX2FuY2VzdG9ySW5mbztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnRJbmZvKSB7XG4gICAgICAgIC8vIHBhcmVudEluZm8gc2hvdWxkIGFsd2F5cyBiZSBwcmVzZW50IGV4Y2VwdCBmb3IgdGhlIHRvcC1sZXZlbFxuICAgICAgICAvLyBjb21wb25lbnQgd2hlbiBzZXJ2ZXIgcmVuZGVyaW5nXG4gICAgICAgIHZhbGlkYXRlRE9NTmVzdGluZyhudWxsLCB0aGlzLl9zdHJpbmdUZXh0LCB0aGlzLCBwYXJlbnRJbmZvKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZG9tSUQgPSBob3N0Q29udGFpbmVySW5mby5faWRDb3VudGVyKys7XG4gICAgdmFyIG9wZW5pbmdWYWx1ZSA9ICcgcmVhY3QtdGV4dDogJyArIGRvbUlEICsgJyAnO1xuICAgIHZhciBjbG9zaW5nVmFsdWUgPSAnIC9yZWFjdC10ZXh0ICc7XG4gICAgdGhpcy5fZG9tSUQgPSBkb21JRDtcbiAgICB0aGlzLl9ob3N0UGFyZW50ID0gaG9zdFBhcmVudDtcbiAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSBob3N0Q29udGFpbmVySW5mby5fb3duZXJEb2N1bWVudDtcbiAgICAgIHZhciBvcGVuaW5nQ29tbWVudCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlQ29tbWVudChvcGVuaW5nVmFsdWUpO1xuICAgICAgdmFyIGNsb3NpbmdDb21tZW50ID0gb3duZXJEb2N1bWVudC5jcmVhdGVDb21tZW50KGNsb3NpbmdWYWx1ZSk7XG4gICAgICB2YXIgbGF6eVRyZWUgPSBET01MYXp5VHJlZShvd25lckRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSk7XG4gICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBET01MYXp5VHJlZShvcGVuaW5nQ29tbWVudCkpO1xuICAgICAgaWYgKHRoaXMuX3N0cmluZ1RleHQpIHtcbiAgICAgICAgRE9NTGF6eVRyZWUucXVldWVDaGlsZChsYXp5VHJlZSwgRE9NTGF6eVRyZWUob3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLl9zdHJpbmdUZXh0KSkpO1xuICAgICAgfVxuICAgICAgRE9NTGF6eVRyZWUucXVldWVDaGlsZChsYXp5VHJlZSwgRE9NTGF6eVRyZWUoY2xvc2luZ0NvbW1lbnQpKTtcbiAgICAgIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5wcmVjYWNoZU5vZGUodGhpcywgb3BlbmluZ0NvbW1lbnQpO1xuICAgICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBjbG9zaW5nQ29tbWVudDtcbiAgICAgIHJldHVybiBsYXp5VHJlZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGVzY2FwZWRUZXh0ID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRoaXMuX3N0cmluZ1RleHQpO1xuXG4gICAgICBpZiAodHJhbnNhY3Rpb24ucmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgICAgICAgLy8gTm9ybWFsbHkgd2UnZCB3cmFwIHRoaXMgYmV0d2VlbiBjb21tZW50IG5vZGVzIGZvciB0aGUgcmVhc29ucyBzdGF0ZWRcbiAgICAgICAgLy8gYWJvdmUsIGJ1dCBzaW5jZSB0aGlzIGlzIGEgc2l0dWF0aW9uIHdoZXJlIFJlYWN0IHdvbid0IHRha2Ugb3ZlclxuICAgICAgICAvLyAoc3RhdGljIHBhZ2VzKSwgd2UgY2FuIHNpbXBseSByZXR1cm4gdGhlIHRleHQgYXMgaXQgaXMuXG4gICAgICAgIHJldHVybiBlc2NhcGVkVGV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICc8IS0tJyArIG9wZW5pbmdWYWx1ZSArICctLT4nICsgZXNjYXBlZFRleHQgKyAnPCEtLScgKyBjbG9zaW5nVmFsdWUgKyAnLS0+JztcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhpcyBjb21wb25lbnQgYnkgdXBkYXRpbmcgdGhlIHRleHQgY29udGVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdFRleHR9IG5leHRUZXh0IFRoZSBuZXh0IHRleHQgY29udGVudFxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24gKG5leHRUZXh0LCB0cmFuc2FjdGlvbikge1xuICAgIGlmIChuZXh0VGV4dCAhPT0gdGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dFRleHQ7XG4gICAgICB2YXIgbmV4dFN0cmluZ1RleHQgPSAnJyArIG5leHRUZXh0O1xuICAgICAgaWYgKG5leHRTdHJpbmdUZXh0ICE9PSB0aGlzLl9zdHJpbmdUZXh0KSB7XG4gICAgICAgIC8vIFRPRE86IFNhdmUgdGhpcyBhcyBwZW5kaW5nIHByb3BzIGFuZCB1c2UgcGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5XG4gICAgICAgIC8vIGFuZC9vciB1cGRhdGVDb21wb25lbnQgdG8gZG8gdGhlIGFjdHVhbCB1cGRhdGUgZm9yIGNvbnNpc3RlbmN5IHdpdGhcbiAgICAgICAgLy8gb3RoZXIgY29tcG9uZW50IHR5cGVzP1xuICAgICAgICB0aGlzLl9zdHJpbmdUZXh0ID0gbmV4dFN0cmluZ1RleHQ7XG4gICAgICAgIHZhciBjb21tZW50Tm9kZXMgPSB0aGlzLmdldEhvc3ROb2RlKCk7XG4gICAgICAgIERPTUNoaWxkcmVuT3BlcmF0aW9ucy5yZXBsYWNlRGVsaW1pdGVkVGV4dChjb21tZW50Tm9kZXNbMF0sIGNvbW1lbnROb2Rlc1sxXSwgbmV4dFN0cmluZ1RleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBnZXRIb3N0Tm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBob3N0Tm9kZSA9IHRoaXMuX2NvbW1lbnROb2RlcztcbiAgICBpZiAoaG9zdE5vZGUpIHtcbiAgICAgIHJldHVybiBob3N0Tm9kZTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLl9jbG9zaW5nQ29tbWVudCkge1xuICAgICAgdmFyIG9wZW5pbmdDb21tZW50ID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UodGhpcyk7XG4gICAgICB2YXIgbm9kZSA9IG9wZW5pbmdDb21tZW50Lm5leHRTaWJsaW5nO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgIShub2RlICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01pc3NpbmcgY2xvc2luZyBjb21tZW50IGZvciB0ZXh0IGNvbXBvbmVudCAlcycsIHRoaXMuX2RvbUlEKSA6IF9wcm9kSW52YXJpYW50KCc2NycsIHRoaXMuX2RvbUlEKSA6IHZvaWQgMDtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggJiYgbm9kZS5ub2RlVmFsdWUgPT09ICcgL3JlYWN0LXRleHQgJykge1xuICAgICAgICAgIHRoaXMuX2Nsb3NpbmdDb21tZW50ID0gbm9kZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgIH1cbiAgICB9XG4gICAgaG9zdE5vZGUgPSBbdGhpcy5faG9zdE5vZGUsIHRoaXMuX2Nsb3NpbmdDb21tZW50XTtcbiAgICB0aGlzLl9jb21tZW50Tm9kZXMgPSBob3N0Tm9kZTtcbiAgICByZXR1cm4gaG9zdE5vZGU7XG4gIH0sXG5cbiAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2Nsb3NpbmdDb21tZW50ID0gbnVsbDtcbiAgICB0aGlzLl9jb21tZW50Tm9kZXMgPSBudWxsO1xuICAgIFJlYWN0RE9NQ29tcG9uZW50VHJlZS51bmNhY2hlTm9kZSh0aGlzKTtcbiAgfVxuXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRDb21wb25lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01UZXh0Q29tcG9uZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxMzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKSxcbiAgICBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoJy4vTGlua2VkVmFsdWVVdGlscycpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBkaWRXYXJuVmFsdWVMaW5rID0gZmFsc2U7XG52YXIgZGlkV2FyblZhbERlZmF1bHRWYWwgPSBmYWxzZTtcblxuZnVuY3Rpb24gZm9yY2VVcGRhdGVJZk1vdW50ZWQoKSB7XG4gIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgLy8gRE9NIGNvbXBvbmVudCBpcyBzdGlsbCBtb3VudGVkOyB1cGRhdGVcbiAgICBSZWFjdERPTVRleHRhcmVhLnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHRleHRhcmVhPiBob3N0IGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIGB2YWx1ZWAsIGFuZFxuICogYGRlZmF1bHRWYWx1ZWAuIFRoaXMgZGlmZmVycyBmcm9tIHRoZSB0cmFkaXRpb25hbCBET00gQVBJIGJlY2F1c2UgdmFsdWUgaXNcbiAqIHVzdWFsbHkgc2V0IGFzIFBDREFUQSBjaGlsZHJlbi5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBhZmZlY3QgdGhlXG4gKiB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbFxuICogbm90IHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCB3aXRoIGFuIGVtcHR5IHZhbHVlLCB0aGUgcHJvcFxuICogYGRlZmF1bHRWYWx1ZWAgaWYgc3BlY2lmaWVkLCBvciB0aGUgY2hpbGRyZW4gY29udGVudCAoZGVwcmVjYXRlZCkuXG4gKi9cbnZhciBSZWFjdERPTVRleHRhcmVhID0ge1xuICBnZXRIb3N0UHJvcHM6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgICEocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBkb2VzIG5vdCBtYWtlIHNlbnNlIG9uIDx0ZXh0YXJlYT4uJykgOiBfcHJvZEludmFyaWFudCgnOTEnKSA6IHZvaWQgMDtcblxuICAgIC8vIEFsd2F5cyBzZXQgY2hpbGRyZW4gdG8gdGhlIHNhbWUgdGhpbmcuIEluIElFOSwgdGhlIHNlbGVjdGlvbiByYW5nZSB3aWxsXG4gICAgLy8gZ2V0IHJlc2V0IGlmIGB0ZXh0Q29udGVudGAgaXMgbXV0YXRlZC4gIFdlIGNvdWxkIGFkZCBhIGNoZWNrIGluIHNldFRleHRDb250ZW50XG4gICAgLy8gdG8gb25seSBzZXQgdGhlIHZhbHVlIGlmL3doZW4gdGhlIHZhbHVlIGRpZmZlcnMgZnJvbSB0aGUgbm9kZSB2YWx1ZSAod2hpY2ggd291bGRcbiAgICAvLyBjb21wbGV0ZWx5IHNvbHZlIHRoaXMgSUU5IGJ1ZyksIGJ1dCBTZWJhc3RpYW4rQmVuIHNlZW1lZCB0byBsaWtlIHRoaXMgc29sdXRpb24uXG4gICAgLy8gVGhlIHZhbHVlIGNhbiBiZSBhIGJvb2xlYW4gb3Igb2JqZWN0IHNvIHRoYXQncyB3aHkgaXQncyBmb3JjZWQgdG8gYmUgYSBzdHJpbmcuXG4gICAgdmFyIGhvc3RQcm9wcyA9IF9hc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBjaGlsZHJlbjogJycgKyBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlLFxuICAgICAgb25DaGFuZ2U6IGluc3QuX3dyYXBwZXJTdGF0ZS5vbkNoYW5nZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhvc3RQcm9wcztcbiAgfSxcblxuICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBMaW5rZWRWYWx1ZVV0aWxzLmNoZWNrUHJvcFR5cGVzKCd0ZXh0YXJlYScsIHByb3BzLCBpbnN0Ll9jdXJyZW50RWxlbWVudC5fb3duZXIpO1xuICAgICAgaWYgKHByb3BzLnZhbHVlTGluayAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVMaW5rKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYHZhbHVlTGlua2AgcHJvcCBvbiBgdGV4dGFyZWFgIGlzIGRlcHJlY2F0ZWQ7IHNldCBgdmFsdWVgIGFuZCBgb25DaGFuZ2VgIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gICAgICAgIGRpZFdhcm5WYWx1ZUxpbmsgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWxEZWZhdWx0VmFsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnVGV4dGFyZWEgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIHRleHRhcmVhICcgKyAnYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuVmFsRGVmYXVsdFZhbCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgdmFyIGluaXRpYWxWYWx1ZSA9IHZhbHVlO1xuXG4gICAgLy8gT25seSBib3RoZXIgZmV0Y2hpbmcgZGVmYXVsdCB2YWx1ZSBpZiB3ZSdyZSBnb2luZyB0byB1c2UgaXRcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAgIC8vIFRPRE8gKHl1bmdzdGVycyk6IFJlbW92ZSBzdXBwb3J0IGZvciBjaGlsZHJlbiBjb250ZW50IGluIDx0ZXh0YXJlYT4uXG4gICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgaW5zdGVhZCBvZiBzZXR0aW5nICcgKyAnY2hpbGRyZW4gb24gPHRleHRhcmVhPi4nKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICAhKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdJZiB5b3Ugc3VwcGx5IGBkZWZhdWx0VmFsdWVgIG9uIGEgPHRleHRhcmVhPiwgZG8gbm90IHBhc3MgY2hpbGRyZW4uJykgOiBfcHJvZEludmFyaWFudCgnOTInKSA6IHZvaWQgMDtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgIShjaGlsZHJlbi5sZW5ndGggPD0gMSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLicpIDogX3Byb2RJbnZhcmlhbnQoJzkzJykgOiB2b2lkIDA7XG4gICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnICsgY2hpbGRyZW47XG4gICAgICB9XG4gICAgICBpZiAoZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgICBpbml0aWFsVmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gICAgfVxuXG4gICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgaW5pdGlhbFZhbHVlOiAnJyArIGluaXRpYWxWYWx1ZSxcbiAgICAgIGxpc3RlbmVyczogbnVsbCxcbiAgICAgIG9uQ2hhbmdlOiBfaGFuZGxlQ2hhbmdlLmJpbmQoaW5zdClcbiAgICB9O1xuICB9LFxuXG4gIHVwZGF0ZVdyYXBwZXI6IGZ1bmN0aW9uIChpbnN0KSB7XG4gICAgdmFyIHByb3BzID0gaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG5cbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuICAgICAgLy8gYnJvd3NlcnMgdHlwaWNhbGx5IGRvIHRoaXMgYXMgbmVjZXNzYXJ5LCBqc2RvbSBkb2Vzbid0LlxuICAgICAgdmFyIG5ld1ZhbHVlID0gJycgKyB2YWx1ZTtcblxuICAgICAgLy8gVG8gYXZvaWQgc2lkZSBlZmZlY3RzIChzdWNoIGFzIGxvc2luZyB0ZXh0IHNlbGVjdGlvbiksIG9ubHkgc2V0IHZhbHVlIGlmIGNoYW5nZWRcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gbm9kZS52YWx1ZSkge1xuICAgICAgICBub2RlLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMuZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgICAgbm9kZS5kZWZhdWx0VmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICBub2RlLmRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH0sXG5cbiAgcG9zdE1vdW50V3JhcHBlcjogZnVuY3Rpb24gKGluc3QpIHtcbiAgICAvLyBUaGlzIGlzIGluIHBvc3RNb3VudCBiZWNhdXNlIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBET00gbm9kZSwgd2hpY2ggaXMgbm90XG4gICAgLy8gYXZhaWxhYmxlIHVudGlsIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIG1vdW50ZWQuXG4gICAgdmFyIG5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgICB2YXIgdGV4dENvbnRlbnQgPSBub2RlLnRleHRDb250ZW50O1xuXG4gICAgLy8gT25seSBzZXQgbm9kZS52YWx1ZSBpZiB0ZXh0Q29udGVudCBpcyBlcXVhbCB0byB0aGUgZXhwZWN0ZWRcbiAgICAvLyBpbml0aWFsIHZhbHVlLiBJbiBJRTEwL0lFMTEgdGhlcmUgaXMgYSBidWcgd2hlcmUgdGhlIHBsYWNlaG9sZGVyIGF0dHJpYnV0ZVxuICAgIC8vIHdpbGwgcG9wdWxhdGUgdGV4dENvbnRlbnQgYXMgd2VsbC5cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMDE1MjUvXG4gICAgaWYgKHRleHRDb250ZW50ID09PSBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlKSB7XG4gICAgICBub2RlLnZhbHVlID0gdGV4dENvbnRlbnQ7XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgdGhpcyk7XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRhcmVhO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RE9NVGV4dGFyZWEuanNcbi8vIG1vZHVsZSBpZCA9IDEzM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogUmV0dXJuIHRoZSBsb3dlc3QgY29tbW9uIGFuY2VzdG9yIG9mIEEgYW5kIEIsIG9yIG51bGwgaWYgdGhleSBhcmUgaW5cbiAqIGRpZmZlcmVudCB0cmVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoaW5zdEEsIGluc3RCKSB7XG4gICEoJ19ob3N0Tm9kZScgaW4gaW5zdEEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2dldE5vZGVGcm9tSW5zdGFuY2U6IEludmFsaWQgYXJndW1lbnQuJykgOiBfcHJvZEludmFyaWFudCgnMzMnKSA6IHZvaWQgMDtcbiAgISgnX2hvc3ROb2RlJyBpbiBpbnN0QikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0Tm9kZUZyb21JbnN0YW5jZTogSW52YWxpZCBhcmd1bWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCczMycpIDogdm9pZCAwO1xuXG4gIHZhciBkZXB0aEEgPSAwO1xuICBmb3IgKHZhciB0ZW1wQSA9IGluc3RBOyB0ZW1wQTsgdGVtcEEgPSB0ZW1wQS5faG9zdFBhcmVudCkge1xuICAgIGRlcHRoQSsrO1xuICB9XG4gIHZhciBkZXB0aEIgPSAwO1xuICBmb3IgKHZhciB0ZW1wQiA9IGluc3RCOyB0ZW1wQjsgdGVtcEIgPSB0ZW1wQi5faG9zdFBhcmVudCkge1xuICAgIGRlcHRoQisrO1xuICB9XG5cbiAgLy8gSWYgQSBpcyBkZWVwZXIsIGNyYXdsIHVwLlxuICB3aGlsZSAoZGVwdGhBIC0gZGVwdGhCID4gMCkge1xuICAgIGluc3RBID0gaW5zdEEuX2hvc3RQYXJlbnQ7XG4gICAgZGVwdGhBLS07XG4gIH1cblxuICAvLyBJZiBCIGlzIGRlZXBlciwgY3Jhd2wgdXAuXG4gIHdoaWxlIChkZXB0aEIgLSBkZXB0aEEgPiAwKSB7XG4gICAgaW5zdEIgPSBpbnN0Qi5faG9zdFBhcmVudDtcbiAgICBkZXB0aEItLTtcbiAgfVxuXG4gIC8vIFdhbGsgaW4gbG9ja3N0ZXAgdW50aWwgd2UgZmluZCBhIG1hdGNoLlxuICB2YXIgZGVwdGggPSBkZXB0aEE7XG4gIHdoaWxlIChkZXB0aC0tKSB7XG4gICAgaWYgKGluc3RBID09PSBpbnN0Qikge1xuICAgICAgcmV0dXJuIGluc3RBO1xuICAgIH1cbiAgICBpbnN0QSA9IGluc3RBLl9ob3N0UGFyZW50O1xuICAgIGluc3RCID0gaW5zdEIuX2hvc3RQYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJuIGlmIEEgaXMgYW4gYW5jZXN0b3Igb2YgQi5cbiAqL1xuZnVuY3Rpb24gaXNBbmNlc3RvcihpbnN0QSwgaW5zdEIpIHtcbiAgISgnX2hvc3ROb2RlJyBpbiBpbnN0QSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnaXNBbmNlc3RvcjogSW52YWxpZCBhcmd1bWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCczNScpIDogdm9pZCAwO1xuICAhKCdfaG9zdE5vZGUnIGluIGluc3RCKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpc0FuY2VzdG9yOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzM1JykgOiB2b2lkIDA7XG5cbiAgd2hpbGUgKGluc3RCKSB7XG4gICAgaWYgKGluc3RCID09PSBpbnN0QSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGluc3RCID0gaW5zdEIuX2hvc3RQYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgcGFyZW50IGluc3RhbmNlIG9mIHRoZSBwYXNzZWQtaW4gaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudEluc3RhbmNlKGluc3QpIHtcbiAgISgnX2hvc3ROb2RlJyBpbiBpbnN0KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXRQYXJlbnRJbnN0YW5jZTogSW52YWxpZCBhcmd1bWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCczNicpIDogdm9pZCAwO1xuXG4gIHJldHVybiBpbnN0Ll9ob3N0UGFyZW50O1xufVxuXG4vKipcbiAqIFNpbXVsYXRlcyB0aGUgdHJhdmVyc2FsIG9mIGEgdHdvLXBoYXNlLCBjYXB0dXJlL2J1YmJsZSBldmVudCBkaXNwYXRjaC5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2VUd29QaGFzZShpbnN0LCBmbiwgYXJnKSB7XG4gIHZhciBwYXRoID0gW107XG4gIHdoaWxlIChpbnN0KSB7XG4gICAgcGF0aC5wdXNoKGluc3QpO1xuICAgIGluc3QgPSBpbnN0Ll9ob3N0UGFyZW50O1xuICB9XG4gIHZhciBpO1xuICBmb3IgKGkgPSBwYXRoLmxlbmd0aDsgaS0tID4gMDspIHtcbiAgICBmbihwYXRoW2ldLCAnY2FwdHVyZWQnLCBhcmcpO1xuICB9XG4gIGZvciAoaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgZm4ocGF0aFtpXSwgJ2J1YmJsZWQnLCBhcmcpO1xuICB9XG59XG5cbi8qKlxuICogVHJhdmVyc2VzIHRoZSBJRCBoaWVyYXJjaHkgYW5kIGludm9rZXMgdGhlIHN1cHBsaWVkIGBjYmAgb24gYW55IElEcyB0aGF0XG4gKiBzaG91bGQgd291bGQgcmVjZWl2ZSBhIGBtb3VzZUVudGVyYCBvciBgbW91c2VMZWF2ZWAgZXZlbnQuXG4gKlxuICogRG9lcyBub3QgaW52b2tlIHRoZSBjYWxsYmFjayBvbiB0aGUgbmVhcmVzdCBjb21tb24gYW5jZXN0b3IgYmVjYXVzZSBub3RoaW5nXG4gKiBcImVudGVyZWRcIiBvciBcImxlZnRcIiB0aGF0IGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgZm4sIGFyZ0Zyb20sIGFyZ1RvKSB7XG4gIHZhciBjb21tb24gPSBmcm9tICYmIHRvID8gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoZnJvbSwgdG8pIDogbnVsbDtcbiAgdmFyIHBhdGhGcm9tID0gW107XG4gIHdoaWxlIChmcm9tICYmIGZyb20gIT09IGNvbW1vbikge1xuICAgIHBhdGhGcm9tLnB1c2goZnJvbSk7XG4gICAgZnJvbSA9IGZyb20uX2hvc3RQYXJlbnQ7XG4gIH1cbiAgdmFyIHBhdGhUbyA9IFtdO1xuICB3aGlsZSAodG8gJiYgdG8gIT09IGNvbW1vbikge1xuICAgIHBhdGhUby5wdXNoKHRvKTtcbiAgICB0byA9IHRvLl9ob3N0UGFyZW50O1xuICB9XG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgcGF0aEZyb20ubGVuZ3RoOyBpKyspIHtcbiAgICBmbihwYXRoRnJvbVtpXSwgJ2J1YmJsZWQnLCBhcmdGcm9tKTtcbiAgfVxuICBmb3IgKGkgPSBwYXRoVG8ubGVuZ3RoOyBpLS0gPiAwOykge1xuICAgIGZuKHBhdGhUb1tpXSwgJ2NhcHR1cmVkJywgYXJnVG8pO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FuY2VzdG9yOiBpc0FuY2VzdG9yLFxuICBnZXRMb3dlc3RDb21tb25BbmNlc3RvcjogZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IsXG4gIGdldFBhcmVudEluc3RhbmNlOiBnZXRQYXJlbnRJbnN0YW5jZSxcbiAgdHJhdmVyc2VUd29QaGFzZTogdHJhdmVyc2VUd29QaGFzZSxcbiAgdHJhdmVyc2VFbnRlckxlYXZlOiB0cmF2ZXJzZUVudGVyTGVhdmVcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RET01UcmVlVHJhdmVyc2FsLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNi1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RJbnZhbGlkU2V0U3RhdGVXYXJuaW5nSG9vayA9IHJlcXVpcmUoJy4vUmVhY3RJbnZhbGlkU2V0U3RhdGVXYXJuaW5nSG9vaycpO1xudmFyIFJlYWN0SG9zdE9wZXJhdGlvbkhpc3RvcnlIb29rID0gcmVxdWlyZSgnLi9SZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vaycpO1xudmFyIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIHBlcmZvcm1hbmNlTm93ID0gcmVxdWlyZSgnZmJqcy9saWIvcGVyZm9ybWFuY2VOb3cnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgaG9va3MgPSBbXTtcbnZhciBkaWRIb29rVGhyb3dGb3JFdmVudCA9IHt9O1xuXG5mdW5jdGlvbiBjYWxsSG9vayhldmVudCwgZm4sIGNvbnRleHQsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQsIGFyZzUpIHtcbiAgdHJ5IHtcbiAgICBmbi5jYWxsKGNvbnRleHQsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQsIGFyZzUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZGlkSG9va1Rocm93Rm9yRXZlbnRbZXZlbnRdLCAnRXhjZXB0aW9uIHRocm93biBieSBob29rIHdoaWxlIGhhbmRsaW5nICVzOiAlcycsIGV2ZW50LCBlICsgJ1xcbicgKyBlLnN0YWNrKSA6IHZvaWQgMDtcbiAgICBkaWRIb29rVGhyb3dGb3JFdmVudFtldmVudF0gPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVtaXRFdmVudChldmVudCwgYXJnMSwgYXJnMiwgYXJnMywgYXJnNCwgYXJnNSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGhvb2sgPSBob29rc1tpXTtcbiAgICB2YXIgZm4gPSBob29rW2V2ZW50XTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIGNhbGxIb29rKGV2ZW50LCBmbiwgaG9vaywgYXJnMSwgYXJnMiwgYXJnMywgYXJnNCwgYXJnNSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBpc1Byb2ZpbGluZyA9IGZhbHNlO1xudmFyIGZsdXNoSGlzdG9yeSA9IFtdO1xudmFyIGxpZmVDeWNsZVRpbWVyU3RhY2sgPSBbXTtcbnZhciBjdXJyZW50Rmx1c2hOZXN0aW5nID0gMDtcbnZhciBjdXJyZW50Rmx1c2hNZWFzdXJlbWVudHMgPSBbXTtcbnZhciBjdXJyZW50Rmx1c2hTdGFydFRpbWUgPSAwO1xudmFyIGN1cnJlbnRUaW1lckRlYnVnSUQgPSBudWxsO1xudmFyIGN1cnJlbnRUaW1lclN0YXJ0VGltZSA9IDA7XG52YXIgY3VycmVudFRpbWVyTmVzdGVkRmx1c2hEdXJhdGlvbiA9IDA7XG52YXIgY3VycmVudFRpbWVyVHlwZSA9IG51bGw7XG5cbnZhciBsaWZlQ3ljbGVUaW1lckhhc1dhcm5lZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBjbGVhckhpc3RvcnkoKSB7XG4gIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sucHVyZ2VVbm1vdW50ZWRDb21wb25lbnRzKCk7XG4gIFJlYWN0SG9zdE9wZXJhdGlvbkhpc3RvcnlIb29rLmNsZWFySGlzdG9yeSgpO1xufVxuXG5mdW5jdGlvbiBnZXRUcmVlU25hcHNob3QocmVnaXN0ZXJlZElEcykge1xuICByZXR1cm4gcmVnaXN0ZXJlZElEcy5yZWR1Y2UoZnVuY3Rpb24gKHRyZWUsIGlkKSB7XG4gICAgdmFyIG93bmVySUQgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldE93bmVySUQoaWQpO1xuICAgIHZhciBwYXJlbnRJRCA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0UGFyZW50SUQoaWQpO1xuICAgIHRyZWVbaWRdID0ge1xuICAgICAgZGlzcGxheU5hbWU6IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0RGlzcGxheU5hbWUoaWQpLFxuICAgICAgdGV4dDogUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRUZXh0KGlkKSxcbiAgICAgIHVwZGF0ZUNvdW50OiBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFVwZGF0ZUNvdW50KGlkKSxcbiAgICAgIGNoaWxkSURzOiBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldENoaWxkSURzKGlkKSxcbiAgICAgIC8vIFRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBvd25lcnMgYnV0IHRoaXMgaXMgY2xvc2UgZW5vdWdoLlxuICAgICAgb3duZXJJRDogb3duZXJJRCB8fCBwYXJlbnRJRCAmJiBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldE93bmVySUQocGFyZW50SUQpIHx8IDAsXG4gICAgICBwYXJlbnRJRDogcGFyZW50SURcbiAgICB9O1xuICAgIHJldHVybiB0cmVlO1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0TWVhc3VyZW1lbnRzKCkge1xuICB2YXIgcHJldmlvdXNTdGFydFRpbWUgPSBjdXJyZW50Rmx1c2hTdGFydFRpbWU7XG4gIHZhciBwcmV2aW91c01lYXN1cmVtZW50cyA9IGN1cnJlbnRGbHVzaE1lYXN1cmVtZW50cztcbiAgdmFyIHByZXZpb3VzT3BlcmF0aW9ucyA9IFJlYWN0SG9zdE9wZXJhdGlvbkhpc3RvcnlIb29rLmdldEhpc3RvcnkoKTtcblxuICBpZiAoY3VycmVudEZsdXNoTmVzdGluZyA9PT0gMCkge1xuICAgIGN1cnJlbnRGbHVzaFN0YXJ0VGltZSA9IDA7XG4gICAgY3VycmVudEZsdXNoTWVhc3VyZW1lbnRzID0gW107XG4gICAgY2xlYXJIaXN0b3J5KCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHByZXZpb3VzTWVhc3VyZW1lbnRzLmxlbmd0aCB8fCBwcmV2aW91c09wZXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgdmFyIHJlZ2lzdGVyZWRJRHMgPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldFJlZ2lzdGVyZWRJRHMoKTtcbiAgICBmbHVzaEhpc3RvcnkucHVzaCh7XG4gICAgICBkdXJhdGlvbjogcGVyZm9ybWFuY2VOb3coKSAtIHByZXZpb3VzU3RhcnRUaW1lLFxuICAgICAgbWVhc3VyZW1lbnRzOiBwcmV2aW91c01lYXN1cmVtZW50cyB8fCBbXSxcbiAgICAgIG9wZXJhdGlvbnM6IHByZXZpb3VzT3BlcmF0aW9ucyB8fCBbXSxcbiAgICAgIHRyZWVTbmFwc2hvdDogZ2V0VHJlZVNuYXBzaG90KHJlZ2lzdGVyZWRJRHMpXG4gICAgfSk7XG4gIH1cblxuICBjbGVhckhpc3RvcnkoKTtcbiAgY3VycmVudEZsdXNoU3RhcnRUaW1lID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgY3VycmVudEZsdXNoTWVhc3VyZW1lbnRzID0gW107XG59XG5cbmZ1bmN0aW9uIGNoZWNrRGVidWdJRChkZWJ1Z0lEKSB7XG4gIHZhciBhbGxvd1Jvb3QgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIGlmIChhbGxvd1Jvb3QgJiYgZGVidWdJRCA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWRlYnVnSUQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1JlYWN0RGVidWdUb29sOiBkZWJ1Z0lEIG1heSBub3QgYmUgZW1wdHkuJykgOiB2b2lkIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmVnaW5MaWZlQ3ljbGVUaW1lcihkZWJ1Z0lELCB0aW1lclR5cGUpIHtcbiAgaWYgKGN1cnJlbnRGbHVzaE5lc3RpbmcgPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGN1cnJlbnRUaW1lclR5cGUgJiYgIWxpZmVDeWNsZVRpbWVySGFzV2FybmVkKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdUaGVyZSBpcyBhbiBpbnRlcm5hbCBlcnJvciBpbiB0aGUgUmVhY3QgcGVyZm9ybWFuY2UgbWVhc3VyZW1lbnQgY29kZS4gJyArICdEaWQgbm90IGV4cGVjdCAlcyB0aW1lciB0byBzdGFydCB3aGlsZSAlcyB0aW1lciBpcyBzdGlsbCBpbiAnICsgJ3Byb2dyZXNzIGZvciAlcyBpbnN0YW5jZS4nLCB0aW1lclR5cGUsIGN1cnJlbnRUaW1lclR5cGUgfHwgJ25vJywgZGVidWdJRCA9PT0gY3VycmVudFRpbWVyRGVidWdJRCA/ICd0aGUgc2FtZScgOiAnYW5vdGhlcicpIDogdm9pZCAwO1xuICAgIGxpZmVDeWNsZVRpbWVySGFzV2FybmVkID0gdHJ1ZTtcbiAgfVxuICBjdXJyZW50VGltZXJTdGFydFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpO1xuICBjdXJyZW50VGltZXJOZXN0ZWRGbHVzaER1cmF0aW9uID0gMDtcbiAgY3VycmVudFRpbWVyRGVidWdJRCA9IGRlYnVnSUQ7XG4gIGN1cnJlbnRUaW1lclR5cGUgPSB0aW1lclR5cGU7XG59XG5cbmZ1bmN0aW9uIGVuZExpZmVDeWNsZVRpbWVyKGRlYnVnSUQsIHRpbWVyVHlwZSkge1xuICBpZiAoY3VycmVudEZsdXNoTmVzdGluZyA9PT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoY3VycmVudFRpbWVyVHlwZSAhPT0gdGltZXJUeXBlICYmICFsaWZlQ3ljbGVUaW1lckhhc1dhcm5lZCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnVGhlcmUgaXMgYW4gaW50ZXJuYWwgZXJyb3IgaW4gdGhlIFJlYWN0IHBlcmZvcm1hbmNlIG1lYXN1cmVtZW50IGNvZGUuICcgKyAnV2UgZGlkIG5vdCBleHBlY3QgJXMgdGltZXIgdG8gc3RvcCB3aGlsZSAlcyB0aW1lciBpcyBzdGlsbCBpbiAnICsgJ3Byb2dyZXNzIGZvciAlcyBpbnN0YW5jZS4gUGxlYXNlIHJlcG9ydCB0aGlzIGFzIGEgYnVnIGluIFJlYWN0LicsIHRpbWVyVHlwZSwgY3VycmVudFRpbWVyVHlwZSB8fCAnbm8nLCBkZWJ1Z0lEID09PSBjdXJyZW50VGltZXJEZWJ1Z0lEID8gJ3RoZSBzYW1lJyA6ICdhbm90aGVyJykgOiB2b2lkIDA7XG4gICAgbGlmZUN5Y2xlVGltZXJIYXNXYXJuZWQgPSB0cnVlO1xuICB9XG4gIGlmIChpc1Byb2ZpbGluZykge1xuICAgIGN1cnJlbnRGbHVzaE1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgIHRpbWVyVHlwZTogdGltZXJUeXBlLFxuICAgICAgaW5zdGFuY2VJRDogZGVidWdJRCxcbiAgICAgIGR1cmF0aW9uOiBwZXJmb3JtYW5jZU5vdygpIC0gY3VycmVudFRpbWVyU3RhcnRUaW1lIC0gY3VycmVudFRpbWVyTmVzdGVkRmx1c2hEdXJhdGlvblxuICAgIH0pO1xuICB9XG4gIGN1cnJlbnRUaW1lclN0YXJ0VGltZSA9IDA7XG4gIGN1cnJlbnRUaW1lck5lc3RlZEZsdXNoRHVyYXRpb24gPSAwO1xuICBjdXJyZW50VGltZXJEZWJ1Z0lEID0gbnVsbDtcbiAgY3VycmVudFRpbWVyVHlwZSA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIHBhdXNlQ3VycmVudExpZmVDeWNsZVRpbWVyKCkge1xuICB2YXIgY3VycmVudFRpbWVyID0ge1xuICAgIHN0YXJ0VGltZTogY3VycmVudFRpbWVyU3RhcnRUaW1lLFxuICAgIG5lc3RlZEZsdXNoU3RhcnRUaW1lOiBwZXJmb3JtYW5jZU5vdygpLFxuICAgIGRlYnVnSUQ6IGN1cnJlbnRUaW1lckRlYnVnSUQsXG4gICAgdGltZXJUeXBlOiBjdXJyZW50VGltZXJUeXBlXG4gIH07XG4gIGxpZmVDeWNsZVRpbWVyU3RhY2sucHVzaChjdXJyZW50VGltZXIpO1xuICBjdXJyZW50VGltZXJTdGFydFRpbWUgPSAwO1xuICBjdXJyZW50VGltZXJOZXN0ZWRGbHVzaER1cmF0aW9uID0gMDtcbiAgY3VycmVudFRpbWVyRGVidWdJRCA9IG51bGw7XG4gIGN1cnJlbnRUaW1lclR5cGUgPSBudWxsO1xufVxuXG5mdW5jdGlvbiByZXN1bWVDdXJyZW50TGlmZUN5Y2xlVGltZXIoKSB7XG4gIHZhciBfbGlmZUN5Y2xlVGltZXJTdGFjayQgPSBsaWZlQ3ljbGVUaW1lclN0YWNrLnBvcCgpLFxuICAgICAgc3RhcnRUaW1lID0gX2xpZmVDeWNsZVRpbWVyU3RhY2skLnN0YXJ0VGltZSxcbiAgICAgIG5lc3RlZEZsdXNoU3RhcnRUaW1lID0gX2xpZmVDeWNsZVRpbWVyU3RhY2skLm5lc3RlZEZsdXNoU3RhcnRUaW1lLFxuICAgICAgZGVidWdJRCA9IF9saWZlQ3ljbGVUaW1lclN0YWNrJC5kZWJ1Z0lELFxuICAgICAgdGltZXJUeXBlID0gX2xpZmVDeWNsZVRpbWVyU3RhY2skLnRpbWVyVHlwZTtcblxuICB2YXIgbmVzdGVkRmx1c2hEdXJhdGlvbiA9IHBlcmZvcm1hbmNlTm93KCkgLSBuZXN0ZWRGbHVzaFN0YXJ0VGltZTtcbiAgY3VycmVudFRpbWVyU3RhcnRUaW1lID0gc3RhcnRUaW1lO1xuICBjdXJyZW50VGltZXJOZXN0ZWRGbHVzaER1cmF0aW9uICs9IG5lc3RlZEZsdXNoRHVyYXRpb247XG4gIGN1cnJlbnRUaW1lckRlYnVnSUQgPSBkZWJ1Z0lEO1xuICBjdXJyZW50VGltZXJUeXBlID0gdGltZXJUeXBlO1xufVxuXG52YXIgbGFzdE1hcmtUaW1lU3RhbXAgPSAwO1xudmFyIGNhblVzZVBlcmZvcm1hbmNlTWVhc3VyZSA9XG4vLyAkRmxvd0ZpeE1lIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yMzQ1XG50eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5tYXJrID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5jbGVhck1hcmtzID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5tZWFzdXJlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5jbGVhck1lYXN1cmVzID09PSAnZnVuY3Rpb24nO1xuXG5mdW5jdGlvbiBzaG91bGRNYXJrKGRlYnVnSUQpIHtcbiAgaWYgKCFpc1Byb2ZpbGluZyB8fCAhY2FuVXNlUGVyZm9ybWFuY2VNZWFzdXJlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBlbGVtZW50ID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRFbGVtZW50KGRlYnVnSUQpO1xuICBpZiAoZWxlbWVudCA9PSBudWxsIHx8IHR5cGVvZiBlbGVtZW50ICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaXNIb3N0RWxlbWVudCA9IHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdzdHJpbmcnO1xuICBpZiAoaXNIb3N0RWxlbWVudCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWFya0JlZ2luKGRlYnVnSUQsIG1hcmtUeXBlKSB7XG4gIGlmICghc2hvdWxkTWFyayhkZWJ1Z0lEKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBtYXJrTmFtZSA9IGRlYnVnSUQgKyAnOjonICsgbWFya1R5cGU7XG4gIGxhc3RNYXJrVGltZVN0YW1wID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgcGVyZm9ybWFuY2UubWFyayhtYXJrTmFtZSk7XG59XG5cbmZ1bmN0aW9uIG1hcmtFbmQoZGVidWdJRCwgbWFya1R5cGUpIHtcbiAgaWYgKCFzaG91bGRNYXJrKGRlYnVnSUQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG1hcmtOYW1lID0gZGVidWdJRCArICc6OicgKyBtYXJrVHlwZTtcbiAgdmFyIGRpc3BsYXlOYW1lID0gUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXREaXNwbGF5TmFtZShkZWJ1Z0lEKSB8fCAnVW5rbm93bic7XG5cbiAgLy8gQ2hyb21lIGhhcyBhbiBpc3N1ZSBvZiBkcm9wcGluZyBtYXJrZXJzIHJlY29yZGVkIHRvbyBmYXN0OlxuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02NDA2NTJcbiAgLy8gVG8gd29yayBhcm91bmQgdGhpcywgd2Ugd2lsbCBub3QgcmVwb3J0IHZlcnkgc21hbGwgbWVhc3VyZW1lbnRzLlxuICAvLyBJIGRldGVybWluZWQgdGhlIG1hZ2ljIG51bWJlciBieSB0d2Vha2luZyBpdCBiYWNrIGFuZCBmb3J0aC5cbiAgLy8gMC4wNW1zIHdhcyBlbm91Z2ggdG8gcHJldmVudCB0aGUgaXNzdWUsIGJ1dCBJIHNldCBpdCB0byAwLjFtcyB0byBiZSBzYWZlLlxuICAvLyBXaGVuIHRoZSBidWcgaXMgZml4ZWQsIHdlIGNhbiBgbWVhc3VyZSgpYCB1bmNvbmRpdGlvbmFsbHkgaWYgd2Ugd2FudCB0by5cbiAgdmFyIHRpbWVTdGFtcCA9IHBlcmZvcm1hbmNlTm93KCk7XG4gIGlmICh0aW1lU3RhbXAgLSBsYXN0TWFya1RpbWVTdGFtcCA+IDAuMSkge1xuICAgIHZhciBtZWFzdXJlbWVudE5hbWUgPSBkaXNwbGF5TmFtZSArICcgWycgKyBtYXJrVHlwZSArICddJztcbiAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKG1lYXN1cmVtZW50TmFtZSwgbWFya05hbWUpO1xuICB9XG5cbiAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhtYXJrTmFtZSk7XG4gIHBlcmZvcm1hbmNlLmNsZWFyTWVhc3VyZXMobWVhc3VyZW1lbnROYW1lKTtcbn1cblxudmFyIFJlYWN0RGVidWdUb29sID0ge1xuICBhZGRIb29rOiBmdW5jdGlvbiAoaG9vaykge1xuICAgIGhvb2tzLnB1c2goaG9vayk7XG4gIH0sXG4gIHJlbW92ZUhvb2s6IGZ1bmN0aW9uIChob29rKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGhvb2tzW2ldID09PSBob29rKSB7XG4gICAgICAgIGhvb2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaXNQcm9maWxpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNQcm9maWxpbmc7XG4gIH0sXG4gIGJlZ2luUHJvZmlsaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGlzUHJvZmlsaW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaXNQcm9maWxpbmcgPSB0cnVlO1xuICAgIGZsdXNoSGlzdG9yeS5sZW5ndGggPSAwO1xuICAgIHJlc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgUmVhY3REZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vayk7XG4gIH0sXG4gIGVuZFByb2ZpbGluZzogZnVuY3Rpb24gKCkge1xuICAgIGlmICghaXNQcm9maWxpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpc1Byb2ZpbGluZyA9IGZhbHNlO1xuICAgIHJlc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgUmVhY3REZWJ1Z1Rvb2wucmVtb3ZlSG9vayhSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vayk7XG4gIH0sXG4gIGdldEZsdXNoSGlzdG9yeTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmbHVzaEhpc3Rvcnk7XG4gIH0sXG4gIG9uQmVnaW5GbHVzaDogZnVuY3Rpb24gKCkge1xuICAgIGN1cnJlbnRGbHVzaE5lc3RpbmcrKztcbiAgICByZXNldE1lYXN1cmVtZW50cygpO1xuICAgIHBhdXNlQ3VycmVudExpZmVDeWNsZVRpbWVyKCk7XG4gICAgZW1pdEV2ZW50KCdvbkJlZ2luRmx1c2gnKTtcbiAgfSxcbiAgb25FbmRGbHVzaDogZnVuY3Rpb24gKCkge1xuICAgIHJlc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgY3VycmVudEZsdXNoTmVzdGluZy0tO1xuICAgIHJlc3VtZUN1cnJlbnRMaWZlQ3ljbGVUaW1lcigpO1xuICAgIGVtaXRFdmVudCgnb25FbmRGbHVzaCcpO1xuICB9LFxuICBvbkJlZ2luTGlmZUN5Y2xlVGltZXI6IGZ1bmN0aW9uIChkZWJ1Z0lELCB0aW1lclR5cGUpIHtcbiAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgZW1pdEV2ZW50KCdvbkJlZ2luTGlmZUN5Y2xlVGltZXInLCBkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICAgIG1hcmtCZWdpbihkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICAgIGJlZ2luTGlmZUN5Y2xlVGltZXIoZGVidWdJRCwgdGltZXJUeXBlKTtcbiAgfSxcbiAgb25FbmRMaWZlQ3ljbGVUaW1lcjogZnVuY3Rpb24gKGRlYnVnSUQsIHRpbWVyVHlwZSkge1xuICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICBlbmRMaWZlQ3ljbGVUaW1lcihkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICAgIG1hcmtFbmQoZGVidWdJRCwgdGltZXJUeXBlKTtcbiAgICBlbWl0RXZlbnQoJ29uRW5kTGlmZUN5Y2xlVGltZXInLCBkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICB9LFxuICBvbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dDogZnVuY3Rpb24gKCkge1xuICAgIGVtaXRFdmVudCgnb25CZWdpblByb2Nlc3NpbmdDaGlsZENvbnRleHQnKTtcbiAgfSxcbiAgb25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgZW1pdEV2ZW50KCdvbkVuZFByb2Nlc3NpbmdDaGlsZENvbnRleHQnKTtcbiAgfSxcbiAgb25Ib3N0T3BlcmF0aW9uOiBmdW5jdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgY2hlY2tEZWJ1Z0lEKG9wZXJhdGlvbi5pbnN0YW5jZUlEKTtcbiAgICBlbWl0RXZlbnQoJ29uSG9zdE9wZXJhdGlvbicsIG9wZXJhdGlvbik7XG4gIH0sXG4gIG9uU2V0U3RhdGU6IGZ1bmN0aW9uICgpIHtcbiAgICBlbWl0RXZlbnQoJ29uU2V0U3RhdGUnKTtcbiAgfSxcbiAgb25TZXRDaGlsZHJlbjogZnVuY3Rpb24gKGRlYnVnSUQsIGNoaWxkRGVidWdJRHMpIHtcbiAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgY2hpbGREZWJ1Z0lEcy5mb3JFYWNoKGNoZWNrRGVidWdJRCk7XG4gICAgZW1pdEV2ZW50KCdvblNldENoaWxkcmVuJywgZGVidWdJRCwgY2hpbGREZWJ1Z0lEcyk7XG4gIH0sXG4gIG9uQmVmb3JlTW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChkZWJ1Z0lELCBlbGVtZW50LCBwYXJlbnREZWJ1Z0lEKSB7XG4gICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgIGNoZWNrRGVidWdJRChwYXJlbnREZWJ1Z0lELCB0cnVlKTtcbiAgICBlbWl0RXZlbnQoJ29uQmVmb3JlTW91bnRDb21wb25lbnQnLCBkZWJ1Z0lELCBlbGVtZW50LCBwYXJlbnREZWJ1Z0lEKTtcbiAgICBtYXJrQmVnaW4oZGVidWdJRCwgJ21vdW50Jyk7XG4gIH0sXG4gIG9uTW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChkZWJ1Z0lEKSB7XG4gICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgIG1hcmtFbmQoZGVidWdJRCwgJ21vdW50Jyk7XG4gICAgZW1pdEV2ZW50KCdvbk1vdW50Q29tcG9uZW50JywgZGVidWdJRCk7XG4gIH0sXG4gIG9uQmVmb3JlVXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbiAoZGVidWdJRCwgZWxlbWVudCkge1xuICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICBlbWl0RXZlbnQoJ29uQmVmb3JlVXBkYXRlQ29tcG9uZW50JywgZGVidWdJRCwgZWxlbWVudCk7XG4gICAgbWFya0JlZ2luKGRlYnVnSUQsICd1cGRhdGUnKTtcbiAgfSxcbiAgb25VcGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uIChkZWJ1Z0lEKSB7XG4gICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgIG1hcmtFbmQoZGVidWdJRCwgJ3VwZGF0ZScpO1xuICAgIGVtaXRFdmVudCgnb25VcGRhdGVDb21wb25lbnQnLCBkZWJ1Z0lEKTtcbiAgfSxcbiAgb25CZWZvcmVVbm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbiAoZGVidWdJRCkge1xuICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICBlbWl0RXZlbnQoJ29uQmVmb3JlVW5tb3VudENvbXBvbmVudCcsIGRlYnVnSUQpO1xuICAgIG1hcmtCZWdpbihkZWJ1Z0lELCAndW5tb3VudCcpO1xuICB9LFxuICBvblVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uIChkZWJ1Z0lEKSB7XG4gICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgIG1hcmtFbmQoZGVidWdJRCwgJ3VubW91bnQnKTtcbiAgICBlbWl0RXZlbnQoJ29uVW5tb3VudENvbXBvbmVudCcsIGRlYnVnSUQpO1xuICB9LFxuICBvblRlc3RFdmVudDogZnVuY3Rpb24gKCkge1xuICAgIGVtaXRFdmVudCgnb25UZXN0RXZlbnQnKTtcbiAgfVxufTtcblxuLy8gVE9ETyByZW1vdmUgdGhlc2Ugd2hlbiBSTi93d3cgZ2V0cyB1cGRhdGVkXG5SZWFjdERlYnVnVG9vbC5hZGREZXZ0b29sID0gUmVhY3REZWJ1Z1Rvb2wuYWRkSG9vaztcblJlYWN0RGVidWdUb29sLnJlbW92ZURldnRvb2wgPSBSZWFjdERlYnVnVG9vbC5yZW1vdmVIb29rO1xuXG5SZWFjdERlYnVnVG9vbC5hZGRIb29rKFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2spO1xuUmVhY3REZWJ1Z1Rvb2wuYWRkSG9vayhSZWFjdENvbXBvbmVudFRyZWVIb29rKTtcbnZhciB1cmwgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LmxvY2F0aW9uLmhyZWYgfHwgJyc7XG5pZiAoL1s/Jl1yZWFjdF9wZXJmXFxiLy50ZXN0KHVybCkpIHtcbiAgUmVhY3REZWJ1Z1Rvb2wuYmVnaW5Qcm9maWxpbmcoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlYnVnVG9vbDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdERlYnVnVG9vbC5qc1xuLy8gbW9kdWxlIGlkID0gMTM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBBUklBRE9NUHJvcGVydHlDb25maWcgPSByZXF1aXJlKCcuL0FSSUFET01Qcm9wZXJ0eUNvbmZpZycpO1xudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4nKTtcbnZhciBDaGFuZ2VFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vQ2hhbmdlRXZlbnRQbHVnaW4nKTtcbnZhciBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlciA9IHJlcXVpcmUoJy4vRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXInKTtcbnZhciBFbnRlckxlYXZlRXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL0VudGVyTGVhdmVFdmVudFBsdWdpbicpO1xudmFyIEhUTUxET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoJy4vSFRNTERPTVByb3BlcnR5Q29uZmlnJyk7XG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdERPTUVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdERPTUVtcHR5Q29tcG9uZW50Jyk7XG52YXIgUmVhY3RET01UcmVlVHJhdmVyc2FsID0gcmVxdWlyZSgnLi9SZWFjdERPTVRyZWVUcmF2ZXJzYWwnKTtcbnZhciBSZWFjdERPTVRleHRDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RE9NVGV4dENvbXBvbmVudCcpO1xudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3knKTtcbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCcuL1JlYWN0RXZlbnRMaXN0ZW5lcicpO1xudmFyIFJlYWN0SW5qZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluamVjdGlvbicpO1xudmFyIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24nKTtcbnZhciBTVkdET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoJy4vU1ZHRE9NUHJvcGVydHlDb25maWcnKTtcbnZhciBTZWxlY3RFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vU2VsZWN0RXZlbnRQbHVnaW4nKTtcbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vU2ltcGxlRXZlbnRQbHVnaW4nKTtcblxudmFyIGFscmVhZHlJbmplY3RlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBpbmplY3QoKSB7XG4gIGlmIChhbHJlYWR5SW5qZWN0ZWQpIHtcbiAgICAvLyBUT0RPOiBUaGlzIGlzIGN1cnJlbnRseSB0cnVlIGJlY2F1c2UgdGhlc2UgaW5qZWN0aW9ucyBhcmUgc2hhcmVkIGJldHdlZW5cbiAgICAvLyB0aGUgY2xpZW50IGFuZCB0aGUgc2VydmVyIHBhY2thZ2UuIFRoZXkgc2hvdWxkIGJlIGJ1aWx0IGluZGVwZW5kZW50bHlcbiAgICAvLyBhbmQgbm90IHNoYXJlIGFueSBpbmplY3Rpb24gc3RhdGUuIFRoZW4gdGhpcyBwcm9ibGVtIHdpbGwgYmUgc29sdmVkLlxuICAgIHJldHVybjtcbiAgfVxuICBhbHJlYWR5SW5qZWN0ZWQgPSB0cnVlO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50RW1pdHRlci5pbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIoUmVhY3RFdmVudExpc3RlbmVyKTtcblxuICAvKipcbiAgICogSW5qZWN0IG1vZHVsZXMgZm9yIHJlc29sdmluZyBET00gaGllcmFyY2h5IGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gICAqL1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKERlZmF1bHRFdmVudFBsdWdpbk9yZGVyKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5VdGlscy5pbmplY3RDb21wb25lbnRUcmVlKFJlYWN0RE9NQ29tcG9uZW50VHJlZSk7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luVXRpbHMuaW5qZWN0VHJlZVRyYXZlcnNhbChSZWFjdERPTVRyZWVUcmF2ZXJzYWwpO1xuXG4gIC8qKlxuICAgKiBTb21lIGltcG9ydGFudCBldmVudCBwbHVnaW5zIGluY2x1ZGVkIGJ5IGRlZmF1bHQgKHdpdGhvdXQgaGF2aW5nIHRvIHJlcXVpcmVcbiAgICogdGhlbSkuXG4gICAqL1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuICAgIFNpbXBsZUV2ZW50UGx1Z2luOiBTaW1wbGVFdmVudFBsdWdpbixcbiAgICBFbnRlckxlYXZlRXZlbnRQbHVnaW46IEVudGVyTGVhdmVFdmVudFBsdWdpbixcbiAgICBDaGFuZ2VFdmVudFBsdWdpbjogQ2hhbmdlRXZlbnRQbHVnaW4sXG4gICAgU2VsZWN0RXZlbnRQbHVnaW46IFNlbGVjdEV2ZW50UGx1Z2luLFxuICAgIEJlZm9yZUlucHV0RXZlbnRQbHVnaW46IEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cbiAgfSk7XG5cbiAgUmVhY3RJbmplY3Rpb24uSG9zdENvbXBvbmVudC5pbmplY3RHZW5lcmljQ29tcG9uZW50Q2xhc3MoUmVhY3RET01Db21wb25lbnQpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkhvc3RDb21wb25lbnQuaW5qZWN0VGV4dENvbXBvbmVudENsYXNzKFJlYWN0RE9NVGV4dENvbXBvbmVudCk7XG5cbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoQVJJQURPTVByb3BlcnR5Q29uZmlnKTtcbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoSFRNTERPTVByb3BlcnR5Q29uZmlnKTtcbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoU1ZHRE9NUHJvcGVydHlDb25maWcpO1xuXG4gIFJlYWN0SW5qZWN0aW9uLkVtcHR5Q29tcG9uZW50LmluamVjdEVtcHR5Q29tcG9uZW50RmFjdG9yeShmdW5jdGlvbiAoaW5zdGFudGlhdGUpIHtcbiAgICByZXR1cm4gbmV3IFJlYWN0RE9NRW1wdHlDb21wb25lbnQoaW5zdGFudGlhdGUpO1xuICB9KTtcblxuICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdFJlY29uY2lsZVRyYW5zYWN0aW9uKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSk7XG5cbiAgUmVhY3RJbmplY3Rpb24uQ29tcG9uZW50LmluamVjdEVudmlyb25tZW50KFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluamVjdDogaW5qZWN0XG59O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0RGVmYXVsdEluamVjdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50IHR5cGUuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2xcbi8vIG5vciBwb2x5ZmlsbCwgdGhlbiBhIHBsYWluIG51bWJlciBpcyB1c2VkIGZvciBwZXJmb3JtYW5jZS5cblxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sWydmb3InXSAmJiBTeW1ib2xbJ2ZvciddKCdyZWFjdC5lbGVtZW50JykgfHwgMHhlYWM3O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJFQUNUX0VMRU1FTlRfVFlQRTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdEVsZW1lbnRTeW1ib2wuanNcbi8vIG1vZHVsZSBpZCA9IDEzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG5cbmZ1bmN0aW9uIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cykge1xuICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50cyk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKGZhbHNlKTtcbn1cblxudmFyIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4gPSB7XG5cbiAgLyoqXG4gICAqIFN0cmVhbXMgYSBmaXJlZCB0b3AtbGV2ZWwgZXZlbnQgdG8gYEV2ZW50UGx1Z2luSHViYCB3aGVyZSBwbHVnaW5zIGhhdmUgdGhlXG4gICAqIG9wcG9ydHVuaXR5IHRvIGNyZWF0ZSBgUmVhY3RFdmVudGBzIHRvIGJlIGRpc3BhdGNoZWQuXG4gICAqL1xuICBoYW5kbGVUb3BMZXZlbDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGV2ZW50cyA9IEV2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cyk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFdmVudEVtaXR0ZXJNaXhpbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdEV2ZW50RW1pdHRlck1peGluLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBFdmVudExpc3RlbmVyID0gcmVxdWlyZSgnZmJqcy9saWIvRXZlbnRMaXN0ZW5lcicpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbnZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG5cbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRUYXJnZXQnKTtcbnZhciBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uJyk7XG5cbi8qKlxuICogRmluZCB0aGUgZGVlcGVzdCBSZWFjdCBjb21wb25lbnQgY29tcGxldGVseSBjb250YWluaW5nIHRoZSByb290IG9mIHRoZVxuICogcGFzc2VkLWluIGluc3RhbmNlIChmb3IgdXNlIHdoZW4gZW50aXJlIFJlYWN0IHRyZWVzIGFyZSBuZXN0ZWQgd2l0aGluIGVhY2hcbiAqIG90aGVyKS4gSWYgUmVhY3QgdHJlZXMgYXJlIG5vdCBuZXN0ZWQsIHJldHVybnMgbnVsbC5cbiAqL1xuZnVuY3Rpb24gZmluZFBhcmVudChpbnN0KSB7XG4gIC8vIFRPRE86IEl0IG1heSBiZSBhIGdvb2QgaWRlYSB0byBjYWNoZSB0aGlzIHRvIHByZXZlbnQgdW5uZWNlc3NhcnkgRE9NXG4gIC8vIHRyYXZlcnNhbCwgYnV0IGNhY2hpbmcgaXMgZGlmZmljdWx0IHRvIGRvIGNvcnJlY3RseSB3aXRob3V0IHVzaW5nIGFcbiAgLy8gbXV0YXRpb24gb2JzZXJ2ZXIgdG8gbGlzdGVuIGZvciBhbGwgRE9NIGNoYW5nZXMuXG4gIHdoaWxlIChpbnN0Ll9ob3N0UGFyZW50KSB7XG4gICAgaW5zdCA9IGluc3QuX2hvc3RQYXJlbnQ7XG4gIH1cbiAgdmFyIHJvb3ROb2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG4gIHZhciBjb250YWluZXIgPSByb290Tm9kZS5wYXJlbnROb2RlO1xuICByZXR1cm4gUmVhY3RET01Db21wb25lbnRUcmVlLmdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKGNvbnRhaW5lcik7XG59XG5cbi8vIFVzZWQgdG8gc3RvcmUgYW5jZXN0b3IgaGllcmFyY2h5IGluIHRvcCBsZXZlbCBjYWxsYmFja1xuZnVuY3Rpb24gVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgdGhpcy50b3BMZXZlbFR5cGUgPSB0b3BMZXZlbFR5cGU7XG4gIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgdGhpcy5hbmNlc3RvcnMgPSBbXTtcbn1cbl9hc3NpZ24oVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLnByb3RvdHlwZSwge1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50b3BMZXZlbFR5cGUgPSBudWxsO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBudWxsO1xuICAgIHRoaXMuYW5jZXN0b3JzLmxlbmd0aCA9IDA7XG4gIH1cbn0pO1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZywgUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXIpO1xuXG5mdW5jdGlvbiBoYW5kbGVUb3BMZXZlbEltcGwoYm9va0tlZXBpbmcpIHtcbiAgdmFyIG5hdGl2ZUV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQoYm9va0tlZXBpbmcubmF0aXZlRXZlbnQpO1xuICB2YXIgdGFyZ2V0SW5zdCA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgLy8gTG9vcCB0aHJvdWdoIHRoZSBoaWVyYXJjaHksIGluIGNhc2UgdGhlcmUncyBhbnkgbmVzdGVkIGNvbXBvbmVudHMuXG4gIC8vIEl0J3MgaW1wb3J0YW50IHRoYXQgd2UgYnVpbGQgdGhlIGFycmF5IG9mIGFuY2VzdG9ycyBiZWZvcmUgY2FsbGluZyBhbnlcbiAgLy8gZXZlbnQgaGFuZGxlcnMsIGJlY2F1c2UgZXZlbnQgaGFuZGxlcnMgY2FuIG1vZGlmeSB0aGUgRE9NLCBsZWFkaW5nIHRvXG4gIC8vIGluY29uc2lzdGVuY2llcyB3aXRoIFJlYWN0TW91bnQncyBub2RlIGNhY2hlLiBTZWUgIzExMDUuXG4gIHZhciBhbmNlc3RvciA9IHRhcmdldEluc3Q7XG4gIGRvIHtcbiAgICBib29rS2VlcGluZy5hbmNlc3RvcnMucHVzaChhbmNlc3Rvcik7XG4gICAgYW5jZXN0b3IgPSBhbmNlc3RvciAmJiBmaW5kUGFyZW50KGFuY2VzdG9yKTtcbiAgfSB3aGlsZSAoYW5jZXN0b3IpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYm9va0tlZXBpbmcuYW5jZXN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGFyZ2V0SW5zdCA9IGJvb2tLZWVwaW5nLmFuY2VzdG9yc1tpXTtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsKGJvb2tLZWVwaW5nLnRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgYm9va0tlZXBpbmcubmF0aXZlRXZlbnQsIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2Nyb2xsVmFsdWVNb25pdG9yKGNiKSB7XG4gIHZhciBzY3JvbGxQb3NpdGlvbiA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHdpbmRvdyk7XG4gIGNiKHNjcm9sbFBvc2l0aW9uKTtcbn1cblxudmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9IHtcbiAgX2VuYWJsZWQ6IHRydWUsXG4gIF9oYW5kbGVUb3BMZXZlbDogbnVsbCxcblxuICBXSU5ET1dfSEFORExFOiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyB3aW5kb3cgOiBudWxsLFxuXG4gIHNldEhhbmRsZVRvcExldmVsOiBmdW5jdGlvbiAoaGFuZGxlVG9wTGV2ZWwpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsID0gaGFuZGxlVG9wTGV2ZWw7XG4gIH0sXG5cbiAgc2V0RW5hYmxlZDogZnVuY3Rpb24gKGVuYWJsZWQpIHtcbiAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQgPSAhIWVuYWJsZWQ7XG4gIH0sXG5cbiAgaXNFbmFibGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZDtcbiAgfSxcblxuICAvKipcbiAgICogVHJhcHMgdG9wLWxldmVsIGV2ZW50cyBieSB1c2luZyBldmVudCBidWJibGluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRvcExldmVsVHlwZSBSZWNvcmQgZnJvbSBgRXZlbnRDb25zdGFudHNgLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlckJhc2VOYW1lIEV2ZW50IG5hbWUgKGUuZy4gXCJjbGlja1wiKS5cbiAgICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnQgRWxlbWVudCBvbiB3aGljaCB0byBhdHRhY2ggbGlzdGVuZXIuXG4gICAqIEByZXR1cm4gez9vYmplY3R9IEFuIG9iamVjdCB3aXRoIGEgcmVtb3ZlIGZ1bmN0aW9uIHdoaWNoIHdpbGwgZm9yY2VmdWxseVxuICAgKiAgICAgICAgICAgICAgICAgIHJlbW92ZSB0aGUgbGlzdGVuZXIuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgdHJhcEJ1YmJsZWRFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEV2ZW50TGlzdGVuZXIubGlzdGVuKGVsZW1lbnQsIGhhbmRsZXJCYXNlTmFtZSwgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpKTtcbiAgfSxcblxuICAvKipcbiAgICogVHJhcHMgYSB0b3AtbGV2ZWwgZXZlbnQgYnkgdXNpbmcgZXZlbnQgY2FwdHVyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdG9wTGV2ZWxUeXBlIFJlY29yZCBmcm9tIGBFdmVudENvbnN0YW50c2AuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBoYW5kbGVyQmFzZU5hbWUgRXZlbnQgbmFtZSAoZS5nLiBcImNsaWNrXCIpLlxuICAgKiBAcGFyYW0ge29iamVjdH0gZWxlbWVudCBFbGVtZW50IG9uIHdoaWNoIHRvIGF0dGFjaCBsaXN0ZW5lci5cbiAgICogQHJldHVybiB7P29iamVjdH0gQW4gb2JqZWN0IHdpdGggYSByZW1vdmUgZnVuY3Rpb24gd2hpY2ggd2lsbCBmb3JjZWZ1bGx5XG4gICAqICAgICAgICAgICAgICAgICAgcmVtb3ZlIHRoZSBsaXN0ZW5lci5cbiAgICogQGludGVybmFsXG4gICAqL1xuICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24gKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBlbGVtZW50KSB7XG4gICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIEV2ZW50TGlzdGVuZXIuY2FwdHVyZShlbGVtZW50LCBoYW5kbGVyQmFzZU5hbWUsIFJlYWN0RXZlbnRMaXN0ZW5lci5kaXNwYXRjaEV2ZW50LmJpbmQobnVsbCwgdG9wTGV2ZWxUeXBlKSk7XG4gIH0sXG5cbiAgbW9uaXRvclNjcm9sbFZhbHVlOiBmdW5jdGlvbiAocmVmcmVzaCkge1xuICAgIHZhciBjYWxsYmFjayA9IHNjcm9sbFZhbHVlTW9uaXRvci5iaW5kKG51bGwsIHJlZnJlc2gpO1xuICAgIEV2ZW50TGlzdGVuZXIubGlzdGVuKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGxiYWNrKTtcbiAgfSxcblxuICBkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAgIGlmICghUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGJvb2tLZWVwaW5nID0gVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLmdldFBvb2xlZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgICB0cnkge1xuICAgICAgLy8gRXZlbnQgcXVldWUgYmVpbmcgcHJvY2Vzc2VkIGluIHRoZSBzYW1lIGN5Y2xlIGFsbG93c1xuICAgICAgLy8gYHByZXZlbnREZWZhdWx0YC5cbiAgICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhoYW5kbGVUb3BMZXZlbEltcGwsIGJvb2tLZWVwaW5nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLnJlbGVhc2UoYm9va0tlZXBpbmcpO1xuICAgIH1cbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEV2ZW50TGlzdGVuZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RFdmVudExpc3RlbmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxMzlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RGZWF0dXJlRmxhZ3MgPSB7XG4gIC8vIFdoZW4gdHJ1ZSwgY2FsbCBjb25zb2xlLnRpbWUoKSBiZWZvcmUgYW5kIC50aW1lRW5kKCkgYWZ0ZXIgZWFjaCB0b3AtbGV2ZWxcbiAgLy8gcmVuZGVyIChib3RoIGluaXRpYWwgcmVuZGVycyBhbmQgdXBkYXRlcykuIFVzZWZ1bCB3aGVuIGxvb2tpbmcgYXQgcHJvZC1tb2RlXG4gIC8vIHRpbWVsaW5lIHByb2ZpbGVzIGluIENocm9tZSwgZm9yIGV4YW1wbGUuXG4gIGxvZ1RvcExldmVsUmVuZGVyczogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RGZWF0dXJlRmxhZ3M7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RGZWF0dXJlRmxhZ3MuanNcbi8vIG1vZHVsZSBpZCA9IDE0MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE2LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoaXN0b3J5ID0gW107XG5cbnZhciBSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vayA9IHtcbiAgb25Ib3N0T3BlcmF0aW9uOiBmdW5jdGlvbiAob3BlcmF0aW9uKSB7XG4gICAgaGlzdG9yeS5wdXNoKG9wZXJhdGlvbik7XG4gIH0sXG4gIGNsZWFySGlzdG9yeTogZnVuY3Rpb24gKCkge1xuICAgIGlmIChSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vay5fcHJldmVudENsZWFyaW5nKSB7XG4gICAgICAvLyBTaG91bGQgb25seSBiZSB1c2VkIGZvciB0ZXN0cy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBoaXN0b3J5ID0gW107XG4gIH0sXG4gIGdldEhpc3Rvcnk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaGlzdG9yeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vaztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdEhvc3RPcGVyYXRpb25IaXN0b3J5SG9vay5qc1xuLy8gbW9kdWxlIGlkID0gMTQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5IdWInKTtcbnZhciBFdmVudFBsdWdpblV0aWxzID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpblV0aWxzJyk7XG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RW1wdHlDb21wb25lbnQnKTtcbnZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicpO1xudmFyIFJlYWN0SG9zdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RIb3N0Q29tcG9uZW50Jyk7XG52YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcblxudmFyIFJlYWN0SW5qZWN0aW9uID0ge1xuICBDb21wb25lbnQ6IFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQuaW5qZWN0aW9uLFxuICBET01Qcm9wZXJ0eTogRE9NUHJvcGVydHkuaW5qZWN0aW9uLFxuICBFbXB0eUNvbXBvbmVudDogUmVhY3RFbXB0eUNvbXBvbmVudC5pbmplY3Rpb24sXG4gIEV2ZW50UGx1Z2luSHViOiBFdmVudFBsdWdpbkh1Yi5pbmplY3Rpb24sXG4gIEV2ZW50UGx1Z2luVXRpbHM6IEV2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLFxuICBFdmVudEVtaXR0ZXI6IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pbmplY3Rpb24sXG4gIEhvc3RDb21wb25lbnQ6IFJlYWN0SG9zdENvbXBvbmVudC5pbmplY3Rpb24sXG4gIFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5pbmplY3Rpb25cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RJbmplY3Rpb247XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RJbmplY3Rpb24uanNcbi8vIG1vZHVsZSBpZCA9IDE0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE2LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcHJvY2Vzc2luZ0NoaWxkQ29udGV4dCA9IGZhbHNlO1xuXG4gIHZhciB3YXJuSW52YWxpZFNldFN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFwcm9jZXNzaW5nQ2hpbGRDb250ZXh0LCAnc2V0U3RhdGUoLi4uKTogQ2Fubm90IGNhbGwgc2V0U3RhdGUoKSBpbnNpZGUgZ2V0Q2hpbGRDb250ZXh0KCknKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxudmFyIFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2sgPSB7XG4gIG9uQmVnaW5Qcm9jZXNzaW5nQ2hpbGRDb250ZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzc2luZ0NoaWxkQ29udGV4dCA9IHRydWU7XG4gIH0sXG4gIG9uRW5kUHJvY2Vzc2luZ0NoaWxkQ29udGV4dDogZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3NpbmdDaGlsZENvbnRleHQgPSBmYWxzZTtcbiAgfSxcbiAgb25TZXRTdGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHdhcm5JbnZhbGlkU2V0U3RhdGUoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdIb29rO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0hvb2suanNcbi8vIG1vZHVsZSBpZCA9IDE0M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgYWRsZXIzMiA9IHJlcXVpcmUoJy4vYWRsZXIzMicpO1xuXG52YXIgVEFHX0VORCA9IC9cXC8/Pi87XG52YXIgQ09NTUVOVF9TVEFSVCA9IC9ePFxcIVxcLVxcLS87XG5cbnZhciBSZWFjdE1hcmt1cENoZWNrc3VtID0ge1xuICBDSEVDS1NVTV9BVFRSX05BTUU6ICdkYXRhLXJlYWN0LWNoZWNrc3VtJyxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCBNYXJrdXAgc3RyaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ30gTWFya3VwIHN0cmluZyB3aXRoIGNoZWNrc3VtIGF0dHJpYnV0ZSBhdHRhY2hlZFxuICAgKi9cbiAgYWRkQ2hlY2tzdW1Ub01hcmt1cDogZnVuY3Rpb24gKG1hcmt1cCkge1xuICAgIHZhciBjaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcblxuICAgIC8vIEFkZCBjaGVja3N1bSAoaGFuZGxlIGJvdGggcGFyZW50IHRhZ3MsIGNvbW1lbnRzIGFuZCBzZWxmLWNsb3NpbmcgdGFncylcbiAgICBpZiAoQ09NTUVOVF9TVEFSVC50ZXN0KG1hcmt1cCkpIHtcbiAgICAgIHJldHVybiBtYXJrdXA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXJrdXAucmVwbGFjZShUQUdfRU5ELCAnICcgKyBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSArICc9XCInICsgY2hlY2tzdW0gKyAnXCIkJicpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1hcmt1cCB0byB1c2VcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHJvb3QgUmVhY3QgZWxlbWVudFxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciBvciBub3QgdGhlIG1hcmt1cCBpcyB0aGUgc2FtZVxuICAgKi9cbiAgY2FuUmV1c2VNYXJrdXA6IGZ1bmN0aW9uIChtYXJrdXAsIGVsZW1lbnQpIHtcbiAgICB2YXIgZXhpc3RpbmdDaGVja3N1bSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FKTtcbiAgICBleGlzdGluZ0NoZWNrc3VtID0gZXhpc3RpbmdDaGVja3N1bSAmJiBwYXJzZUludChleGlzdGluZ0NoZWNrc3VtLCAxMCk7XG4gICAgdmFyIG1hcmt1cENoZWNrc3VtID0gYWRsZXIzMihtYXJrdXApO1xuICAgIHJldHVybiBtYXJrdXBDaGVja3N1bSA9PT0gZXhpc3RpbmdDaGVja3N1bTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1hcmt1cENoZWNrc3VtO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0TWFya3VwQ2hlY2tzdW0uanNcbi8vIG1vZHVsZSBpZCA9IDE0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Q3VycmVudE93bmVyJyk7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbnZhciBSZWFjdENoaWxkUmVjb25jaWxlciA9IHJlcXVpcmUoJy4vUmVhY3RDaGlsZFJlY29uY2lsZXInKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgZmxhdHRlbkNoaWxkcmVuID0gcmVxdWlyZSgnLi9mbGF0dGVuQ2hpbGRyZW4nKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBNYWtlIGFuIHVwZGF0ZSBmb3IgbWFya3VwIHRvIGJlIHJlbmRlcmVkIGFuZCBpbnNlcnRlZCBhdCBhIHN1cHBsaWVkIGluZGV4LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRoYXQgcmVuZGVycyBpbnRvIGFuIGVsZW1lbnQuXG4gKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIG1ha2VJbnNlcnRNYXJrdXAobWFya3VwLCBhZnRlck5vZGUsIHRvSW5kZXgpIHtcbiAgLy8gTk9URTogTnVsbCB2YWx1ZXMgcmVkdWNlIGhpZGRlbiBjbGFzc2VzLlxuICByZXR1cm4ge1xuICAgIHR5cGU6ICdJTlNFUlRfTUFSS1VQJyxcbiAgICBjb250ZW50OiBtYXJrdXAsXG4gICAgZnJvbUluZGV4OiBudWxsLFxuICAgIGZyb21Ob2RlOiBudWxsLFxuICAgIHRvSW5kZXg6IHRvSW5kZXgsXG4gICAgYWZ0ZXJOb2RlOiBhZnRlck5vZGVcbiAgfTtcbn1cblxuLyoqXG4gKiBNYWtlIGFuIHVwZGF0ZSBmb3IgbW92aW5nIGFuIGV4aXN0aW5nIGVsZW1lbnQgdG8gYW5vdGhlciBpbmRleC5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gZnJvbUluZGV4IFNvdXJjZSBpbmRleCBvZiB0aGUgZXhpc3RpbmcgZWxlbWVudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSB0b0luZGV4IERlc3RpbmF0aW9uIGluZGV4IG9mIHRoZSBlbGVtZW50LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbWFrZU1vdmUoY2hpbGQsIGFmdGVyTm9kZSwgdG9JbmRleCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ01PVkVfRVhJU1RJTkcnLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBjaGlsZC5fbW91bnRJbmRleCxcbiAgICBmcm9tTm9kZTogUmVhY3RSZWNvbmNpbGVyLmdldEhvc3ROb2RlKGNoaWxkKSxcbiAgICB0b0luZGV4OiB0b0luZGV4LFxuICAgIGFmdGVyTm9kZTogYWZ0ZXJOb2RlXG4gIH07XG59XG5cbi8qKlxuICogTWFrZSBhbiB1cGRhdGUgZm9yIHJlbW92aW5nIGFuIGVsZW1lbnQgYXQgYW4gaW5kZXguXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBJbmRleCBvZiB0aGUgZWxlbWVudCB0byByZW1vdmUuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBtYWtlUmVtb3ZlKGNoaWxkLCBub2RlKSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnUkVNT1ZFX05PREUnLFxuICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgZnJvbUluZGV4OiBjaGlsZC5fbW91bnRJbmRleCxcbiAgICBmcm9tTm9kZTogbm9kZSxcbiAgICB0b0luZGV4OiBudWxsLFxuICAgIGFmdGVyTm9kZTogbnVsbFxuICB9O1xufVxuXG4vKipcbiAqIE1ha2UgYW4gdXBkYXRlIGZvciBzZXR0aW5nIHRoZSBtYXJrdXAgb2YgYSBub2RlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtYXJrdXAgTWFya3VwIHRoYXQgcmVuZGVycyBpbnRvIGFuIGVsZW1lbnQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBtYWtlU2V0TWFya3VwKG1hcmt1cCkge1xuICAvLyBOT1RFOiBOdWxsIHZhbHVlcyByZWR1Y2UgaGlkZGVuIGNsYXNzZXMuXG4gIHJldHVybiB7XG4gICAgdHlwZTogJ1NFVF9NQVJLVVAnLFxuICAgIGNvbnRlbnQ6IG1hcmt1cCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgZnJvbU5vZGU6IG51bGwsXG4gICAgdG9JbmRleDogbnVsbCxcbiAgICBhZnRlck5vZGU6IG51bGxcbiAgfTtcbn1cblxuLyoqXG4gKiBNYWtlIGFuIHVwZGF0ZSBmb3Igc2V0dGluZyB0aGUgdGV4dCBjb250ZW50LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0Q29udGVudCBUZXh0IGNvbnRlbnQgdG8gc2V0LlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbWFrZVRleHRDb250ZW50KHRleHRDb250ZW50KSB7XG4gIC8vIE5PVEU6IE51bGwgdmFsdWVzIHJlZHVjZSBoaWRkZW4gY2xhc3Nlcy5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnVEVYVF9DT05URU5UJyxcbiAgICBjb250ZW50OiB0ZXh0Q29udGVudCxcbiAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgZnJvbU5vZGU6IG51bGwsXG4gICAgdG9JbmRleDogbnVsbCxcbiAgICBhZnRlck5vZGU6IG51bGxcbiAgfTtcbn1cblxuLyoqXG4gKiBQdXNoIGFuIHVwZGF0ZSwgaWYgYW55LCBvbnRvIHRoZSBxdWV1ZS4gQ3JlYXRlcyBhIG5ldyBxdWV1ZSBpZiBub25lIGlzXG4gKiBwYXNzZWQgYW5kIGFsd2F5cyByZXR1cm5zIHRoZSBxdWV1ZS4gTXV0YXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGVucXVldWUocXVldWUsIHVwZGF0ZSkge1xuICBpZiAodXBkYXRlKSB7XG4gICAgcXVldWUgPSBxdWV1ZSB8fCBbXTtcbiAgICBxdWV1ZS5wdXNoKHVwZGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHF1ZXVlO1xufVxuXG4vKipcbiAqIFByb2Nlc3NlcyBhbnkgZW5xdWV1ZWQgdXBkYXRlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBwcm9jZXNzUXVldWUoaW5zdCwgdXBkYXRlUXVldWUpIHtcbiAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5wcm9jZXNzQ2hpbGRyZW5VcGRhdGVzKGluc3QsIHVwZGF0ZVF1ZXVlKTtcbn1cblxudmFyIHNldENoaWxkcmVuRm9ySW5zdHJ1bWVudGF0aW9uID0gZW1wdHlGdW5jdGlvbjtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBnZXREZWJ1Z0lEID0gZnVuY3Rpb24gKGluc3QpIHtcbiAgICBpZiAoIWluc3QuX2RlYnVnSUQpIHtcbiAgICAgIC8vIENoZWNrIGZvciBBUlQtbGlrZSBpbnN0YW5jZXMuIFRPRE86IFRoaXMgaXMgc2lsbHkvZ3Jvc3MuXG4gICAgICB2YXIgaW50ZXJuYWw7XG4gICAgICBpZiAoaW50ZXJuYWwgPSBSZWFjdEluc3RhbmNlTWFwLmdldChpbnN0KSkge1xuICAgICAgICBpbnN0ID0gaW50ZXJuYWw7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbnN0Ll9kZWJ1Z0lEO1xuICB9O1xuICBzZXRDaGlsZHJlbkZvckluc3RydW1lbnRhdGlvbiA9IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICAgIHZhciBkZWJ1Z0lEID0gZ2V0RGVidWdJRCh0aGlzKTtcbiAgICAvLyBUT0RPOiBSZWFjdCBOYXRpdmUgZW1wdHkgY29tcG9uZW50cyBhcmUgYWxzbyBtdWx0aWNoaWxkLlxuICAgIC8vIFRoaXMgbWVhbnMgdGhleSBzdGlsbCBnZXQgaW50byB0aGlzIG1ldGhvZCBidXQgZG9uJ3QgaGF2ZSBfZGVidWdJRC5cbiAgICBpZiAoZGVidWdJRCAhPT0gMCkge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0Q2hpbGRyZW4oZGVidWdJRCwgY2hpbGRyZW4gPyBPYmplY3Qua2V5cyhjaGlsZHJlbikubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuW2tleV0uX2RlYnVnSUQ7XG4gICAgICB9KSA6IFtdKTtcbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogUmVhY3RNdWx0aUNoaWxkIGFyZSBjYXBhYmxlIG9mIHJlY29uY2lsaW5nIG11bHRpcGxlIGNoaWxkcmVuLlxuICpcbiAqIEBjbGFzcyBSZWFjdE11bHRpQ2hpbGRcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RNdWx0aUNoaWxkID0ge1xuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBjb21tb24gZnVuY3Rpb25hbGl0eSBmb3IgY29tcG9uZW50cyB0aGF0IG11c3QgcmVjb25jaWxlIG11bHRpcGxlXG4gICAqIGNoaWxkcmVuLiBUaGlzIGlzIHVzZWQgYnkgYFJlYWN0RE9NQ29tcG9uZW50YCB0byBtb3VudCwgdXBkYXRlLCBhbmRcbiAgICogdW5tb3VudCBjaGlsZCBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAbGVuZHMge1JlYWN0TXVsdGlDaGlsZC5wcm90b3R5cGV9XG4gICAqL1xuICBNaXhpbjoge1xuXG4gICAgX3JlY29uY2lsZXJJbnN0YW50aWF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAobmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgc2VsZkRlYnVnSUQgPSBnZXREZWJ1Z0lEKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCwgc2VsZkRlYnVnSUQpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgfSxcblxuICAgIF9yZWNvbmNpbGVyVXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChwcmV2Q2hpbGRyZW4sIG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCBtb3VudEltYWdlcywgcmVtb3ZlZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIG5leHRDaGlsZHJlbjtcbiAgICAgIHZhciBzZWxmRGVidWdJRCA9IDA7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBzZWxmRGVidWdJRCA9IGdldERlYnVnSUQodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICAgICAgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCBzZWxmRGVidWdJRCk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgbW91bnRJbWFnZXMsIHJlbW92ZWROb2RlcywgdHJhbnNhY3Rpb24sIHRoaXMsIHRoaXMuX2hvc3RDb250YWluZXJJbmZvLCBjb250ZXh0LCBzZWxmRGVidWdJRCk7XG4gICAgICAgICAgcmV0dXJuIG5leHRDaGlsZHJlbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV4dENoaWxkcmVuID0gZmxhdHRlbkNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCBzZWxmRGVidWdJRCk7XG4gICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgbW91bnRJbWFnZXMsIHJlbW92ZWROb2RlcywgdHJhbnNhY3Rpb24sIHRoaXMsIHRoaXMuX2hvc3RDb250YWluZXJJbmZvLCBjb250ZXh0LCBzZWxmRGVidWdJRCk7XG4gICAgICByZXR1cm4gbmV4dENoaWxkcmVuO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBcIm1vdW50IGltYWdlXCIgZm9yIGVhY2ggb2YgdGhlIHN1cHBsaWVkIGNoaWxkcmVuLiBJbiB0aGUgY2FzZVxuICAgICAqIG9mIGBSZWFjdERPTUNvbXBvbmVudGAsIGEgbW91bnQgaW1hZ2UgaXMgYSBzdHJpbmcgb2YgbWFya3VwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHs/b2JqZWN0fSBuZXN0ZWRDaGlsZHJlbiBOZXN0ZWQgY2hpbGQgbWFwcy5cbiAgICAgKiBAcmV0dXJuIHthcnJheX0gQW4gYXJyYXkgb2YgbW91bnRlZCByZXByZXNlbnRhdGlvbnMuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgbW91bnRDaGlsZHJlbjogZnVuY3Rpb24gKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5fcmVjb25jaWxlckluc3RhbnRpYXRlQ2hpbGRyZW4obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBjaGlsZHJlbjtcblxuICAgICAgdmFyIG1vdW50SW1hZ2VzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZHJlbikge1xuICAgICAgICBpZiAoY2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuYW1lXTtcbiAgICAgICAgICB2YXIgc2VsZkRlYnVnSUQgPSAwO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBzZWxmRGVidWdJRCA9IGdldERlYnVnSUQodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCB0cmFuc2FjdGlvbiwgdGhpcywgdGhpcy5faG9zdENvbnRhaW5lckluZm8sIGNvbnRleHQsIHNlbGZEZWJ1Z0lEKTtcbiAgICAgICAgICBjaGlsZC5fbW91bnRJbmRleCA9IGluZGV4Kys7XG4gICAgICAgICAgbW91bnRJbWFnZXMucHVzaChtb3VudEltYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBzZXRDaGlsZHJlbkZvckluc3RydW1lbnRhdGlvbi5jYWxsKHRoaXMsIGNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1vdW50SW1hZ2VzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBhbnkgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIHRleHQgY29udGVudCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmV4dENvbnRlbnQgU3RyaW5nIG9mIGNvbnRlbnQuXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdXBkYXRlVGV4dENvbnRlbnQ6IGZ1bmN0aW9uIChuZXh0Q29udGVudCkge1xuICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAvLyBSZW1vdmUgYW55IHJlbmRlcmVkIGNoaWxkcmVuLlxuICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbiwgZmFsc2UpO1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGVUZXh0Q29udGVudCBjYWxsZWQgb24gbm9uLWVtcHR5IGNvbXBvbmVudC4nKSA6IF9wcm9kSW52YXJpYW50KCcxMTgnKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IG5ldyB0ZXh0IGNvbnRlbnQuXG4gICAgICB2YXIgdXBkYXRlcyA9IFttYWtlVGV4dENvbnRlbnQobmV4dENvbnRlbnQpXTtcbiAgICAgIHByb2Nlc3NRdWV1ZSh0aGlzLCB1cGRhdGVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZXMgYW55IHJlbmRlcmVkIGNoaWxkcmVuIHdpdGggYSBtYXJrdXAgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5leHRNYXJrdXAgU3RyaW5nIG9mIG1hcmt1cC5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICB1cGRhdGVNYXJrdXA6IGZ1bmN0aW9uIChuZXh0TWFya3VwKSB7XG4gICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgIC8vIFJlbW92ZSBhbnkgcmVuZGVyZWQgY2hpbGRyZW4uXG4gICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuLCBmYWxzZSk7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VwZGF0ZVRleHRDb250ZW50IGNhbGxlZCBvbiBub24tZW1wdHkgY29tcG9uZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzExOCcpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdXBkYXRlcyA9IFttYWtlU2V0TWFya3VwKG5leHRNYXJrdXApXTtcbiAgICAgIHByb2Nlc3NRdWV1ZSh0aGlzLCB1cGRhdGVzKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBuZXcgY2hpbGRyZW4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzIE5lc3RlZCBjaGlsZCBlbGVtZW50IG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbiAobmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAvLyBIb29rIHVzZWQgYnkgUmVhY3QgQVJUXG4gICAgICB0aGlzLl91cGRhdGVDaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzIE5lc3RlZCBjaGlsZCBlbGVtZW50IG1hcHMuXG4gICAgICogQHBhcmFtIHtSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9ufSB0cmFuc2FjdGlvblxuICAgICAqIEBmaW5hbFxuICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgKi9cbiAgICBfdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uIChuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgdmFyIHJlbW92ZWROb2RlcyA9IHt9O1xuICAgICAgdmFyIG1vdW50SW1hZ2VzID0gW107XG4gICAgICB2YXIgbmV4dENoaWxkcmVuID0gdGhpcy5fcmVjb25jaWxlclVwZGF0ZUNoaWxkcmVuKHByZXZDaGlsZHJlbiwgbmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIG1vdW50SW1hZ2VzLCByZW1vdmVkTm9kZXMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIGlmICghbmV4dENoaWxkcmVuICYmICFwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHVwZGF0ZXMgPSBudWxsO1xuICAgICAgdmFyIG5hbWU7XG4gICAgICAvLyBgbmV4dEluZGV4YCB3aWxsIGluY3JlbWVudCBmb3IgZWFjaCBjaGlsZCBpbiBgbmV4dENoaWxkcmVuYCwgYnV0XG4gICAgICAvLyBgbGFzdEluZGV4YCB3aWxsIGJlIHRoZSBsYXN0IGluZGV4IHZpc2l0ZWQgaW4gYHByZXZDaGlsZHJlbmAuXG4gICAgICB2YXIgbmV4dEluZGV4ID0gMDtcbiAgICAgIHZhciBsYXN0SW5kZXggPSAwO1xuICAgICAgLy8gYG5leHRNb3VudEluZGV4YCB3aWxsIGluY3JlbWVudCBmb3IgZWFjaCBuZXdseSBtb3VudGVkIGNoaWxkLlxuICAgICAgdmFyIG5leHRNb3VudEluZGV4ID0gMDtcbiAgICAgIHZhciBsYXN0UGxhY2VkTm9kZSA9IG51bGw7XG4gICAgICBmb3IgKG5hbWUgaW4gbmV4dENoaWxkcmVuKSB7XG4gICAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZDaGlsZCA9IHByZXZDaGlsZHJlbiAmJiBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIHZhciBuZXh0Q2hpbGQgPSBuZXh0Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgIGlmIChwcmV2Q2hpbGQgPT09IG5leHRDaGlsZCkge1xuICAgICAgICAgIHVwZGF0ZXMgPSBlbnF1ZXVlKHVwZGF0ZXMsIHRoaXMubW92ZUNoaWxkKHByZXZDaGlsZCwgbGFzdFBsYWNlZE5vZGUsIG5leHRJbmRleCwgbGFzdEluZGV4KSk7XG4gICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgIHByZXZDaGlsZC5fbW91bnRJbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJldkNoaWxkKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgYGxhc3RJbmRleGAgYmVmb3JlIGBfbW91bnRJbmRleGAgZ2V0cyB1bnNldCBieSB1bm1vdW50aW5nLlxuICAgICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgICAgLy8gVGhlIGByZW1vdmVkTm9kZXNgIGxvb3AgYmVsb3cgd2lsbCBhY3R1YWxseSByZW1vdmUgdGhlIGNoaWxkLlxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBUaGUgY2hpbGQgbXVzdCBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0J3MgbW91bnRlZC5cbiAgICAgICAgICB1cGRhdGVzID0gZW5xdWV1ZSh1cGRhdGVzLCB0aGlzLl9tb3VudENoaWxkQXRJbmRleChuZXh0Q2hpbGQsIG1vdW50SW1hZ2VzW25leHRNb3VudEluZGV4XSwgbGFzdFBsYWNlZE5vZGUsIG5leHRJbmRleCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpKTtcbiAgICAgICAgICBuZXh0TW91bnRJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIG5leHRJbmRleCsrO1xuICAgICAgICBsYXN0UGxhY2VkTm9kZSA9IFJlYWN0UmVjb25jaWxlci5nZXRIb3N0Tm9kZShuZXh0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIGNoaWxkcmVuIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LlxuICAgICAgZm9yIChuYW1lIGluIHJlbW92ZWROb2Rlcykge1xuICAgICAgICBpZiAocmVtb3ZlZE5vZGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgdXBkYXRlcyA9IGVucXVldWUodXBkYXRlcywgdGhpcy5fdW5tb3VudENoaWxkKHByZXZDaGlsZHJlbltuYW1lXSwgcmVtb3ZlZE5vZGVzW25hbWVdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh1cGRhdGVzKSB7XG4gICAgICAgIHByb2Nlc3NRdWV1ZSh0aGlzLCB1cGRhdGVzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW47XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHNldENoaWxkcmVuRm9ySW5zdHJ1bWVudGF0aW9uLmNhbGwodGhpcywgbmV4dENoaWxkcmVuKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogVW5tb3VudHMgYWxsIHJlbmRlcmVkIGNoaWxkcmVuLiBUaGlzIHNob3VsZCBiZSB1c2VkIHRvIGNsZWFuIHVwIGNoaWxkcmVuXG4gICAgICogd2hlbiB0aGlzIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQuIEl0IGRvZXMgbm90IGFjdHVhbGx5IHBlcmZvcm0gYW55XG4gICAgICogYmFja2VuZCBvcGVyYXRpb25zLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbiAoc2FmZWx5KSB7XG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocmVuZGVyZWRDaGlsZHJlbiwgc2FmZWx5KTtcbiAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3ZlcyBhIGNoaWxkIGNvbXBvbmVudCB0byB0aGUgc3VwcGxpZWQgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlYWN0Q29tcG9uZW50fSBjaGlsZCBDb21wb25lbnQgdG8gbW92ZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdG9JbmRleCBEZXN0aW5hdGlvbiBpbmRleCBvZiB0aGUgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbGFzdEluZGV4IExhc3QgaW5kZXggdmlzaXRlZCBvZiB0aGUgc2libGluZ3Mgb2YgYGNoaWxkYC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgbW92ZUNoaWxkOiBmdW5jdGlvbiAoY2hpbGQsIGFmdGVyTm9kZSwgdG9JbmRleCwgbGFzdEluZGV4KSB7XG4gICAgICAvLyBJZiB0aGUgaW5kZXggb2YgYGNoaWxkYCBpcyBsZXNzIHRoYW4gYGxhc3RJbmRleGAsIHRoZW4gaXQgbmVlZHMgdG9cbiAgICAgIC8vIGJlIG1vdmVkLiBPdGhlcndpc2UsIHdlIGRvIG5vdCBuZWVkIHRvIG1vdmUgaXQgYmVjYXVzZSBhIGNoaWxkIHdpbGwgYmVcbiAgICAgIC8vIGluc2VydGVkIG9yIG1vdmVkIGJlZm9yZSBgY2hpbGRgLlxuICAgICAgaWYgKGNoaWxkLl9tb3VudEluZGV4IDwgbGFzdEluZGV4KSB7XG4gICAgICAgIHJldHVybiBtYWtlTW92ZShjaGlsZCwgYWZ0ZXJOb2RlLCB0b0luZGV4KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENvbXBvbmVudCB0byBjcmVhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vdW50SW1hZ2UgTWFya3VwIHRvIGluc2VydC5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgY3JlYXRlQ2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCwgYWZ0ZXJOb2RlLCBtb3VudEltYWdlKSB7XG4gICAgICByZXR1cm4gbWFrZUluc2VydE1hcmt1cChtb3VudEltYWdlLCBhZnRlck5vZGUsIGNoaWxkLl9tb3VudEluZGV4KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNoaWxkIENoaWxkIHRvIHJlbW92ZS5cbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgcmVtb3ZlQ2hpbGQ6IGZ1bmN0aW9uIChjaGlsZCwgbm9kZSkge1xuICAgICAgcmV0dXJuIG1ha2VSZW1vdmUoY2hpbGQsIG5vZGUpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNb3VudHMgYSBjaGlsZCB3aXRoIHRoZSBzdXBwbGllZCBuYW1lLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBpcyBwYXJ0IG9mIGB1cGRhdGVDaGlsZHJlbmAgYW5kIGlzIGhlcmUgZm9yIHJlYWRhYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIG1vdW50LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGNoaWxkLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBJbmRleCBhdCB3aGljaCB0byBpbnNlcnQgdGhlIGNoaWxkLlxuICAgICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9tb3VudENoaWxkQXRJbmRleDogZnVuY3Rpb24gKGNoaWxkLCBtb3VudEltYWdlLCBhZnRlck5vZGUsIGluZGV4LCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBpbmRleDtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNoaWxkKGNoaWxkLCBhZnRlck5vZGUsIG1vdW50SW1hZ2UpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVbm1vdW50cyBhIHJlbmRlcmVkIGNoaWxkLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBpcyBwYXJ0IG9mIGB1cGRhdGVDaGlsZHJlbmAgYW5kIGlzIGhlcmUgZm9yIHJlYWRhYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY2hpbGQgQ29tcG9uZW50IHRvIHVubW91bnQuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdW5tb3VudENoaWxkOiBmdW5jdGlvbiAoY2hpbGQsIG5vZGUpIHtcbiAgICAgIHZhciB1cGRhdGUgPSB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkLCBub2RlKTtcbiAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gbnVsbDtcbiAgICAgIHJldHVybiB1cGRhdGU7XG4gICAgfVxuXG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RNdWx0aUNoaWxkLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3QnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG52YXIgUmVhY3ROb2RlVHlwZXMgPSB7XG4gIEhPU1Q6IDAsXG4gIENPTVBPU0lURTogMSxcbiAgRU1QVFk6IDIsXG5cbiAgZ2V0VHlwZTogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIFJlYWN0Tm9kZVR5cGVzLkVNUFRZO1xuICAgIH0gZWxzZSBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAgIGlmICh0eXBlb2Ygbm9kZS50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBSZWFjdE5vZGVUeXBlcy5DT01QT1NJVEU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUmVhY3ROb2RlVHlwZXMuSE9TVDtcbiAgICAgIH1cbiAgICB9XG4gICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1VuZXhwZWN0ZWQgbm9kZTogJXMnLCBub2RlKSA6IF9wcm9kSW52YXJpYW50KCcyNicsIG5vZGUpIDogdm9pZCAwO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Tm9kZVR5cGVzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0Tm9kZVR5cGVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG5cbi8qKlxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSB2YWxpZCBvd25lci5cbiAqIEBmaW5hbFxuICovXG5mdW5jdGlvbiBpc1ZhbGlkT3duZXIob2JqZWN0KSB7XG4gIHJldHVybiAhIShvYmplY3QgJiYgdHlwZW9mIG9iamVjdC5hdHRhY2hSZWYgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iamVjdC5kZXRhY2hSZWYgPT09ICdmdW5jdGlvbicpO1xufVxuXG4vKipcbiAqIFJlYWN0T3duZXJzIGFyZSBjYXBhYmxlIG9mIHN0b3JpbmcgcmVmZXJlbmNlcyB0byBvd25lZCBjb21wb25lbnRzLlxuICpcbiAqIEFsbCBjb21wb25lbnRzIGFyZSBjYXBhYmxlIG9mIC8vYmVpbmcvLyByZWZlcmVuY2VkIGJ5IG93bmVyIGNvbXBvbmVudHMsIGJ1dFxuICogb25seSBSZWFjdE93bmVyIGNvbXBvbmVudHMgYXJlIGNhcGFibGUgb2YgLy9yZWZlcmVuY2luZy8vIG93bmVkIGNvbXBvbmVudHMuXG4gKiBUaGUgbmFtZWQgcmVmZXJlbmNlIGlzIGtub3duIGFzIGEgXCJyZWZcIi5cbiAqXG4gKiBSZWZzIGFyZSBhdmFpbGFibGUgd2hlbiBtb3VudGVkIGFuZCB1cGRhdGVkIGR1cmluZyByZWNvbmNpbGlhdGlvbi5cbiAqXG4gKiAgIHZhciBNeUNvbXBvbmVudCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgcmV0dXJuIChcbiAqICAgICAgICAgPGRpdiBvbkNsaWNrPXt0aGlzLmhhbmRsZUNsaWNrfT5cbiAqICAgICAgICAgICA8Q3VzdG9tQ29tcG9uZW50IHJlZj1cImN1c3RvbVwiIC8+XG4gKiAgICAgICAgIDwvZGl2PlxuICogICAgICAgKTtcbiAqICAgICB9LFxuICogICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaGFuZGxlQ2xpY2soKTtcbiAqICAgICB9LFxuICogICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbigpIHtcbiAqICAgICAgIHRoaXMucmVmcy5jdXN0b20uaW5pdGlhbGl6ZSgpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKlxuICogUmVmcyBzaG91bGQgcmFyZWx5IGJlIHVzZWQuIFdoZW4gcmVmcyBhcmUgdXNlZCwgdGhleSBzaG91bGQgb25seSBiZSBkb25lIHRvXG4gKiBjb250cm9sIGRhdGEgdGhhdCBpcyBub3QgaGFuZGxlZCBieSBSZWFjdCdzIGRhdGEgZmxvdy5cbiAqXG4gKiBAY2xhc3MgUmVhY3RPd25lclxuICovXG52YXIgUmVhY3RPd25lciA9IHtcbiAgLyoqXG4gICAqIEFkZHMgYSBjb21wb25lbnQgYnkgcmVmIHRvIGFuIG93bmVyIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENvbXBvbmVudH0gY29tcG9uZW50IENvbXBvbmVudCB0byByZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBieSB3aGljaCB0byByZWZlciB0byB0aGUgY29tcG9uZW50LlxuICAgKiBAcGFyYW0ge1JlYWN0T3duZXJ9IG93bmVyIENvbXBvbmVudCBvbiB3aGljaCB0byByZWNvcmQgdGhlIHJlZi5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgYWRkQ29tcG9uZW50QXNSZWZUbzogZnVuY3Rpb24gKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgICFpc1ZhbGlkT3duZXIob3duZXIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2FkZENvbXBvbmVudEFzUmVmVG8oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gWW91IG1pZ2h0IGJlIGFkZGluZyBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0IHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgYSBjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCwgb3IgeW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZCAoZGV0YWlsczogaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lcikuJykgOiBfcHJvZEludmFyaWFudCgnMTE5JykgOiB2b2lkIDA7XG4gICAgb3duZXIuYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50KTtcbiAgfSxcblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBieSByZWYgZnJvbSBhbiBvd25lciBjb21wb25lbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDb21wb25lbnR9IGNvbXBvbmVudCBDb21wb25lbnQgdG8gZGVyZWZlcmVuY2UuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWYgTmFtZSBvZiB0aGUgcmVmIHRvIHJlbW92ZS5cbiAgICogQHBhcmFtIHtSZWFjdE93bmVyfSBvd25lciBDb21wb25lbnQgb24gd2hpY2ggdGhlIHJlZiBpcyByZWNvcmRlZC5cbiAgICogQGZpbmFsXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tOiBmdW5jdGlvbiAoY29tcG9uZW50LCByZWYsIG93bmVyKSB7XG4gICAgIWlzVmFsaWRPd25lcihvd25lcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFlvdSBtaWdodCBiZSByZW1vdmluZyBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0IHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgYSBjb21wb25lbnRcXCdzIGByZW5kZXJgIG1ldGhvZCwgb3IgeW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZCAoZGV0YWlsczogaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lcikuJykgOiBfcHJvZEludmFyaWFudCgnMTIwJykgOiB2b2lkIDA7XG4gICAgdmFyIG93bmVyUHVibGljSW5zdGFuY2UgPSBvd25lci5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgIC8vIENoZWNrIHRoYXQgYGNvbXBvbmVudGAncyBvd25lciBpcyBzdGlsbCBhbGl2ZSBhbmQgdGhhdCBgY29tcG9uZW50YCBpcyBzdGlsbCB0aGUgY3VycmVudCByZWZcbiAgICAvLyBiZWNhdXNlIHdlIGRvIG5vdCB3YW50IHRvIGRldGFjaCB0aGUgcmVmIGlmIGFub3RoZXIgY29tcG9uZW50IHN0b2xlIGl0LlxuICAgIGlmIChvd25lclB1YmxpY0luc3RhbmNlICYmIG93bmVyUHVibGljSW5zdGFuY2UucmVmc1tyZWZdID09PSBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSkge1xuICAgICAgb3duZXIuZGV0YWNoUmVmKHJlZik7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RPd25lcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdE93bmVyLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgcHJvcDogJ3Byb3AnLFxuICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDhcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG5cbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZSgnLi9DYWxsYmFja1F1ZXVlJyk7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdElucHV0U2VsZWN0aW9uJyk7XG52YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1RyYW5zYWN0aW9uJyk7XG52YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVRdWV1ZScpO1xuXG4vKipcbiAqIEVuc3VyZXMgdGhhdCwgd2hlbiBwb3NzaWJsZSwgdGhlIHNlbGVjdGlvbiByYW5nZSAoY3VycmVudGx5IHNlbGVjdGVkIHRleHRcbiAqIGlucHV0KSBpcyBub3QgZGlzdHVyYmVkIGJ5IHBlcmZvcm1pbmcgdGhlIHRyYW5zYWN0aW9uLlxuICovXG52YXIgU0VMRUNUSU9OX1JFU1RPUkFUSU9OID0ge1xuICAvKipcbiAgICogQHJldHVybiB7U2VsZWN0aW9ufSBTZWxlY3Rpb24gaW5mb3JtYXRpb24uXG4gICAqL1xuICBpbml0aWFsaXplOiBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbkluZm9ybWF0aW9uLFxuICAvKipcbiAgICogQHBhcmFtIHtTZWxlY3Rpb259IHNlbCBTZWxlY3Rpb24gaW5mb3JtYXRpb24gcmV0dXJuZWQgZnJvbSBgaW5pdGlhbGl6ZWAuXG4gICAqL1xuICBjbG9zZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5yZXN0b3JlU2VsZWN0aW9uXG59O1xuXG4vKipcbiAqIFN1cHByZXNzZXMgZXZlbnRzIChibHVyL2ZvY3VzKSB0aGF0IGNvdWxkIGJlIGluYWR2ZXJ0ZW50bHkgZGlzcGF0Y2hlZCBkdWUgdG9cbiAqIGhpZ2ggbGV2ZWwgRE9NIG1hbmlwdWxhdGlvbnMgKGxpa2UgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgYSB0ZXh0IGlucHV0IGZyb20gdGhlXG4gKiBET00pLlxuICovXG52YXIgRVZFTlRfU1VQUFJFU1NJT04gPSB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUaGUgZW5hYmxlZCBzdGF0dXMgb2YgYFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcmAgYmVmb3JlXG4gICAqIHRoZSByZWNvbmNpbGlhdGlvbi5cbiAgICovXG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudGx5RW5hYmxlZCA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pc0VuYWJsZWQoKTtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgcmV0dXJuIGN1cnJlbnRseUVuYWJsZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJldmlvdXNseUVuYWJsZWQgRW5hYmxlZCBzdGF0dXMgb2ZcbiAgICogICBgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyYCBiZWZvcmUgdGhlIHJlY29uY2lsaWF0aW9uIG9jY3VycmVkLiBgY2xvc2VgXG4gICAqICAgcmVzdG9yZXMgdGhlIHByZXZpb3VzIHZhbHVlLlxuICAgKi9cbiAgY2xvc2U6IGZ1bmN0aW9uIChwcmV2aW91c2x5RW5hYmxlZCkge1xuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zZXRFbmFibGVkKHByZXZpb3VzbHlFbmFibGVkKTtcbiAgfVxufTtcblxuLyoqXG4gKiBQcm92aWRlcyBhIHF1ZXVlIGZvciBjb2xsZWN0aW5nIGBjb21wb25lbnREaWRNb3VudGAgYW5kXG4gKiBgY29tcG9uZW50RGlkVXBkYXRlYCBjYWxsYmFja3MgZHVyaW5nIHRoZSB0cmFuc2FjdGlvbi5cbiAqL1xudmFyIE9OX0RPTV9SRUFEWV9RVUVVRUlORyA9IHtcbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBpbnRlcm5hbCBgb25ET01SZWFkeWAgcXVldWUuXG4gICAqL1xuICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucmVzZXQoKTtcbiAgfSxcblxuICAvKipcbiAgICogQWZ0ZXIgRE9NIGlzIGZsdXNoZWQsIGludm9rZSBhbGwgcmVnaXN0ZXJlZCBgb25ET01SZWFkeWAgY2FsbGJhY2tzLlxuICAgKi9cbiAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBFeGVjdXRlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBgVHJhbnNhY3Rpb25gIGluc3RhbmNlLiBDb25zaWRlciB0aGVzZSBhc1xuICogYmVpbmcgbWVtYmVyIG1ldGhvZHMsIGJ1dCB3aXRoIGFuIGltcGxpZWQgb3JkZXJpbmcgd2hpbGUgYmVpbmcgaXNvbGF0ZWQgZnJvbVxuICogZWFjaCBvdGhlci5cbiAqL1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW1NFTEVDVElPTl9SRVNUT1JBVElPTiwgRVZFTlRfU1VQUFJFU1NJT04sIE9OX0RPTV9SRUFEWV9RVUVVRUlOR107XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFRSQU5TQUNUSU9OX1dSQVBQRVJTLnB1c2goe1xuICAgIGluaXRpYWxpemU6IFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luRmx1c2gsXG4gICAgY2xvc2U6IFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZEZsdXNoXG4gIH0pO1xufVxuXG4vKipcbiAqIEN1cnJlbnRseTpcbiAqIC0gVGhlIG9yZGVyIHRoYXQgdGhlc2UgYXJlIGxpc3RlZCBpbiB0aGUgdHJhbnNhY3Rpb24gaXMgY3JpdGljYWw6XG4gKiAtIFN1cHByZXNzZXMgZXZlbnRzLlxuICogLSBSZXN0b3JlcyBzZWxlY3Rpb24gcmFuZ2UuXG4gKlxuICogRnV0dXJlOlxuICogLSBSZXN0b3JlIGRvY3VtZW50L292ZXJmbG93IHNjcm9sbCBwb3NpdGlvbnMgdGhhdCB3ZXJlIHVuaW50ZW50aW9uYWxseVxuICogICBtb2RpZmllZCB2aWEgRE9NIGluc2VydGlvbnMgYWJvdmUgdGhlIHRvcCB2aWV3cG9ydCBib3VuZGFyeS5cbiAqIC0gSW1wbGVtZW50L2ludGVncmF0ZSB3aXRoIGN1c3RvbWl6ZWQgY29uc3RyYWludCBiYXNlZCBsYXlvdXQgc3lzdGVtIGFuZCBrZWVwXG4gKiAgIHRyYWNrIG9mIHdoaWNoIGRpbWVuc2lvbnMgbXVzdCBiZSByZW1lYXN1cmVkLlxuICpcbiAqIEBjbGFzcyBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uXG4gKi9cbmZ1bmN0aW9uIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24odXNlQ3JlYXRlRWxlbWVudCkge1xuICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gIC8vIE9ubHkgc2VydmVyLXNpZGUgcmVuZGVyaW5nIHJlYWxseSBuZWVkcyB0aGlzIG9wdGlvbiAoc2VlXG4gIC8vIGBSZWFjdFNlcnZlclJlbmRlcmluZ2ApLCBidXQgc2VydmVyLXNpZGUgdXNlc1xuICAvLyBgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbmAgaW5zdGVhZC4gVGhpcyBvcHRpb24gaXMgaGVyZSBzbyB0aGF0IGl0J3NcbiAgLy8gYWNjZXNzaWJsZSBhbmQgZGVmYXVsdHMgdG8gZmFsc2Ugd2hlbiBgUmVhY3RET01Db21wb25lbnRgIGFuZFxuICAvLyBgUmVhY3RET01UZXh0Q29tcG9uZW50YCBjaGVja3MgaXQgaW4gYG1vdW50Q29tcG9uZW50YC5gXG4gIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSBmYWxzZTtcbiAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgdGhpcy51c2VDcmVhdGVFbGVtZW50ID0gdXNlQ3JlYXRlRWxlbWVudDtcbn1cblxudmFyIE1peGluID0ge1xuICAvKipcbiAgICogQHNlZSBUcmFuc2FjdGlvblxuICAgKiBAYWJzdHJhY3RcbiAgICogQGZpbmFsXG4gICAqIEByZXR1cm4ge2FycmF5PG9iamVjdD59IExpc3Qgb2Ygb3BlcmF0aW9uIHdyYXAgcHJvY2VkdXJlcy5cbiAgICogICBUT0RPOiBjb252ZXJ0IHRvIGFycmF5PFRyYW5zYWN0aW9uV3JhcHBlcj5cbiAgICovXG4gIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHF1ZXVlIHRvIGNvbGxlY3QgYG9uRE9NUmVhZHlgIGNhbGxiYWNrcyB3aXRoLlxuICAgKi9cbiAgZ2V0UmVhY3RNb3VudFJlYWR5OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhY3RNb3VudFJlYWR5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBxdWV1ZSB0byBjb2xsZWN0IFJlYWN0IGFzeW5jIGV2ZW50cy5cbiAgICovXG4gIGdldFVwZGF0ZVF1ZXVlOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFJlYWN0VXBkYXRlUXVldWU7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhdmUgY3VycmVudCB0cmFuc2FjdGlvbiBzdGF0ZSAtLSBpZiB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhpcyBtZXRob2QgaXNcbiAgICogcGFzc2VkIHRvIGByb2xsYmFja2AsIHRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIHJlc2V0IHRvIHRoYXQgc3RhdGUuXG4gICAqL1xuICBjaGVja3BvaW50OiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gcmVhY3RNb3VudFJlYWR5IGlzIHRoZSBvdXIgb25seSBzdGF0ZWZ1bCB3cmFwcGVyXG4gICAgcmV0dXJuIHRoaXMucmVhY3RNb3VudFJlYWR5LmNoZWNrcG9pbnQoKTtcbiAgfSxcblxuICByb2xsYmFjazogZnVuY3Rpb24gKGNoZWNrcG9pbnQpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5yb2xsYmFjayhjaGVja3BvaW50KTtcbiAgfSxcblxuICAvKipcbiAgICogYFBvb2xlZENsYXNzYCBsb29rcyBmb3IgdGhpcywgYW5kIHdpbGwgaW52b2tlIHRoaXMgYmVmb3JlIGFsbG93aW5nIHRoaXNcbiAgICogaW5zdGFuY2UgdG8gYmUgcmV1c2VkLlxuICAgKi9cbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24gKCkge1xuICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLnJlYWN0TW91bnRSZWFkeSk7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBudWxsO1xuICB9XG59O1xuXG5fYXNzaWduKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbiwgTWl4aW4pO1xuXG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RPd25lcicpO1xuXG52YXIgUmVhY3RSZWYgPSB7fTtcblxuZnVuY3Rpb24gYXR0YWNoUmVmKHJlZiwgY29tcG9uZW50LCBvd25lcikge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZihjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTGVnYWN5IHJlZlxuICAgIFJlYWN0T3duZXIuYWRkQ29tcG9uZW50QXNSZWZUbyhjb21wb25lbnQsIHJlZiwgb3duZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaFJlZihyZWYsIGNvbXBvbmVudCwgb3duZXIpIHtcbiAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZWYobnVsbCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTGVnYWN5IHJlZlxuICAgIFJlYWN0T3duZXIucmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKGNvbXBvbmVudCwgcmVmLCBvd25lcik7XG4gIH1cbn1cblxuUmVhY3RSZWYuYXR0YWNoUmVmcyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCB0eXBlb2YgZWxlbWVudCAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICBpZiAocmVmICE9IG51bGwpIHtcbiAgICBhdHRhY2hSZWYocmVmLCBpbnN0YW5jZSwgZWxlbWVudC5fb3duZXIpO1xuICB9XG59O1xuXG5SZWFjdFJlZi5zaG91bGRVcGRhdGVSZWZzID0gZnVuY3Rpb24gKHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkge1xuICAvLyBJZiBlaXRoZXIgdGhlIG93bmVyIG9yIGEgYHJlZmAgaGFzIGNoYW5nZWQsIG1ha2Ugc3VyZSB0aGUgbmV3ZXN0IG93bmVyXG4gIC8vIGhhcyBzdG9yZWQgYSByZWZlcmVuY2UgdG8gYHRoaXNgLCBhbmQgdGhlIHByZXZpb3VzIG93bmVyIChpZiBkaWZmZXJlbnQpXG4gIC8vIGhhcyBmb3Jnb3R0ZW4gdGhlIHJlZmVyZW5jZSB0byBgdGhpc2AuIFdlIHVzZSB0aGUgZWxlbWVudCBpbnN0ZWFkXG4gIC8vIG9mIHRoZSBwdWJsaWMgdGhpcy5wcm9wcyBiZWNhdXNlIHRoZSBwb3N0IHByb2Nlc3NpbmcgY2Fubm90IGRldGVybWluZVxuICAvLyBhIHJlZi4gVGhlIHJlZiBjb25jZXB0dWFsbHkgbGl2ZXMgb24gdGhlIGVsZW1lbnQuXG5cbiAgLy8gVE9ETzogU2hvdWxkIHRoaXMgZXZlbiBiZSBwb3NzaWJsZT8gVGhlIG93bmVyIGNhbm5vdCBjaGFuZ2UgYmVjYXVzZVxuICAvLyBpdCdzIGZvcmJpZGRlbiBieSBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC4gVGhlIHJlZiBjYW4gY2hhbmdlXG4gIC8vIGlmIHlvdSBzd2FwIHRoZSBrZXlzIG9mIGJ1dCBub3QgdGhlIHJlZnMuIFJlY29uc2lkZXIgd2hlcmUgdGhpcyBjaGVja1xuICAvLyBpcyBtYWRlLiBJdCBwcm9iYWJseSBiZWxvbmdzIHdoZXJlIHRoZSBrZXkgY2hlY2tpbmcgYW5kXG4gIC8vIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgaXMgZG9uZS5cblxuICB2YXIgcHJldlJlZiA9IG51bGw7XG4gIHZhciBwcmV2T3duZXIgPSBudWxsO1xuICBpZiAocHJldkVsZW1lbnQgIT09IG51bGwgJiYgdHlwZW9mIHByZXZFbGVtZW50ID09PSAnb2JqZWN0Jykge1xuICAgIHByZXZSZWYgPSBwcmV2RWxlbWVudC5yZWY7XG4gICAgcHJldk93bmVyID0gcHJldkVsZW1lbnQuX293bmVyO1xuICB9XG5cbiAgdmFyIG5leHRSZWYgPSBudWxsO1xuICB2YXIgbmV4dE93bmVyID0gbnVsbDtcbiAgaWYgKG5leHRFbGVtZW50ICE9PSBudWxsICYmIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ29iamVjdCcpIHtcbiAgICBuZXh0UmVmID0gbmV4dEVsZW1lbnQucmVmO1xuICAgIG5leHRPd25lciA9IG5leHRFbGVtZW50Ll9vd25lcjtcbiAgfVxuXG4gIHJldHVybiBwcmV2UmVmICE9PSBuZXh0UmVmIHx8XG4gIC8vIElmIG93bmVyIGNoYW5nZXMgYnV0IHdlIGhhdmUgYW4gdW5jaGFuZ2VkIGZ1bmN0aW9uIHJlZiwgZG9uJ3QgdXBkYXRlIHJlZnNcbiAgdHlwZW9mIG5leHRSZWYgPT09ICdzdHJpbmcnICYmIG5leHRPd25lciAhPT0gcHJldk93bmVyO1xufTtcblxuUmVhY3RSZWYuZGV0YWNoUmVmcyA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCB0eXBlb2YgZWxlbWVudCAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICBpZiAocmVmICE9IG51bGwpIHtcbiAgICBkZXRhY2hSZWYocmVmLCBpbnN0YW5jZSwgZWxlbWVudC5fb3duZXIpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVmO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0UmVmLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneSA9IHtcbiAgaXNCYXRjaGluZ1VwZGF0ZXM6IGZhbHNlLFxuICBiYXRjaGVkVXBkYXRlczogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaGVyZS4gRHVyaW5nIHRoZSBzZXJ2ZXIgcmVuZGVyaW5nIHdlIGRvbid0IHdhbnQgdG9cbiAgICAvLyBzY2hlZHVsZSBhbnkgdXBkYXRlcy4gV2Ugd2lsbCBzaW1wbHkgaWdub3JlIHRoZW0uXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RTZXJ2ZXJCYXRjaGluZ1N0cmF0ZWd5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneS5qc1xuLy8gbW9kdWxlIGlkID0gMTUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3QgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3QnKTtcbnZhciBSZWFjdERPTUNvbnRhaW5lckluZm8gPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29udGFpbmVySW5mbycpO1xudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3knKTtcbnZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcbnZhciBSZWFjdE1hcmt1cENoZWNrc3VtID0gcmVxdWlyZSgnLi9SZWFjdE1hcmt1cENoZWNrc3VtJyk7XG52YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbnZhciBSZWFjdFNlcnZlckJhdGNoaW5nU3RyYXRlZ3kgPSByZXF1aXJlKCcuL1JlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneScpO1xudmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24nKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuXG52YXIgZW1wdHlPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eU9iamVjdCcpO1xudmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxudmFyIHBlbmRpbmdUcmFuc2FjdGlvbnMgPSAwO1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBIVE1MIG1hcmt1cFxuICovXG5mdW5jdGlvbiByZW5kZXJUb1N0cmluZ0ltcGwoZWxlbWVudCwgbWFrZVN0YXRpY01hcmt1cCkge1xuICB2YXIgdHJhbnNhY3Rpb247XG4gIHRyeSB7XG4gICAgUmVhY3RVcGRhdGVzLmluamVjdGlvbi5pbmplY3RCYXRjaGluZ1N0cmF0ZWd5KFJlYWN0U2VydmVyQmF0Y2hpbmdTdHJhdGVneSk7XG5cbiAgICB0cmFuc2FjdGlvbiA9IFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKG1ha2VTdGF0aWNNYXJrdXApO1xuXG4gICAgcGVuZGluZ1RyYW5zYWN0aW9ucysrO1xuXG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uLnBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50LCB0cnVlKTtcbiAgICAgIHZhciBtYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRyYW5zYWN0aW9uLCBudWxsLCBSZWFjdERPTUNvbnRhaW5lckluZm8oKSwgZW1wdHlPYmplY3QsIDAgLyogcGFyZW50RGVidWdJRCAqL1xuICAgICAgKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVubW91bnRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UuX2RlYnVnSUQpO1xuICAgICAgfVxuICAgICAgaWYgKCFtYWtlU3RhdGljTWFya3VwKSB7XG4gICAgICAgIG1hcmt1cCA9IFJlYWN0TWFya3VwQ2hlY2tzdW0uYWRkQ2hlY2tzdW1Ub01hcmt1cChtYXJrdXApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hcmt1cDtcbiAgICB9LCBudWxsKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwZW5kaW5nVHJhbnNhY3Rpb25zLS07XG4gICAgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5yZWxlYXNlKHRyYW5zYWN0aW9uKTtcbiAgICAvLyBSZXZlcnQgdG8gdGhlIERPTSBiYXRjaGluZyBzdHJhdGVneSBzaW5jZSB0aGVzZSB0d28gcmVuZGVyZXJzXG4gICAgLy8gY3VycmVudGx5IHNoYXJlIHRoZXNlIHN0YXRlZnVsIG1vZHVsZXMuXG4gICAgaWYgKCFwZW5kaW5nVHJhbnNhY3Rpb25zKSB7XG4gICAgICBSZWFjdFVwZGF0ZXMuaW5qZWN0aW9uLmluamVjdEJhdGNoaW5nU3RyYXRlZ3koUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVuZGVyIGEgUmVhY3RFbGVtZW50IHRvIGl0cyBpbml0aWFsIEhUTUwuIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCBvbiB0aGVcbiAqIHNlcnZlci5cbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdGRvbXNlcnZlci5yZW5kZXJ0b3N0cmluZ1xuICovXG5mdW5jdGlvbiByZW5kZXJUb1N0cmluZyhlbGVtZW50KSB7XG4gICFSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdyZW5kZXJUb1N0cmluZygpOiBZb3UgbXVzdCBwYXNzIGEgdmFsaWQgUmVhY3RFbGVtZW50LicpIDogX3Byb2RJbnZhcmlhbnQoJzQ2JykgOiB2b2lkIDA7XG4gIHJldHVybiByZW5kZXJUb1N0cmluZ0ltcGwoZWxlbWVudCwgZmFsc2UpO1xufVxuXG4vKipcbiAqIFNpbWlsYXIgdG8gcmVuZGVyVG9TdHJpbmcsIGV4Y2VwdCB0aGlzIGRvZXNuJ3QgY3JlYXRlIGV4dHJhIERPTSBhdHRyaWJ1dGVzXG4gKiBzdWNoIGFzIGRhdGEtcmVhY3QtaWQgdGhhdCBSZWFjdCB1c2VzIGludGVybmFsbHkuXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3Rkb21zZXJ2ZXIucmVuZGVydG9zdGF0aWNtYXJrdXBcbiAqL1xuZnVuY3Rpb24gcmVuZGVyVG9TdGF0aWNNYXJrdXAoZWxlbWVudCkge1xuICAhUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVuZGVyVG9TdGF0aWNNYXJrdXAoKTogWW91IG11c3QgcGFzcyBhIHZhbGlkIFJlYWN0RWxlbWVudC4nKSA6IF9wcm9kSW52YXJpYW50KCc0NycpIDogdm9pZCAwO1xuICByZXR1cm4gcmVuZGVyVG9TdHJpbmdJbXBsKGVsZW1lbnQsIHRydWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcmVuZGVyVG9TdHJpbmc6IHJlbmRlclRvU3RyaW5nLFxuICByZW5kZXJUb1N0YXRpY01hcmt1cDogcmVuZGVyVG9TdGF0aWNNYXJrdXBcbn07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDE1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBSZWFjdFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZVF1ZXVlJyk7XG5cbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG5mdW5jdGlvbiB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBjb25zdHJ1Y3RvciA9IHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRpbmcgY29tcG9uZW50LiAnICsgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb3V0c2lkZSBjb21wb25lbnRXaWxsTW91bnQoKSBvbiB0aGUgc2VydmVyLiAnICsgJ1RoaXMgaXMgYSBuby1vcC4gUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNhbGxlck5hbWUsIGNvbnN0cnVjdG9yICYmIChjb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCBjb25zdHJ1Y3Rvci5uYW1lKSB8fCAnUmVhY3RDbGFzcycpIDogdm9pZCAwO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgdXBkYXRlIHF1ZXVlIHVzZWQgZm9yIHNlcnZlciByZW5kZXJpbmcuXG4gKiBJdCBkZWxlZ2F0ZXMgdG8gUmVhY3RVcGRhdGVRdWV1ZSB3aGlsZSBzZXJ2ZXIgcmVuZGVyaW5nIGlzIGluIHByb2dyZXNzIGFuZFxuICogc3dpdGNoZXMgdG8gUmVhY3ROb29wVXBkYXRlUXVldWUgYWZ0ZXIgdGhlIHRyYW5zYWN0aW9uIGhhcyBjb21wbGV0ZWQuXG4gKiBAY2xhc3MgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZVxuICogQHBhcmFtIHtUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAqL1xuXG52YXIgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZSh0cmFuc2FjdGlvbikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlKTtcblxuICAgIHRoaXMudHJhbnNhY3Rpb24gPSB0cmFuc2FjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3Mgd2hldGhlciBvciBub3QgdGhpcyBjb21wb3NpdGUgY29tcG9uZW50IGlzIG1vdW50ZWQuXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHdlIHdhbnQgdG8gdGVzdC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBtb3VudGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQGZpbmFsXG4gICAqL1xuXG5cbiAgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZS5wcm90b3R5cGUuaXNNb3VudGVkID0gZnVuY3Rpb24gaXNNb3VudGVkKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBFbnF1ZXVlIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIGFmdGVyIGFsbCB0aGUgcGVuZGluZyB1cGRhdGVzXG4gICAqIGhhdmUgcHJvY2Vzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0byB1c2UgYXMgYHRoaXNgIGNvbnRleHQuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgc3RhdGUgaXMgdXBkYXRlZC5cbiAgICogQGludGVybmFsXG4gICAqL1xuXG5cbiAgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZUNhbGxiYWNrID0gZnVuY3Rpb24gZW5xdWV1ZUNhbGxiYWNrKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIGlmICh0aGlzLnRyYW5zYWN0aW9uLmlzSW5UcmFuc2FjdGlvbigpKSB7XG4gICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVDYWxsYmFjayhwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2ssIGNhbGxlck5hbWUpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQGludGVybmFsXG4gICAqL1xuXG5cbiAgUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZS5wcm90b3R5cGUuZW5xdWV1ZUZvcmNlVXBkYXRlID0gZnVuY3Rpb24gZW5xdWV1ZUZvcmNlVXBkYXRlKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgaWYgKHRoaXMudHJhbnNhY3Rpb24uaXNJblRyYW5zYWN0aW9uKCkpIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUZvcmNlVXBkYXRlKHB1YmxpY0luc3RhbmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdmb3JjZVVwZGF0ZScpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVwbGFjZXMgYWxsIG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIG9yIGBzZXRTdGF0ZWAgdG8gbXV0YXRlIHN0YXRlLlxuICAgKiBZb3Ugc2hvdWxkIHRyZWF0IGB0aGlzLnN0YXRlYCBhcyBpbW11dGFibGUuXG4gICAqXG4gICAqIFRoZXJlIGlzIG5vIGd1YXJhbnRlZSB0aGF0IGB0aGlzLnN0YXRlYCB3aWxsIGJlIGltbWVkaWF0ZWx5IHVwZGF0ZWQsIHNvXG4gICAqIGFjY2Vzc2luZyBgdGhpcy5zdGF0ZWAgYWZ0ZXIgY2FsbGluZyB0aGlzIG1ldGhvZCBtYXkgcmV0dXJuIHRoZSBvbGQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdHxmdW5jdGlvbn0gY29tcGxldGVTdGF0ZSBOZXh0IHN0YXRlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cblxuICBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlUmVwbGFjZVN0YXRlID0gZnVuY3Rpb24gZW5xdWV1ZVJlcGxhY2VTdGF0ZShwdWJsaWNJbnN0YW5jZSwgY29tcGxldGVTdGF0ZSkge1xuICAgIGlmICh0aGlzLnRyYW5zYWN0aW9uLmlzSW5UcmFuc2FjdGlvbigpKSB7XG4gICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVSZXBsYWNlU3RhdGUocHVibGljSW5zdGFuY2UsIGNvbXBsZXRlU3RhdGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ3JlcGxhY2VTdGF0ZScpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogU2V0cyBhIHN1YnNldCBvZiB0aGUgc3RhdGUuIFRoaXMgb25seSBleGlzdHMgYmVjYXVzZSBfcGVuZGluZ1N0YXRlIGlzXG4gICAqIGludGVybmFsLiBUaGlzIHByb3ZpZGVzIGEgbWVyZ2luZyBzdHJhdGVneSB0aGF0IGlzIG5vdCBhdmFpbGFibGUgdG8gZGVlcFxuICAgKiBwcm9wZXJ0aWVzIHdoaWNoIGlzIGNvbmZ1c2luZy4gVE9ETzogRXhwb3NlIHBlbmRpbmdTdGF0ZSBvciBkb24ndCB1c2UgaXRcbiAgICogZHVyaW5nIHRoZSBtZXJnZS5cbiAgICpcbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2UgdGhhdCBzaG91bGQgcmVyZW5kZXIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fGZ1bmN0aW9ufSBwYXJ0aWFsU3RhdGUgTmV4dCBwYXJ0aWFsIHN0YXRlIHRvIGJlIG1lcmdlZCB3aXRoIHN0YXRlLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG5cblxuICBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlLnByb3RvdHlwZS5lbnF1ZXVlU2V0U3RhdGUgPSBmdW5jdGlvbiBlbnF1ZXVlU2V0U3RhdGUocHVibGljSW5zdGFuY2UsIHBhcnRpYWxTdGF0ZSkge1xuICAgIGlmICh0aGlzLnRyYW5zYWN0aW9uLmlzSW5UcmFuc2FjdGlvbigpKSB7XG4gICAgICBSZWFjdFVwZGF0ZVF1ZXVlLmVucXVldWVTZXRTdGF0ZShwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUmVhY3RTZXJ2ZXJVcGRhdGVRdWV1ZTtcbn0oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFNlcnZlclVwZGF0ZVF1ZXVlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0U2VydmVyVXBkYXRlUXVldWUuanNcbi8vIG1vZHVsZSBpZCA9IDE1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICcxNS40LjInO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1JlYWN0VmVyc2lvbi5qc1xuLy8gbW9kdWxlIGlkID0gMTU0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBOUyA9IHtcbiAgeGxpbms6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyxcbiAgeG1sOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJ1xufTtcblxuLy8gV2UgdXNlIGF0dHJpYnV0ZXMgZm9yIGV2ZXJ5dGhpbmcgU1ZHIHNvIGxldCdzIGF2b2lkIHNvbWUgZHVwbGljYXRpb24gYW5kIHJ1blxuLy8gY29kZSBpbnN0ZWFkLlxuLy8gVGhlIGZvbGxvd2luZyBhcmUgYWxsIHNwZWNpZmllZCBpbiB0aGUgSFRNTCBjb25maWcgYWxyZWFkeSBzbyB3ZSBleGNsdWRlIGhlcmUuXG4vLyAtIGNsYXNzIChhcyBjbGFzc05hbWUpXG4vLyAtIGNvbG9yXG4vLyAtIGhlaWdodFxuLy8gLSBpZFxuLy8gLSBsYW5nXG4vLyAtIG1heFxuLy8gLSBtZWRpYVxuLy8gLSBtZXRob2Rcbi8vIC0gbWluXG4vLyAtIG5hbWVcbi8vIC0gc3R5bGVcbi8vIC0gdGFyZ2V0XG4vLyAtIHR5cGVcbi8vIC0gd2lkdGhcbnZhciBBVFRSUyA9IHtcbiAgYWNjZW50SGVpZ2h0OiAnYWNjZW50LWhlaWdodCcsXG4gIGFjY3VtdWxhdGU6IDAsXG4gIGFkZGl0aXZlOiAwLFxuICBhbGlnbm1lbnRCYXNlbGluZTogJ2FsaWdubWVudC1iYXNlbGluZScsXG4gIGFsbG93UmVvcmRlcjogJ2FsbG93UmVvcmRlcicsXG4gIGFscGhhYmV0aWM6IDAsXG4gIGFtcGxpdHVkZTogMCxcbiAgYXJhYmljRm9ybTogJ2FyYWJpYy1mb3JtJyxcbiAgYXNjZW50OiAwLFxuICBhdHRyaWJ1dGVOYW1lOiAnYXR0cmlidXRlTmFtZScsXG4gIGF0dHJpYnV0ZVR5cGU6ICdhdHRyaWJ1dGVUeXBlJyxcbiAgYXV0b1JldmVyc2U6ICdhdXRvUmV2ZXJzZScsXG4gIGF6aW11dGg6IDAsXG4gIGJhc2VGcmVxdWVuY3k6ICdiYXNlRnJlcXVlbmN5JyxcbiAgYmFzZVByb2ZpbGU6ICdiYXNlUHJvZmlsZScsXG4gIGJhc2VsaW5lU2hpZnQ6ICdiYXNlbGluZS1zaGlmdCcsXG4gIGJib3g6IDAsXG4gIGJlZ2luOiAwLFxuICBiaWFzOiAwLFxuICBieTogMCxcbiAgY2FsY01vZGU6ICdjYWxjTW9kZScsXG4gIGNhcEhlaWdodDogJ2NhcC1oZWlnaHQnLFxuICBjbGlwOiAwLFxuICBjbGlwUGF0aDogJ2NsaXAtcGF0aCcsXG4gIGNsaXBSdWxlOiAnY2xpcC1ydWxlJyxcbiAgY2xpcFBhdGhVbml0czogJ2NsaXBQYXRoVW5pdHMnLFxuICBjb2xvckludGVycG9sYXRpb246ICdjb2xvci1pbnRlcnBvbGF0aW9uJyxcbiAgY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyczogJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsXG4gIGNvbG9yUHJvZmlsZTogJ2NvbG9yLXByb2ZpbGUnLFxuICBjb2xvclJlbmRlcmluZzogJ2NvbG9yLXJlbmRlcmluZycsXG4gIGNvbnRlbnRTY3JpcHRUeXBlOiAnY29udGVudFNjcmlwdFR5cGUnLFxuICBjb250ZW50U3R5bGVUeXBlOiAnY29udGVudFN0eWxlVHlwZScsXG4gIGN1cnNvcjogMCxcbiAgY3g6IDAsXG4gIGN5OiAwLFxuICBkOiAwLFxuICBkZWNlbGVyYXRlOiAwLFxuICBkZXNjZW50OiAwLFxuICBkaWZmdXNlQ29uc3RhbnQ6ICdkaWZmdXNlQ29uc3RhbnQnLFxuICBkaXJlY3Rpb246IDAsXG4gIGRpc3BsYXk6IDAsXG4gIGRpdmlzb3I6IDAsXG4gIGRvbWluYW50QmFzZWxpbmU6ICdkb21pbmFudC1iYXNlbGluZScsXG4gIGR1cjogMCxcbiAgZHg6IDAsXG4gIGR5OiAwLFxuICBlZGdlTW9kZTogJ2VkZ2VNb2RlJyxcbiAgZWxldmF0aW9uOiAwLFxuICBlbmFibGVCYWNrZ3JvdW5kOiAnZW5hYmxlLWJhY2tncm91bmQnLFxuICBlbmQ6IDAsXG4gIGV4cG9uZW50OiAwLFxuICBleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOiAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsXG4gIGZpbGw6IDAsXG4gIGZpbGxPcGFjaXR5OiAnZmlsbC1vcGFjaXR5JyxcbiAgZmlsbFJ1bGU6ICdmaWxsLXJ1bGUnLFxuICBmaWx0ZXI6IDAsXG4gIGZpbHRlclJlczogJ2ZpbHRlclJlcycsXG4gIGZpbHRlclVuaXRzOiAnZmlsdGVyVW5pdHMnLFxuICBmbG9vZENvbG9yOiAnZmxvb2QtY29sb3InLFxuICBmbG9vZE9wYWNpdHk6ICdmbG9vZC1vcGFjaXR5JyxcbiAgZm9jdXNhYmxlOiAwLFxuICBmb250RmFtaWx5OiAnZm9udC1mYW1pbHknLFxuICBmb250U2l6ZTogJ2ZvbnQtc2l6ZScsXG4gIGZvbnRTaXplQWRqdXN0OiAnZm9udC1zaXplLWFkanVzdCcsXG4gIGZvbnRTdHJldGNoOiAnZm9udC1zdHJldGNoJyxcbiAgZm9udFN0eWxlOiAnZm9udC1zdHlsZScsXG4gIGZvbnRWYXJpYW50OiAnZm9udC12YXJpYW50JyxcbiAgZm9udFdlaWdodDogJ2ZvbnQtd2VpZ2h0JyxcbiAgZm9ybWF0OiAwLFxuICBmcm9tOiAwLFxuICBmeDogMCxcbiAgZnk6IDAsXG4gIGcxOiAwLFxuICBnMjogMCxcbiAgZ2x5cGhOYW1lOiAnZ2x5cGgtbmFtZScsXG4gIGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsOiAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCcsXG4gIGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbDogJ2dseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsJyxcbiAgZ2x5cGhSZWY6ICdnbHlwaFJlZicsXG4gIGdyYWRpZW50VHJhbnNmb3JtOiAnZ3JhZGllbnRUcmFuc2Zvcm0nLFxuICBncmFkaWVudFVuaXRzOiAnZ3JhZGllbnRVbml0cycsXG4gIGhhbmdpbmc6IDAsXG4gIGhvcml6QWR2WDogJ2hvcml6LWFkdi14JyxcbiAgaG9yaXpPcmlnaW5YOiAnaG9yaXotb3JpZ2luLXgnLFxuICBpZGVvZ3JhcGhpYzogMCxcbiAgaW1hZ2VSZW5kZXJpbmc6ICdpbWFnZS1yZW5kZXJpbmcnLFxuICAnaW4nOiAwLFxuICBpbjI6IDAsXG4gIGludGVyY2VwdDogMCxcbiAgazogMCxcbiAgazE6IDAsXG4gIGsyOiAwLFxuICBrMzogMCxcbiAgazQ6IDAsXG4gIGtlcm5lbE1hdHJpeDogJ2tlcm5lbE1hdHJpeCcsXG4gIGtlcm5lbFVuaXRMZW5ndGg6ICdrZXJuZWxVbml0TGVuZ3RoJyxcbiAga2VybmluZzogMCxcbiAga2V5UG9pbnRzOiAna2V5UG9pbnRzJyxcbiAga2V5U3BsaW5lczogJ2tleVNwbGluZXMnLFxuICBrZXlUaW1lczogJ2tleVRpbWVzJyxcbiAgbGVuZ3RoQWRqdXN0OiAnbGVuZ3RoQWRqdXN0JyxcbiAgbGV0dGVyU3BhY2luZzogJ2xldHRlci1zcGFjaW5nJyxcbiAgbGlnaHRpbmdDb2xvcjogJ2xpZ2h0aW5nLWNvbG9yJyxcbiAgbGltaXRpbmdDb25lQW5nbGU6ICdsaW1pdGluZ0NvbmVBbmdsZScsXG4gIGxvY2FsOiAwLFxuICBtYXJrZXJFbmQ6ICdtYXJrZXItZW5kJyxcbiAgbWFya2VyTWlkOiAnbWFya2VyLW1pZCcsXG4gIG1hcmtlclN0YXJ0OiAnbWFya2VyLXN0YXJ0JyxcbiAgbWFya2VySGVpZ2h0OiAnbWFya2VySGVpZ2h0JyxcbiAgbWFya2VyVW5pdHM6ICdtYXJrZXJVbml0cycsXG4gIG1hcmtlcldpZHRoOiAnbWFya2VyV2lkdGgnLFxuICBtYXNrOiAwLFxuICBtYXNrQ29udGVudFVuaXRzOiAnbWFza0NvbnRlbnRVbml0cycsXG4gIG1hc2tVbml0czogJ21hc2tVbml0cycsXG4gIG1hdGhlbWF0aWNhbDogMCxcbiAgbW9kZTogMCxcbiAgbnVtT2N0YXZlczogJ251bU9jdGF2ZXMnLFxuICBvZmZzZXQ6IDAsXG4gIG9wYWNpdHk6IDAsXG4gIG9wZXJhdG9yOiAwLFxuICBvcmRlcjogMCxcbiAgb3JpZW50OiAwLFxuICBvcmllbnRhdGlvbjogMCxcbiAgb3JpZ2luOiAwLFxuICBvdmVyZmxvdzogMCxcbiAgb3ZlcmxpbmVQb3NpdGlvbjogJ292ZXJsaW5lLXBvc2l0aW9uJyxcbiAgb3ZlcmxpbmVUaGlja25lc3M6ICdvdmVybGluZS10aGlja25lc3MnLFxuICBwYWludE9yZGVyOiAncGFpbnQtb3JkZXInLFxuICBwYW5vc2UxOiAncGFub3NlLTEnLFxuICBwYXRoTGVuZ3RoOiAncGF0aExlbmd0aCcsXG4gIHBhdHRlcm5Db250ZW50VW5pdHM6ICdwYXR0ZXJuQ29udGVudFVuaXRzJyxcbiAgcGF0dGVyblRyYW5zZm9ybTogJ3BhdHRlcm5UcmFuc2Zvcm0nLFxuICBwYXR0ZXJuVW5pdHM6ICdwYXR0ZXJuVW5pdHMnLFxuICBwb2ludGVyRXZlbnRzOiAncG9pbnRlci1ldmVudHMnLFxuICBwb2ludHM6IDAsXG4gIHBvaW50c0F0WDogJ3BvaW50c0F0WCcsXG4gIHBvaW50c0F0WTogJ3BvaW50c0F0WScsXG4gIHBvaW50c0F0WjogJ3BvaW50c0F0WicsXG4gIHByZXNlcnZlQWxwaGE6ICdwcmVzZXJ2ZUFscGhhJyxcbiAgcHJlc2VydmVBc3BlY3RSYXRpbzogJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLFxuICBwcmltaXRpdmVVbml0czogJ3ByaW1pdGl2ZVVuaXRzJyxcbiAgcjogMCxcbiAgcmFkaXVzOiAwLFxuICByZWZYOiAncmVmWCcsXG4gIHJlZlk6ICdyZWZZJyxcbiAgcmVuZGVyaW5nSW50ZW50OiAncmVuZGVyaW5nLWludGVudCcsXG4gIHJlcGVhdENvdW50OiAncmVwZWF0Q291bnQnLFxuICByZXBlYXREdXI6ICdyZXBlYXREdXInLFxuICByZXF1aXJlZEV4dGVuc2lvbnM6ICdyZXF1aXJlZEV4dGVuc2lvbnMnLFxuICByZXF1aXJlZEZlYXR1cmVzOiAncmVxdWlyZWRGZWF0dXJlcycsXG4gIHJlc3RhcnQ6IDAsXG4gIHJlc3VsdDogMCxcbiAgcm90YXRlOiAwLFxuICByeDogMCxcbiAgcnk6IDAsXG4gIHNjYWxlOiAwLFxuICBzZWVkOiAwLFxuICBzaGFwZVJlbmRlcmluZzogJ3NoYXBlLXJlbmRlcmluZycsXG4gIHNsb3BlOiAwLFxuICBzcGFjaW5nOiAwLFxuICBzcGVjdWxhckNvbnN0YW50OiAnc3BlY3VsYXJDb25zdGFudCcsXG4gIHNwZWN1bGFyRXhwb25lbnQ6ICdzcGVjdWxhckV4cG9uZW50JyxcbiAgc3BlZWQ6IDAsXG4gIHNwcmVhZE1ldGhvZDogJ3NwcmVhZE1ldGhvZCcsXG4gIHN0YXJ0T2Zmc2V0OiAnc3RhcnRPZmZzZXQnLFxuICBzdGREZXZpYXRpb246ICdzdGREZXZpYXRpb24nLFxuICBzdGVtaDogMCxcbiAgc3RlbXY6IDAsXG4gIHN0aXRjaFRpbGVzOiAnc3RpdGNoVGlsZXMnLFxuICBzdG9wQ29sb3I6ICdzdG9wLWNvbG9yJyxcbiAgc3RvcE9wYWNpdHk6ICdzdG9wLW9wYWNpdHknLFxuICBzdHJpa2V0aHJvdWdoUG9zaXRpb246ICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJyxcbiAgc3RyaWtldGhyb3VnaFRoaWNrbmVzczogJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJyxcbiAgc3RyaW5nOiAwLFxuICBzdHJva2U6IDAsXG4gIHN0cm9rZURhc2hhcnJheTogJ3N0cm9rZS1kYXNoYXJyYXknLFxuICBzdHJva2VEYXNob2Zmc2V0OiAnc3Ryb2tlLWRhc2hvZmZzZXQnLFxuICBzdHJva2VMaW5lY2FwOiAnc3Ryb2tlLWxpbmVjYXAnLFxuICBzdHJva2VMaW5lam9pbjogJ3N0cm9rZS1saW5lam9pbicsXG4gIHN0cm9rZU1pdGVybGltaXQ6ICdzdHJva2UtbWl0ZXJsaW1pdCcsXG4gIHN0cm9rZU9wYWNpdHk6ICdzdHJva2Utb3BhY2l0eScsXG4gIHN0cm9rZVdpZHRoOiAnc3Ryb2tlLXdpZHRoJyxcbiAgc3VyZmFjZVNjYWxlOiAnc3VyZmFjZVNjYWxlJyxcbiAgc3lzdGVtTGFuZ3VhZ2U6ICdzeXN0ZW1MYW5ndWFnZScsXG4gIHRhYmxlVmFsdWVzOiAndGFibGVWYWx1ZXMnLFxuICB0YXJnZXRYOiAndGFyZ2V0WCcsXG4gIHRhcmdldFk6ICd0YXJnZXRZJyxcbiAgdGV4dEFuY2hvcjogJ3RleHQtYW5jaG9yJyxcbiAgdGV4dERlY29yYXRpb246ICd0ZXh0LWRlY29yYXRpb24nLFxuICB0ZXh0UmVuZGVyaW5nOiAndGV4dC1yZW5kZXJpbmcnLFxuICB0ZXh0TGVuZ3RoOiAndGV4dExlbmd0aCcsXG4gIHRvOiAwLFxuICB0cmFuc2Zvcm06IDAsXG4gIHUxOiAwLFxuICB1MjogMCxcbiAgdW5kZXJsaW5lUG9zaXRpb246ICd1bmRlcmxpbmUtcG9zaXRpb24nLFxuICB1bmRlcmxpbmVUaGlja25lc3M6ICd1bmRlcmxpbmUtdGhpY2tuZXNzJyxcbiAgdW5pY29kZTogMCxcbiAgdW5pY29kZUJpZGk6ICd1bmljb2RlLWJpZGknLFxuICB1bmljb2RlUmFuZ2U6ICd1bmljb2RlLXJhbmdlJyxcbiAgdW5pdHNQZXJFbTogJ3VuaXRzLXBlci1lbScsXG4gIHZBbHBoYWJldGljOiAndi1hbHBoYWJldGljJyxcbiAgdkhhbmdpbmc6ICd2LWhhbmdpbmcnLFxuICB2SWRlb2dyYXBoaWM6ICd2LWlkZW9ncmFwaGljJyxcbiAgdk1hdGhlbWF0aWNhbDogJ3YtbWF0aGVtYXRpY2FsJyxcbiAgdmFsdWVzOiAwLFxuICB2ZWN0b3JFZmZlY3Q6ICd2ZWN0b3ItZWZmZWN0JyxcbiAgdmVyc2lvbjogMCxcbiAgdmVydEFkdlk6ICd2ZXJ0LWFkdi15JyxcbiAgdmVydE9yaWdpblg6ICd2ZXJ0LW9yaWdpbi14JyxcbiAgdmVydE9yaWdpblk6ICd2ZXJ0LW9yaWdpbi15JyxcbiAgdmlld0JveDogJ3ZpZXdCb3gnLFxuICB2aWV3VGFyZ2V0OiAndmlld1RhcmdldCcsXG4gIHZpc2liaWxpdHk6IDAsXG4gIHdpZHRoczogMCxcbiAgd29yZFNwYWNpbmc6ICd3b3JkLXNwYWNpbmcnLFxuICB3cml0aW5nTW9kZTogJ3dyaXRpbmctbW9kZScsXG4gIHg6IDAsXG4gIHhIZWlnaHQ6ICd4LWhlaWdodCcsXG4gIHgxOiAwLFxuICB4MjogMCxcbiAgeENoYW5uZWxTZWxlY3RvcjogJ3hDaGFubmVsU2VsZWN0b3InLFxuICB4bGlua0FjdHVhdGU6ICd4bGluazphY3R1YXRlJyxcbiAgeGxpbmtBcmNyb2xlOiAneGxpbms6YXJjcm9sZScsXG4gIHhsaW5rSHJlZjogJ3hsaW5rOmhyZWYnLFxuICB4bGlua1JvbGU6ICd4bGluazpyb2xlJyxcbiAgeGxpbmtTaG93OiAneGxpbms6c2hvdycsXG4gIHhsaW5rVGl0bGU6ICd4bGluazp0aXRsZScsXG4gIHhsaW5rVHlwZTogJ3hsaW5rOnR5cGUnLFxuICB4bWxCYXNlOiAneG1sOmJhc2UnLFxuICB4bWxuczogMCxcbiAgeG1sbnNYbGluazogJ3htbG5zOnhsaW5rJyxcbiAgeG1sTGFuZzogJ3htbDpsYW5nJyxcbiAgeG1sU3BhY2U6ICd4bWw6c3BhY2UnLFxuICB5OiAwLFxuICB5MTogMCxcbiAgeTI6IDAsXG4gIHlDaGFubmVsU2VsZWN0b3I6ICd5Q2hhbm5lbFNlbGVjdG9yJyxcbiAgejogMCxcbiAgem9vbUFuZFBhbjogJ3pvb21BbmRQYW4nXG59O1xuXG52YXIgU1ZHRE9NUHJvcGVydHlDb25maWcgPSB7XG4gIFByb3BlcnRpZXM6IHt9LFxuICBET01BdHRyaWJ1dGVOYW1lc3BhY2VzOiB7XG4gICAgeGxpbmtBY3R1YXRlOiBOUy54bGluayxcbiAgICB4bGlua0FyY3JvbGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rSHJlZjogTlMueGxpbmssXG4gICAgeGxpbmtSb2xlOiBOUy54bGluayxcbiAgICB4bGlua1Nob3c6IE5TLnhsaW5rLFxuICAgIHhsaW5rVGl0bGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rVHlwZTogTlMueGxpbmssXG4gICAgeG1sQmFzZTogTlMueG1sLFxuICAgIHhtbExhbmc6IE5TLnhtbCxcbiAgICB4bWxTcGFjZTogTlMueG1sXG4gIH0sXG4gIERPTUF0dHJpYnV0ZU5hbWVzOiB7fVxufTtcblxuT2JqZWN0LmtleXMoQVRUUlMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICBTVkdET01Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzW2tleV0gPSAwO1xuICBpZiAoQVRUUlNba2V5XSkge1xuICAgIFNWR0RPTVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzW2tleV0gPSBBVFRSU1trZXldO1xuICB9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBTVkdET01Qcm9wZXJ0eUNvbmZpZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TVkdET01Qcm9wZXJ0eUNvbmZpZy5qc1xuLy8gbW9kdWxlIGlkID0gMTU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnB1dFNlbGVjdGlvbicpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG52YXIgZ2V0QWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQnKTtcbnZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSByZXF1aXJlKCcuL2lzVGV4dElucHV0RWxlbWVudCcpO1xudmFyIHNoYWxsb3dFcXVhbCA9IHJlcXVpcmUoJ2ZianMvbGliL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSA8PSAxMTtcblxudmFyIGV2ZW50VHlwZXMgPSB7XG4gIHNlbGVjdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiAnb25TZWxlY3QnLFxuICAgICAgY2FwdHVyZWQ6ICdvblNlbGVjdENhcHR1cmUnXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wQmx1cicsICd0b3BDb250ZXh0TWVudScsICd0b3BGb2N1cycsICd0b3BLZXlEb3duJywgJ3RvcEtleVVwJywgJ3RvcE1vdXNlRG93bicsICd0b3BNb3VzZVVwJywgJ3RvcFNlbGVjdGlvbkNoYW5nZSddXG4gIH1cbn07XG5cbnZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbnZhciBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGw7XG52YXIgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG52YXIgbW91c2VEb3duID0gZmFsc2U7XG5cbi8vIFRyYWNrIHdoZXRoZXIgYSBsaXN0ZW5lciBleGlzdHMgZm9yIHRoaXMgcGx1Z2luLiBJZiBub25lIGV4aXN0LCB3ZSBkb1xuLy8gbm90IGV4dHJhY3QgZXZlbnRzLiBTZWUgIzM2MzkuXG52YXIgaGFzTGlzdGVuZXIgPSBmYWxzZTtcblxuLyoqXG4gKiBHZXQgYW4gb2JqZWN0IHdoaWNoIGlzIGEgdW5pcXVlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgbm90IGJlIGNvbnNpc3RlbnQgYWNyb3NzIG5vZGVzIG9yIGJyb3dzZXJzLCBidXRcbiAqIHR3byBpZGVudGljYWwgc2VsZWN0aW9ucyBvbiB0aGUgc2FtZSBub2RlIHdpbGwgcmV0dXJuIGlkZW50aWNhbCBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb24obm9kZSkge1xuICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBub2RlICYmIFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKG5vZGUpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBub2RlLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBub2RlLnNlbGVjdGlvbkVuZFxuICAgIH07XG4gIH0gZWxzZSBpZiAod2luZG93LmdldFNlbGVjdGlvbikge1xuICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuY2hvck5vZGU6IHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgYW5jaG9yT2Zmc2V0OiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgZm9jdXNOb2RlOiBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgZm9jdXNPZmZzZXQ6IHNlbGVjdGlvbi5mb2N1c09mZnNldFxuICAgIH07XG4gIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uKSB7XG4gICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhcmVudEVsZW1lbnQ6IHJhbmdlLnBhcmVudEVsZW1lbnQoKSxcbiAgICAgIHRleHQ6IHJhbmdlLnRleHQsXG4gICAgICB0b3A6IHJhbmdlLmJvdW5kaW5nVG9wLFxuICAgICAgbGVmdDogcmFuZ2UuYm91bmRpbmdMZWZ0XG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIFBvbGwgc2VsZWN0aW9uIHRvIHNlZSB3aGV0aGVyIGl0J3MgY2hhbmdlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4gez9TeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIC8vIEVuc3VyZSB3ZSBoYXZlIHRoZSByaWdodCBlbGVtZW50LCBhbmQgdGhhdCB0aGUgdXNlciBpcyBub3QgZHJhZ2dpbmcgYVxuICAvLyBzZWxlY3Rpb24gKHRoaXMgbWF0Y2hlcyBuYXRpdmUgYHNlbGVjdGAgZXZlbnQgYmVoYXZpb3IpLiBJbiBIVE1MNSwgc2VsZWN0XG4gIC8vIGZpcmVzIG9ubHkgb24gaW5wdXQgYW5kIHRleHRhcmVhIHRodXMgaWYgdGhlcmUncyBubyBmb2N1c2VkIGVsZW1lbnQgd2VcbiAgLy8gd29uJ3QgZGlzcGF0Y2guXG4gIGlmIChtb3VzZURvd24gfHwgYWN0aXZlRWxlbWVudCA9PSBudWxsIHx8IGFjdGl2ZUVsZW1lbnQgIT09IGdldEFjdGl2ZUVsZW1lbnQoKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gT25seSBmaXJlIHdoZW4gc2VsZWN0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxuICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbihhY3RpdmVFbGVtZW50KTtcbiAgaWYgKCFsYXN0U2VsZWN0aW9uIHx8ICFzaGFsbG93RXF1YWwobGFzdFNlbGVjdGlvbiwgY3VycmVudFNlbGVjdGlvbikpIHtcbiAgICBsYXN0U2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbjtcblxuICAgIHZhciBzeW50aGV0aWNFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLnNlbGVjdCwgYWN0aXZlRWxlbWVudEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgICBzeW50aGV0aWNFdmVudC50eXBlID0gJ3NlbGVjdCc7XG4gICAgc3ludGhldGljRXZlbnQudGFyZ2V0ID0gYWN0aXZlRWxlbWVudDtcblxuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhzeW50aGV0aWNFdmVudCk7XG5cbiAgICByZXR1cm4gc3ludGhldGljRXZlbnQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvblNlbGVjdGAgZXZlbnQgdGhhdCBub3JtYWxpemVzIHNlbGVjdCBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIGNvbnRlbnRFZGl0YWJsZVxuICpcbiAqIFRoaXMgZGlmZmVycyBmcm9tIG5hdGl2ZSBicm93c2VyIGltcGxlbWVudGF0aW9ucyBpbiB0aGUgZm9sbG93aW5nIHdheXM6XG4gKiAtIEZpcmVzIG9uIGNvbnRlbnRFZGl0YWJsZSBmaWVsZHMgYXMgd2VsbCBhcyBpbnB1dHMuXG4gKiAtIEZpcmVzIGZvciBjb2xsYXBzZWQgc2VsZWN0aW9uLlxuICogLSBGaXJlcyBhZnRlciB1c2VyIGlucHV0LlxuICovXG52YXIgU2VsZWN0RXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICBpZiAoIWhhc0xpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0Tm9kZSA9IHRhcmdldEluc3QgPyBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcblxuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICAvLyBUcmFjayB0aGUgaW5wdXQgbm9kZSB0aGF0IGhhcyBmb2N1cy5cbiAgICAgIGNhc2UgJ3RvcEZvY3VzJzpcbiAgICAgICAgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0YXJnZXROb2RlKSB8fCB0YXJnZXROb2RlLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudCA9IHRhcmdldE5vZGU7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudEluc3QgPSB0YXJnZXRJbnN0O1xuICAgICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wQmx1cic6XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGw7XG4gICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICBicmVhaztcblxuICAgICAgLy8gRG9uJ3QgZmlyZSB0aGUgZXZlbnQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcuIFRoaXMgbWF0Y2hlcyB0aGVcbiAgICAgIC8vIHNlbWFudGljcyBvZiB0aGUgbmF0aXZlIHNlbGVjdCBldmVudC5cbiAgICAgIGNhc2UgJ3RvcE1vdXNlRG93bic6XG4gICAgICAgIG1vdXNlRG93biA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wQ29udGV4dE1lbnUnOlxuICAgICAgY2FzZSAndG9wTW91c2VVcCc6XG4gICAgICAgIG1vdXNlRG93biA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcblxuICAgICAgLy8gQ2hyb21lIGFuZCBJRSBmaXJlIG5vbi1zdGFuZGFyZCBldmVudCB3aGVuIHNlbGVjdGlvbiBpcyBjaGFuZ2VkIChhbmRcbiAgICAgIC8vIHNvbWV0aW1lcyB3aGVuIGl0IGhhc24ndCkuIElFJ3MgZXZlbnQgZmlyZXMgb3V0IG9mIG9yZGVyIHdpdGggcmVzcGVjdFxuICAgICAgLy8gdG8ga2V5IGFuZCBpbnB1dCBldmVudHMgb24gZGVsZXRpb24sIHNvIHdlIGRpc2NhcmQgaXQuXG4gICAgICAvL1xuICAgICAgLy8gRmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgc2VsZWN0aW9uY2hhbmdlLCBzbyBjaGVjayBzZWxlY3Rpb24gc3RhdHVzXG4gICAgICAvLyBhZnRlciBlYWNoIGtleSBlbnRyeS4gVGhlIHNlbGVjdGlvbiBjaGFuZ2VzIGFmdGVyIGtleWRvd24gYW5kIGJlZm9yZVxuICAgICAgLy8ga2V5dXAsIGJ1dCB3ZSBjaGVjayBvbiBrZXlkb3duIGFzIHdlbGwgaW4gdGhlIGNhc2Ugb2YgaG9sZGluZyBkb3duIGFcbiAgICAgIC8vIGtleSwgd2hlbiBtdWx0aXBsZSBrZXlkb3duIGV2ZW50cyBhcmUgZmlyZWQgYnV0IG9ubHkgb25lIGtleXVwIGlzLlxuICAgICAgLy8gVGhpcyBpcyBhbHNvIG91ciBhcHByb2FjaCBmb3IgSUUgaGFuZGxpbmcsIGZvciB0aGUgcmVhc29uIGFib3ZlLlxuICAgICAgY2FzZSAndG9wU2VsZWN0aW9uQ2hhbmdlJzpcbiAgICAgICAgaWYgKHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlICd0b3BLZXlEb3duJzpcbiAgICAgIGNhc2UgJ3RvcEtleVVwJzpcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG5cbiAgZGlkUHV0TGlzdGVuZXI6IGZ1bmN0aW9uIChpbnN0LCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSAnb25TZWxlY3QnKSB7XG4gICAgICBoYXNMaXN0ZW5lciA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNlbGVjdEV2ZW50UGx1Z2luO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1NlbGVjdEV2ZW50UGx1Z2luLmpzXG4vLyBtb2R1bGUgaWQgPSAxNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgRXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoJ2ZianMvbGliL0V2ZW50TGlzdGVuZXInKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBTeW50aGV0aWNBbmltYXRpb25FdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljQW5pbWF0aW9uRXZlbnQnKTtcbnZhciBTeW50aGV0aWNDbGlwYm9hcmRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljQ2xpcGJvYXJkRXZlbnQnKTtcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcbnZhciBTeW50aGV0aWNGb2N1c0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNGb2N1c0V2ZW50Jyk7XG52YXIgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljS2V5Ym9hcmRFdmVudCcpO1xudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY01vdXNlRXZlbnQnKTtcbnZhciBTeW50aGV0aWNEcmFnRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0RyYWdFdmVudCcpO1xudmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1RvdWNoRXZlbnQnKTtcbnZhciBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1RyYW5zaXRpb25FdmVudCcpO1xudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcbnZhciBTeW50aGV0aWNXaGVlbEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNXaGVlbEV2ZW50Jyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKCcuL2dldEV2ZW50Q2hhckNvZGUnKTtcbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBUdXJuc1xuICogWydhYm9ydCcsIC4uLl1cbiAqIGludG9cbiAqIGV2ZW50VHlwZXMgPSB7XG4gKiAgICdhYm9ydCc6IHtcbiAqICAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICogICAgICAgYnViYmxlZDogJ29uQWJvcnQnLFxuICogICAgICAgY2FwdHVyZWQ6ICdvbkFib3J0Q2FwdHVyZScsXG4gKiAgICAgfSxcbiAqICAgICBkZXBlbmRlbmNpZXM6IFsndG9wQWJvcnQnXSxcbiAqICAgfSxcbiAqICAgLi4uXG4gKiB9O1xuICogdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnID0ge1xuICogICAndG9wQWJvcnQnOiB7IHNhbWVDb25maWcgfVxuICogfTtcbiAqL1xudmFyIGV2ZW50VHlwZXMgPSB7fTtcbnZhciB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcgPSB7fTtcblsnYWJvcnQnLCAnYW5pbWF0aW9uRW5kJywgJ2FuaW1hdGlvbkl0ZXJhdGlvbicsICdhbmltYXRpb25TdGFydCcsICdibHVyJywgJ2NhblBsYXknLCAnY2FuUGxheVRocm91Z2gnLCAnY2xpY2snLCAnY29udGV4dE1lbnUnLCAnY29weScsICdjdXQnLCAnZG91YmxlQ2xpY2snLCAnZHJhZycsICdkcmFnRW5kJywgJ2RyYWdFbnRlcicsICdkcmFnRXhpdCcsICdkcmFnTGVhdmUnLCAnZHJhZ092ZXInLCAnZHJhZ1N0YXJ0JywgJ2Ryb3AnLCAnZHVyYXRpb25DaGFuZ2UnLCAnZW1wdGllZCcsICdlbmNyeXB0ZWQnLCAnZW5kZWQnLCAnZXJyb3InLCAnZm9jdXMnLCAnaW5wdXQnLCAnaW52YWxpZCcsICdrZXlEb3duJywgJ2tleVByZXNzJywgJ2tleVVwJywgJ2xvYWQnLCAnbG9hZGVkRGF0YScsICdsb2FkZWRNZXRhZGF0YScsICdsb2FkU3RhcnQnLCAnbW91c2VEb3duJywgJ21vdXNlTW92ZScsICdtb3VzZU91dCcsICdtb3VzZU92ZXInLCAnbW91c2VVcCcsICdwYXN0ZScsICdwYXVzZScsICdwbGF5JywgJ3BsYXlpbmcnLCAncHJvZ3Jlc3MnLCAncmF0ZUNoYW5nZScsICdyZXNldCcsICdzY3JvbGwnLCAnc2Vla2VkJywgJ3NlZWtpbmcnLCAnc3RhbGxlZCcsICdzdWJtaXQnLCAnc3VzcGVuZCcsICd0aW1lVXBkYXRlJywgJ3RvdWNoQ2FuY2VsJywgJ3RvdWNoRW5kJywgJ3RvdWNoTW92ZScsICd0b3VjaFN0YXJ0JywgJ3RyYW5zaXRpb25FbmQnLCAndm9sdW1lQ2hhbmdlJywgJ3dhaXRpbmcnLCAnd2hlZWwnXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICB2YXIgY2FwaXRhbGl6ZWRFdmVudCA9IGV2ZW50WzBdLnRvVXBwZXJDYXNlKCkgKyBldmVudC5zbGljZSgxKTtcbiAgdmFyIG9uRXZlbnQgPSAnb24nICsgY2FwaXRhbGl6ZWRFdmVudDtcbiAgdmFyIHRvcEV2ZW50ID0gJ3RvcCcgKyBjYXBpdGFsaXplZEV2ZW50O1xuXG4gIHZhciB0eXBlID0ge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBvbkV2ZW50LFxuICAgICAgY2FwdHVyZWQ6IG9uRXZlbnQgKyAnQ2FwdHVyZSdcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcEV2ZW50XVxuICB9O1xuICBldmVudFR5cGVzW2V2ZW50XSA9IHR5cGU7XG4gIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0b3BFdmVudF0gPSB0eXBlO1xufSk7XG5cbnZhciBvbkNsaWNrTGlzdGVuZXJzID0ge307XG5cbmZ1bmN0aW9uIGdldERpY3Rpb25hcnlLZXkoaW5zdCkge1xuICAvLyBQcmV2ZW50cyBWOCBwZXJmb3JtYW5jZSBpc3N1ZTpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNzIzMlxuICByZXR1cm4gJy4nICsgaW5zdC5fcm9vdE5vZGVJRDtcbn1cblxuZnVuY3Rpb24gaXNJbnRlcmFjdGl2ZSh0YWcpIHtcbiAgcmV0dXJuIHRhZyA9PT0gJ2J1dHRvbicgfHwgdGFnID09PSAnaW5wdXQnIHx8IHRhZyA9PT0gJ3NlbGVjdCcgfHwgdGFnID09PSAndGV4dGFyZWEnO1xufVxuXG52YXIgU2ltcGxlRXZlbnRQbHVnaW4gPSB7XG5cbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbiAodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICB2YXIgZGlzcGF0Y2hDb25maWcgPSB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXTtcbiAgICBpZiAoIWRpc3BhdGNoQ29uZmlnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIEV2ZW50Q29uc3RydWN0b3I7XG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIGNhc2UgJ3RvcEFib3J0JzpcbiAgICAgIGNhc2UgJ3RvcENhblBsYXknOlxuICAgICAgY2FzZSAndG9wQ2FuUGxheVRocm91Z2gnOlxuICAgICAgY2FzZSAndG9wRHVyYXRpb25DaGFuZ2UnOlxuICAgICAgY2FzZSAndG9wRW1wdGllZCc6XG4gICAgICBjYXNlICd0b3BFbmNyeXB0ZWQnOlxuICAgICAgY2FzZSAndG9wRW5kZWQnOlxuICAgICAgY2FzZSAndG9wRXJyb3InOlxuICAgICAgY2FzZSAndG9wSW5wdXQnOlxuICAgICAgY2FzZSAndG9wSW52YWxpZCc6XG4gICAgICBjYXNlICd0b3BMb2FkJzpcbiAgICAgIGNhc2UgJ3RvcExvYWRlZERhdGEnOlxuICAgICAgY2FzZSAndG9wTG9hZGVkTWV0YWRhdGEnOlxuICAgICAgY2FzZSAndG9wTG9hZFN0YXJ0JzpcbiAgICAgIGNhc2UgJ3RvcFBhdXNlJzpcbiAgICAgIGNhc2UgJ3RvcFBsYXknOlxuICAgICAgY2FzZSAndG9wUGxheWluZyc6XG4gICAgICBjYXNlICd0b3BQcm9ncmVzcyc6XG4gICAgICBjYXNlICd0b3BSYXRlQ2hhbmdlJzpcbiAgICAgIGNhc2UgJ3RvcFJlc2V0JzpcbiAgICAgIGNhc2UgJ3RvcFNlZWtlZCc6XG4gICAgICBjYXNlICd0b3BTZWVraW5nJzpcbiAgICAgIGNhc2UgJ3RvcFN0YWxsZWQnOlxuICAgICAgY2FzZSAndG9wU3VibWl0JzpcbiAgICAgIGNhc2UgJ3RvcFN1c3BlbmQnOlxuICAgICAgY2FzZSAndG9wVGltZVVwZGF0ZSc6XG4gICAgICBjYXNlICd0b3BWb2x1bWVDaGFuZ2UnOlxuICAgICAgY2FzZSAndG9wV2FpdGluZyc6XG4gICAgICAgIC8vIEhUTUwgRXZlbnRzXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDUvaW5kZXguaHRtbCNldmVudHMtMFxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wS2V5UHJlc3MnOlxuICAgICAgICAvLyBGaXJlZm94IGNyZWF0ZXMgYSBrZXlwcmVzcyBldmVudCBmb3IgZnVuY3Rpb24ga2V5cyB0b28uIFRoaXMgcmVtb3Zlc1xuICAgICAgICAvLyB0aGUgdW53YW50ZWQga2V5cHJlc3MgZXZlbnRzLiBFbnRlciBpcyBob3dldmVyIGJvdGggcHJpbnRhYmxlIGFuZFxuICAgICAgICAvLyBub24tcHJpbnRhYmxlLiBPbmUgd291bGQgZXhwZWN0IFRhYiB0byBiZSBhcyB3ZWxsIChidXQgaXQgaXNuJ3QpLlxuICAgICAgICBpZiAoZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAndG9wS2V5RG93bic6XG4gICAgICBjYXNlICd0b3BLZXlVcCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcEJsdXInOlxuICAgICAgY2FzZSAndG9wRm9jdXMnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BDbGljayc6XG4gICAgICAgIC8vIEZpcmVmb3ggY3JlYXRlcyBhIGNsaWNrIGV2ZW50IG9uIHJpZ2h0IG1vdXNlIGNsaWNrcy4gVGhpcyByZW1vdmVzIHRoZVxuICAgICAgICAvLyB1bndhbnRlZCBjbGljayBldmVudHMuXG4gICAgICAgIGlmIChuYXRpdmVFdmVudC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAndG9wRG91YmxlQ2xpY2snOlxuICAgICAgY2FzZSAndG9wTW91c2VEb3duJzpcbiAgICAgIGNhc2UgJ3RvcE1vdXNlTW92ZSc6XG4gICAgICBjYXNlICd0b3BNb3VzZVVwJzpcbiAgICAgIC8vIFRPRE86IERpc2FibGVkIGVsZW1lbnRzIHNob3VsZCBub3QgcmVzcG9uZCB0byBtb3VzZSBldmVudHNcbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgJ3RvcE1vdXNlT3V0JzpcbiAgICAgIGNhc2UgJ3RvcE1vdXNlT3Zlcic6XG4gICAgICBjYXNlICd0b3BDb250ZXh0TWVudSc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcERyYWcnOlxuICAgICAgY2FzZSAndG9wRHJhZ0VuZCc6XG4gICAgICBjYXNlICd0b3BEcmFnRW50ZXInOlxuICAgICAgY2FzZSAndG9wRHJhZ0V4aXQnOlxuICAgICAgY2FzZSAndG9wRHJhZ0xlYXZlJzpcbiAgICAgIGNhc2UgJ3RvcERyYWdPdmVyJzpcbiAgICAgIGNhc2UgJ3RvcERyYWdTdGFydCc6XG4gICAgICBjYXNlICd0b3BEcm9wJzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0RyYWdFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BUb3VjaENhbmNlbCc6XG4gICAgICBjYXNlICd0b3BUb3VjaEVuZCc6XG4gICAgICBjYXNlICd0b3BUb3VjaE1vdmUnOlxuICAgICAgY2FzZSAndG9wVG91Y2hTdGFydCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcEFuaW1hdGlvbkVuZCc6XG4gICAgICBjYXNlICd0b3BBbmltYXRpb25JdGVyYXRpb24nOlxuICAgICAgY2FzZSAndG9wQW5pbWF0aW9uU3RhcnQnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wVHJhbnNpdGlvbkVuZCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wU2Nyb2xsJzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1VJRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wV2hlZWwnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BDb3B5JzpcbiAgICAgIGNhc2UgJ3RvcEN1dCc6XG4gICAgICBjYXNlICd0b3BQYXN0ZSc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgICFFdmVudENvbnN0cnVjdG9yID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1NpbXBsZUV2ZW50UGx1Z2luOiBVbmhhbmRsZWQgZXZlbnQgdHlwZSwgYCVzYC4nLCB0b3BMZXZlbFR5cGUpIDogX3Byb2RJbnZhcmlhbnQoJzg2JywgdG9wTGV2ZWxUeXBlKSA6IHZvaWQgMDtcbiAgICB2YXIgZXZlbnQgPSBFdmVudENvbnN0cnVjdG9yLmdldFBvb2xlZChkaXNwYXRjaENvbmZpZywgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfSxcblxuICBkaWRQdXRMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgLy8gTW9iaWxlIFNhZmFyaSBkb2VzIG5vdCBmaXJlIHByb3Blcmx5IGJ1YmJsZSBjbGljayBldmVudHMgb25cbiAgICAvLyBub24taW50ZXJhY3RpdmUgZWxlbWVudHMsIHdoaWNoIG1lYW5zIGRlbGVnYXRlZCBjbGljayBsaXN0ZW5lcnMgZG8gbm90XG4gICAgLy8gZmlyZS4gVGhlIHdvcmthcm91bmQgZm9yIHRoaXMgYnVnIGludm9sdmVzIGF0dGFjaGluZyBhbiBlbXB0eSBjbGlja1xuICAgIC8vIGxpc3RlbmVyIG9uIHRoZSB0YXJnZXQgbm9kZS5cbiAgICAvLyBodHRwOi8vd3d3LnF1aXJrc21vZGUub3JnL2Jsb2cvYXJjaGl2ZXMvMjAxMC8wOS9jbGlja19ldmVudF9kZWwuaHRtbFxuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSAnb25DbGljaycgJiYgIWlzSW50ZXJhY3RpdmUoaW5zdC5fdGFnKSkge1xuICAgICAgdmFyIGtleSA9IGdldERpY3Rpb25hcnlLZXkoaW5zdCk7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgICAgaWYgKCFvbkNsaWNrTGlzdGVuZXJzW2tleV0pIHtcbiAgICAgICAgb25DbGlja0xpc3RlbmVyc1trZXldID0gRXZlbnRMaXN0ZW5lci5saXN0ZW4obm9kZSwgJ2NsaWNrJywgZW1wdHlGdW5jdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIHdpbGxEZWxldGVMaXN0ZW5lcjogZnVuY3Rpb24gKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gJ29uQ2xpY2snICYmICFpc0ludGVyYWN0aXZlKGluc3QuX3RhZykpIHtcbiAgICAgIHZhciBrZXkgPSBnZXREaWN0aW9uYXJ5S2V5KGluc3QpO1xuICAgICAgb25DbGlja0xpc3RlbmVyc1trZXldLnJlbW92ZSgpO1xuICAgICAgZGVsZXRlIG9uQ2xpY2tMaXN0ZW5lcnNba2V5XTtcbiAgICB9XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBTaW1wbGVFdmVudFBsdWdpbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TaW1wbGVFdmVudFBsdWdpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTU3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtYW5pbWF0aW9ucy8jQW5pbWF0aW9uRXZlbnQtaW50ZXJmYWNlXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9BbmltYXRpb25FdmVudFxuICovXG52YXIgQW5pbWF0aW9uRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGFuaW1hdGlvbk5hbWU6IG51bGwsXG4gIGVsYXBzZWRUaW1lOiBudWxsLFxuICBwc2V1ZG9FbGVtZW50OiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljQW5pbWF0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljQW5pbWF0aW9uRXZlbnQsIEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNBbmltYXRpb25FdmVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNBbmltYXRpb25FdmVudC5qc1xuLy8gbW9kdWxlIGlkID0gMTU4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2NsaXBib2FyZC1hcGlzL1xuICovXG52YXIgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAnY2xpcGJvYXJkRGF0YScgaW4gZXZlbnQgPyBldmVudC5jbGlwYm9hcmREYXRhIDogd2luZG93LmNsaXBib2FyZERhdGE7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50LCBDbGlwYm9hcmRFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljQ2xpcGJvYXJkRXZlbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE1OVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50cy1jb21wb3NpdGlvbmV2ZW50c1xuICovXG52YXIgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSA9IHtcbiAgZGF0YTogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljQ29tcG9zaXRpb25FdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LCBDb21wb3NpdGlvbkV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRHJhZ0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xudmFyIERyYWdFdmVudEludGVyZmFjZSA9IHtcbiAgZGF0YVRyYW5zZmVyOiBudWxsXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNEcmFnRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY01vdXNlRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0RyYWdFdmVudCwgRHJhZ0V2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljRHJhZ0V2ZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxNjFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEZvY3VzRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG52YXIgRm9jdXNFdmVudEludGVyZmFjZSA9IHtcbiAgcmVsYXRlZFRhcmdldDogbnVsbFxufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgQ29uZmlndXJhdGlvbiB1c2VkIHRvIGRpc3BhdGNoIHRoaXMgZXZlbnQuXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlzcGF0Y2hNYXJrZXIgTWFya2VyIGlkZW50aWZ5aW5nIHRoZSBldmVudCB0YXJnZXQuXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7U3ludGhldGljVUlFdmVudH1cbiAqL1xuZnVuY3Rpb24gU3ludGhldGljRm9jdXNFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblxuU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRm9jdXNFdmVudCwgRm9jdXNFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRm9jdXNFdmVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNGb2N1c0V2ZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxNjJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDVcbiAqICAgICAgLyNldmVudHMtaW5wdXRldmVudHNcbiAqL1xudmFyIElucHV0RXZlbnRJbnRlcmZhY2UgPSB7XG4gIGRhdGE6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0lucHV0RXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljSW5wdXRFdmVudCwgSW5wdXRFdmVudEludGVyZmFjZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljSW5wdXRFdmVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNJbnB1dEV2ZW50LmpzXG4vLyBtb2R1bGUgaWQgPSAxNjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcblxudmFyIGdldEV2ZW50Q2hhckNvZGUgPSByZXF1aXJlKCcuL2dldEV2ZW50Q2hhckNvZGUnKTtcbnZhciBnZXRFdmVudEtleSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRLZXknKTtcbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKCcuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZScpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgS2V5Ym9hcmRFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBrZXk6IGdldEV2ZW50S2V5LFxuICBsb2NhdGlvbjogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgcmVwZWF0OiBudWxsLFxuICBsb2NhbGU6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgLy8gTGVnYWN5IEludGVyZmFjZVxuICBjaGFyQ29kZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gYGNoYXJDb2RlYCBpcyB0aGUgcmVzdWx0IG9mIGEgS2V5UHJlc3MgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gdGhlIGFjdHVhbCBwcmludGFibGUgY2hhcmFjdGVyLlxuXG4gICAgLy8gS2V5UHJlc3MgaXMgZGVwcmVjYXRlZCwgYnV0IGl0cyByZXBsYWNlbWVudCBpcyBub3QgeWV0IGZpbmFsIGFuZCBub3RcbiAgICAvLyBpbXBsZW1lbnRlZCBpbiBhbnkgbWFqb3IgYnJvd3Nlci4gT25seSBLZXlQcmVzcyBoYXMgY2hhckNvZGUuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIGtleUNvZGU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGBrZXlDb2RlYCBpcyB0aGUgcmVzdWx0IG9mIGEgS2V5RG93bi9VcCBldmVudCBhbmQgcmVwcmVzZW50cyB0aGUgdmFsdWUgb2ZcbiAgICAvLyBwaHlzaWNhbCBrZXlib2FyZCBrZXkuXG5cbiAgICAvLyBUaGUgYWN0dWFsIG1lYW5pbmcgb2YgdGhlIHZhbHVlIGRlcGVuZHMgb24gdGhlIHVzZXJzJyBrZXlib2FyZCBsYXlvdXRcbiAgICAvLyB3aGljaCBjYW5ub3QgYmUgZGV0ZWN0ZWQuIEFzc3VtaW5nIHRoYXQgaXQgaXMgYSBVUyBrZXlib2FyZCBsYXlvdXRcbiAgICAvLyBwcm92aWRlcyBhIHN1cnByaXNpbmdseSBhY2N1cmF0ZSBtYXBwaW5nIGZvciBVUyBhbmQgRXVyb3BlYW4gdXNlcnMuXG4gICAgLy8gRHVlIHRvIHRoaXMsIGl0IGlzIGxlZnQgdG8gdGhlIHVzZXIgdG8gaW1wbGVtZW50IGF0IHRoaXMgdGltZS5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAgIHJldHVybiBldmVudC5rZXlDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSxcbiAgd2hpY2g6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGB3aGljaGAgaXMgYW4gYWxpYXMgZm9yIGVpdGhlciBga2V5Q29kZWAgb3IgYGNoYXJDb2RlYCBkZXBlbmRpbmcgb24gdGhlXG4gICAgLy8gdHlwZSBvZiB0aGUgZXZlbnQuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY1VJRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY0tleWJvYXJkRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0tleWJvYXJkRXZlbnQsIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljS2V5Ym9hcmRFdmVudC5qc1xuLy8gbW9kdWxlIGlkID0gMTY0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG5cbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKCcuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZScpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgVG91Y2hFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi90b3VjaC1ldmVudHMvXG4gKi9cbnZhciBUb3VjaEV2ZW50SW50ZXJmYWNlID0ge1xuICB0b3VjaGVzOiBudWxsLFxuICB0YXJnZXRUb3VjaGVzOiBudWxsLFxuICBjaGFuZ2VkVG91Y2hlczogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkaXNwYXRjaENvbmZpZyBDb25maWd1cmF0aW9uIHVzZWQgdG8gZGlzcGF0Y2ggdGhpcyBldmVudC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwYXRjaE1hcmtlciBNYXJrZXIgaWRlbnRpZnlpbmcgdGhlIGV2ZW50IHRhcmdldC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEBleHRlbmRzIHtTeW50aGV0aWNVSUV2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNUb3VjaEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNVSUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNUb3VjaEV2ZW50LCBUb3VjaEV2ZW50SW50ZXJmYWNlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL1N5bnRoZXRpY1RvdWNoRXZlbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE2NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA5L1dELWNzczMtdHJhbnNpdGlvbnMtMjAwOTAzMjAvI3RyYW5zaXRpb24tZXZlbnRzLVxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVHJhbnNpdGlvbkV2ZW50XG4gKi9cbnZhciBUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHByb3BlcnR5TmFtZTogbnVsbCxcbiAgZWxhcHNlZFRpbWU6IG51bGwsXG4gIHBzZXVkb0VsZW1lbnQ6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuXG5TeW50aGV0aWNFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljVHJhbnNpdGlvbkV2ZW50LCBUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9TeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE2NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgV2hlZWxFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbnZhciBXaGVlbEV2ZW50SW50ZXJmYWNlID0ge1xuICBkZWx0YVg6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAnZGVsdGFYJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWCA6XG4gICAgLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFYYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKHJpZ2h0IGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVgnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFYIDogMDtcbiAgfSxcbiAgZGVsdGFZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2RlbHRhWScgaW4gZXZlbnQgPyBldmVudC5kZWx0YVkgOlxuICAgIC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhWWAgZm9yIFdlYmtpdCBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVknIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFZIDpcbiAgICAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YWAgZm9yIElFPDkgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgJ3doZWVsRGVsdGEnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGEgOiAwO1xuICB9LFxuICBkZWx0YVo6IG51bGwsXG5cbiAgLy8gQnJvd3NlcnMgd2l0aG91dCBcImRlbHRhTW9kZVwiIGlzIHJlcG9ydGluZyBpbiByYXcgd2hlZWwgZGVsdGEgd2hlcmUgb25lXG4gIC8vIG5vdGNoIG9uIHRoZSBzY3JvbGwgaXMgYWx3YXlzICsvLSAxMjAsIHJvdWdobHkgZXF1aXZhbGVudCB0byBwaXhlbHMuXG4gIC8vIEEgZ29vZCBhcHByb3hpbWF0aW9uIG9mIERPTV9ERUxUQV9MSU5FICgxKSBpcyA1JSBvZiB2aWV3cG9ydCBzaXplIG9yXG4gIC8vIH40MCBwaXhlbHMsIGZvciBET01fREVMVEFfU0NSRUVOICgyKSBpdCBpcyA4Ny41JSBvZiB2aWV3cG9ydCBzaXplLlxuICBkZWx0YU1vZGU6IG51bGxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGRpc3BhdGNoQ29uZmlnIENvbmZpZ3VyYXRpb24gdXNlZCB0byBkaXNwYXRjaCB0aGlzIGV2ZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IGRpc3BhdGNoTWFya2VyIE1hcmtlciBpZGVudGlmeWluZyB0aGUgZXZlbnQgdGFyZ2V0LlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQGV4dGVuZHMge1N5bnRoZXRpY01vdXNlRXZlbnR9XG4gKi9cbmZ1bmN0aW9uIFN5bnRoZXRpY1doZWVsRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cblN5bnRoZXRpY01vdXNlRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1doZWVsRXZlbnQsIFdoZWVsRXZlbnRJbnRlcmZhY2UpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvU3ludGhldGljV2hlZWxFdmVudC5qc1xuLy8gbW9kdWxlIGlkID0gMTY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIE1PRCA9IDY1NTIxO1xuXG4vLyBhZGxlcjMyIGlzIG5vdCBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcsIGFuZCBpcyBvbmx5IHVzZWQgdG8gc2FuaXR5IGNoZWNrIHRoYXRcbi8vIG1hcmt1cCBnZW5lcmF0ZWQgb24gdGhlIHNlcnZlciBtYXRjaGVzIHRoZSBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSBjbGllbnQuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIChhIG1vZGlmaWVkIHZlcnNpb24gb2YgdGhlIFNoZWV0SlMgdmVyc2lvbikgaGFzIGJlZW4gb3B0aW1pemVkXG4vLyBmb3Igb3VyIHVzZSBjYXNlLCBhdCB0aGUgZXhwZW5zZSBvZiBjb25mb3JtaW5nIHRvIHRoZSBhZGxlcjMyIHNwZWNpZmljYXRpb25cbi8vIGZvciBub24tYXNjaWkgaW5wdXRzLlxuZnVuY3Rpb24gYWRsZXIzMihkYXRhKSB7XG4gIHZhciBhID0gMTtcbiAgdmFyIGIgPSAwO1xuICB2YXIgaSA9IDA7XG4gIHZhciBsID0gZGF0YS5sZW5ndGg7XG4gIHZhciBtID0gbCAmIH4weDM7XG4gIHdoaWxlIChpIDwgbSkge1xuICAgIHZhciBuID0gTWF0aC5taW4oaSArIDQwOTYsIG0pO1xuICAgIGZvciAoOyBpIDwgbjsgaSArPSA0KSB7XG4gICAgICBiICs9IChhICs9IGRhdGEuY2hhckNvZGVBdChpKSkgKyAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSArIDEpKSArIChhICs9IGRhdGEuY2hhckNvZGVBdChpICsgMikpICsgKGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkgKyAzKSk7XG4gICAgfVxuICAgIGEgJT0gTU9EO1xuICAgIGIgJT0gTU9EO1xuICB9XG4gIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgYiArPSBhICs9IGRhdGEuY2hhckNvZGVBdChpKTtcbiAgfVxuICBhICU9IE1PRDtcbiAgYiAlPSBNT0Q7XG4gIHJldHVybiBhIHwgYiA8PCAxNjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL2FkbGVyMzIuanNcbi8vIG1vZHVsZSBpZCA9IDE2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX3Byb2RJbnZhcmlhbnQgPSByZXF1aXJlKCcuL3JlYWN0UHJvZEludmFyaWFudCcpO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbnZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuXG52YXIgUmVhY3RDb21wb25lbnRUcmVlSG9vaztcblxuaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiBwcm9jZXNzLmVudiAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gIC8vIFRlbXBvcmFyeSBoYWNrLlxuICAvLyBJbmxpbmUgcmVxdWlyZXMgZG9uJ3Qgd29yayB3ZWxsIHdpdGggSmVzdDpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjQwXG4gIC8vIFJlbW92ZSB0aGUgaW5saW5lIHJlcXVpcmVzIHdoZW4gd2UgZG9uJ3QgbmVlZCB0aGVtIGFueW1vcmU6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzcxNzhcbiAgUmVhY3RDb21wb25lbnRUcmVlSG9vayA9IHJlcXVpcmUoJ3JlYWN0L2xpYi9SZWFjdENvbXBvbmVudFRyZWVIb29rJyk7XG59XG5cbnZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcblxuLyoqXG4gKiBBc3NlcnQgdGhhdCB0aGUgdmFsdWVzIG1hdGNoIHdpdGggdGhlIHR5cGUgc3BlY3MuXG4gKiBFcnJvciBtZXNzYWdlcyBhcmUgbWVtb3JpemVkIGFuZCB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gdHlwZVNwZWNzIE1hcCBvZiBuYW1lIHRvIGEgUmVhY3RQcm9wVHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyBSdW50aW1lIHZhbHVlcyB0aGF0IG5lZWQgdG8gYmUgdHlwZS1jaGVja2VkXG4gKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiBcInByb3BcIiwgXCJjb250ZXh0XCIsIFwiY2hpbGQgY29udGV4dFwiXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tcG9uZW50TmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHBhcmFtIHs/b2JqZWN0fSBlbGVtZW50IFRoZSBSZWFjdCBlbGVtZW50IHRoYXQgaXMgYmVpbmcgdHlwZS1jaGVja2VkXG4gKiBAcGFyYW0gez9udW1iZXJ9IGRlYnVnSUQgVGhlIFJlYWN0IGNvbXBvbmVudCBpbnN0YW5jZSB0aGF0IGlzIGJlaW5nIHR5cGUtY2hlY2tlZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2hlY2tSZWFjdFR5cGVTcGVjKHR5cGVTcGVjcywgdmFsdWVzLCBsb2NhdGlvbiwgY29tcG9uZW50TmFtZSwgZWxlbWVudCwgZGVidWdJRCkge1xuICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG4gICAgaWYgKHR5cGVTcGVjcy5oYXNPd25Qcm9wZXJ0eSh0eXBlU3BlY05hbWUpKSB7XG4gICAgICB2YXIgZXJyb3I7XG4gICAgICAvLyBQcm9wIHR5cGUgdmFsaWRhdGlvbiBtYXkgdGhyb3cuIEluIGNhc2UgdGhleSBkbywgd2UgZG9uJ3Qgd2FudCB0b1xuICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgLy8gQWZ0ZXIgdGhlc2UgaGF2ZSBiZWVuIGNsZWFuZWQgdXAsIHdlJ2xsIGxldCB0aGVtIHRocm93LlxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lXG4gICAgICAgIC8vIGJlaGF2aW9yIGFzIHdpdGhvdXQgdGhpcyBzdGF0ZW1lbnQgZXhjZXB0IHdpdGggYSBiZXR0ZXIgbWVzc2FnZS5cbiAgICAgICAgISh0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gUmVhY3QuUHJvcFR5cGVzLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCB0eXBlU3BlY05hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzg0JywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHR5cGVTcGVjTmFtZSkgOiB2b2lkIDA7XG4gICAgICAgIGVycm9yID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgfVxuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRXJyb3IsICclczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgdHlwZVNwZWNOYW1lLCB0eXBlb2YgZXJyb3IpIDogdm9pZCAwO1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlXG4gICAgICAgIC8vIHNhbWUgZXJyb3IuXG4gICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG5cbiAgICAgICAgdmFyIGNvbXBvbmVudFN0YWNrSW5mbyA9ICcnO1xuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFSZWFjdENvbXBvbmVudFRyZWVIb29rKSB7XG4gICAgICAgICAgICBSZWFjdENvbXBvbmVudFRyZWVIb29rID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2snKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRlYnVnSUQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudFN0YWNrSW5mbyA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZGVidWdJRCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb21wb25lbnRTdGFja0luZm8gPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEN1cnJlbnRTdGFja0FkZGVuZHVtKGVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkICVzIHR5cGU6ICVzJXMnLCBsb2NhdGlvbiwgZXJyb3IubWVzc2FnZSwgY29tcG9uZW50U3RhY2tJbmZvKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja1JlYWN0VHlwZVNwZWM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvY2hlY2tSZWFjdFR5cGVTcGVjLmpzXG4vLyBtb2R1bGUgaWQgPSAxNjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIENTU1Byb3BlcnR5ID0gcmVxdWlyZSgnLi9DU1NQcm9wZXJ0eScpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBpc1VuaXRsZXNzTnVtYmVyID0gQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcjtcbnZhciBzdHlsZVdhcm5pbmdzID0ge307XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIGludG8gdGhlIHByb3BlciBjc3Mgd3JpdGFibGUgdmFsdWUuIFRoZSBzdHlsZSBuYW1lIGBuYW1lYFxuICogc2hvdWxkIGJlIGxvZ2ljYWwgKG5vIGh5cGhlbnMpLCBhcyBzcGVjaWZpZWRcbiAqIGluIGBDU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDU1MgcHJvcGVydHkgbmFtZSBzdWNoIGFzIGB0b3BNYXJnaW5gLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBDU1MgcHJvcGVydHkgdmFsdWUgc3VjaCBhcyBgMTBweGAuXG4gKiBAcGFyYW0ge1JlYWN0RE9NQ29tcG9uZW50fSBjb21wb25lbnRcbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBzdHlsZSB2YWx1ZSB3aXRoIGRpbWVuc2lvbnMgYXBwbGllZC5cbiAqL1xuZnVuY3Rpb24gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShuYW1lLCB2YWx1ZSwgY29tcG9uZW50KSB7XG4gIC8vIE5vdGUgdGhhdCB3ZSd2ZSByZW1vdmVkIGVzY2FwZVRleHRGb3JCcm93c2VyKCkgY2FsbHMgaGVyZSBzaW5jZSB0aGVcbiAgLy8gd2hvbGUgc3RyaW5nIHdpbGwgYmUgZXNjYXBlZCB3aGVuIHRoZSBhdHRyaWJ1dGUgaXMgaW5qZWN0ZWQgaW50b1xuICAvLyB0aGUgbWFya3VwLiBJZiB5b3UgcHJvdmlkZSB1bnNhZmUgdXNlciBkYXRhIGhlcmUgdGhleSBjYW4gaW5qZWN0XG4gIC8vIGFyYml0cmFyeSBDU1Mgd2hpY2ggbWF5IGJlIHByb2JsZW1hdGljIChJIGNvdWxkbid0IHJlcHJvIHRoaXMpOlxuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU19GaWx0ZXJfRXZhc2lvbl9DaGVhdF9TaGVldFxuICAvLyBodHRwOi8vd3d3LnRoZXNwYW5uZXIuY28udWsvMjAwNy8xMS8yNi91bHRpbWF0ZS14c3MtY3NzLWluamVjdGlvbi9cbiAgLy8gVGhpcyBpcyBub3QgYW4gWFNTIGhvbGUgYnV0IGluc3RlYWQgYSBwb3RlbnRpYWwgQ1NTIGluamVjdGlvbiBpc3N1ZVxuICAvLyB3aGljaCBoYXMgbGVhZCB0byBhIGdyZWF0ZXIgZGlzY3Vzc2lvbiBhYm91dCBob3cgd2UncmUgZ29pbmcgdG9cbiAgLy8gdHJ1c3QgVVJMcyBtb3ZpbmcgZm9yd2FyZC4gU2VlICMyMTE1OTAxXG5cbiAgdmFyIGlzRW1wdHkgPSB2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSAnJztcbiAgaWYgKGlzRW1wdHkpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgaXNOb25OdW1lcmljID0gaXNOYU4odmFsdWUpO1xuICBpZiAoaXNOb25OdW1lcmljIHx8IHZhbHVlID09PSAwIHx8IGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgaXNVbml0bGVzc051bWJlcltuYW1lXSkge1xuICAgIHJldHVybiAnJyArIHZhbHVlOyAvLyBjYXN0IHRvIHN0cmluZ1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gQWxsb3cgJzAnIHRvIHBhc3MgdGhyb3VnaCB3aXRob3V0IHdhcm5pbmcuIDAgaXMgYWxyZWFkeSBzcGVjaWFsIGFuZFxuICAgICAgLy8gZG9lc24ndCByZXF1aXJlIHVuaXRzLCBzbyB3ZSBkb24ndCBuZWVkIHRvIHdhcm4gYWJvdXQgaXQuXG4gICAgICBpZiAoY29tcG9uZW50ICYmIHZhbHVlICE9PSAnMCcpIHtcbiAgICAgICAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgIHZhciBvd25lck5hbWUgPSBvd25lciA/IG93bmVyLmdldE5hbWUoKSA6IG51bGw7XG4gICAgICAgIGlmIChvd25lck5hbWUgJiYgIXN0eWxlV2FybmluZ3Nbb3duZXJOYW1lXSkge1xuICAgICAgICAgIHN0eWxlV2FybmluZ3Nbb3duZXJOYW1lXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKG93bmVyTmFtZSkge1xuICAgICAgICAgIHZhciB3YXJuaW5ncyA9IHN0eWxlV2FybmluZ3Nbb3duZXJOYW1lXTtcbiAgICAgICAgICB3YXJuZWQgPSB3YXJuaW5nc1tuYW1lXTtcbiAgICAgICAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgICAgICAgd2FybmluZ3NbbmFtZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYSBgJXNgIHRhZyAob3duZXI6IGAlc2ApIHdhcyBwYXNzZWQgYSBudW1lcmljIHN0cmluZyB2YWx1ZSAnICsgJ2ZvciBDU1MgcHJvcGVydHkgYCVzYCAodmFsdWU6IGAlc2ApIHdoaWNoIHdpbGwgYmUgdHJlYXRlZCAnICsgJ2FzIGEgdW5pdGxlc3MgbnVtYmVyIGluIGEgZnV0dXJlIHZlcnNpb24gb2YgUmVhY3QuJywgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC50eXBlLCBvd25lck5hbWUgfHwgJ3Vua25vd24nLCBuYW1lLCB2YWx1ZSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlICsgJ3B4Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkYW5nZXJvdXNTdHlsZVZhbHVlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL2Rhbmdlcm91c1N0eWxlVmFsdWUuanNcbi8vIG1vZHVsZSBpZCA9IDE3MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBLZXlFc2NhcGVVdGlscyA9IHJlcXVpcmUoJy4vS2V5RXNjYXBlVXRpbHMnKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIFJlYWN0Q29tcG9uZW50VHJlZUhvb2s7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAvLyBUZW1wb3JhcnkgaGFjay5cbiAgLy8gSW5saW5lIHJlcXVpcmVzIGRvbid0IHdvcmsgd2VsbCB3aXRoIEplc3Q6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI0MFxuICAvLyBSZW1vdmUgdGhlIGlubGluZSByZXF1aXJlcyB3aGVuIHdlIGRvbid0IG5lZWQgdGhlbSBhbnltb3JlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MTc4XG4gIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RDb21wb25lbnRUcmVlSG9vaycpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHRyYXZlcnNlQ29udGV4dCBDb250ZXh0IHBhc3NlZCB0aHJvdWdoIHRyYXZlcnNhbC5cbiAqIEBwYXJhbSB7P1JlYWN0Q29tcG9uZW50fSBjaGlsZCBSZWFjdCBjaGlsZCBjb21wb25lbnQuXG4gKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgU3RyaW5nIG5hbWUgb2Yga2V5IHBhdGggdG8gY2hpbGQuXG4gKiBAcGFyYW0ge251bWJlcj19IHNlbGZEZWJ1Z0lEIE9wdGlvbmFsIGRlYnVnSUQgb2YgdGhlIGN1cnJlbnQgaW50ZXJuYWwgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5TaW5nbGVDaGlsZEludG9Db250ZXh0KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUsIHNlbGZEZWJ1Z0lEKSB7XG4gIC8vIFdlIGZvdW5kIGEgY29tcG9uZW50IGluc3RhbmNlLlxuICBpZiAodHJhdmVyc2VDb250ZXh0ICYmIHR5cGVvZiB0cmF2ZXJzZUNvbnRleHQgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRyYXZlcnNlQ29udGV4dDtcbiAgICB2YXIga2V5VW5pcXVlID0gcmVzdWx0W25hbWVdID09PSB1bmRlZmluZWQ7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghUmVhY3RDb21wb25lbnRUcmVlSG9vaykge1xuICAgICAgICBSZWFjdENvbXBvbmVudFRyZWVIb29rID0gcmVxdWlyZSgncmVhY3QvbGliL1JlYWN0Q29tcG9uZW50VHJlZUhvb2snKTtcbiAgICAgIH1cbiAgICAgIGlmICgha2V5VW5pcXVlKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnZmxhdHRlbkNoaWxkcmVuKC4uLik6IEVuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgJyArICdgJXNgLiBDaGlsZCBrZXlzIG11c3QgYmUgdW5pcXVlOyB3aGVuIHR3byBjaGlsZHJlbiBzaGFyZSBhIGtleSwgb25seSAnICsgJ3RoZSBmaXJzdCBjaGlsZCB3aWxsIGJlIHVzZWQuJXMnLCBLZXlFc2NhcGVVdGlscy51bmVzY2FwZShuYW1lKSwgUmVhY3RDb21wb25lbnRUcmVlSG9vay5nZXRTdGFja0FkZGVuZHVtQnlJRChzZWxmRGVidWdJRCkpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoa2V5VW5pcXVlICYmIGNoaWxkICE9IG51bGwpIHtcbiAgICAgIHJlc3VsdFtuYW1lXSA9IGNoaWxkO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEZsYXR0ZW5zIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC4gQW55IG51bGxcbiAqIGNoaWxkcmVuIHdpbGwgbm90IGJlIGluY2x1ZGVkIGluIHRoZSByZXN1bHRpbmcgb2JqZWN0LlxuICogQHJldHVybiB7IW9iamVjdH0gZmxhdHRlbmVkIGNoaWxkcmVuIGtleWVkIGJ5IG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihjaGlsZHJlbiwgc2VsZkRlYnVnSUQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgZnVuY3Rpb24gKHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUpIHtcbiAgICAgIHJldHVybiBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lLCBzZWxmRGVidWdJRCk7XG4gICAgfSwgcmVzdWx0KTtcbiAgfSBlbHNlIHtcbiAgICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgcmVzdWx0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZsYXR0ZW5DaGlsZHJlbjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9mbGF0dGVuQ2hpbGRyZW4uanNcbi8vIG1vZHVsZSBpZCA9IDE3MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRDaGFyQ29kZScpO1xuXG4vKipcbiAqIE5vcm1hbGl6YXRpb24gb2YgZGVwcmVjYXRlZCBIVE1MNSBga2V5YCB2YWx1ZXNcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG4gKi9cbnZhciBub3JtYWxpemVLZXkgPSB7XG4gICdFc2MnOiAnRXNjYXBlJyxcbiAgJ1NwYWNlYmFyJzogJyAnLFxuICAnTGVmdCc6ICdBcnJvd0xlZnQnLFxuICAnVXAnOiAnQXJyb3dVcCcsXG4gICdSaWdodCc6ICdBcnJvd1JpZ2h0JyxcbiAgJ0Rvd24nOiAnQXJyb3dEb3duJyxcbiAgJ0RlbCc6ICdEZWxldGUnLFxuICAnV2luJzogJ09TJyxcbiAgJ01lbnUnOiAnQ29udGV4dE1lbnUnLFxuICAnQXBwcyc6ICdDb250ZXh0TWVudScsXG4gICdTY3JvbGwnOiAnU2Nyb2xsTG9jaycsXG4gICdNb3pQcmludGFibGVLZXknOiAnVW5pZGVudGlmaWVkJ1xufTtcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIGxlZ2FjeSBga2V5Q29kZWAgdG8gSFRNTDUgYGtleWBcbiAqIE9ubHkgc3BlY2lhbCBrZXlzIHN1cHBvcnRlZCwgYWxsIG90aGVycyBkZXBlbmQgb24ga2V5Ym9hcmQgbGF5b3V0IG9yIGJyb3dzZXJcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQjS2V5X25hbWVzXG4gKi9cbnZhciB0cmFuc2xhdGVUb0tleSA9IHtcbiAgODogJ0JhY2tzcGFjZScsXG4gIDk6ICdUYWInLFxuICAxMjogJ0NsZWFyJyxcbiAgMTM6ICdFbnRlcicsXG4gIDE2OiAnU2hpZnQnLFxuICAxNzogJ0NvbnRyb2wnLFxuICAxODogJ0FsdCcsXG4gIDE5OiAnUGF1c2UnLFxuICAyMDogJ0NhcHNMb2NrJyxcbiAgMjc6ICdFc2NhcGUnLFxuICAzMjogJyAnLFxuICAzMzogJ1BhZ2VVcCcsXG4gIDM0OiAnUGFnZURvd24nLFxuICAzNTogJ0VuZCcsXG4gIDM2OiAnSG9tZScsXG4gIDM3OiAnQXJyb3dMZWZ0JyxcbiAgMzg6ICdBcnJvd1VwJyxcbiAgMzk6ICdBcnJvd1JpZ2h0JyxcbiAgNDA6ICdBcnJvd0Rvd24nLFxuICA0NTogJ0luc2VydCcsXG4gIDQ2OiAnRGVsZXRlJyxcbiAgMTEyOiAnRjEnLCAxMTM6ICdGMicsIDExNDogJ0YzJywgMTE1OiAnRjQnLCAxMTY6ICdGNScsIDExNzogJ0Y2JyxcbiAgMTE4OiAnRjcnLCAxMTk6ICdGOCcsIDEyMDogJ0Y5JywgMTIxOiAnRjEwJywgMTIyOiAnRjExJywgMTIzOiAnRjEyJyxcbiAgMTQ0OiAnTnVtTG9jaycsXG4gIDE0NTogJ1Njcm9sbExvY2snLFxuICAyMjQ6ICdNZXRhJ1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgYGtleWAgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50S2V5KG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcbiAgICAvLyBOb3JtYWxpemUgaW5jb25zaXN0ZW50IHZhbHVlcyByZXBvcnRlZCBieSBicm93c2VycyBkdWUgdG9cbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgb2YgYSB3b3JraW5nIGRyYWZ0IHNwZWNpZmljYXRpb24uXG5cbiAgICAvLyBGaXJlRm94IGltcGxlbWVudHMgYGtleWAgYnV0IHJldHVybnMgYE1velByaW50YWJsZUtleWAgZm9yIGFsbFxuICAgIC8vIHByaW50YWJsZSBjaGFyYWN0ZXJzIChub3JtYWxpemVkIHRvIGBVbmlkZW50aWZpZWRgKSwgaWdub3JlIGl0LlxuICAgIHZhciBrZXkgPSBub3JtYWxpemVLZXlbbmF0aXZlRXZlbnQua2V5XSB8fCBuYXRpdmVFdmVudC5rZXk7XG4gICAgaWYgKGtleSAhPT0gJ1VuaWRlbnRpZmllZCcpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG5cbiAgLy8gQnJvd3NlciBkb2VzIG5vdCBpbXBsZW1lbnQgYGtleWAsIHBvbHlmaWxsIGFzIG11Y2ggb2YgaXQgYXMgd2UgY2FuLlxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgIHZhciBjaGFyQ29kZSA9IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpO1xuXG4gICAgLy8gVGhlIGVudGVyLWtleSBpcyB0ZWNobmljYWxseSBib3RoIHByaW50YWJsZSBhbmQgbm9uLXByaW50YWJsZSBhbmQgY2FuXG4gICAgLy8gdGh1cyBiZSBjYXB0dXJlZCBieSBga2V5cHJlc3NgLCBubyBvdGhlciBub24tcHJpbnRhYmxlIGtleSBzaG91bGQuXG4gICAgcmV0dXJuIGNoYXJDb2RlID09PSAxMyA/ICdFbnRlcicgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgfVxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAvLyBXaGlsZSB1c2VyIGtleWJvYXJkIGxheW91dCBkZXRlcm1pbmVzIHRoZSBhY3R1YWwgbWVhbmluZyBvZiBlYWNoXG4gICAgLy8gYGtleUNvZGVgIHZhbHVlLCBhbG1vc3QgYWxsIGZ1bmN0aW9uIGtleXMgaGF2ZSBhIHVuaXZlcnNhbCB2YWx1ZS5cbiAgICByZXR1cm4gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgJ1VuaWRlbnRpZmllZCc7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50S2V5O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL2dldEV2ZW50S2V5LmpzXG4vLyBtb2R1bGUgaWQgPSAxNzJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiBnbG9iYWwgU3ltYm9sICovXG5cbnZhciBJVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4vKipcbiAqIFJldHVybnMgdGhlIGl0ZXJhdG9yIG1ldGhvZCBmdW5jdGlvbiBjb250YWluZWQgb24gdGhlIGl0ZXJhYmxlIG9iamVjdC5cbiAqXG4gKiBCZSBzdXJlIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgaXRlcmFibGUgYXMgY29udGV4dDpcbiAqXG4gKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICogICAgIGlmIChpdGVyYXRvckZuKSB7XG4gKiAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwobXlJdGVyYWJsZSk7XG4gKiAgICAgICAuLi5cbiAqICAgICB9XG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gKiBAcmV0dXJuIHs/ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEl0ZXJhdG9yRm47XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvZ2V0SXRlcmF0b3JGbi5qc1xuLy8gbW9kdWxlIGlkID0gMTczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIG5leHREZWJ1Z0lEID0gMTtcblxuZnVuY3Rpb24gZ2V0TmV4dERlYnVnSUQoKSB7XG4gIHJldHVybiBuZXh0RGVidWdJRCsrO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5leHREZWJ1Z0lEO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC1kb20vbGliL2dldE5leHREZWJ1Z0lELmpzXG4vLyBtb2R1bGUgaWQgPSAxNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHaXZlbiBhbnkgbm9kZSByZXR1cm4gdGhlIGZpcnN0IGxlYWYgbm9kZSB3aXRob3V0IGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuXG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlICYmIG5vZGUuZmlyc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IHNpYmxpbmcgd2l0aGluIGEgY29udGFpbmVyLiBUaGlzIHdpbGwgd2FsayB1cCB0aGVcbiAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuICB2YXIgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICB2YXIgbm9kZVN0YXJ0ID0gMDtcbiAgdmFyIG5vZGVFbmQgPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgIG5vZGVFbmQgPSBub2RlU3RhcnQgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcblxuICAgICAgaWYgKG5vZGVTdGFydCA8PSBvZmZzZXQgJiYgbm9kZUVuZCA+PSBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0IC0gbm9kZVN0YXJ0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG5vZGVTdGFydCA9IG5vZGVFbmQ7XG4gICAgfVxuXG4gICAgbm9kZSA9IGdldExlYWZOb2RlKGdldFNpYmxpbmdOb2RlKG5vZGUpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldC5qc1xuLy8gbW9kdWxlIGlkID0gMTc1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBtYXBwaW5nIG9mIHN0YW5kYXJkIHZlbmRvciBwcmVmaXhlcyB1c2luZyB0aGUgZGVmaW5lZCBzdHlsZSBwcm9wZXJ0eSBhbmQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVQcm9wXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtYWtlUHJlZml4TWFwKHN0eWxlUHJvcCwgZXZlbnROYW1lKSB7XG4gIHZhciBwcmVmaXhlcyA9IHt9O1xuXG4gIHByZWZpeGVzW3N0eWxlUHJvcC50b0xvd2VyQ2FzZSgpXSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBwcmVmaXhlc1snV2Via2l0JyArIHN0eWxlUHJvcF0gPSAnd2Via2l0JyArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbJ01veicgKyBzdHlsZVByb3BdID0gJ21veicgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzWydtcycgKyBzdHlsZVByb3BdID0gJ01TJyArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbJ08nICsgc3R5bGVQcm9wXSA9ICdvJyArIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIHJldHVybiBwcmVmaXhlcztcbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2YgZXZlbnQgbmFtZXMgdG8gYSBjb25maWd1cmFibGUgbGlzdCBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IHtcbiAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uRW5kJyksXG4gIGFuaW1hdGlvbml0ZXJhdGlvbjogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvbkl0ZXJhdGlvbicpLFxuICBhbmltYXRpb25zdGFydDogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvblN0YXJ0JyksXG4gIHRyYW5zaXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ1RyYW5zaXRpb24nLCAnVHJhbnNpdGlvbkVuZCcpXG59O1xuXG4vKipcbiAqIEV2ZW50IG5hbWVzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gZGV0ZWN0ZWQgYW5kIHByZWZpeGVkIChpZiBhcHBsaWNhYmxlKS5cbiAqL1xudmFyIHByZWZpeGVkRXZlbnROYW1lcyA9IHt9O1xuXG4vKipcbiAqIEVsZW1lbnQgdG8gY2hlY2sgZm9yIHByZWZpeGVzIG9uLlxuICovXG52YXIgc3R5bGUgPSB7fTtcblxuLyoqXG4gKiBCb290c3RyYXAgaWYgYSBET00gZXhpc3RzLlxuICovXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbiAgLy8gT24gc29tZSBwbGF0Zm9ybXMsIGluIHBhcnRpY3VsYXIgc29tZSByZWxlYXNlcyBvZiBBbmRyb2lkIDQueCxcbiAgLy8gdGhlIHVuLXByZWZpeGVkIFwiYW5pbWF0aW9uXCIgYW5kIFwidHJhbnNpdGlvblwiIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgb24gdGhlXG4gIC8vIHN0eWxlIG9iamVjdCBidXQgdGhlIGV2ZW50cyB0aGF0IGZpcmUgd2lsbCBzdGlsbCBiZSBwcmVmaXhlZCwgc28gd2UgbmVlZFxuICAvLyB0byBjaGVjayBpZiB0aGUgdW4tcHJlZml4ZWQgZXZlbnRzIGFyZSB1c2FibGUsIGFuZCBpZiBub3QgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgbWFwLlxuICBpZiAoISgnQW5pbWF0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uO1xuICB9XG5cbiAgLy8gU2FtZSBhcyBhYm92ZVxuICBpZiAoISgnVHJhbnNpdGlvbkV2ZW50JyBpbiB3aW5kb3cpKSB7XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbjtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGRldGVybWluZSB0aGUgY29ycmVjdCB2ZW5kb3IgcHJlZml4ZWQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgaWYgKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICB9IGVsc2UgaWYgKCF2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIGV2ZW50TmFtZTtcbiAgfVxuXG4gIHZhciBwcmVmaXhNYXAgPSB2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdO1xuXG4gIGZvciAodmFyIHN0eWxlUHJvcCBpbiBwcmVmaXhNYXApIHtcbiAgICBpZiAocHJlZml4TWFwLmhhc093blByb3BlcnR5KHN0eWxlUHJvcCkgJiYgc3R5bGVQcm9wIGluIHN0eWxlKSB7XG4gICAgICByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWU7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9saWIvZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUuanNcbi8vIG1vZHVsZSBpZCA9IDE3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXInKTtcblxuLyoqXG4gKiBFc2NhcGVzIGF0dHJpYnV0ZSB2YWx1ZSB0byBwcmV2ZW50IHNjcmlwdGluZyBhdHRhY2tzLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVmFsdWUgdG8gZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpIHtcbiAgcmV0dXJuICdcIicgKyBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodmFsdWUpICsgJ1wiJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QtZG9tL2xpYi9xdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gMTc3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9SZWFjdERPTVNlcnZlcicpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0LWRvbS9zZXJ2ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDE3OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRXNjYXBlIGFuZCB3cmFwIGtleSBzbyBpdCBpcyBzYWZlIHRvIHVzZSBhcyBhIHJlYWN0aWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRvIGJlIGVzY2FwZWQuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHRoZSBlc2NhcGVkIGtleS5cbiAqL1xuXG5mdW5jdGlvbiBlc2NhcGUoa2V5KSB7XG4gIHZhciBlc2NhcGVSZWdleCA9IC9bPTpdL2c7XG4gIHZhciBlc2NhcGVyTG9va3VwID0ge1xuICAgICc9JzogJz0wJyxcbiAgICAnOic6ICc9MidcbiAgfTtcbiAgdmFyIGVzY2FwZWRTdHJpbmcgPSAoJycgKyBrZXkpLnJlcGxhY2UoZXNjYXBlUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiBlc2NhcGVyTG9va3VwW21hdGNoXTtcbiAgfSk7XG5cbiAgcmV0dXJuICckJyArIGVzY2FwZWRTdHJpbmc7XG59XG5cbi8qKlxuICogVW5lc2NhcGUgYW5kIHVud3JhcCBrZXkgZm9yIGh1bWFuLXJlYWRhYmxlIGRpc3BsYXlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRvIHVuZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgdW5lc2NhcGVkIGtleS5cbiAqL1xuZnVuY3Rpb24gdW5lc2NhcGUoa2V5KSB7XG4gIHZhciB1bmVzY2FwZVJlZ2V4ID0gLyg9MHw9MikvZztcbiAgdmFyIHVuZXNjYXBlckxvb2t1cCA9IHtcbiAgICAnPTAnOiAnPScsXG4gICAgJz0yJzogJzonXG4gIH07XG4gIHZhciBrZXlTdWJzdHJpbmcgPSBrZXlbMF0gPT09ICcuJyAmJiBrZXlbMV0gPT09ICckJyA/IGtleS5zdWJzdHJpbmcoMikgOiBrZXkuc3Vic3RyaW5nKDEpO1xuXG4gIHJldHVybiAoJycgKyBrZXlTdWJzdHJpbmcpLnJlcGxhY2UodW5lc2NhcGVSZWdleCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIHVuZXNjYXBlckxvb2t1cFttYXRjaF07XG4gIH0pO1xufVxuXG52YXIgS2V5RXNjYXBlVXRpbHMgPSB7XG4gIGVzY2FwZTogZXNjYXBlLFxuICB1bmVzY2FwZTogdW5lc2NhcGVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gS2V5RXNjYXBlVXRpbHM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0L2xpYi9LZXlFc2NhcGVVdGlscy5qc1xuLy8gbW9kdWxlIGlkID0gMTc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIFN0YXRpYyBwb29sZXJzLiBTZXZlcmFsIGN1c3RvbSB2ZXJzaW9ucyBmb3IgZWFjaCBwb3RlbnRpYWwgbnVtYmVyIG9mXG4gKiBhcmd1bWVudHMuIEEgY29tcGxldGVseSBnZW5lcmljIHBvb2xlciBpcyBlYXN5IHRvIGltcGxlbWVudCwgYnV0IHdvdWxkXG4gKiByZXF1aXJlIGFjY2Vzc2luZyB0aGUgYGFyZ3VtZW50c2Agb2JqZWN0LiBJbiBlYWNoIG9mIHRoZXNlLCBgdGhpc2AgcmVmZXJzIHRvXG4gKiB0aGUgQ2xhc3MgaXRzZWxmLCBub3QgYW4gaW5zdGFuY2UuIElmIGFueSBvdGhlcnMgYXJlIG5lZWRlZCwgc2ltcGx5IGFkZCB0aGVtXG4gKiBoZXJlLCBvciBpbiB0aGVpciBvd24gZmlsZXMuXG4gKi9cbnZhciBvbmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChjb3B5RmllbGRzRnJvbSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICB9XG59O1xuXG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyKSB7XG4gIHZhciBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMik7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyKTtcbiAgfVxufTtcblxudmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbiAoYTEsIGEyLCBhMykge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzKTtcbiAgfVxufTtcblxudmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uIChhMSwgYTIsIGEzLCBhNCkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQpO1xuICB9XG59O1xuXG52YXIgc3RhbmRhcmRSZWxlYXNlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICB2YXIgS2xhc3MgPSB0aGlzO1xuICAhKGluc3RhbmNlIGluc3RhbmNlb2YgS2xhc3MpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuJykgOiBfcHJvZEludmFyaWFudCgnMjUnKSA6IHZvaWQgMDtcbiAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCA8IEtsYXNzLnBvb2xTaXplKSB7XG4gICAgS2xhc3MuaW5zdGFuY2VQb29sLnB1c2goaW5zdGFuY2UpO1xuICB9XG59O1xuXG52YXIgREVGQVVMVF9QT09MX1NJWkUgPSAxMDtcbnZhciBERUZBVUxUX1BPT0xFUiA9IG9uZUFyZ3VtZW50UG9vbGVyO1xuXG4vKipcbiAqIEF1Z21lbnRzIGBDb3B5Q29uc3RydWN0b3JgIHRvIGJlIGEgcG9vbGFibGUgY2xhc3MsIGF1Z21lbnRpbmcgb25seSB0aGUgY2xhc3NcbiAqIGl0c2VsZiAoc3RhdGljYWxseSkgbm90IGFkZGluZyBhbnkgcHJvdG90eXBpY2FsIGZpZWxkcy4gQW55IENvcHlDb25zdHJ1Y3RvclxuICogeW91IGdpdmUgdGhpcyBtYXkgaGF2ZSBhIGBwb29sU2l6ZWAgcHJvcGVydHksIGFuZCB3aWxsIGxvb2sgZm9yIGFcbiAqIHByb3RvdHlwaWNhbCBgZGVzdHJ1Y3RvcmAgb24gaW5zdGFuY2VzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IENvcHlDb25zdHJ1Y3RvciBDb25zdHJ1Y3RvciB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlc2V0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcG9vbGVyIEN1c3RvbWl6YWJsZSBwb29sZXIuXG4gKi9cbnZhciBhZGRQb29saW5nVG8gPSBmdW5jdGlvbiAoQ29weUNvbnN0cnVjdG9yLCBwb29sZXIpIHtcbiAgLy8gQ2FzdGluZyBhcyBhbnkgc28gdGhhdCBmbG93IGlnbm9yZXMgdGhlIGFjdHVhbCBpbXBsZW1lbnRhdGlvbiBhbmQgdHJ1c3RzXG4gIC8vIGl0IHRvIG1hdGNoIHRoZSB0eXBlIHdlIGRlY2xhcmVkXG4gIHZhciBOZXdLbGFzcyA9IENvcHlDb25zdHJ1Y3RvcjtcbiAgTmV3S2xhc3MuaW5zdGFuY2VQb29sID0gW107XG4gIE5ld0tsYXNzLmdldFBvb2xlZCA9IHBvb2xlciB8fCBERUZBVUxUX1BPT0xFUjtcbiAgaWYgKCFOZXdLbGFzcy5wb29sU2l6ZSkge1xuICAgIE5ld0tsYXNzLnBvb2xTaXplID0gREVGQVVMVF9QT09MX1NJWkU7XG4gIH1cbiAgTmV3S2xhc3MucmVsZWFzZSA9IHN0YW5kYXJkUmVsZWFzZXI7XG4gIHJldHVybiBOZXdLbGFzcztcbn07XG5cbnZhciBQb29sZWRDbGFzcyA9IHtcbiAgYWRkUG9vbGluZ1RvOiBhZGRQb29saW5nVG8sXG4gIG9uZUFyZ3VtZW50UG9vbGVyOiBvbmVBcmd1bWVudFBvb2xlcixcbiAgdHdvQXJndW1lbnRQb29sZXI6IHR3b0FyZ3VtZW50UG9vbGVyLFxuICB0aHJlZUFyZ3VtZW50UG9vbGVyOiB0aHJlZUFyZ3VtZW50UG9vbGVyLFxuICBmb3VyQXJndW1lbnRQb29sZXI6IGZvdXJBcmd1bWVudFBvb2xlclxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzcztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvbGliL1Bvb2xlZENsYXNzLmpzXG4vLyBtb2R1bGUgaWQgPSAxODBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG5cbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSByZXF1aXJlKCcuL3RyYXZlcnNlQWxsQ2hpbGRyZW4nKTtcblxudmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXI7XG52YXIgZm91ckFyZ3VtZW50UG9vbGVyID0gUG9vbGVkQ2xhc3MuZm91ckFyZ3VtZW50UG9vbGVyO1xuXG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKy9nO1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsICckJi8nKTtcbn1cblxuLyoqXG4gKiBQb29sZWRDbGFzcyByZXByZXNlbnRpbmcgdGhlIGJvb2trZWVwaW5nIGFzc29jaWF0ZWQgd2l0aCBwZXJmb3JtaW5nIGEgY2hpbGRcbiAqIHRyYXZlcnNhbC4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBGb3JFYWNoQm9va0tlZXBpbmdcbiAqIEBwYXJhbSB7IWZ1bmN0aW9ufSBmb3JFYWNoRnVuY3Rpb24gRnVuY3Rpb24gdG8gcGVyZm9ybSB0cmF2ZXJzYWwgd2l0aC5cbiAqIEBwYXJhbSB7Pyp9IGZvckVhY2hDb250ZXh0IENvbnRleHQgdG8gcGVyZm9ybSBjb250ZXh0IHdpdGguXG4gKi9cbmZ1bmN0aW9uIEZvckVhY2hCb29rS2VlcGluZyhmb3JFYWNoRnVuY3Rpb24sIGZvckVhY2hDb250ZXh0KSB7XG4gIHRoaXMuZnVuYyA9IGZvckVhY2hGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gZm9yRWFjaENvbnRleHQ7XG4gIHRoaXMuY291bnQgPSAwO1xufVxuRm9yRWFjaEJvb2tLZWVwaW5nLnByb3RvdHlwZS5kZXN0cnVjdG9yID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmZ1bmMgPSBudWxsO1xuICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICB0aGlzLmNvdW50ID0gMDtcbn07XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRm9yRWFjaEJvb2tLZWVwaW5nLCB0d29Bcmd1bWVudFBvb2xlcik7XG5cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZChib29rS2VlcGluZywgY2hpbGQsIG5hbWUpIHtcbiAgdmFyIGZ1bmMgPSBib29rS2VlcGluZy5mdW5jLFxuICAgICAgY29udGV4dCA9IGJvb2tLZWVwaW5nLmNvbnRleHQ7XG5cbiAgZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlcyB0aHJvdWdoIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY2hpbGRyZW4uZm9yZWFjaFxuICpcbiAqIFRoZSBwcm92aWRlZCBmb3JFYWNoRnVuYyhjaGlsZCwgaW5kZXgpIHdpbGwgYmUgY2FsbGVkIGZvciBlYWNoXG4gKiBsZWFmIGNoaWxkLlxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHBhcmFtIHtmdW5jdGlvbigqLCBpbnQpfSBmb3JFYWNoRnVuY1xuICogQHBhcmFtIHsqfSBmb3JFYWNoQ29udGV4dCBDb250ZXh0IGZvciBmb3JFYWNoQ29udGV4dC5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpIHtcbiAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICByZXR1cm4gY2hpbGRyZW47XG4gIH1cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IEZvckVhY2hCb29rS2VlcGluZy5nZXRQb29sZWQoZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KTtcbiAgdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaFNpbmdsZUNoaWxkLCB0cmF2ZXJzZUNvbnRleHQpO1xuICBGb3JFYWNoQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xufVxuXG4vKipcbiAqIFBvb2xlZENsYXNzIHJlcHJlc2VudGluZyB0aGUgYm9va2tlZXBpbmcgYXNzb2NpYXRlZCB3aXRoIHBlcmZvcm1pbmcgYSBjaGlsZFxuICogbWFwcGluZy4gQWxsb3dzIGF2b2lkaW5nIGJpbmRpbmcgY2FsbGJhY2tzLlxuICpcbiAqIEBjb25zdHJ1Y3RvciBNYXBCb29rS2VlcGluZ1xuICogQHBhcmFtIHshKn0gbWFwUmVzdWx0IE9iamVjdCBjb250YWluaW5nIHRoZSBvcmRlcmVkIG1hcCBvZiByZXN1bHRzLlxuICogQHBhcmFtIHshZnVuY3Rpb259IG1hcEZ1bmN0aW9uIEZ1bmN0aW9uIHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICogQHBhcmFtIHs/Kn0gbWFwQ29udGV4dCBDb250ZXh0IHRvIHBlcmZvcm0gbWFwcGluZyB3aXRoLlxuICovXG5mdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsIGtleVByZWZpeCwgbWFwRnVuY3Rpb24sIG1hcENvbnRleHQpIHtcbiAgdGhpcy5yZXN1bHQgPSBtYXBSZXN1bHQ7XG4gIHRoaXMua2V5UHJlZml4ID0ga2V5UHJlZml4O1xuICB0aGlzLmZ1bmMgPSBtYXBGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gbWFwQ29udGV4dDtcbiAgdGhpcy5jb3VudCA9IDA7XG59XG5NYXBCb29rS2VlcGluZy5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5yZXN1bHQgPSBudWxsO1xuICB0aGlzLmtleVByZWZpeCA9IG51bGw7XG4gIHRoaXMuZnVuYyA9IG51bGw7XG4gIHRoaXMuY29udGV4dCA9IG51bGw7XG4gIHRoaXMuY291bnQgPSAwO1xufTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhNYXBCb29rS2VlcGluZywgZm91ckFyZ3VtZW50UG9vbGVyKTtcblxuZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChib29rS2VlcGluZywgY2hpbGQsIGNoaWxkS2V5KSB7XG4gIHZhciByZXN1bHQgPSBib29rS2VlcGluZy5yZXN1bHQsXG4gICAgICBrZXlQcmVmaXggPSBib29rS2VlcGluZy5rZXlQcmVmaXgsXG4gICAgICBmdW5jID0gYm9va0tlZXBpbmcuZnVuYyxcbiAgICAgIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuXG5cbiAgdmFyIG1hcHBlZENoaWxkID0gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkobWFwcGVkQ2hpbGQpKSB7XG4gICAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChtYXBwZWRDaGlsZCwgcmVzdWx0LCBjaGlsZEtleSwgZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50KTtcbiAgfSBlbHNlIGlmIChtYXBwZWRDaGlsZCAhPSBudWxsKSB7XG4gICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChtYXBwZWRDaGlsZCkpIHtcbiAgICAgIG1hcHBlZENoaWxkID0gUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZUtleShtYXBwZWRDaGlsZCxcbiAgICAgIC8vIEtlZXAgYm90aCB0aGUgKG1hcHBlZCkgYW5kIG9sZCBrZXlzIGlmIHRoZXkgZGlmZmVyLCBqdXN0IGFzXG4gICAgICAvLyB0cmF2ZXJzZUFsbENoaWxkcmVuIHVzZWQgdG8gZG8gZm9yIG9iamVjdHMgYXMgY2hpbGRyZW5cbiAgICAgIGtleVByZWZpeCArIChtYXBwZWRDaGlsZC5rZXkgJiYgKCFjaGlsZCB8fCBjaGlsZC5rZXkgIT09IG1hcHBlZENoaWxkLmtleSkgPyBlc2NhcGVVc2VyUHJvdmlkZWRLZXkobWFwcGVkQ2hpbGQua2V5KSArICcvJyA6ICcnKSArIGNoaWxkS2V5KTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2gobWFwcGVkQ2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIGFycmF5LCBwcmVmaXgsIGZ1bmMsIGNvbnRleHQpIHtcbiAgdmFyIGVzY2FwZWRQcmVmaXggPSAnJztcbiAgaWYgKHByZWZpeCAhPSBudWxsKSB7XG4gICAgZXNjYXBlZFByZWZpeCA9IGVzY2FwZVVzZXJQcm92aWRlZEtleShwcmVmaXgpICsgJy8nO1xuICB9XG4gIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBNYXBCb29rS2VlcGluZy5nZXRQb29sZWQoYXJyYXksIGVzY2FwZWRQcmVmaXgsIGZ1bmMsIGNvbnRleHQpO1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBtYXBTaW5nbGVDaGlsZEludG9Db250ZXh0LCB0cmF2ZXJzZUNvbnRleHQpO1xuICBNYXBCb29rS2VlcGluZy5yZWxlYXNlKHRyYXZlcnNlQ29udGV4dCk7XG59XG5cbi8qKlxuICogTWFwcyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLm1hcFxuICpcbiAqIFRoZSBwcm92aWRlZCBtYXBGdW5jdGlvbihjaGlsZCwga2V5LCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMgVGhlIG1hcCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBtYXBGdW5jdGlvbi5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBmdW5jLCBjb250ZXh0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZm9yRWFjaFNpbmdsZUNoaWxkRHVtbXkodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSkge1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBDb3VudCB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIHRoYXQgYXJlIHR5cGljYWxseSBzcGVjaWZpZWQgYXNcbiAqIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNoaWxkcmVuLmNvdW50XG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4uXG4gKi9cbmZ1bmN0aW9uIGNvdW50Q2hpbGRyZW4oY2hpbGRyZW4sIGNvbnRleHQpIHtcbiAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hTaW5nbGVDaGlsZER1bW15LCBudWxsKTtcbn1cblxuLyoqXG4gKiBGbGF0dGVuIGEgY2hpbGRyZW4gb2JqZWN0ICh0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmApIGFuZFxuICogcmV0dXJuIGFuIGFycmF5IHdpdGggYXBwcm9wcmlhdGVseSByZS1rZXllZCBjaGlsZHJlbi5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9mYWNlYm9vay5naXRodWIuaW8vcmVhY3QvZG9jcy90b3AtbGV2ZWwtYXBpLmh0bWwjcmVhY3QuY2hpbGRyZW4udG9hcnJheVxuICovXG5mdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgUmVhY3RDaGlsZHJlbiA9IHtcbiAgZm9yRWFjaDogZm9yRWFjaENoaWxkcmVuLFxuICBtYXA6IG1hcENoaWxkcmVuLFxuICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsOiBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsLFxuICBjb3VudDogY291bnRDaGlsZHJlbixcbiAgdG9BcnJheTogdG9BcnJheVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkcmVuO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC9saWIvUmVhY3RDaGlsZHJlbi5qc1xuLy8gbW9kdWxlIGlkID0gMTgxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50JyksXG4gICAgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcblxudmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudCcpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlJyk7XG5cbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIE1JWElOU19LRVkgPSAnbWl4aW5zJztcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGFsbG93IHRoZSBjcmVhdGlvbiBvZiBhbm9ueW1vdXMgZnVuY3Rpb25zIHdoaWNoIGRvIG5vdFxuLy8gaGF2ZSAubmFtZSBzZXQgdG8gdGhlIG5hbWUgb2YgdGhlIHZhcmlhYmxlIGJlaW5nIGFzc2lnbmVkIHRvLlxuZnVuY3Rpb24gaWRlbnRpdHkoZm4pIHtcbiAgcmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFBvbGljaWVzIHRoYXQgZGVzY3JpYmUgbWV0aG9kcyBpbiBgUmVhY3RDbGFzc0ludGVyZmFjZWAuXG4gKi9cblxuXG52YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcblxuLyoqXG4gKiBDb21wb3NpdGUgY29tcG9uZW50cyBhcmUgaGlnaGVyLWxldmVsIGNvbXBvbmVudHMgdGhhdCBjb21wb3NlIG90aGVyIGNvbXBvc2l0ZVxuICogb3IgaG9zdCBjb21wb25lbnRzLlxuICpcbiAqIFRvIGNyZWF0ZSBhIG5ldyB0eXBlIG9mIGBSZWFjdENsYXNzYCwgcGFzcyBhIHNwZWNpZmljYXRpb24gb2ZcbiAqIHlvdXIgbmV3IGNsYXNzIHRvIGBSZWFjdC5jcmVhdGVDbGFzc2AuIFRoZSBvbmx5IHJlcXVpcmVtZW50IG9mIHlvdXIgY2xhc3NcbiAqIHNwZWNpZmljYXRpb24gaXMgdGhhdCB5b3UgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLlxuICpcbiAqICAgdmFyIE15Q29tcG9uZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gKiAgICAgICByZXR1cm4gPGRpdj5IZWxsbyBXb3JsZDwvZGl2PjtcbiAqICAgICB9XG4gKiAgIH0pO1xuICpcbiAqIFRoZSBjbGFzcyBzcGVjaWZpY2F0aW9uIHN1cHBvcnRzIGEgc3BlY2lmaWMgcHJvdG9jb2wgb2YgbWV0aG9kcyB0aGF0IGhhdmVcbiAqIHNwZWNpYWwgbWVhbmluZyAoZS5nLiBgcmVuZGVyYCkuIFNlZSBgUmVhY3RDbGFzc0ludGVyZmFjZWAgZm9yXG4gKiBtb3JlIHRoZSBjb21wcmVoZW5zaXZlIHByb3RvY29sLiBBbnkgb3RoZXIgcHJvcGVydGllcyBhbmQgbWV0aG9kcyBpbiB0aGVcbiAqIGNsYXNzIHNwZWNpZmljYXRpb24gd2lsbCBiZSBhdmFpbGFibGUgb24gdGhlIHByb3RvdHlwZS5cbiAqXG4gKiBAaW50ZXJmYWNlIFJlYWN0Q2xhc3NJbnRlcmZhY2VcbiAqIEBpbnRlcm5hbFxuICovXG52YXIgUmVhY3RDbGFzc0ludGVyZmFjZSA9IHtcblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgTWl4aW4gb2JqZWN0cyB0byBpbmNsdWRlIHdoZW4gZGVmaW5pbmcgeW91ciBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHthcnJheX1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBtaXhpbnM6ICdERUZJTkVfTUFOWScsXG5cbiAgLyoqXG4gICAqIEFuIG9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgdGhhdCBzaG91bGQgYmUgZGVmaW5lZCBvblxuICAgKiB0aGUgY29tcG9uZW50J3MgY29uc3RydWN0b3IgaW5zdGVhZCBvZiBpdHMgcHJvdG90eXBlIChzdGF0aWMgbWV0aG9kcykuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc3RhdGljczogJ0RFRklORV9NQU5ZJyxcblxuICAvKipcbiAgICogRGVmaW5pdGlvbiBvZiBwcm9wIHR5cGVzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogQHR5cGUge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBwcm9wVHlwZXM6ICdERUZJTkVfTUFOWScsXG5cbiAgLyoqXG4gICAqIERlZmluaXRpb24gb2YgY29udGV4dCB0eXBlcyBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqXG4gICAqIEB0eXBlIHtvYmplY3R9XG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgY29udGV4dFR5cGVzOiAnREVGSU5FX01BTlknLFxuXG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIG9mIGNvbnRleHQgdHlwZXMgdGhpcyBjb21wb25lbnQgc2V0cyBmb3IgaXRzIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAdHlwZSB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNoaWxkQ29udGV4dFR5cGVzOiAnREVGSU5FX01BTlknLFxuXG4gIC8vID09PT0gRGVmaW5pdGlvbiBtZXRob2RzID09PT1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC4gVmFsdWVzIGluIHRoZSBtYXBwaW5nIHdpbGwgYmUgc2V0IG9uXG4gICAqIGB0aGlzLnByb3BzYCBpZiB0aGF0IHByb3AgaXMgbm90IHNwZWNpZmllZCAoaS5lLiB1c2luZyBhbiBgaW5gIGNoZWNrKS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgaW52b2tlZCBiZWZvcmUgYGdldEluaXRpYWxTdGF0ZWAgYW5kIHRoZXJlZm9yZSBjYW5ub3QgcmVseVxuICAgKiBvbiBgdGhpcy5zdGF0ZWAgb3IgdXNlIGB0aGlzLnNldFN0YXRlYC5cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldERlZmF1bHRQcm9wczogJ0RFRklORV9NQU5ZX01FUkdFRCcsXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb25jZSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBtb3VudGVkLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZFxuICAgKiBhcyB0aGUgaW5pdGlhbCB2YWx1ZSBvZiBgdGhpcy5zdGF0ZWAuXG4gICAqXG4gICAqICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICogICAgIHJldHVybiB7XG4gICAqICAgICAgIGlzT246IGZhbHNlLFxuICAgKiAgICAgICBmb29CYXo6IG5ldyBCYXpGb28oKVxuICAgKiAgICAgfVxuICAgKiAgIH1cbiAgICpcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGdldEluaXRpYWxTdGF0ZTogJ0RFRklORV9NQU5ZX01FUkdFRCcsXG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBnZXRDaGlsZENvbnRleHQ6ICdERUZJTkVfTUFOWV9NRVJHRUQnLFxuXG4gIC8qKlxuICAgKiBVc2VzIHByb3BzIGZyb20gYHRoaXMucHJvcHNgIGFuZCBzdGF0ZSBmcm9tIGB0aGlzLnN0YXRlYCB0byByZW5kZXIgdGhlXG4gICAqIHN0cnVjdHVyZSBvZiB0aGUgY29tcG9uZW50LlxuICAgKlxuICAgKiBObyBndWFyYW50ZWVzIGFyZSBtYWRlIGFib3V0IHdoZW4gb3IgaG93IG9mdGVuIHRoaXMgbWV0aG9kIGlzIGludm9rZWQsIHNvXG4gICAqIGl0IG11c3Qgbm90IGhhdmUgc2lkZSBlZmZlY3RzLlxuICAgKlxuICAgKiAgIHJlbmRlcjogZnVuY3Rpb24oKSB7XG4gICAqICAgICB2YXIgbmFtZSA9IHRoaXMucHJvcHMubmFtZTtcbiAgICogICAgIHJldHVybiA8ZGl2PkhlbGxvLCB7bmFtZX0hPC9kaXY+O1xuICAgKiAgIH1cbiAgICpcbiAgICogQHJldHVybiB7UmVhY3RDb21wb25lbnR9XG4gICAqIEBub3NpZGVlZmZlY3RzXG4gICAqIEByZXF1aXJlZFxuICAgKi9cbiAgcmVuZGVyOiAnREVGSU5FX09OQ0UnLFxuXG4gIC8vID09PT0gRGVsZWdhdGUgbWV0aG9kcyA9PT09XG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGluaXRpYWxseSBjcmVhdGVkIGFuZCBhYm91dCB0byBiZSBtb3VudGVkLlxuICAgKiBUaGlzIG1heSBoYXZlIHNpZGUgZWZmZWN0cywgYnV0IGFueSBleHRlcm5hbCBzdWJzY3JpcHRpb25zIG9yIGRhdGEgY3JlYXRlZFxuICAgKiBieSB0aGlzIG1ldGhvZCBtdXN0IGJlIGNsZWFuZWQgdXAgaW4gYGNvbXBvbmVudFdpbGxVbm1vdW50YC5cbiAgICpcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsTW91bnQ6ICdERUZJTkVfTUFOWScsXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgY29tcG9uZW50IGhhcyBiZWVuIG1vdW50ZWQgYW5kIGhhcyBhIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICogSG93ZXZlciwgdGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIERPTSBub2RlIGlzIGluIHRoZSBkb2N1bWVudC5cbiAgICpcbiAgICogVXNlIHRoaXMgYXMgYW4gb3Bwb3J0dW5pdHkgdG8gb3BlcmF0ZSBvbiB0aGUgRE9NIHdoZW4gdGhlIGNvbXBvbmVudCBoYXNcbiAgICogYmVlbiBtb3VudGVkIChpbml0aWFsaXplZCBhbmQgcmVuZGVyZWQpIGZvciB0aGUgZmlyc3QgdGltZS5cbiAgICpcbiAgICogQHBhcmFtIHtET01FbGVtZW50fSByb290Tm9kZSBET00gZWxlbWVudCByZXByZXNlbnRpbmcgdGhlIGNvbXBvbmVudC5cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnREaWRNb3VudDogJ0RFRklORV9NQU5ZJyxcblxuICAvKipcbiAgICogSW52b2tlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCByZWNlaXZlcyBuZXcgcHJvcHMuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHJlYWN0IHRvIGEgcHJvcCB0cmFuc2l0aW9uIGJ5IHVwZGF0aW5nIHRoZVxuICAgKiBzdGF0ZSB1c2luZyBgdGhpcy5zZXRTdGF0ZWAuIEN1cnJlbnQgcHJvcHMgYXJlIGFjY2Vzc2VkIHZpYSBgdGhpcy5wcm9wc2AuXG4gICAqXG4gICAqICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wczogZnVuY3Rpb24obmV4dFByb3BzLCBuZXh0Q29udGV4dCkge1xuICAgKiAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAqICAgICAgIGxpa2VzSW5jcmVhc2luZzogbmV4dFByb3BzLmxpa2VDb3VudCA+IHRoaXMucHJvcHMubGlrZUNvdW50XG4gICAqICAgICB9KTtcbiAgICogICB9XG4gICAqXG4gICAqIE5PVEU6IFRoZXJlIGlzIG5vIGVxdWl2YWxlbnQgYGNvbXBvbmVudFdpbGxSZWNlaXZlU3RhdGVgLiBBbiBpbmNvbWluZyBwcm9wXG4gICAqIHRyYW5zaXRpb24gbWF5IGNhdXNlIGEgc3RhdGUgY2hhbmdlLCBidXQgdGhlIG9wcG9zaXRlIGlzIG5vdCB0cnVlLiBJZiB5b3VcbiAgICogbmVlZCBpdCwgeW91IGFyZSBwcm9iYWJseSBsb29raW5nIGZvciBgY29tcG9uZW50V2lsbFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBuZXh0UHJvcHNcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiAnREVGSU5FX01BTlknLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoaWxlIGRlY2lkaW5nIGlmIHRoZSBjb21wb25lbnQgc2hvdWxkIGJlIHVwZGF0ZWQgYXMgYSByZXN1bHQgb2ZcbiAgICogcmVjZWl2aW5nIG5ldyBwcm9wcywgc3RhdGUgYW5kL29yIGNvbnRleHQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGByZXR1cm4gZmFsc2VgIHdoZW4geW91J3JlIGNlcnRhaW4gdGhhdCB0aGVcbiAgICogdHJhbnNpdGlvbiB0byB0aGUgbmV3IHByb3BzL3N0YXRlL2NvbnRleHQgd2lsbCBub3QgcmVxdWlyZSBhIGNvbXBvbmVudFxuICAgKiB1cGRhdGUuXG4gICAqXG4gICAqICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICogICAgIHJldHVybiAhZXF1YWwobmV4dFByb3BzLCB0aGlzLnByb3BzKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dFN0YXRlLCB0aGlzLnN0YXRlKSB8fFxuICAgKiAgICAgICAhZXF1YWwobmV4dENvbnRleHQsIHRoaXMuY29udGV4dCk7XG4gICAqICAgfVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbmV4dFByb3BzXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dFN0YXRlXG4gICAqIEBwYXJhbSB7P29iamVjdH0gbmV4dENvbnRleHRcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgY29tcG9uZW50IHNob3VsZCB1cGRhdGUuXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiAnREVGSU5FX09OQ0UnLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBhYm91dCB0byB1cGRhdGUgZHVlIHRvIGEgdHJhbnNpdGlvbiBmcm9tXG4gICAqIGB0aGlzLnByb3BzYCwgYHRoaXMuc3RhdGVgIGFuZCBgdGhpcy5jb250ZXh0YCB0byBgbmV4dFByb3BzYCwgYG5leHRTdGF0ZWBcbiAgICogYW5kIGBuZXh0Q29udGV4dGAuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIHBlcmZvcm0gcHJlcGFyYXRpb24gYmVmb3JlIGFuIHVwZGF0ZSBvY2N1cnMuXG4gICAqXG4gICAqIE5PVEU6IFlvdSAqKmNhbm5vdCoqIHVzZSBgdGhpcy5zZXRTdGF0ZSgpYCBpbiB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IG5leHRQcm9wc1xuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRTdGF0ZVxuICAgKiBAcGFyYW0gez9vYmplY3R9IG5leHRDb250ZXh0XG4gICAqIEBwYXJhbSB7UmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbn0gdHJhbnNhY3Rpb25cbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBjb21wb25lbnRXaWxsVXBkYXRlOiAnREVGSU5FX01BTlknLFxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW4gdGhlIGNvbXBvbmVudCdzIERPTSByZXByZXNlbnRhdGlvbiBoYXMgYmVlbiB1cGRhdGVkLlxuICAgKlxuICAgKiBVc2UgdGhpcyBhcyBhbiBvcHBvcnR1bml0eSB0byBvcGVyYXRlIG9uIHRoZSBET00gd2hlbiB0aGUgY29tcG9uZW50IGhhc1xuICAgKiBiZWVuIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2UHJvcHNcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2U3RhdGVcbiAgICogQHBhcmFtIHs/b2JqZWN0fSBwcmV2Q29udGV4dFxuICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHJvb3ROb2RlIERPTSBlbGVtZW50IHJlcHJlc2VudGluZyB0aGUgY29tcG9uZW50LlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudERpZFVwZGF0ZTogJ0RFRklORV9NQU5ZJyxcblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBjb21wb25lbnQgaXMgYWJvdXQgdG8gYmUgcmVtb3ZlZCBmcm9tIGl0cyBwYXJlbnQgYW5kIGhhdmVcbiAgICogaXRzIERPTSByZXByZXNlbnRhdGlvbiBkZXN0cm95ZWQuXG4gICAqXG4gICAqIFVzZSB0aGlzIGFzIGFuIG9wcG9ydHVuaXR5IHRvIGRlYWxsb2NhdGUgYW55IGV4dGVybmFsIHJlc291cmNlcy5cbiAgICpcbiAgICogTk9URTogVGhlcmUgaXMgbm8gYGNvbXBvbmVudERpZFVubW91bnRgIHNpbmNlIHlvdXIgY29tcG9uZW50IHdpbGwgaGF2ZSBiZWVuXG4gICAqIGRlc3Ryb3llZCBieSB0aGF0IHBvaW50LlxuICAgKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiAnREVGSU5FX01BTlknLFxuXG4gIC8vID09PT0gQWR2YW5jZWQgbWV0aG9kcyA9PT09XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGNvbXBvbmVudCdzIGN1cnJlbnRseSBtb3VudGVkIERPTSByZXByZXNlbnRhdGlvbi5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhpcyBpbXBsZW1lbnRzIFJlYWN0J3MgcmVuZGVyaW5nIGFuZCByZWNvbmNpbGlhdGlvbiBhbGdvcml0aG0uXG4gICAqIFNvcGhpc3RpY2F0ZWQgY2xpZW50cyBtYXkgd2lzaCB0byBvdmVycmlkZSB0aGlzLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb259IHRyYW5zYWN0aW9uXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAb3ZlcnJpZGFibGVcbiAgICovXG4gIHVwZGF0ZUNvbXBvbmVudDogJ09WRVJSSURFX0JBU0UnXG5cbn07XG5cbi8qKlxuICogTWFwcGluZyBmcm9tIGNsYXNzIHNwZWNpZmljYXRpb24ga2V5cyB0byBzcGVjaWFsIHByb2Nlc3NpbmcgZnVuY3Rpb25zLlxuICpcbiAqIEFsdGhvdWdoIHRoZXNlIGFyZSBkZWNsYXJlZCBsaWtlIGluc3RhbmNlIHByb3BlcnRpZXMgaW4gdGhlIHNwZWNpZmljYXRpb25cbiAqIHdoZW4gZGVmaW5pbmcgY2xhc3NlcyB1c2luZyBgUmVhY3QuY3JlYXRlQ2xhc3NgLCB0aGV5IGFyZSBhY3R1YWxseSBzdGF0aWNcbiAqIGFuZCBhcmUgYWNjZXNzaWJsZSBvbiB0aGUgY29uc3RydWN0b3IgaW5zdGVhZCBvZiB0aGUgcHJvdG90eXBlLiBEZXNwaXRlXG4gKiBiZWluZyBzdGF0aWMsIHRoZXkgbXVzdCBiZSBkZWZpbmVkIG91dHNpZGUgb2YgdGhlIFwic3RhdGljc1wiIGtleSB1bmRlclxuICogd2hpY2ggYWxsIG90aGVyIHN0YXRpYyBtZXRob2RzIGFyZSBkZWZpbmVkLlxuICovXG52YXIgUkVTRVJWRURfU1BFQ19LRVlTID0ge1xuICBkaXNwbGF5TmFtZTogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBkaXNwbGF5TmFtZSkge1xuICAgIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIH0sXG4gIG1peGluczogZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBtaXhpbnMpIHtcbiAgICBpZiAobWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgbWl4aW5zW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNoaWxkQ29udGV4dFR5cGVzOiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY2hpbGRDb250ZXh0VHlwZXMsICdjaGlsZENvbnRleHQnKTtcbiAgICB9XG4gICAgQ29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMgPSBfYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcywgY2hpbGRDb250ZXh0VHlwZXMpO1xuICB9LFxuICBjb250ZXh0VHlwZXM6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgY29udGV4dFR5cGVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY29udGV4dFR5cGVzLCAnY29udGV4dCcpO1xuICAgIH1cbiAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMgPSBfYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMsIGNvbnRleHRUeXBlcyk7XG4gIH0sXG4gIC8qKlxuICAgKiBTcGVjaWFsIGNhc2UgZ2V0RGVmYXVsdFByb3BzIHdoaWNoIHNob3VsZCBtb3ZlIGludG8gc3RhdGljcyBidXQgcmVxdWlyZXNcbiAgICogYXV0b21hdGljIG1lcmdpbmcuXG4gICAqL1xuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24oQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzLCBnZXREZWZhdWx0UHJvcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMgPSBnZXREZWZhdWx0UHJvcHM7XG4gICAgfVxuICB9LFxuICBwcm9wVHlwZXM6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzLCAncHJvcCcpO1xuICAgIH1cbiAgICBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMgPSBfYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMsIHByb3BUeXBlcyk7XG4gIH0sXG4gIHN0YXRpY3M6IGZ1bmN0aW9uIChDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICAgIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKTtcbiAgfSxcbiAgYXV0b2JpbmQ6IGZ1bmN0aW9uICgpIHt9IH07XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgdHlwZURlZiwgbG9jYXRpb24pIHtcbiAgZm9yICh2YXIgcHJvcE5hbWUgaW4gdHlwZURlZikge1xuICAgIGlmICh0eXBlRGVmLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgLy8gdXNlIGEgd2FybmluZyBpbnN0ZWFkIG9mIGFuIGludmFyaWFudCBzbyBjb21wb25lbnRzXG4gICAgICAvLyBkb24ndCBzaG93IHVwIGluIHByb2QgYnV0IG9ubHkgaW4gX19ERVZfX1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIHR5cGVEZWZbcHJvcE5hbWVdID09PSAnZnVuY3Rpb24nLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICsgJ1JlYWN0LlByb3BUeXBlcy4nLCBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgcHJvcE5hbWUpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlKGlzQWxyZWFkeURlZmluZWQsIG5hbWUpIHtcbiAgdmFyIHNwZWNQb2xpY3kgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpID8gUmVhY3RDbGFzc0ludGVyZmFjZVtuYW1lXSA6IG51bGw7XG5cbiAgLy8gRGlzYWxsb3cgb3ZlcnJpZGluZyBvZiBiYXNlIGNsYXNzIG1ldGhvZHMgdW5sZXNzIGV4cGxpY2l0bHkgYWxsb3dlZC5cbiAgaWYgKFJlYWN0Q2xhc3NNaXhpbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICEoc3BlY1BvbGljeSA9PT0gJ09WRVJSSURFX0JBU0UnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgYCVzYCBmcm9tIHlvdXIgY2xhc3Mgc3BlY2lmaWNhdGlvbi4gRW5zdXJlIHRoYXQgeW91ciBtZXRob2QgbmFtZXMgZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsIG5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzczJywgbmFtZSkgOiB2b2lkIDA7XG4gIH1cblxuICAvLyBEaXNhbGxvdyBkZWZpbmluZyBtZXRob2RzIG1vcmUgdGhhbiBvbmNlIHVubGVzcyBleHBsaWNpdGx5IGFsbG93ZWQuXG4gIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgIShzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTlknIHx8IHNwZWNQb2xpY3kgPT09ICdERUZJTkVfTUFOWV9NRVJHRUQnKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gZGVmaW5lIGAlc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSB0byBhIG1peGluLicsIG5hbWUpIDogX3Byb2RJbnZhcmlhbnQoJzc0JywgbmFtZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gKiBNaXhpbiBoZWxwZXIgd2hpY2ggaGFuZGxlcyBwb2xpY3kgdmFsaWRhdGlvbiBhbmQgcmVzZXJ2ZWRcbiAqIHNwZWNpZmljYXRpb24ga2V5cyB3aGVuIGJ1aWxkaW5nIFJlYWN0IGNsYXNzZXMuXG4gKi9cbmZ1bmN0aW9uIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKSB7XG4gIGlmICghc3BlYykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgdHlwZW9mU3BlYyA9IHR5cGVvZiBzcGVjO1xuICAgICAgdmFyIGlzTWl4aW5WYWxpZCA9IHR5cGVvZlNwZWMgPT09ICdvYmplY3QnICYmIHNwZWMgIT09IG51bGw7XG5cbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGlzTWl4aW5WYWxpZCwgJyVzOiBZb3VcXCdyZSBhdHRlbXB0aW5nIHRvIGluY2x1ZGUgYSBtaXhpbiB0aGF0IGlzIGVpdGhlciBudWxsICcgKyAnb3Igbm90IGFuIG9iamVjdC4gQ2hlY2sgdGhlIG1peGlucyBpbmNsdWRlZCBieSB0aGUgY29tcG9uZW50LCAnICsgJ2FzIHdlbGwgYXMgYW55IG1peGlucyB0aGV5IGluY2x1ZGUgdGhlbXNlbHZlcy4gJyArICdFeHBlY3RlZCBvYmplY3QgYnV0IGdvdCAlcy4nLCBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDbGFzcycsIHNwZWMgPT09IG51bGwgPyBudWxsIDogdHlwZW9mU3BlYykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgISh0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byB1c2UgYSBjb21wb25lbnQgY2xhc3Mgb3IgZnVuY3Rpb24gYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nKSA6IF9wcm9kSW52YXJpYW50KCc3NScpIDogdm9pZCAwO1xuICAhIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChzcGVjKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzOiBZb3VcXCdyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGNvbXBvbmVudCBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhIHJlZ3VsYXIgb2JqZWN0LicpIDogX3Byb2RJbnZhcmlhbnQoJzc2JykgOiB2b2lkIDA7XG5cbiAgdmFyIHByb3RvID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICB2YXIgYXV0b0JpbmRQYWlycyA9IHByb3RvLl9fcmVhY3RBdXRvQmluZFBhaXJzO1xuXG4gIC8vIEJ5IGhhbmRsaW5nIG1peGlucyBiZWZvcmUgYW55IG90aGVyIHByb3BlcnRpZXMsIHdlIGVuc3VyZSB0aGUgc2FtZVxuICAvLyBjaGFpbmluZyBvcmRlciBpcyBhcHBsaWVkIHRvIG1ldGhvZHMgd2l0aCBERUZJTkVfTUFOWSBwb2xpY3ksIHdoZXRoZXJcbiAgLy8gbWl4aW5zIGFyZSBsaXN0ZWQgYmVmb3JlIG9yIGFmdGVyIHRoZXNlIG1ldGhvZHMgaW4gdGhlIHNwZWMuXG4gIGlmIChzcGVjLmhhc093blByb3BlcnR5KE1JWElOU19LRVkpKSB7XG4gICAgUkVTRVJWRURfU1BFQ19LRVlTLm1peGlucyhDb25zdHJ1Y3Rvciwgc3BlYy5taXhpbnMpO1xuICB9XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBzcGVjKSB7XG4gICAgaWYgKCFzcGVjLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAobmFtZSA9PT0gTUlYSU5TX0tFWSkge1xuICAgICAgLy8gV2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWQgbWl4aW5zIGluIGEgc3BlY2lhbCBjYXNlIGFib3ZlLlxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHByb3BlcnR5ID0gc3BlY1tuYW1lXTtcbiAgICB2YXIgaXNBbHJlYWR5RGVmaW5lZCA9IHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUoaXNBbHJlYWR5RGVmaW5lZCwgbmFtZSk7XG5cbiAgICBpZiAoUkVTRVJWRURfU1BFQ19LRVlTLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBSRVNFUlZFRF9TUEVDX0tFWVNbbmFtZV0oQ29uc3RydWN0b3IsIHByb3BlcnR5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2V0dXAgbWV0aG9kcyBvbiBwcm90b3R5cGU6XG4gICAgICAvLyBUaGUgZm9sbG93aW5nIG1lbWJlciBtZXRob2RzIHNob3VsZCBub3QgYmUgYXV0b21hdGljYWxseSBib3VuZDpcbiAgICAgIC8vIDEuIEV4cGVjdGVkIFJlYWN0Q2xhc3MgbWV0aG9kcyAoaW4gdGhlIFwiaW50ZXJmYWNlXCIpLlxuICAgICAgLy8gMi4gT3ZlcnJpZGRlbiBtZXRob2RzICh0aGF0IHdlcmUgbWl4ZWQgaW4pLlxuICAgICAgdmFyIGlzUmVhY3RDbGFzc01ldGhvZCA9IFJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gICAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIHZhciBzaG91bGRBdXRvQmluZCA9IGlzRnVuY3Rpb24gJiYgIWlzUmVhY3RDbGFzc01ldGhvZCAmJiAhaXNBbHJlYWR5RGVmaW5lZCAmJiBzcGVjLmF1dG9iaW5kICE9PSBmYWxzZTtcblxuICAgICAgaWYgKHNob3VsZEF1dG9CaW5kKSB7XG4gICAgICAgIGF1dG9CaW5kUGFpcnMucHVzaChuYW1lLCBwcm9wZXJ0eSk7XG4gICAgICAgIHByb3RvW25hbWVdID0gcHJvcGVydHk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNBbHJlYWR5RGVmaW5lZCkge1xuICAgICAgICAgIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDbGFzc0ludGVyZmFjZVtuYW1lXTtcblxuICAgICAgICAgIC8vIFRoZXNlIGNhc2VzIHNob3VsZCBhbHJlYWR5IGJlIGNhdWdodCBieSB2YWxpZGF0ZU1ldGhvZE92ZXJyaWRlLlxuICAgICAgICAgICEoaXNSZWFjdENsYXNzTWV0aG9kICYmIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJyB8fCBzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTlknKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogVW5leHBlY3RlZCBzcGVjIHBvbGljeSAlcyBmb3Iga2V5ICVzIHdoZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy4nLCBzcGVjUG9saWN5LCBuYW1lKSA6IF9wcm9kSW52YXJpYW50KCc3NycsIHNwZWNQb2xpY3ksIG5hbWUpIDogdm9pZCAwO1xuXG4gICAgICAgICAgLy8gRm9yIG1ldGhvZHMgd2hpY2ggYXJlIGRlZmluZWQgbW9yZSB0aGFuIG9uY2UsIGNhbGwgdGhlIGV4aXN0aW5nXG4gICAgICAgICAgLy8gbWV0aG9kcyBiZWZvcmUgY2FsbGluZyB0aGUgbmV3IHByb3BlcnR5LCBtZXJnaW5nIGlmIGFwcHJvcHJpYXRlLlxuICAgICAgICAgIGlmIChzcGVjUG9saWN5ID09PSAnREVGSU5FX01BTllfTUVSR0VEJykge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3BlY1BvbGljeSA9PT0gJ0RFRklORV9NQU5ZJykge1xuICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ocHJvdG9bbmFtZV0sIHByb3BlcnR5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvdG9bbmFtZV0gPSBwcm9wZXJ0eTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgLy8gQWRkIHZlcmJvc2UgZGlzcGxheU5hbWUgdG8gdGhlIGZ1bmN0aW9uLCB3aGljaCBoZWxwcyB3aGVuIGxvb2tpbmdcbiAgICAgICAgICAgIC8vIGF0IHByb2ZpbGluZyB0b29scy5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicgJiYgc3BlYy5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXS5kaXNwbGF5TmFtZSA9IHNwZWMuZGlzcGxheU5hbWUgKyAnXycgKyBuYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtaXhTdGF0aWNTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICBpZiAoIXN0YXRpY3MpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yICh2YXIgbmFtZSBpbiBzdGF0aWNzKSB7XG4gICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICBpZiAoIXN0YXRpY3MuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciBpc1Jlc2VydmVkID0gbmFtZSBpbiBSRVNFUlZFRF9TUEVDX0tFWVM7XG4gICAgISFpc1Jlc2VydmVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYSByZXNlcnZlZCBwcm9wZXJ0eSwgYCVzYCwgdGhhdCBzaG91bGRuXFwndCBiZSBvbiB0aGUgXCJzdGF0aWNzXCIga2V5LiBEZWZpbmUgaXQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSBjb25zdHJ1Y3Rvci4nLCBuYW1lKSA6IF9wcm9kSW52YXJpYW50KCc3OCcsIG5hbWUpIDogdm9pZCAwO1xuXG4gICAgdmFyIGlzSW5oZXJpdGVkID0gbmFtZSBpbiBDb25zdHJ1Y3RvcjtcbiAgICAhIWlzSW5oZXJpdGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYCVzYCBvbiB5b3VyIGNvbXBvbmVudCBtb3JlIHRoYW4gb25jZS4gVGhpcyBjb25mbGljdCBtYXkgYmUgZHVlIHRvIGEgbWl4aW4uJywgbmFtZSkgOiBfcHJvZEludmFyaWFudCgnNzknLCBuYW1lKSA6IHZvaWQgMDtcbiAgICBDb25zdHJ1Y3RvcltuYW1lXSA9IHByb3BlcnR5O1xuICB9XG59XG5cbi8qKlxuICogTWVyZ2UgdHdvIG9iamVjdHMsIGJ1dCB0aHJvdyBpZiBib3RoIGNvbnRhaW4gdGhlIHNhbWUga2V5LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvbmUgVGhlIGZpcnN0IG9iamVjdCwgd2hpY2ggaXMgbXV0YXRlZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSB0d28gVGhlIHNlY29uZCBvYmplY3RcbiAqIEByZXR1cm4ge29iamVjdH0gb25lIGFmdGVyIGl0IGhhcyBiZWVuIG11dGF0ZWQgdG8gY29udGFpbiBldmVyeXRoaW5nIGluIHR3by5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhvbmUsIHR3bykge1xuICAhKG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLicpIDogX3Byb2RJbnZhcmlhbnQoJzgwJykgOiB2b2lkIDA7XG5cbiAgZm9yICh2YXIga2V5IGluIHR3bykge1xuICAgIGlmICh0d28uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgIShvbmVba2V5XSA9PT0gdW5kZWZpbmVkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6IFRyaWVkIHRvIG1lcmdlIHR3byBvYmplY3RzIHdpdGggdGhlIHNhbWUga2V5OiBgJXNgLiBUaGlzIGNvbmZsaWN0IG1heSBiZSBkdWUgdG8gYSBtaXhpbjsgaW4gcGFydGljdWxhciwgdGhpcyBtYXkgYmUgY2F1c2VkIGJ5IHR3byBnZXRJbml0aWFsU3RhdGUoKSBvciBnZXREZWZhdWx0UHJvcHMoKSBtZXRob2RzIHJldHVybmluZyBvYmplY3RzIHdpdGggY2xhc2hpbmcga2V5cy4nLCBrZXkpIDogX3Byb2RJbnZhcmlhbnQoJzgxJywga2V5KSA6IHZvaWQgMDtcbiAgICAgIG9uZVtrZXldID0gdHdvW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBvbmU7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyB0d28gZnVuY3Rpb25zIGFuZCBtZXJnZXMgdGhlaXIgcmV0dXJuIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvbmUgRnVuY3Rpb24gdG8gaW52b2tlIGZpcnN0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gdHdvIEZ1bmN0aW9uIHRvIGludm9rZSBzZWNvbmQuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gRnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSB0d28gYXJndW1lbnQgZnVuY3Rpb25zLlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWVyZ2VkUmVzdWx0RnVuY3Rpb24ob25lLCB0d28pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZFJlc3VsdCgpIHtcbiAgICB2YXIgYSA9IG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHZhciBiID0gdHdvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGI7XG4gICAgfSBlbHNlIGlmIChiID09IG51bGwpIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgICB2YXIgYyA9IHt9O1xuICAgIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYywgYSk7XG4gICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBiKTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHR3byBmdW5jdGlvbnMgYW5kIGlnbm9yZXMgdGhlaXIgcmV0dXJuIHZhbGVzLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9uZSBGdW5jdGlvbiB0byBpbnZva2UgZmlyc3QuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0d28gRnVuY3Rpb24gdG8gaW52b2tlIHNlY29uZC5cbiAqIEByZXR1cm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHR3byBhcmd1bWVudCBmdW5jdGlvbnMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25lLCB0d28pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICBvbmUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBCaW5kcyBhIG1ldGhvZCB0byB0aGUgY29tcG9uZW50LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb21wb25lbnQgQ29tcG9uZW50IHdob3NlIG1ldGhvZCBpcyBnb2luZyB0byBiZSBib3VuZC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG1ldGhvZCBNZXRob2QgdG8gYmUgYm91bmQuXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGJvdW5kIG1ldGhvZC5cbiAqL1xuZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kKGNvbXBvbmVudCwgbWV0aG9kKSB7XG4gIHZhciBib3VuZE1ldGhvZCA9IG1ldGhvZC5iaW5kKGNvbXBvbmVudCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQ29udGV4dCA9IGNvbXBvbmVudDtcbiAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gbnVsbDtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZTtcbiAgICB2YXIgX2JpbmQgPSBib3VuZE1ldGhvZC5iaW5kO1xuICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbiAobmV3VGhpcykge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICAvLyBVc2VyIGlzIHRyeWluZyB0byBiaW5kKCkgYW4gYXV0b2JvdW5kIG1ldGhvZDsgd2UgZWZmZWN0aXZlbHkgd2lsbFxuICAgICAgLy8gaWdub3JlIHRoZSB2YWx1ZSBvZiBcInRoaXNcIiB0aGF0IHRoZSB1c2VyIGlzIHRyeWluZyB0byB1c2UsIHNvXG4gICAgICAvLyBsZXQncyB3YXJuLlxuICAgICAgaWYgKG5ld1RoaXMgIT09IGNvbXBvbmVudCAmJiBuZXdUaGlzICE9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYmluZCgpOiBSZWFjdCBjb21wb25lbnQgbWV0aG9kcyBtYXkgb25seSBiZSBib3VuZCB0byB0aGUgJyArICdjb21wb25lbnQgaW5zdGFuY2UuIFNlZSAlcycsIGNvbXBvbmVudE5hbWUpIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArICdSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSAnICsgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzJywgY29tcG9uZW50TmFtZSkgOiB2b2lkIDA7XG4gICAgICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgICAgIH1cbiAgICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcbiAgICAgIHJldHVybiByZWJvdW5kTWV0aG9kO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGJvdW5kTWV0aG9kO1xufVxuXG4vKipcbiAqIEJpbmRzIGFsbCBhdXRvLWJvdW5kIG1ldGhvZHMgaW4gYSBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbXBvbmVudCBDb21wb25lbnQgd2hvc2UgbWV0aG9kIGlzIGdvaW5nIHRvIGJlIGJvdW5kLlxuICovXG5mdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2RzKGNvbXBvbmVudCkge1xuICB2YXIgcGFpcnMgPSBjb21wb25lbnQuX19yZWFjdEF1dG9CaW5kUGFpcnM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIgYXV0b0JpbmRLZXkgPSBwYWlyc1tpXTtcbiAgICB2YXIgbWV0aG9kID0gcGFpcnNbaSArIDFdO1xuICAgIGNvbXBvbmVudFthdXRvQmluZEtleV0gPSBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpO1xuICB9XG59XG5cbi8qKlxuICogQWRkIG1vcmUgdG8gdGhlIFJlYWN0Q2xhc3MgYmFzZSBjbGFzcy4gVGhlc2UgYXJlIGFsbCBsZWdhY3kgZmVhdHVyZXMgYW5kXG4gKiB0aGVyZWZvcmUgbm90IGFscmVhZHkgcGFydCBvZiB0aGUgbW9kZXJuIFJlYWN0Q29tcG9uZW50LlxuICovXG52YXIgUmVhY3RDbGFzc01peGluID0ge1xuXG4gIC8qKlxuICAgKiBUT0RPOiBUaGlzIHdpbGwgYmUgZGVwcmVjYXRlZCBiZWNhdXNlIHN0YXRlIHNob3VsZCBhbHdheXMga2VlcCBhIGNvbnNpc3RlbnRcbiAgICogdHlwZSBzaWduYXR1cmUgYW5kIHRoZSBvbmx5IHVzZSBjYXNlIGZvciB0aGlzLCBpcyB0byBhdm9pZCB0aGF0LlxuICAgKi9cbiAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbiAobmV3U3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUodGhpcywgbmV3U3RhdGUpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjaywgJ3JlcGxhY2VTdGF0ZScpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9zaXRlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZXIuaXNNb3VudGVkKHRoaXMpO1xuICB9XG59O1xuXG52YXIgUmVhY3RDbGFzc0NvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHt9O1xuX2Fzc2lnbihSZWFjdENsYXNzQ29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RDb21wb25lbnQucHJvdG90eXBlLCBSZWFjdENsYXNzTWl4aW4pO1xuXG4vKipcbiAqIE1vZHVsZSBmb3IgY3JlYXRpbmcgY29tcG9zaXRlIGNvbXBvbmVudHMuXG4gKlxuICogQGNsYXNzIFJlYWN0Q2xhc3NcbiAqL1xudmFyIFJlYWN0Q2xhc3MgPSB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBjb21wb3NpdGUgY29tcG9uZW50IGNsYXNzIGdpdmVuIGEgY2xhc3Mgc3BlY2lmaWNhdGlvbi5cbiAgICogU2VlIGh0dHBzOi8vZmFjZWJvb2suZ2l0aHViLmlvL3JlYWN0L2RvY3MvdG9wLWxldmVsLWFwaS5odG1sI3JlYWN0LmNyZWF0ZWNsYXNzXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzcGVjIENsYXNzIHNwZWNpZmljYXRpb24gKHdoaWNoIG11c3QgZGVmaW5lIGByZW5kZXJgKS5cbiAgICogQHJldHVybiB7ZnVuY3Rpb259IENvbXBvbmVudCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAgICogQHB1YmxpY1xuICAgKi9cbiAgY3JlYXRlQ2xhc3M6IGZ1bmN0aW9uIChzcGVjKSB7XG4gICAgLy8gVG8ga2VlcCBvdXIgd2FybmluZ3MgbW9yZSB1bmRlcnN0YW5kYWJsZSwgd2UnbGwgdXNlIGEgbGl0dGxlIGhhY2sgaGVyZSB0b1xuICAgIC8vIGVuc3VyZSB0aGF0IENvbnN0cnVjdG9yLm5hbWUgIT09ICdDb25zdHJ1Y3RvcicuIFRoaXMgbWFrZXMgc3VyZSB3ZSBkb24ndFxuICAgIC8vIHVubmVjZXNzYXJpbHkgaWRlbnRpZnkgYSBjbGFzcyB3aXRob3V0IGRpc3BsYXlOYW1lIGFzICdDb25zdHJ1Y3RvcicuXG4gICAgdmFyIENvbnN0cnVjdG9yID0gaWRlbnRpdHkoZnVuY3Rpb24gKHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gICAgICAvLyBUaGlzIGNvbnN0cnVjdG9yIGdldHMgb3ZlcnJpZGRlbiBieSBtb2Nrcy4gVGhlIGFyZ3VtZW50IGlzIHVzZWRcbiAgICAgIC8vIGJ5IG1vY2tzIHRvIGFzc2VydCBvbiB3aGF0IGdldHMgbW91bnRlZC5cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodGhpcyBpbnN0YW5jZW9mIENvbnN0cnVjdG9yLCAnU29tZXRoaW5nIGlzIGNhbGxpbmcgYSBSZWFjdCBjb21wb25lbnQgZGlyZWN0bHkuIFVzZSBhIGZhY3Rvcnkgb3IgJyArICdKU1ggaW5zdGVhZC4gU2VlOiBodHRwczovL2ZiLm1lL3JlYWN0LWxlZ2FjeWZhY3RvcnknKSA6IHZvaWQgMDtcbiAgICAgIH1cblxuICAgICAgLy8gV2lyZSB1cCBhdXRvLWJpbmRpbmdcbiAgICAgIGlmICh0aGlzLl9fcmVhY3RBdXRvQmluZFBhaXJzLmxlbmd0aCkge1xuICAgICAgICBiaW5kQXV0b0JpbmRNZXRob2RzKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gICAgICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xuXG4gICAgICB0aGlzLnN0YXRlID0gbnVsbDtcblxuICAgICAgLy8gUmVhY3RDbGFzc2VzIGRvZXNuJ3QgaGF2ZSBjb25zdHJ1Y3RvcnMuIEluc3RlYWQsIHRoZXkgdXNlIHRoZVxuICAgICAgLy8gZ2V0SW5pdGlhbFN0YXRlIGFuZCBjb21wb25lbnRXaWxsTW91bnQgbWV0aG9kcyBmb3IgaW5pdGlhbGl6YXRpb24uXG5cbiAgICAgIHZhciBpbml0aWFsU3RhdGUgPSB0aGlzLmdldEluaXRpYWxTdGF0ZSA/IHRoaXMuZ2V0SW5pdGlhbFN0YXRlKCkgOiBudWxsO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgLy8gV2UgYWxsb3cgYXV0by1tb2NrcyB0byBwcm9jZWVkIGFzIGlmIHRoZXkncmUgcmV0dXJuaW5nIG51bGwuXG4gICAgICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLmdldEluaXRpYWxTdGF0ZS5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIHByb2JhYmx5IGJhZCBwcmFjdGljZS4gQ29uc2lkZXIgd2FybmluZyBoZXJlIGFuZFxuICAgICAgICAgIC8vIGRlcHJlY2F0aW5nIHRoaXMgY29udmVuaWVuY2UuXG4gICAgICAgICAgaW5pdGlhbFN0YXRlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgISh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5nZXRJbml0aWFsU3RhdGUoKTogbXVzdCByZXR1cm4gYW4gb2JqZWN0IG9yIG51bGwnLCBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IF9wcm9kSW52YXJpYW50KCc4MicsIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdm9pZCAwO1xuXG4gICAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIH0pO1xuICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBSZWFjdENsYXNzQ29tcG9uZW50KCk7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgQ29uc3RydWN0b3IucHJvdG90eXBlLl9fcmVhY3RBdXRvQmluZFBhaXJzID0gW107XG5cbiAgICBpbmplY3RlZE1peGlucy5mb3JFYWNoKG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCwgQ29uc3RydWN0b3IpKTtcblxuICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzcGVjKTtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIGRlZmF1bHRQcm9wcyBwcm9wZXJ0eSBhZnRlciBhbGwgbWl4aW5zIGhhdmUgYmVlbiBtZXJnZWQuXG4gICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIFRoaXMgaXMgYSB0YWcgdG8gaW5kaWNhdGUgdGhhdCB0aGUgdXNlIG9mIHRoZXNlIG1ldGhvZCBuYW1lcyBpcyBvayxcbiAgICAgIC8vIHNpbmNlIGl0J3MgdXNlZCB3aXRoIGNyZWF0ZUNsYXNzLiBJZiBpdCdzIG5vdCwgdGhlbiBpdCdzIGxpa2VseSBhXG4gICAgICAvLyBtaXN0YWtlIHNvIHdlJ2xsIHdhcm4geW91IHRvIHVzZSB0aGUgc3RhdGljIHByb3BlcnR5LCBwcm9wZXJ0eVxuICAgICAgLy8gaW5pdGlhbGl6ZXIgb3IgY29uc3RydWN0b3IgcmVzcGVjdGl2ZWx5LlxuICAgICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAhQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVDbGFzcyguLi4pOiBDbGFzcyBzcGVjaWZpY2F0aW9uIG11c3QgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLicpIDogX3Byb2RJbnZhcmlhbnQoJzgzJykgOiB2b2lkIDA7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRTaG91bGRVcGRhdGUsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLCBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMoKS4gRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKT8nLCBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIC8vIFJlZHVjZSB0aW1lIHNwZW50IGRvaW5nIGxvb2t1cHMgYnkgc2V0dGluZyB0aGVzZSBvbiB0aGUgcHJvdG90eXBlLlxuICAgIGZvciAodmFyIG1ldGhvZE5hbWUgaW4gUmVhY3RDbGFzc0ludGVyZmFjZSkge1xuICAgICAgaWYgKCFDb25zdHJ1Y3Rvci5wcm90b3R5cGVbbWV0aG9kTmFtZV0pIHtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH0sXG5cbiAgaW5qZWN0aW9uOiB7XG4gICAgaW5qZWN0TWl4aW46IGZ1bmN0aW9uIChtaXhpbikge1xuICAgICAgaW5qZWN0ZWRNaXhpbnMucHVzaChtaXhpbik7XG4gICAgfVxuICB9XG5cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RDbGFzcztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvbGliL1JlYWN0Q2xhc3MuanNcbi8vIG1vZHVsZSBpZCA9IDE4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcblxuLyoqXG4gKiBDcmVhdGUgYSBmYWN0b3J5IHRoYXQgY3JlYXRlcyBIVE1MIHRhZyBlbGVtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgY3JlYXRlRE9NRmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50VmFsaWRhdG9yJyk7XG4gIGNyZWF0ZURPTUZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwcGluZyBmcm9tIHN1cHBvcnRlZCBIVE1MIHRhZ3MgdG8gYFJlYWN0RE9NQ29tcG9uZW50YCBjbGFzc2VzLlxuICogVGhpcyBpcyBhbHNvIGFjY2Vzc2libGUgdmlhIGBSZWFjdC5ET01gLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xudmFyIFJlYWN0RE9NRmFjdG9yaWVzID0ge1xuICBhOiBjcmVhdGVET01GYWN0b3J5KCdhJyksXG4gIGFiYnI6IGNyZWF0ZURPTUZhY3RvcnkoJ2FiYnInKSxcbiAgYWRkcmVzczogY3JlYXRlRE9NRmFjdG9yeSgnYWRkcmVzcycpLFxuICBhcmVhOiBjcmVhdGVET01GYWN0b3J5KCdhcmVhJyksXG4gIGFydGljbGU6IGNyZWF0ZURPTUZhY3RvcnkoJ2FydGljbGUnKSxcbiAgYXNpZGU6IGNyZWF0ZURPTUZhY3RvcnkoJ2FzaWRlJyksXG4gIGF1ZGlvOiBjcmVhdGVET01GYWN0b3J5KCdhdWRpbycpLFxuICBiOiBjcmVhdGVET01GYWN0b3J5KCdiJyksXG4gIGJhc2U6IGNyZWF0ZURPTUZhY3RvcnkoJ2Jhc2UnKSxcbiAgYmRpOiBjcmVhdGVET01GYWN0b3J5KCdiZGknKSxcbiAgYmRvOiBjcmVhdGVET01GYWN0b3J5KCdiZG8nKSxcbiAgYmlnOiBjcmVhdGVET01GYWN0b3J5KCdiaWcnKSxcbiAgYmxvY2txdW90ZTogY3JlYXRlRE9NRmFjdG9yeSgnYmxvY2txdW90ZScpLFxuICBib2R5OiBjcmVhdGVET01GYWN0b3J5KCdib2R5JyksXG4gIGJyOiBjcmVhdGVET01GYWN0b3J5KCdicicpLFxuICBidXR0b246IGNyZWF0ZURPTUZhY3RvcnkoJ2J1dHRvbicpLFxuICBjYW52YXM6IGNyZWF0ZURPTUZhY3RvcnkoJ2NhbnZhcycpLFxuICBjYXB0aW9uOiBjcmVhdGVET01GYWN0b3J5KCdjYXB0aW9uJyksXG4gIGNpdGU6IGNyZWF0ZURPTUZhY3RvcnkoJ2NpdGUnKSxcbiAgY29kZTogY3JlYXRlRE9NRmFjdG9yeSgnY29kZScpLFxuICBjb2w6IGNyZWF0ZURPTUZhY3RvcnkoJ2NvbCcpLFxuICBjb2xncm91cDogY3JlYXRlRE9NRmFjdG9yeSgnY29sZ3JvdXAnKSxcbiAgZGF0YTogY3JlYXRlRE9NRmFjdG9yeSgnZGF0YScpLFxuICBkYXRhbGlzdDogY3JlYXRlRE9NRmFjdG9yeSgnZGF0YWxpc3QnKSxcbiAgZGQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2RkJyksXG4gIGRlbDogY3JlYXRlRE9NRmFjdG9yeSgnZGVsJyksXG4gIGRldGFpbHM6IGNyZWF0ZURPTUZhY3RvcnkoJ2RldGFpbHMnKSxcbiAgZGZuOiBjcmVhdGVET01GYWN0b3J5KCdkZm4nKSxcbiAgZGlhbG9nOiBjcmVhdGVET01GYWN0b3J5KCdkaWFsb2cnKSxcbiAgZGl2OiBjcmVhdGVET01GYWN0b3J5KCdkaXYnKSxcbiAgZGw6IGNyZWF0ZURPTUZhY3RvcnkoJ2RsJyksXG4gIGR0OiBjcmVhdGVET01GYWN0b3J5KCdkdCcpLFxuICBlbTogY3JlYXRlRE9NRmFjdG9yeSgnZW0nKSxcbiAgZW1iZWQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2VtYmVkJyksXG4gIGZpZWxkc2V0OiBjcmVhdGVET01GYWN0b3J5KCdmaWVsZHNldCcpLFxuICBmaWdjYXB0aW9uOiBjcmVhdGVET01GYWN0b3J5KCdmaWdjYXB0aW9uJyksXG4gIGZpZ3VyZTogY3JlYXRlRE9NRmFjdG9yeSgnZmlndXJlJyksXG4gIGZvb3RlcjogY3JlYXRlRE9NRmFjdG9yeSgnZm9vdGVyJyksXG4gIGZvcm06IGNyZWF0ZURPTUZhY3RvcnkoJ2Zvcm0nKSxcbiAgaDE6IGNyZWF0ZURPTUZhY3RvcnkoJ2gxJyksXG4gIGgyOiBjcmVhdGVET01GYWN0b3J5KCdoMicpLFxuICBoMzogY3JlYXRlRE9NRmFjdG9yeSgnaDMnKSxcbiAgaDQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2g0JyksXG4gIGg1OiBjcmVhdGVET01GYWN0b3J5KCdoNScpLFxuICBoNjogY3JlYXRlRE9NRmFjdG9yeSgnaDYnKSxcbiAgaGVhZDogY3JlYXRlRE9NRmFjdG9yeSgnaGVhZCcpLFxuICBoZWFkZXI6IGNyZWF0ZURPTUZhY3RvcnkoJ2hlYWRlcicpLFxuICBoZ3JvdXA6IGNyZWF0ZURPTUZhY3RvcnkoJ2hncm91cCcpLFxuICBocjogY3JlYXRlRE9NRmFjdG9yeSgnaHInKSxcbiAgaHRtbDogY3JlYXRlRE9NRmFjdG9yeSgnaHRtbCcpLFxuICBpOiBjcmVhdGVET01GYWN0b3J5KCdpJyksXG4gIGlmcmFtZTogY3JlYXRlRE9NRmFjdG9yeSgnaWZyYW1lJyksXG4gIGltZzogY3JlYXRlRE9NRmFjdG9yeSgnaW1nJyksXG4gIGlucHV0OiBjcmVhdGVET01GYWN0b3J5KCdpbnB1dCcpLFxuICBpbnM6IGNyZWF0ZURPTUZhY3RvcnkoJ2lucycpLFxuICBrYmQ6IGNyZWF0ZURPTUZhY3RvcnkoJ2tiZCcpLFxuICBrZXlnZW46IGNyZWF0ZURPTUZhY3RvcnkoJ2tleWdlbicpLFxuICBsYWJlbDogY3JlYXRlRE9NRmFjdG9yeSgnbGFiZWwnKSxcbiAgbGVnZW5kOiBjcmVhdGVET01GYWN0b3J5KCdsZWdlbmQnKSxcbiAgbGk6IGNyZWF0ZURPTUZhY3RvcnkoJ2xpJyksXG4gIGxpbms6IGNyZWF0ZURPTUZhY3RvcnkoJ2xpbmsnKSxcbiAgbWFpbjogY3JlYXRlRE9NRmFjdG9yeSgnbWFpbicpLFxuICBtYXA6IGNyZWF0ZURPTUZhY3RvcnkoJ21hcCcpLFxuICBtYXJrOiBjcmVhdGVET01GYWN0b3J5KCdtYXJrJyksXG4gIG1lbnU6IGNyZWF0ZURPTUZhY3RvcnkoJ21lbnUnKSxcbiAgbWVudWl0ZW06IGNyZWF0ZURPTUZhY3RvcnkoJ21lbnVpdGVtJyksXG4gIG1ldGE6IGNyZWF0ZURPTUZhY3RvcnkoJ21ldGEnKSxcbiAgbWV0ZXI6IGNyZWF0ZURPTUZhY3RvcnkoJ21ldGVyJyksXG4gIG5hdjogY3JlYXRlRE9NRmFjdG9yeSgnbmF2JyksXG4gIG5vc2NyaXB0OiBjcmVhdGVET01GYWN0b3J5KCdub3NjcmlwdCcpLFxuICBvYmplY3Q6IGNyZWF0ZURPTUZhY3RvcnkoJ29iamVjdCcpLFxuICBvbDogY3JlYXRlRE9NRmFjdG9yeSgnb2wnKSxcbiAgb3B0Z3JvdXA6IGNyZWF0ZURPTUZhY3RvcnkoJ29wdGdyb3VwJyksXG4gIG9wdGlvbjogY3JlYXRlRE9NRmFjdG9yeSgnb3B0aW9uJyksXG4gIG91dHB1dDogY3JlYXRlRE9NRmFjdG9yeSgnb3V0cHV0JyksXG4gIHA6IGNyZWF0ZURPTUZhY3RvcnkoJ3AnKSxcbiAgcGFyYW06IGNyZWF0ZURPTUZhY3RvcnkoJ3BhcmFtJyksXG4gIHBpY3R1cmU6IGNyZWF0ZURPTUZhY3RvcnkoJ3BpY3R1cmUnKSxcbiAgcHJlOiBjcmVhdGVET01GYWN0b3J5KCdwcmUnKSxcbiAgcHJvZ3Jlc3M6IGNyZWF0ZURPTUZhY3RvcnkoJ3Byb2dyZXNzJyksXG4gIHE6IGNyZWF0ZURPTUZhY3RvcnkoJ3EnKSxcbiAgcnA6IGNyZWF0ZURPTUZhY3RvcnkoJ3JwJyksXG4gIHJ0OiBjcmVhdGVET01GYWN0b3J5KCdydCcpLFxuICBydWJ5OiBjcmVhdGVET01GYWN0b3J5KCdydWJ5JyksXG4gIHM6IGNyZWF0ZURPTUZhY3RvcnkoJ3MnKSxcbiAgc2FtcDogY3JlYXRlRE9NRmFjdG9yeSgnc2FtcCcpLFxuICBzY3JpcHQ6IGNyZWF0ZURPTUZhY3RvcnkoJ3NjcmlwdCcpLFxuICBzZWN0aW9uOiBjcmVhdGVET01GYWN0b3J5KCdzZWN0aW9uJyksXG4gIHNlbGVjdDogY3JlYXRlRE9NRmFjdG9yeSgnc2VsZWN0JyksXG4gIHNtYWxsOiBjcmVhdGVET01GYWN0b3J5KCdzbWFsbCcpLFxuICBzb3VyY2U6IGNyZWF0ZURPTUZhY3RvcnkoJ3NvdXJjZScpLFxuICBzcGFuOiBjcmVhdGVET01GYWN0b3J5KCdzcGFuJyksXG4gIHN0cm9uZzogY3JlYXRlRE9NRmFjdG9yeSgnc3Ryb25nJyksXG4gIHN0eWxlOiBjcmVhdGVET01GYWN0b3J5KCdzdHlsZScpLFxuICBzdWI6IGNyZWF0ZURPTUZhY3RvcnkoJ3N1YicpLFxuICBzdW1tYXJ5OiBjcmVhdGVET01GYWN0b3J5KCdzdW1tYXJ5JyksXG4gIHN1cDogY3JlYXRlRE9NRmFjdG9yeSgnc3VwJyksXG4gIHRhYmxlOiBjcmVhdGVET01GYWN0b3J5KCd0YWJsZScpLFxuICB0Ym9keTogY3JlYXRlRE9NRmFjdG9yeSgndGJvZHknKSxcbiAgdGQ6IGNyZWF0ZURPTUZhY3RvcnkoJ3RkJyksXG4gIHRleHRhcmVhOiBjcmVhdGVET01GYWN0b3J5KCd0ZXh0YXJlYScpLFxuICB0Zm9vdDogY3JlYXRlRE9NRmFjdG9yeSgndGZvb3QnKSxcbiAgdGg6IGNyZWF0ZURPTUZhY3RvcnkoJ3RoJyksXG4gIHRoZWFkOiBjcmVhdGVET01GYWN0b3J5KCd0aGVhZCcpLFxuICB0aW1lOiBjcmVhdGVET01GYWN0b3J5KCd0aW1lJyksXG4gIHRpdGxlOiBjcmVhdGVET01GYWN0b3J5KCd0aXRsZScpLFxuICB0cjogY3JlYXRlRE9NRmFjdG9yeSgndHInKSxcbiAgdHJhY2s6IGNyZWF0ZURPTUZhY3RvcnkoJ3RyYWNrJyksXG4gIHU6IGNyZWF0ZURPTUZhY3RvcnkoJ3UnKSxcbiAgdWw6IGNyZWF0ZURPTUZhY3RvcnkoJ3VsJyksXG4gICd2YXInOiBjcmVhdGVET01GYWN0b3J5KCd2YXInKSxcbiAgdmlkZW86IGNyZWF0ZURPTUZhY3RvcnkoJ3ZpZGVvJyksXG4gIHdicjogY3JlYXRlRE9NRmFjdG9yeSgnd2JyJyksXG5cbiAgLy8gU1ZHXG4gIGNpcmNsZTogY3JlYXRlRE9NRmFjdG9yeSgnY2lyY2xlJyksXG4gIGNsaXBQYXRoOiBjcmVhdGVET01GYWN0b3J5KCdjbGlwUGF0aCcpLFxuICBkZWZzOiBjcmVhdGVET01GYWN0b3J5KCdkZWZzJyksXG4gIGVsbGlwc2U6IGNyZWF0ZURPTUZhY3RvcnkoJ2VsbGlwc2UnKSxcbiAgZzogY3JlYXRlRE9NRmFjdG9yeSgnZycpLFxuICBpbWFnZTogY3JlYXRlRE9NRmFjdG9yeSgnaW1hZ2UnKSxcbiAgbGluZTogY3JlYXRlRE9NRmFjdG9yeSgnbGluZScpLFxuICBsaW5lYXJHcmFkaWVudDogY3JlYXRlRE9NRmFjdG9yeSgnbGluZWFyR3JhZGllbnQnKSxcbiAgbWFzazogY3JlYXRlRE9NRmFjdG9yeSgnbWFzaycpLFxuICBwYXRoOiBjcmVhdGVET01GYWN0b3J5KCdwYXRoJyksXG4gIHBhdHRlcm46IGNyZWF0ZURPTUZhY3RvcnkoJ3BhdHRlcm4nKSxcbiAgcG9seWdvbjogY3JlYXRlRE9NRmFjdG9yeSgncG9seWdvbicpLFxuICBwb2x5bGluZTogY3JlYXRlRE9NRmFjdG9yeSgncG9seWxpbmUnKSxcbiAgcmFkaWFsR3JhZGllbnQ6IGNyZWF0ZURPTUZhY3RvcnkoJ3JhZGlhbEdyYWRpZW50JyksXG4gIHJlY3Q6IGNyZWF0ZURPTUZhY3RvcnkoJ3JlY3QnKSxcbiAgc3RvcDogY3JlYXRlRE9NRmFjdG9yeSgnc3RvcCcpLFxuICBzdmc6IGNyZWF0ZURPTUZhY3RvcnkoJ3N2ZycpLFxuICB0ZXh0OiBjcmVhdGVET01GYWN0b3J5KCd0ZXh0JyksXG4gIHRzcGFuOiBjcmVhdGVET01GYWN0b3J5KCd0c3BhbicpXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NRmFjdG9yaWVzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC9saWIvUmVhY3RET01GYWN0b3JpZXMuanNcbi8vIG1vZHVsZSBpZCA9IDE4M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMnKTtcbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3JGbicpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbi8qKlxuICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmVcbiAqIHN1cHBsaWVkIHRvIFJlYWN0IGNvbXBvbmVudHMuIEV4YW1wbGUgdXNhZ2U6XG4gKlxuICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpO1xuICogICB2YXIgTXlBcnRpY2xlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICogICAgIHByb3BUeXBlczoge1xuICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgXCJkZXNjcmlwdGlvblwiLlxuICogICAgICAgZGVzY3JpcHRpb246IFByb3BzLnN0cmluZyxcbiAqXG4gKiAgICAgICAvLyBBIHJlcXVpcmVkIGVudW0gcHJvcCBuYW1lZCBcImNhdGVnb3J5XCIuXG4gKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsXG4gKlxuICogICAgICAgLy8gQSBwcm9wIG5hbWVkIFwiZGlhbG9nXCIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuXG4gKiAgICAgICBkaWFsb2c6IFByb3BzLmluc3RhbmNlT2YoRGlhbG9nKS5pc1JlcXVpcmVkXG4gKiAgICAgfSxcbiAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfVxuICogICB9KTtcbiAqXG4gKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6XG4gKlxuICogICB0eXBlIDo9IGFycmF5fGJvb2x8ZnVuY3xvYmplY3R8bnVtYmVyfHN0cmluZ3xvbmVPZihbLi4uXSl8aW5zdGFuY2VPZiguLi4pXG4gKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT9cbiAqXG4gKiBFYWNoIGFuZCBldmVyeSBkZWNsYXJhdGlvbiBwcm9kdWNlcyBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlLiBUaGlzXG4gKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6XG4gKlxuICogIHZhciBNeUxpbmsgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gKiAgICBwcm9wVHlwZXM6IHtcbiAqICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIG9yIFVSSSBwcm9wIG5hbWVkIFwiaHJlZlwiLlxuICogICAgICBocmVmOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAqICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICogICAgICAgIGlmIChwcm9wVmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgcHJvcFZhbHVlICE9PSAnc3RyaW5nJyAmJlxuICogICAgICAgICAgICAhKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFVSSSkpIHtcbiAqICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gKiAgICAgICAgICAgICdFeHBlY3RlZCBhIHN0cmluZyBvciBhbiBVUkkgZm9yICcgKyBwcm9wTmFtZSArICcgaW4gJyArXG4gKiAgICAgICAgICAgIGNvbXBvbmVudE5hbWVcbiAqICAgICAgICAgICk7XG4gKiAgICAgICAgfVxuICogICAgICB9XG4gKiAgICB9LFxuICogICAgcmVuZGVyOiBmdW5jdGlvbigpIHsuLi59XG4gKiAgfSk7XG4gKlxuICogQGludGVybmFsXG4gKi9cblxudmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcblxudmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksXG4gIGJvb2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdib29sZWFuJyksXG4gIGZ1bmM6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdmdW5jdGlvbicpLFxuICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxcbiAgb2JqZWN0OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignb2JqZWN0JyksXG4gIHN0cmluZzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ3N0cmluZycpLFxuICBzeW1ib2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzeW1ib2wnKSxcblxuICBhbnk6IGNyZWF0ZUFueVR5cGVDaGVja2VyKCksXG4gIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgZWxlbWVudDogY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCksXG4gIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gIG5vZGU6IGNyZWF0ZU5vZGVDaGVja2VyKCksXG4gIG9iamVjdE9mOiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyLFxuICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gIHNoYXBlOiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyXG59O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cbi8qZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUqL1xuXG4vKipcbiAqIFdlIHVzZSBhbiBFcnJvci1saWtlIG9iamVjdCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSBhcyBwZW9wbGUgbWF5IGNhbGxcbiAqIFByb3BUeXBlcyBkaXJlY3RseSBhbmQgaW5zcGVjdCB0aGVpciBvdXRwdXQuIEhvd2V2ZXIgd2UgZG9uJ3QgdXNlIHJlYWxcbiAqIEVycm9ycyBhbnltb3JlLiBXZSBkb24ndCBpbnNwZWN0IHRoZWlyIHN0YWNrIGFueXdheSwgYW5kIGNyZWF0aW5nIHRoZW1cbiAqIGlzIHByb2hpYml0aXZlbHkgZXhwZW5zaXZlIGlmIHRoZXkgYXJlIGNyZWF0ZWQgdG9vIG9mdGVuLCBzdWNoIGFzIHdoYXRcbiAqIGhhcHBlbnMgaW4gb25lT2ZUeXBlKCkgZm9yIGFueSB0eXBlIGJlZm9yZSB0aGUgb25lIHRoYXQgbWF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gUHJvcFR5cGVFcnJvcihtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMuc3RhY2sgPSAnJztcbn1cbi8vIE1ha2UgYGluc3RhbmNlb2YgRXJyb3JgIHN0aWxsIHdvcmsgZm9yIHJldHVybmVkIGVycm9ycy5cblByb3BUeXBlRXJyb3IucHJvdG90eXBlID0gRXJyb3IucHJvdG90eXBlO1xuXG5mdW5jdGlvbiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBtYW51YWxQcm9wVHlwZUNhbGxDYWNoZSA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUztcbiAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChzZWNyZXQgIT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0ICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgY2FjaGVLZXkgPSBjb21wb25lbnROYW1lICsgJzonICsgcHJvcE5hbWU7XG4gICAgICAgIGlmICghbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGVbY2FjaGVLZXldKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdZb3UgYXJlIG1hbnVhbGx5IGNhbGxpbmcgYSBSZWFjdC5Qcm9wVHlwZXMgdmFsaWRhdGlvbiAnICsgJ2Z1bmN0aW9uIGZvciB0aGUgYCVzYCBwcm9wIG9uIGAlc2AuIFRoaXMgaXMgZGVwcmVjYXRlZCAnICsgJ2FuZCB3aWxsIG5vdCB3b3JrIGluIHByb2R1Y3Rpb24gd2l0aCB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLiAnICsgJ1lvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8gYSB0aGlyZC1wYXJ0eSBQcm9wVHlwZXMgJyArICdsaWJyYXJ5LiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWRvbnQtY2FsbC1wcm9wdHlwZXMgJyArICdmb3IgZGV0YWlscy4nLCBwcm9wRnVsbE5hbWUsIGNvbXBvbmVudE5hbWUpIDogdm9pZCAwO1xuICAgICAgICAgIG1hbnVhbFByb3BUeXBlQ2FsbENhY2hlW2NhY2hlS2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkICcgKyAoJ2luIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGBudWxsYC4nKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdUaGUgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgdmFsdWUgaXMgYHVuZGVmaW5lZGAuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcblxuICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZXhwZWN0ZWRUeXBlKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgLy8gYHByb3BWYWx1ZWAgYmVpbmcgaW5zdGFuY2Ugb2YsIHNheSwgZGF0ZS9yZWdleHAsIHBhc3MgdGhlICdvYmplY3QnXG4gICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW5cbiAgICAgIC8vICdvZiB0eXBlIGBvYmplY3RgJy5cbiAgICAgIHZhciBwcmVjaXNlVHlwZSA9IGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcmVjaXNlVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnYCcgKyBleHBlY3RlZFR5cGUgKyAnYC4nKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyhudWxsKSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO1xuICAgIH1cbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBhcnJheS4nKSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnWycgKyBpICsgJ10nLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBpZiAoIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3MpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICB2YXIgZXhwZWN0ZWRDbGFzc05hbWUgPSBleHBlY3RlZENsYXNzLm5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIGFjdHVhbENsYXNzTmFtZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnaW5zdGFuY2Ugb2YgYCcgKyBleHBlY3RlZENsYXNzTmFtZSArICdgLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRW51bVR5cGVDaGVja2VyKGV4cGVjdGVkVmFsdWVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpIDogdm9pZCAwO1xuICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGlzKHByb3BWYWx1ZSwgZXhwZWN0ZWRWYWx1ZXNbaV0pKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzKTtcbiAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBvbmUgb2YgJyArIHZhbHVlc1N0cmluZyArICcuJykpO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgfVxuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIG9iamVjdC4nKSk7XG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgIGlmIChwcm9wVmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVbmlvblR5cGVDaGVja2VyKGFycmF5T2ZUeXBlQ2hlY2tlcnMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5T2ZUeXBlQ2hlY2tlcnMpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZSwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJykgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheU9mVHlwZUNoZWNrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJykpO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVDaGVja2VyKCkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBpZiAoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgUmVhY3ROb2RlLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGBvYmplY3RgLicpKTtcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSwgUmVhY3RQcm9wVHlwZXNTZWNyZXQpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cblxuZnVuY3Rpb24gaXNOb2RlKHByb3BWYWx1ZSkge1xuICBzd2l0Y2ggKHR5cGVvZiBwcm9wVmFsdWUpIHtcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuICFwcm9wVmFsdWU7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BWYWx1ZS5ldmVyeShpc05vZGUpO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gbnVsbCB8fCBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKHByb3BWYWx1ZSk7XG4gICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwocHJvcFZhbHVlKTtcbiAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgIGlmICghaXNOb2RlKHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSXRlcmF0b3Igd2lsbCBwcm92aWRlIGVudHJ5IFtrLHZdIHR1cGxlcyByYXRoZXIgdGhhbiB2YWx1ZXMuXG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShlbnRyeVsxXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSB7XG4gIC8vIE5hdGl2ZSBTeW1ib2wuXG4gIGlmIChwcm9wVHlwZSA9PT0gJ3N5bWJvbCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10gPT09ICdTeW1ib2wnXG4gIGlmIChwcm9wVmFsdWVbJ0BAdG9TdHJpbmdUYWcnXSA9PT0gJ1N5bWJvbCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIEZhbGxiYWNrIGZvciBub24tc3BlYyBjb21wbGlhbnQgU3ltYm9scyB3aGljaCBhcmUgcG9seWZpbGxlZC5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgcHJvcFZhbHVlIGluc3RhbmNlb2YgU3ltYm9sKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8vIEVxdWl2YWxlbnQgb2YgYHR5cGVvZmAgYnV0IHdpdGggc3BlY2lhbCBoYW5kbGluZyBmb3IgYXJyYXkgYW5kIHJlZ2V4cC5cbmZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuICdhcnJheSc7XG4gIH1cbiAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIC8vIE9sZCB3ZWJraXRzIChhdCBsZWFzdCB1bnRpbCBBbmRyb2lkIDQuMCkgcmV0dXJuICdmdW5jdGlvbicgcmF0aGVyIHRoYW5cbiAgICAvLyAnb2JqZWN0JyBmb3IgdHlwZW9mIGEgUmVnRXhwLiBXZSdsbCBub3JtYWxpemUgdGhpcyBoZXJlIHNvIHRoYXQgL2JsYS9cbiAgICAvLyBwYXNzZXMgUHJvcFR5cGVzLm9iamVjdC5cbiAgICByZXR1cm4gJ29iamVjdCc7XG4gIH1cbiAgaWYgKGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpKSB7XG4gICAgcmV0dXJuICdzeW1ib2wnO1xuICB9XG4gIHJldHVybiBwcm9wVHlwZTtcbn1cblxuLy8gVGhpcyBoYW5kbGVzIG1vcmUgdHlwZXMgdGhhbiBgZ2V0UHJvcFR5cGVgLiBPbmx5IHVzZWQgZm9yIGVycm9yIG1lc3NhZ2VzLlxuLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuXG5mdW5jdGlvbiBnZXRQcmVjaXNlVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgaWYgKHByb3BUeXBlID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICByZXR1cm4gJ2RhdGUnO1xuICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gJ3JlZ2V4cCc7XG4gICAgfVxuICB9XG4gIHJldHVybiBwcm9wVHlwZTtcbn1cblxuLy8gUmV0dXJucyBjbGFzcyBuYW1lIG9mIHRoZSBvYmplY3QsIGlmIGFueS5cbmZ1bmN0aW9uIGdldENsYXNzTmFtZShwcm9wVmFsdWUpIHtcbiAgaWYgKCFwcm9wVmFsdWUuY29uc3RydWN0b3IgfHwgIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7XG4gICAgcmV0dXJuIEFOT05ZTU9VUztcbiAgfVxuICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdFByb3BUeXBlcy5qc1xuLy8gbW9kdWxlIGlkID0gMTg0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuXG52YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50Jyk7XG52YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0Tm9vcFVwZGF0ZVF1ZXVlJyk7XG5cbnZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBoZWxwZXJzIGZvciB0aGUgdXBkYXRpbmcgc3RhdGUgb2YgYSBjb21wb25lbnQuXG4gKi9cbmZ1bmN0aW9uIFJlYWN0UHVyZUNvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICAvLyBEdXBsaWNhdGVkIGZyb20gUmVhY3RDb21wb25lbnQuXG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gIC8vIFdlIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgdXBkYXRlciBidXQgdGhlIHJlYWwgb25lIGdldHMgaW5qZWN0ZWQgYnkgdGhlXG4gIC8vIHJlbmRlcmVyLlxuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG5mdW5jdGlvbiBDb21wb25lbnREdW1teSgpIHt9XG5Db21wb25lbnREdW1teS5wcm90b3R5cGUgPSBSZWFjdENvbXBvbmVudC5wcm90b3R5cGU7XG5SZWFjdFB1cmVDb21wb25lbnQucHJvdG90eXBlID0gbmV3IENvbXBvbmVudER1bW15KCk7XG5SZWFjdFB1cmVDb21wb25lbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVhY3RQdXJlQ29tcG9uZW50O1xuLy8gQXZvaWQgYW4gZXh0cmEgcHJvdG90eXBlIGp1bXAgZm9yIHRoZXNlIG1ldGhvZHMuXG5fYXNzaWduKFJlYWN0UHVyZUNvbXBvbmVudC5wcm90b3R5cGUsIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSk7XG5SZWFjdFB1cmVDb21wb25lbnQucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50ID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFB1cmVDb21wb25lbnQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0L2xpYi9SZWFjdFB1cmVDb21wb25lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDE4NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICcxNS40LjInO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC9saWIvUmVhY3RWZXJzaW9uLmpzXG4vLyBtb2R1bGUgaWQgPSAxODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcycpO1xudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcblxudmFyIFJlYWN0Q29tcG9uZW50VHJlZUhvb2s7XG5cbmlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICd0ZXN0Jykge1xuICAvLyBUZW1wb3JhcnkgaGFjay5cbiAgLy8gSW5saW5lIHJlcXVpcmVzIGRvbid0IHdvcmsgd2VsbCB3aXRoIEplc3Q6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvNzI0MFxuICAvLyBSZW1vdmUgdGhlIGlubGluZSByZXF1aXJlcyB3aGVuIHdlIGRvbid0IG5lZWQgdGhlbSBhbnltb3JlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC83MTc4XG4gIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50VHJlZUhvb2snKTtcbn1cblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuXG4vKipcbiAqIEFzc2VydCB0aGF0IHRoZSB2YWx1ZXMgbWF0Y2ggd2l0aCB0aGUgdHlwZSBzcGVjcy5cbiAqIEVycm9yIG1lc3NhZ2VzIGFyZSBtZW1vcml6ZWQgYW5kIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSB0eXBlU3BlY3MgTWFwIG9mIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlXG4gKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIFJ1bnRpbWUgdmFsdWVzIHRoYXQgbmVlZCB0byBiZSB0eXBlLWNoZWNrZWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBlLmcuIFwicHJvcFwiLCBcImNvbnRleHRcIiwgXCJjaGlsZCBjb250ZXh0XCJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMuXG4gKiBAcGFyYW0gez9vYmplY3R9IGVsZW1lbnQgVGhlIFJlYWN0IGVsZW1lbnQgdGhhdCBpcyBiZWluZyB0eXBlLWNoZWNrZWRcbiAqIEBwYXJhbSB7P251bWJlcn0gZGVidWdJRCBUaGUgUmVhY3QgY29tcG9uZW50IGluc3RhbmNlIHRoYXQgaXMgYmVpbmcgdHlwZS1jaGVja2VkXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjaGVja1JlYWN0VHlwZVNwZWModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBlbGVtZW50LCBkZWJ1Z0lEKSB7XG4gIGZvciAodmFyIHR5cGVTcGVjTmFtZSBpbiB0eXBlU3BlY3MpIHtcbiAgICBpZiAodHlwZVNwZWNzLmhhc093blByb3BlcnR5KHR5cGVTcGVjTmFtZSkpIHtcbiAgICAgIHZhciBlcnJvcjtcbiAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvXG4gICAgICAvLyBmYWlsIHRoZSByZW5kZXIgcGhhc2Ugd2hlcmUgaXQgZGlkbid0IGZhaWwgYmVmb3JlLiBTbyB3ZSBsb2cgaXQuXG4gICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLlxuICAgICAgICAhKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSBSZWFjdC5Qcm9wVHlwZXMuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHR5cGVTcGVjTmFtZSkgOiBfcHJvZEludmFyaWFudCgnODQnLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgdHlwZVNwZWNOYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTtcbiAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgIGVycm9yID0gZXg7XG4gICAgICB9XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghZXJyb3IgfHwgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciwgJyVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgKyAnZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgJXMuICcgKyAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgKyAnc2hhcGUgYWxsIHJlcXVpcmUgYW4gYXJndW1lbnQpLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvcikgOiB2b2lkIDA7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAvLyBPbmx5IG1vbml0b3IgdGhpcyBmYWlsdXJlIG9uY2UgYmVjYXVzZSB0aGVyZSB0ZW5kcyB0byBiZSBhIGxvdCBvZiB0aGVcbiAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcblxuICAgICAgICB2YXIgY29tcG9uZW50U3RhY2tJbmZvID0gJyc7XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoIVJlYWN0Q29tcG9uZW50VHJlZUhvb2spIHtcbiAgICAgICAgICAgIFJlYWN0Q29tcG9uZW50VHJlZUhvb2sgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50VHJlZUhvb2snKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRlYnVnSUQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudFN0YWNrSW5mbyA9IFJlYWN0Q29tcG9uZW50VHJlZUhvb2suZ2V0U3RhY2tBZGRlbmR1bUJ5SUQoZGVidWdJRCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb21wb25lbnRTdGFja0luZm8gPSBSZWFjdENvbXBvbmVudFRyZWVIb29rLmdldEN1cnJlbnRTdGFja0FkZGVuZHVtKGVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkICVzIHR5cGU6ICVzJXMnLCBsb2NhdGlvbiwgZXJyb3IubWVzc2FnZSwgY29tcG9uZW50U3RhY2tJbmZvKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjaGVja1JlYWN0VHlwZVNwZWM7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3JlYWN0L2xpYi9jaGVja1JlYWN0VHlwZVNwZWMuanNcbi8vIG1vZHVsZSBpZCA9IDE4N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIF9wcm9kSW52YXJpYW50ID0gcmVxdWlyZSgnLi9yZWFjdFByb2RJbnZhcmlhbnQnKTtcblxudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG5cbnZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjaGlsZCBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4gYW5kIHZlcmlmaWVzIHRoYXQgdGhlcmVcbiAqIGlzIG9ubHkgb25lIGNoaWxkIGluIHRoZSBjb2xsZWN0aW9uLlxuICpcbiAqIFNlZSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9yZWFjdC9kb2NzL3RvcC1sZXZlbC1hcGkuaHRtbCNyZWFjdC5jaGlsZHJlbi5vbmx5XG4gKlxuICogVGhlIGN1cnJlbnQgaW1wbGVtZW50YXRpb24gb2YgdGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgYSBzaW5nbGUgY2hpbGQgZ2V0c1xuICogcGFzc2VkIHdpdGhvdXQgYSB3cmFwcGVyLCBidXQgdGhlIHB1cnBvc2Ugb2YgdGhpcyBoZWxwZXIgZnVuY3Rpb24gaXMgdG9cbiAqIGFic3RyYWN0IGF3YXkgdGhlIHBhcnRpY3VsYXIgc3RydWN0dXJlIG9mIGNoaWxkcmVuLlxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gY2hpbGRyZW4gQ2hpbGQgY29sbGVjdGlvbiBzdHJ1Y3R1cmUuXG4gKiBAcmV0dXJuIHtSZWFjdEVsZW1lbnR9IFRoZSBmaXJzdCBhbmQgb25seSBgUmVhY3RFbGVtZW50YCBjb250YWluZWQgaW4gdGhlXG4gKiBzdHJ1Y3R1cmUuXG4gKi9cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC4nKSA6IF9wcm9kSW52YXJpYW50KCcxNDMnKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG9ubHlDaGlsZDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vcmVhY3QvbGliL29ubHlDaGlsZC5qc1xuLy8gbW9kdWxlIGlkID0gMTg4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBfcHJvZEludmFyaWFudCA9IHJlcXVpcmUoJy4vcmVhY3RQcm9kSW52YXJpYW50Jyk7XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudFN5bWJvbCcpO1xuXG52YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3JGbicpO1xudmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xudmFyIEtleUVzY2FwZVV0aWxzID0gcmVxdWlyZSgnLi9LZXlFc2NhcGVVdGlscycpO1xudmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG5cbnZhciBTRVBBUkFUT1IgPSAnLic7XG52YXIgU1VCU0VQQVJBVE9SID0gJzonO1xuXG4vKipcbiAqIFRoaXMgaXMgaW5saW5lZCBmcm9tIFJlYWN0RWxlbWVudCBzaW5jZSB0aGlzIGZpbGUgaXMgc2hhcmVkIGJldHdlZW5cbiAqIGlzb21vcnBoaWMgYW5kIHJlbmRlcmVycy4gV2UgY291bGQgZXh0cmFjdCB0aGlzIHRvIGFcbiAqXG4gKi9cblxuLyoqXG4gKiBUT0RPOiBUZXN0IHRoYXQgYSBzaW5nbGUgY2hpbGQgYW5kIGFuIGFycmF5IHdpdGggb25lIGl0ZW0gaGF2ZSB0aGUgc2FtZSBrZXlcbiAqIHBhdHRlcm4uXG4gKi9cblxudmFyIGRpZFdhcm5BYm91dE1hcHMgPSBmYWxzZTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIGtleSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIGEgY29tcG9uZW50IHdpdGhpbiBhIHNldC5cbiAqXG4gKiBAcGFyYW0geyp9IGNvbXBvbmVudCBBIGNvbXBvbmVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYSBtYW51YWwga2V5LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IHRoYXQgaXMgdXNlZCBpZiBhIG1hbnVhbCBrZXkgaXMgbm90IHByb3ZpZGVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRDb21wb25lbnRLZXkoY29tcG9uZW50LCBpbmRleCkge1xuICAvLyBEbyBzb21lIHR5cGVjaGVja2luZyBoZXJlIHNpbmNlIHdlIGNhbGwgdGhpcyBibGluZGx5LiBXZSB3YW50IHRvIGVuc3VyZVxuICAvLyB0aGF0IHdlIGRvbid0IGJsb2NrIHBvdGVudGlhbCBmdXR1cmUgRVMgQVBJcy5cbiAgaWYgKGNvbXBvbmVudCAmJiB0eXBlb2YgY29tcG9uZW50ID09PSAnb2JqZWN0JyAmJiBjb21wb25lbnQua2V5ICE9IG51bGwpIHtcbiAgICAvLyBFeHBsaWNpdCBrZXlcbiAgICByZXR1cm4gS2V5RXNjYXBlVXRpbHMuZXNjYXBlKGNvbXBvbmVudC5rZXkpO1xuICB9XG4gIC8vIEltcGxpY2l0IGtleSBkZXRlcm1pbmVkIGJ5IHRoZSBpbmRleCBpbiB0aGUgc2V0XG4gIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG59XG5cbi8qKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0geyFzdHJpbmd9IG5hbWVTb0ZhciBOYW1lIG9mIHRoZSBrZXkgcGF0aCBzbyBmYXIuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGJhY2sgdG8gaW52b2tlIHdpdGggZWFjaCBjaGlsZCBmb3VuZC5cbiAqIEBwYXJhbSB7Pyp9IHRyYXZlcnNlQ29udGV4dCBVc2VkIHRvIHBhc3MgaW5mb3JtYXRpb24gdGhyb3VnaG91dCB0aGUgdHJhdmVyc2FsXG4gKiBwcm9jZXNzLlxuICogQHJldHVybiB7IW51bWJlcn0gVGhlIG51bWJlciBvZiBjaGlsZHJlbiBpbiB0aGlzIHN1YnRyZWUuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCBuYW1lU29GYXIsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgY2hpbGRyZW47XG5cbiAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGUgPT09ICdib29sZWFuJykge1xuICAgIC8vIEFsbCBvZiB0aGUgYWJvdmUgYXJlIHBlcmNlaXZlZCBhcyBudWxsLlxuICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgfVxuXG4gIGlmIChjaGlsZHJlbiA9PT0gbnVsbCB8fCB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlID09PSAnbnVtYmVyJyB8fFxuICAvLyBUaGUgZm9sbG93aW5nIGlzIGlubGluZWQgZnJvbSBSZWFjdEVsZW1lbnQuIFRoaXMgbWVhbnMgd2UgY2FuIG9wdGltaXplXG4gIC8vIHNvbWUgY2hlY2tzLiBSZWFjdCBGaWJlciBhbHNvIGlubGluZXMgdGhpcyBsb2dpYyBmb3Igc2ltaWxhciBwdXJwb3Nlcy5cbiAgdHlwZSA9PT0gJ29iamVjdCcgJiYgY2hpbGRyZW4uJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSkge1xuICAgIGNhbGxiYWNrKHRyYXZlcnNlQ29udGV4dCwgY2hpbGRyZW4sXG4gICAgLy8gSWYgaXQncyB0aGUgb25seSBjaGlsZCwgdHJlYXQgdGhlIG5hbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gYW4gYXJyYXlcbiAgICAvLyBzbyB0aGF0IGl0J3MgY29uc2lzdGVudCBpZiB0aGUgbnVtYmVyIG9mIGNoaWxkcmVuIGdyb3dzLlxuICAgIG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKTtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHZhciBjaGlsZDtcbiAgdmFyIG5leHROYW1lO1xuICB2YXIgc3VidHJlZUNvdW50ID0gMDsgLy8gQ291bnQgb2YgY2hpbGRyZW4gZm91bmQgaW4gdGhlIGN1cnJlbnQgc3VidHJlZS5cbiAgdmFyIG5leHROYW1lUHJlZml4ID0gbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiA6IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUjtcblxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaSk7XG4gICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcbiAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKGNoaWxkcmVuKTtcbiAgICAgIHZhciBzdGVwO1xuICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IGNoaWxkcmVuLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGlpID0gMDtcbiAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpaSsrKTtcbiAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgbWFwc0FzQ2hpbGRyZW5BZGRlbmR1bSA9ICcnO1xuICAgICAgICAgIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgICAgICAgICB2YXIgbWFwc0FzQ2hpbGRyZW5Pd25lck5hbWUgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKTtcbiAgICAgICAgICAgIGlmIChtYXBzQXNDaGlsZHJlbk93bmVyTmFtZSkge1xuICAgICAgICAgICAgICBtYXBzQXNDaGlsZHJlbkFkZGVuZHVtID0gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG1hcHNBc0NoaWxkcmVuT3duZXJOYW1lICsgJ2AuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZGlkV2FybkFib3V0TWFwcywgJ1VzaW5nIE1hcHMgYXMgY2hpbGRyZW4gaXMgbm90IHlldCBmdWxseSBzdXBwb3J0ZWQuIEl0IGlzIGFuICcgKyAnZXhwZXJpbWVudGFsIGZlYXR1cmUgdGhhdCBtaWdodCBiZSByZW1vdmVkLiBDb252ZXJ0IGl0IHRvIGEgJyArICdzZXF1ZW5jZSAvIGl0ZXJhYmxlIG9mIGtleWVkIFJlYWN0RWxlbWVudHMgaW5zdGVhZC4lcycsIG1hcHNBc0NoaWxkcmVuQWRkZW5kdW0pIDogdm9pZCAwO1xuICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEl0ZXJhdG9yIHdpbGwgcHJvdmlkZSBlbnRyeSBbayx2XSB0dXBsZXMgcmF0aGVyIHRoYW4gdmFsdWVzLlxuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgIGNoaWxkID0gZW50cnlbMV07XG4gICAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgS2V5RXNjYXBlVXRpbHMuZXNjYXBlKGVudHJ5WzBdKSArIFNVQlNFUEFSQVRPUiArIGdldENvbXBvbmVudEtleShjaGlsZCwgMCk7XG4gICAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgYWRkZW5kdW0gPSAnJztcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFkZGVuZHVtID0gJyBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5ICcgKyAnaW5zdGVhZCBvciB3cmFwIHRoZSBvYmplY3QgdXNpbmcgY3JlYXRlRnJhZ21lbnQob2JqZWN0KSBmcm9tIHRoZSAnICsgJ1JlYWN0IGFkZC1vbnMuJztcbiAgICAgICAgaWYgKGNoaWxkcmVuLl9pc1JlYWN0RWxlbWVudCkge1xuICAgICAgICAgIGFkZGVuZHVtID0gJyBJdCBsb29rcyBsaWtlIHlvdVxcJ3JlIHVzaW5nIGFuIGVsZW1lbnQgY3JlYXRlZCBieSBhIGRpZmZlcmVudCAnICsgJ3ZlcnNpb24gb2YgUmVhY3QuIE1ha2Ugc3VyZSB0byB1c2Ugb25seSBvbmUgY29weSBvZiBSZWFjdC4nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgICAgICAgdmFyIG5hbWUgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKTtcbiAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgYWRkZW5kdW0gKz0gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuU3RyaW5nID0gU3RyaW5nKGNoaWxkcmVuKTtcbiAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6ICVzKS4lcycsIGNoaWxkcmVuU3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJyA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oJywgJykgKyAnfScgOiBjaGlsZHJlblN0cmluZywgYWRkZW5kdW0pIDogX3Byb2RJbnZhcmlhbnQoJzMxJywgY2hpbGRyZW5TdHJpbmcgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gJ29iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhjaGlsZHJlbikuam9pbignLCAnKSArICd9JyA6IGNoaWxkcmVuU3RyaW5nLCBhZGRlbmR1bSkgOiB2b2lkIDA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbn1cblxuLyoqXG4gKiBUcmF2ZXJzZXMgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLCBidXRcbiAqIG1pZ2h0IGFsc28gYmUgc3BlY2lmaWVkIHRocm91Z2ggYXR0cmlidXRlczpcbiAqXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4sIC4uLilgXG4gKiAtIGB0cmF2ZXJzZUFsbENoaWxkcmVuKHRoaXMucHJvcHMubGVmdFBhbmVsQ2hpbGRyZW4sIC4uLilgXG4gKlxuICogVGhlIGB0cmF2ZXJzZUNvbnRleHRgIGlzIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHRoYXQgaXMgcGFzc2VkIHRocm91Z2ggdGhlXG4gKiBlbnRpcmUgdHJhdmVyc2FsLiBJdCBjYW4gYmUgdXNlZCB0byBzdG9yZSBhY2N1bXVsYXRpb25zIG9yIGFueXRoaW5nIGVsc2UgdGhhdFxuICogdGhlIGNhbGxiYWNrIG1pZ2h0IGZpbmQgcmVsZXZhbnQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBvYmplY3QuXG4gKiBAcGFyYW0geyFmdW5jdGlvbn0gY2FsbGJhY2sgVG8gaW52b2tlIHVwb24gdHJhdmVyc2luZyBlYWNoIGNoaWxkLlxuICogQHBhcmFtIHs/Kn0gdHJhdmVyc2VDb250ZXh0IENvbnRleHQgZm9yIHRyYXZlcnNhbC5cbiAqIEByZXR1cm4geyFudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hpbGRyZW4gaW4gdGhpcyBzdWJ0cmVlLlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sICcnLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmF2ZXJzZUFsbENoaWxkcmVuO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9yZWFjdC9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qc1xuLy8gbW9kdWxlIGlkID0gMTg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gMTkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBtYXAgPSB7XG5cdFwiLi83NzlhMzM1ZS03MjE2LTExZTYtOGI1OC0wNjAzM2MwMDRmNzdAMTQ5MDM4NjE5Mi5qc29uXCI6IDEwNFxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIicuXCIpO1xuXHRyZXR1cm4gaWQ7XG59O1xud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE5MjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2RhdGEgXlxcLlxcLy4qQDE0OTAzODYxOTJcXC5qc29uJFxuLy8gbW9kdWxlIGlkID0gMTkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=