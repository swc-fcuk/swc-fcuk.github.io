/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 85);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(7);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMProperty = __webpack_require__(19);
var ReactDOMComponentFlags = __webpack_require__(60);

var invariant = __webpack_require__(1);

var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
var Flags = ReactDOMComponentFlags;

var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);

/**
 * Check if a given node should be cached.
 */
function shouldPrecacheNode(node, nodeID) {
  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
}

/**
 * Drill down (through composites and empty components) until we get a host or
 * host text component.
 *
 * This is pretty polymorphic but unavoidable with the current structure we have
 * for `_renderedChildren`.
 */
function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

/**
 * Populate `_hostNode` on the rendered host/text component with the given
 * DOM node. The passed `inst` can be a composite.
 */
function precacheNode(inst, node) {
  var hostInst = getRenderedHostOrTextFromComponent(inst);
  hostInst._hostNode = node;
  node[internalInstanceKey] = hostInst;
}

function uncacheNode(inst) {
  var node = inst._hostNode;
  if (node) {
    delete node[internalInstanceKey];
    inst._hostNode = null;
  }
}

/**
 * Populate `_hostNode` on each child of `inst`, assuming that the children
 * match up with the DOM (element) children of `node`.
 *
 * We cache entire levels at once to avoid an n^2 problem where we access the
 * children of a node sequentially and have to walk from the start to our target
 * node every time.
 *
 * Since we update `_renderedChildren` and the actual DOM at (slightly)
 * different times, we could race here and see a newer `_renderedChildren` than
 * the DOM nodes we see. To avoid this, ReactMultiChild calls
 * `prepareToManageChildren` before we change `_renderedChildren`, at which
 * time the container's child nodes are always cached (until it unmounts).
 */
function precacheChildNodes(inst, node) {
  if (inst._flags & Flags.hasCachedChildNodes) {
    return;
  }
  var children = inst._renderedChildren;
  var childNode = node.firstChild;
  outer: for (var name in children) {
    if (!children.hasOwnProperty(name)) {
      continue;
    }
    var childInst = children[name];
    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
    if (childID === 0) {
      // We're currently unmounting this child in ReactMultiChild; skip it.
      continue;
    }
    // We assume the child nodes are in the same order as the child instances.
    for (; childNode !== null; childNode = childNode.nextSibling) {
      if (shouldPrecacheNode(childNode, childID)) {
        precacheNode(childInst, childNode);
        continue outer;
      }
    }
    // We reached the end of the DOM children without finding an ID match.
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
  }
  inst._flags |= Flags.hasCachedChildNodes;
}

/**
 * Given a DOM node, return the closest ReactDOMComponent or
 * ReactDOMTextComponent instance ancestor.
 */
function getClosestInstanceFromNode(node) {
  if (node[internalInstanceKey]) {
    return node[internalInstanceKey];
  }

  // Walk up the tree until we find an ancestor whose instance we have cached.
  var parents = [];
  while (!node[internalInstanceKey]) {
    parents.push(node);
    if (node.parentNode) {
      node = node.parentNode;
    } else {
      // Top of the tree. This node must not be part of a React tree (or is
      // unmounted, potentially).
      return null;
    }
  }

  var closest;
  var inst;
  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
    closest = inst;
    if (parents.length) {
      precacheChildNodes(inst, node);
    }
  }

  return closest;
}

/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */
function getInstanceFromNode(node) {
  var inst = getClosestInstanceFromNode(node);
  if (inst != null && inst._hostNode === node) {
    return inst;
  } else {
    return null;
  }
}

/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */
function getNodeFromInstance(inst) {
  // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.
  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  if (inst._hostNode) {
    return inst._hostNode;
  }

  // Walk up the tree until we find an ancestor whose DOM node we have cached.
  var parents = [];
  while (!inst._hostNode) {
    parents.push(inst);
    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
    inst = inst._hostParent;
  }

  // Now parents contains each ancestor that does *not* have a cached native
  // node, and `inst` is the deepest ancestor that does.
  for (; parents.length; inst = parents.pop()) {
    precacheChildNodes(inst, inst._hostNode);
  }

  return inst._hostNode;
}

var ReactDOMComponentTree = {
  getClosestInstanceFromNode: getClosestInstanceFromNode,
  getInstanceFromNode: getInstanceFromNode,
  getNodeFromInstance: getNodeFromInstance,
  precacheChildNodes: precacheChildNodes,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactDOMComponentTree;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

/**
 * Simple, lightweight module assisting with the detection and context of
 * Worker. Helps avoid circular dependencies and allows code to reason about
 * whether or not they are in a Worker, even if they never include the main
 * `ReactWorker` dependency.
 */
var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM // For now, this is true - might change in the future.

};

module.exports = ExecutionEnvironment;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// Trust the developer to only use ReactInstrumentation with a __DEV__ check

var debugTool = null;

if (process.env.NODE_ENV !== 'production') {
  var ReactDebugTool = __webpack_require__(125);
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(15);

var ReactCurrentOwner = __webpack_require__(12);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty)
  // Strip regex characters so we can use it for regex
  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  // Remove hasOwnProperty from the template to make it generic
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

module.exports = ReactComponentTreeHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(58);
var PooledClass = __webpack_require__(13);
var ReactFeatureFlags = __webpack_require__(130);
var ReactReconciler = __webpack_require__(22);
var Transaction = __webpack_require__(26);

var invariant = __webpack_require__(1);

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
}

var NESTED_UPDATES = {
  initialize: function () {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function () {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      // Additional updates were enqueued by componentDidUpdate handlers or
      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
      // these new updates so that if A's componentDidUpdate calls setState on
      // B, B will update before the callback A's updater provided when calling
      // setState.
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function () {
    this.callbackQueue.reset();
  },
  close: function () {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
  /* useCreateElement */true);
}

_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function () {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function (method, scope, a) {
    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
    // with this transaction's wrappers around it.
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

/**
 * Array comparator for ReactComponents by mount ordering.
 *
 * @param {ReactComponent} c1 first component you're comparing
 * @param {ReactComponent} c2 second component you're comparing
 * @return {number} Return value usable by Array.prototype.sort().
 */
function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;

  // Since reconciling a component higher in the owner hierarchy usually (not
  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
  // them before their children by sorting the array.
  dirtyComponents.sort(mountOrderComparator);

  // Any updates enqueued while reconciling must be performed after this entire
  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
  // C, B could update twice in a single batch if C's render enqueues an update
  // to B (since B would have already updated, we should skip it, and the only
  // way we can know to do so is by checking the batch counter).
  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    // If a component is unmounted before pending changes apply, it will still
    // be here, but we assume that it has cleared its _pendingCallbacks and
    // that performUpdateIfNecessary is a noop.
    var component = dirtyComponents[i];

    // If performUpdateIfNecessary happens to enqueue any new updates, we
    // shouldn't execute the callbacks until the next render happens, so
    // stash the callbacks first
    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;
      // Duck type TopLevelWrapper. This is probably always true.
      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function () {
  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
  // array and perform any updates enqueued by mount-ready handlers (i.e.,
  // componentDidUpdate) but we need to check here too in order to catch
  // updates enqueued by setState callbacks and asap calls.
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

/**
 * Mark a component as needing a rerender, adding an optional callback to a
 * list of functions which will be executed once the rerender occurs.
 */
function enqueueUpdate(component) {
  ensureInjected();

  // Various parts of our code (such as ReactCompositeComponent's
  // _renderValidatedComponent) assume that calls to render aren't nested;
  // verify that that's the case. (This is called by each top-level update
  // function, like setState, forceUpdate, etc.; creation and
  // destruction of top-level components is guarded in ReactMount.)

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

/**
 * Enqueue a callback to be run at the end of the current batching cycle. Throws
 * if no updates are currently being performed.
 */
function asap(callback, context) {
  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function (ReconcileTransaction) {
    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function (_batchingStrategy) {
    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
    batchingStrategy = _batchingStrategy;
  }
};

var ReactUpdates = {
  /**
   * React references `ReactReconcileTransaction` using this property in order
   * to allow dependency injection.
   *
   * @internal
   */
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(13);

var emptyFunction = __webpack_require__(7);
var warning = __webpack_require__(2);

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */
function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (process.env.NODE_ENV !== 'production') {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (process.env.NODE_ENV !== 'production') {
      delete this[propName]; // this has a getter/setter for warnings
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {

  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      // eslint-disable-line valid-typeof
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function () {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // eslint-disable-line valid-typeof
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: emptyFunction.thatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (process.env.NODE_ENV !== 'production') {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (process.env.NODE_ENV !== 'production') {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }

});

SyntheticEvent.Interface = EventInterface;

if (process.env.NODE_ENV !== 'production') {
  if (isProxySupported) {
    /*eslint-disable no-func-assign */
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function (target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function (constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function (target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
    /*eslint-enable no-func-assign */
  }
}
/**
 * Helper to reduce boilerplate when creating subclasses.
 *
 * @param {function} Class
 * @param {?object} Interface
 */
SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function () {};
  E.prototype = Super.prototype;
  var prototype = new E();

  _assign(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

/**
  * Helper to nullify syntheticEvent instance properties when destructing
  *
  * @param {object} SyntheticEvent
  * @param {String} propName
  * @return {object} defineProperty object
  */
function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    process.env.NODE_ENV !== 'production' ? warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
  }
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(12);

var warning = __webpack_require__(2);
var canDefineProperty = __webpack_require__(50);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(78);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = React;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = __webpack_require__(31);
var setInnerHTML = __webpack_require__(45);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(40);
var setTextContent = __webpack_require__(75);

var ELEMENT_NODE_TYPE = 1;
var DOCUMENT_FRAGMENT_NODE_TYPE = 11;

/**
 * In IE (8-11) and Edge, appending nodes with no children is dramatically
 * faster than appending a full subtree, so we essentially queue up the
 * .appendChild calls here and apply them so each node is added to its parent
 * before any children are added.
 *
 * In other browsers, doing so is slower or neutral compared to the other order
 * (in Firefox, twice as slow) so we only do this inversion in IE.
 *
 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
 */
var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);

function insertTreeChildren(tree) {
  if (!enableLazy) {
    return;
  }
  var node = tree.node;
  var children = tree.children;
  if (children.length) {
    for (var i = 0; i < children.length; i++) {
      insertTreeBefore(node, children[i], null);
    }
  } else if (tree.html != null) {
    setInnerHTML(node, tree.html);
  } else if (tree.text != null) {
    setTextContent(node, tree.text);
  }
}

var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
  // DocumentFragments aren't actually part of the DOM after insertion so
  // appending children won't update the DOM. We need to ensure the fragment
  // is properly populated first, breaking out of our lazy approach for just
  // this level. Also, some <object> plugins (like Flash Player) will read
  // <param> nodes immediately upon insertion into the DOM, so <object>
  // must also be populated prior to insertion into the DOM.
  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
    insertTreeChildren(tree);
    parentNode.insertBefore(tree.node, referenceNode);
  } else {
    parentNode.insertBefore(tree.node, referenceNode);
    insertTreeChildren(tree);
  }
});

function replaceChildWithTree(oldNode, newTree) {
  oldNode.parentNode.replaceChild(newTree.node, oldNode);
  insertTreeChildren(newTree);
}

function queueChild(parentTree, childTree) {
  if (enableLazy) {
    parentTree.children.push(childTree);
  } else {
    parentTree.node.appendChild(childTree.node);
  }
}

function queueHTML(tree, html) {
  if (enableLazy) {
    tree.html = html;
  } else {
    setInnerHTML(tree.node, html);
  }
}

function queueText(tree, text) {
  if (enableLazy) {
    tree.text = text;
  } else {
    setTextContent(tree.node, text);
  }
}

function toString() {
  return this.node.nodeName;
}

function DOMLazyTree(node) {
  return {
    node: node,
    children: [],
    html: null,
    text: null,
    toString: toString
  };
}

DOMLazyTree.insertTreeBefore = insertTreeBefore;
DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
DOMLazyTree.queueChild = queueChild;
DOMLazyTree.queueHTML = queueHTML;
DOMLazyTree.queueText = queueText;

module.exports = DOMLazyTree;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

function checkMask(value, bitmask) {
  return (value & bitmask) === bitmask;
}

var DOMPropertyInjection = {
  /**
   * Mapping from normalized, camelcased property names to a configuration that
   * specifies how the associated DOM property should be accessed or rendered.
   */
  MUST_USE_PROPERTY: 0x1,
  HAS_BOOLEAN_VALUE: 0x4,
  HAS_NUMERIC_VALUE: 0x8,
  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,

  /**
   * Inject some specialized knowledge about the DOM. This takes a config object
   * with the following properties:
   *
   * isCustomAttribute: function that given an attribute name will return true
   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
   * attributes where it's impossible to enumerate all of the possible
   * attribute names,
   *
   * Properties: object mapping DOM property name to one of the
   * DOMPropertyInjection constants or null. If your attribute isn't in here,
   * it won't get written to the DOM.
   *
   * DOMAttributeNames: object mapping React attribute name to the DOM
   * attribute name. Attribute names not specified use the **lowercase**
   * normalized name.
   *
   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
   * attribute namespace URL. (Attribute names not specified use no namespace.)
   *
   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
   * Property names not specified use the normalized name.
   *
   * DOMMutationMethods: Properties that require special mutation methods. If
   * `value` is undefined, the mutation method should unset the property.
   *
   * @param {object} domPropertyConfig the config as described above.
   */
  injectDOMPropertyConfig: function (domPropertyConfig) {
    var Injection = DOMPropertyInjection;
    var Properties = domPropertyConfig.Properties || {};
    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

    if (domPropertyConfig.isCustomAttribute) {
      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
    }

    for (var propName in Properties) {
      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;

      var lowerCased = propName.toLowerCase();
      var propConfig = Properties[propName];

      var propertyInfo = {
        attributeName: lowerCased,
        attributeNamespace: null,
        propertyName: propName,
        mutationMethod: null,

        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
      };
      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;

      if (process.env.NODE_ENV !== 'production') {
        DOMProperty.getPossibleStandardName[lowerCased] = propName;
      }

      if (DOMAttributeNames.hasOwnProperty(propName)) {
        var attributeName = DOMAttributeNames[propName];
        propertyInfo.attributeName = attributeName;
        if (process.env.NODE_ENV !== 'production') {
          DOMProperty.getPossibleStandardName[attributeName] = propName;
        }
      }

      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
      }

      if (DOMPropertyNames.hasOwnProperty(propName)) {
        propertyInfo.propertyName = DOMPropertyNames[propName];
      }

      if (DOMMutationMethods.hasOwnProperty(propName)) {
        propertyInfo.mutationMethod = DOMMutationMethods[propName];
      }

      DOMProperty.properties[propName] = propertyInfo;
    }
  }
};

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
/* eslint-enable max-len */

/**
 * DOMProperty exports lookup objects that can be used like functions:
 *
 *   > DOMProperty.isValid['id']
 *   true
 *   > DOMProperty.isValid['foobar']
 *   undefined
 *
 * Although this may be confusing, it performs better in general.
 *
 * @see http://jsperf.com/key-exists
 * @see http://jsperf.com/key-missing
 */
var DOMProperty = {

  ID_ATTRIBUTE_NAME: 'data-reactid',
  ROOT_ATTRIBUTE_NAME: 'data-reactroot',

  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',

  /**
   * Map from property "standard name" to an object with info about how to set
   * the property in the DOM. Each object contains:
   *
   * attributeName:
   *   Used when rendering markup or with `*Attribute()`.
   * attributeNamespace
   * propertyName:
   *   Used on DOM node instances. (This includes properties that mutate due to
   *   external factors.)
   * mutationMethod:
   *   If non-null, used instead of the property or `setAttribute()` after
   *   initial render.
   * mustUseProperty:
   *   Whether the property must be accessed and mutated as an object property.
   * hasBooleanValue:
   *   Whether the property should be removed when set to a falsey value.
   * hasNumericValue:
   *   Whether the property must be numeric or parse as a numeric and should be
   *   removed when set to a falsey value.
   * hasPositiveNumericValue:
   *   Whether the property must be positive numeric or parse as a positive
   *   numeric and should be removed when set to a falsey value.
   * hasOverloadedBooleanValue:
   *   Whether the property can be used as a flag as well as with a value.
   *   Removed when strictly equal to false; present without a value when
   *   strictly equal to true; present with a value otherwise.
   */
  properties: {},

  /**
   * Mapping from lowercase property names to the properly cased version, used
   * to warn in the case of missing properties. Available only in __DEV__.
   *
   * autofocus is predefined, because adding it to the property whitelist
   * causes unintended side effects.
   *
   * @type {Object}
   */
  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,

  /**
   * All of the isCustomAttribute() functions that have been injected.
   */
  _isCustomAttributeFunctions: [],

  /**
   * Checks whether a property name is a custom attribute.
   * @method
   */
  isCustomAttribute: function (attributeName) {
    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
      if (isCustomAttributeFn(attributeName)) {
        return true;
      }
    }
    return false;
  },

  injection: DOMPropertyInjection
};

module.exports = DOMProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var EventPluginRegistry = __webpack_require__(32);
var EventPluginUtils = __webpack_require__(33);
var ReactErrorUtils = __webpack_require__(38);

var accumulateInto = __webpack_require__(70);
var forEachAccumulated = __webpack_require__(71);
var invariant = __webpack_require__(1);

/**
 * Internal store for event listeners
 */
var listenerBank = {};

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */
var eventQueue = null;

/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @private
 */
var executeDispatchesAndRelease = function (event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function (e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function (inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
};

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
      return !!(props.disabled && isInteractive(type));
    default:
      return false;
  }
}

/**
 * This is a unified interface for event plugins to be installed and configured.
 *
 * Event plugins can implement the following properties:
 *
 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
 *     Required. When a top-level event is fired, this method is expected to
 *     extract synthetic events that will in turn be queued and dispatched.
 *
 *   `eventTypes` {object}
 *     Optional, plugins that fire events must publish a mapping of registration
 *     names that are used to register listeners. Values of this mapping must
 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
 *
 *   `executeDispatch` {function(object, function, string)}
 *     Optional, allows plugins to override how an event gets dispatched. By
 *     default, the listener is simply invoked.
 *
 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
 *
 * @public
 */
var EventPluginHub = {

  /**
   * Methods for injecting dependencies.
   */
  injection: {

    /**
     * @param {array} InjectedEventPluginOrder
     * @public
     */
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    /**
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     */
    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  /**
   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {function} listener The callback to store.
   */
  putListener: function (inst, registrationName, listener) {
    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  /**
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @return {?function} The stored callback.
   */
  getListener: function (inst, registrationName) {
    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
    // live here; needs to be moved to a better place soon
    var bankForRegistrationName = listenerBank[registrationName];
    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
      return null;
    }
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  /**
   * Deletes a listener from the registration bank.
   *
   * @param {object} inst The instance, which is the source of events.
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   */
  deleteListener: function (inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];
    // TODO: This should never be null -- when is it?
    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  /**
   * Deletes all listeners for the DOM element with the supplied ID.
   *
   * @param {object} inst The instance, which is the source of events.
   */
  deleteAllListeners: function (inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  /**
   * Allows registered plugins an opportunity to extract events from top-level
   * native browser events.
   *
   * @return {*} An accumulation of synthetic events.
   * @internal
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      // Not every plugin in the ordering may be loaded at runtime.
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  /**
   * Enqueues a synthetic event that should be dispatched when
   * `processEventQueue` is invoked.
   *
   * @param {*} events An accumulation of synthetic events.
   * @internal
   */
  enqueueEvents: function (events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  /**
   * Dispatches all synthetic events on the event queue.
   *
   * @internal
   */
  processEventQueue: function (simulated) {
    // Set `eventQueue` to null before processing it so that we can tell if more
    // events get enqueued while processing.
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
    // This would be a good time to rethrow if any of the event handlers threw.
    ReactErrorUtils.rethrowCaughtError();
  },

  /**
   * These are needed for tests only. Do not use!
   */
  __purge: function () {
    listenerBank = {};
  },

  __getListenerBank: function () {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(20);
var EventPluginUtils = __webpack_require__(33);

var accumulateInto = __webpack_require__(70);
var forEachAccumulated = __webpack_require__(71);
var warning = __webpack_require__(2);

var getListener = EventPluginHub.getListener;

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */
function accumulateDirectionalDispatches(inst, phase, event) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */
function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
 */
function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */
function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */
function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing event a
 * single one.
 *
 * @constructor EventPropagators
 */
var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactRef = __webpack_require__(140);
var ReactInstrumentation = __webpack_require__(8);

var warning = __webpack_require__(2);

/**
 * Helper to call ReactRef.attachRefs with this composite component, split out
 * to avoid allocations in the transaction mount-ready queue.
 */
function attachRefs() {
  ReactRef.attachRefs(this, this._currentElement);
}

var ReactReconciler = {

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} the containing host component instance
   * @param {?object} info about the host container
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID // 0 in production and for roots
  ) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  /**
   * Returns a value that can be passed to
   * ReactComponentEnvironment.replaceNodeWithMarkup.
   */
  getHostNode: function (internalInstance) {
    return internalInstance.getHostNode();
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (internalInstance, safely) {
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Update a component using a new element.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @internal
   */
  receiveComponent: function (internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      // Since elements are immutable after the owner is rendered,
      // we can do a cheap identity compare here to determine if this is a
      // superfluous reconcile. It's possible for state to be mutable but such
      // change should trigger an update of the owner which would recreate
      // the element. We explicitly check for the existence of an owner since
      // it's possible for an element created outside a composite to be
      // deeply mutated and reused.

      // TODO: Bailing out early is just a perf optimization right?
      // TODO: Removing the return statement should affect correctness?
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  /**
   * Flush any dirty changes in a component.
   *
   * @param {ReactComponent} internalInstance
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      // The component's enqueued batch number should always be the current
      // batch or the following one.
      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
      return;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (process.env.NODE_ENV !== 'production') {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }

};

module.exports = ReactReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

var getEventTarget = __webpack_require__(43);

/**
 * @interface UIEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var UIEventInterface = {
  view: function (event) {
    if (event.view) {
      return event.view;
    }

    var target = getEventTarget(event);
    if (target.window === target) {
      // target is a window object
      return target;
    }

    var doc = target.ownerDocument;
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    if (doc) {
      return doc.defaultView || doc.parentWindow;
    } else {
      return window;
    }
  },
  detail: function (event) {
    return event.detail || 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

module.exports = SyntheticUIEvent;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactChildren = __webpack_require__(171);
var ReactComponent = __webpack_require__(47);
var ReactPureComponent = __webpack_require__(175);
var ReactClass = __webpack_require__(172);
var ReactDOMFactories = __webpack_require__(173);
var ReactElement = __webpack_require__(14);
var ReactPropTypes = __webpack_require__(174);
var ReactVersion = __webpack_require__(176);

var onlyChild = __webpack_require__(178);
var warning = __webpack_require__(2);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(79);
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (process.env.NODE_ENV !== 'production') {
  var warned = false;
  __spread = function () {
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,
  PureComponent: ReactPureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

module.exports = React;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(23);
var ViewportMetrics = __webpack_require__(69);

var getEventModifierState = __webpack_require__(42);

/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var MouseEventInterface = {
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: function (event) {
    // Webkit, Firefox, IE9+
    // which:  1 2 3
    // button: 0 1 2 (standard)
    var button = event.button;
    if ('which' in event) {
      return button;
    }
    // IE<9
    // which:  undefined
    // button: 0 0 0
    // button: 1 4 2 (onmouseup)
    return button === 2 ? 2 : button === 4 ? 1 : 0;
  },
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  // "Proprietary" Interface.
  pageX: function (event) {
    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
  },
  pageY: function (event) {
    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

module.exports = SyntheticMouseEvent;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var OBSERVED_ERROR = {};

/**
 * `Transaction` creates a black box that is able to wrap any method such that
 * certain invariants are maintained before and after the method is invoked
 * (Even if an exception is thrown while invoking the wrapped method). Whoever
 * instantiates a transaction can provide enforcers of the invariants at
 * creation time. The `Transaction` class itself will supply one additional
 * automatic invariant for you - the invariant that any transaction instance
 * should not be run while it is already being run. You would typically create a
 * single instance of a `Transaction` for reuse multiple times, that potentially
 * is used to wrap several different methods. Wrappers are extremely simple -
 * they only require implementing two methods.
 *
 * <pre>
 *                       wrappers (injected at creation time)
 *                                      +        +
 *                                      |        |
 *                    +-----------------|--------|--------------+
 *                    |                 v        |              |
 *                    |      +---------------+   |              |
 *                    |   +--|    wrapper1   |---|----+         |
 *                    |   |  +---------------+   v    |         |
 *                    |   |          +-------------+  |         |
 *                    |   |     +----|   wrapper2  |--------+   |
 *                    |   |     |    +-------------+  |     |   |
 *                    |   |     |                     |     |   |
 *                    |   v     v                     v     v   | wrapper
 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | |   | |   |   |         |   |   | |   | |
 *                    | +---+ +---+   +---------+   +---+ +---+ |
 *                    |  initialize                    close    |
 *                    +-----------------------------------------+
 * </pre>
 *
 * Use cases:
 * - Preserving the input selection ranges before/after reconciliation.
 *   Restoring selection even in the event of an unexpected error.
 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
 *   while guaranteeing that afterwards, the event system is reactivated.
 * - Flushing a queue of collected DOM mutations to the main UI thread after a
 *   reconciliation takes place in a worker thread.
 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
 *   content.
 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
 * - (Future use case): Layout calculations before and after DOM updates.
 *
 * Transactional plugin API:
 * - A module that has an `initialize` method that returns any precomputation.
 * - and a `close` method that accepts the precomputation. `close` is invoked
 *   when the wrapped process is completed, or has failed.
 *
 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
 * that implement `initialize` and `close`.
 * @return {Transaction} Single transaction for reuse in thread.
 *
 * @class Transaction
 */
var TransactionImpl = {
  /**
   * Sets up this instance so that it is prepared for collecting metrics. Does
   * so such that this setup method may be used on an instance that is already
   * initialized, in a way that does not consume additional memory upon reuse.
   * That can be useful if you decide to make your subclass of this mixin a
   * "PooledClass".
   */
  reinitializeTransaction: function () {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  /**
   * @abstract
   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
   */
  getTransactionWrappers: null,

  isInTransaction: function () {
    return !!this._isInTransaction;
  },

  /**
   * Executes the function within a safety window. Use this for the top level
   * methods that result in large amounts of computation/mutations that would
   * need to be safety checked. The optional arguments helps prevent the need
   * to bind in many cases.
   *
   * @param {function} method Member of scope to call.
   * @param {Object} scope Scope to invoke from.
   * @param {Object?=} a Argument to pass to the method.
   * @param {Object?=} b Argument to pass to the method.
   * @param {Object?=} c Argument to pass to the method.
   * @param {Object?=} d Argument to pass to the method.
   * @param {Object?=} e Argument to pass to the method.
   * @param {Object?=} f Argument to pass to the method.
   *
   * @return {*} Return value from `method`.
   */
  perform: function (method, scope, a, b, c, d, e, f) {
    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;
      // Catching errors makes debugging more difficult, so we start with
      // errorThrown set to true before setting it to false after calling
      // close -- if it's still set to true in the finally block, it means
      // one of these calls threw.
      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          // If `method` throws, prefer to show that stack trace over any thrown
          // by invoking `closeAll`.
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          // Since `method` didn't throw, we don't want to silence the exception
          // here.
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function (startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        // Catching errors makes debugging more difficult, so we start with the
        // OBSERVED_ERROR state before overwriting it with the real return value
        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
        // block, it means wrapper.initialize threw.
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          // The initializer for wrapper i threw an error; initialize the
          // remaining wrappers but silence any exceptions from them to ensure
          // that the first error is the one to bubble up.
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  /**
   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
   * them the respective return values of `this.transactionWrappers.init[i]`
   * (`close`rs that correspond to initializers that failed will not be
   * invoked).
   */
  closeAll: function (startIndex) {
    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        // Catching errors makes debugging more difficult, so we start with
        // errorThrown set to true before setting it to false after calling
        // close -- if it's still set to true in the finally block, it means
        // wrapper.close threw.
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          // The closer for wrapper i threw an error; close the remaining
          // wrappers but silence any exceptions from them to ensure that the
          // first error is the one to bubble up.
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * Based on the escape-html library, which is used under the MIT License below:
 *
 * Copyright (c) 2012-2013 TJ Holowaychuk
 * Copyright (c) 2015 Andreas Lubbe
 * Copyright (c) 2015 Tiancheng "Timothy" Gu
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * 'Software'), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */



// code copied and modified from escape-html
/**
 * Module variables.
 * @private
 */

var matchHtmlRegExp = /["'&<>]/;

/**
 * Escape special characters in the given string of html.
 *
 * @param  {string} string The string to escape for inserting into HTML
 * @return {string}
 * @public
 */

function escapeHtml(string) {
  var str = '' + string;
  var match = matchHtmlRegExp.exec(str);

  if (!match) {
    return str;
  }

  var escape;
  var html = '';
  var index = 0;
  var lastIndex = 0;

  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        // "
        escape = '&quot;';
        break;
      case 38:
        // &
        escape = '&amp;';
        break;
      case 39:
        // '
        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
        break;
      case 60:
        // <
        escape = '&lt;';
        break;
      case 62:
        // >
        escape = '&gt;';
        break;
      default:
        continue;
    }

    if (lastIndex !== index) {
      html += str.substring(lastIndex, index);
    }

    lastIndex = index + 1;
    html += escape;
  }

  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
}
// end code copied and modified from escape-html


/**
 * Escapes text to prevent scripting attacks.
 *
 * @param {*} text Text value to escape.
 * @return {string} An escaped string.
 */
function escapeTextContentForBrowser(text) {
  if (typeof text === 'boolean' || typeof text === 'number') {
    // this shortcircuit helps perf for types that we know will never have
    // special characters, especially given that this function is used often
    // for numeric dom ids.
    return '' + text;
  }
  return escapeHtml(text);
}

module.exports = escapeTextContentForBrowser;

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = WinJS;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 * 
 */

/*eslint-disable no-self-compare */



var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    // Added the nonzero y check to make Flow happy, but it is redundant
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}

/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */
function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  // Test for A's keys different from B.
  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMLazyTree = __webpack_require__(18);
var Danger = __webpack_require__(106);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(8);

var createMicrosoftUnsafeLocalFunction = __webpack_require__(40);
var setInnerHTML = __webpack_require__(45);
var setTextContent = __webpack_require__(75);

function getNodeAfter(parentNode, node) {
  // Special case for text components, which return [open, close] comments
  // from getHostNode.
  if (Array.isArray(node)) {
    node = node[1];
  }
  return node ? node.nextSibling : parentNode.firstChild;
}

/**
 * Inserts `childNode` as a child of `parentNode` at the `index`.
 *
 * @param {DOMElement} parentNode Parent node in which to insert.
 * @param {DOMElement} childNode Child node to insert.
 * @param {number} index Index at which to insert the child.
 * @internal
 */
var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
  // We rely exclusively on `insertBefore(node, null)` instead of also using
  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
  // we are careful to use `null`.)
  parentNode.insertBefore(childNode, referenceNode);
});

function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
}

function moveChild(parentNode, childNode, referenceNode) {
  if (Array.isArray(childNode)) {
    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
  } else {
    insertChildAt(parentNode, childNode, referenceNode);
  }
}

function removeChild(parentNode, childNode) {
  if (Array.isArray(childNode)) {
    var closingComment = childNode[1];
    childNode = childNode[0];
    removeDelimitedText(parentNode, childNode, closingComment);
    parentNode.removeChild(closingComment);
  }
  parentNode.removeChild(childNode);
}

function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
  var node = openingComment;
  while (true) {
    var nextNode = node.nextSibling;
    insertChildAt(parentNode, node, referenceNode);
    if (node === closingComment) {
      break;
    }
    node = nextNode;
  }
}

function removeDelimitedText(parentNode, startNode, closingComment) {
  while (true) {
    var node = startNode.nextSibling;
    if (node === closingComment) {
      // The closing comment is removed by ReactMultiChild.
      break;
    } else {
      parentNode.removeChild(node);
    }
  }
}

function replaceDelimitedText(openingComment, closingComment, stringText) {
  var parentNode = openingComment.parentNode;
  var nodeAfterComment = openingComment.nextSibling;
  if (nodeAfterComment === closingComment) {
    // There are no text nodes between the opening and closing comments; insert
    // a new one if stringText isn't empty.
    if (stringText) {
      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
    }
  } else {
    if (stringText) {
      // Set the text content of the first node after the opening comment, and
      // remove all following nodes up until the closing comment.
      setTextContent(nodeAfterComment, stringText);
      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
    } else {
      removeDelimitedText(parentNode, openingComment, closingComment);
    }
  }

  if (process.env.NODE_ENV !== 'production') {
    ReactInstrumentation.debugTool.onHostOperation({
      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
      type: 'replace text',
      payload: stringText
    });
  }
}

var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
if (process.env.NODE_ENV !== 'production') {
  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
    if (prevInstance._debugID !== 0) {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: prevInstance._debugID,
        type: 'replace with',
        payload: markup.toString()
      });
    } else {
      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
      if (nextInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onHostOperation({
          instanceID: nextInstance._debugID,
          type: 'mount',
          payload: markup.toString()
        });
      }
    }
  };
}

/**
 * Operations for updating with DOM children.
 */
var DOMChildrenOperations = {

  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,

  replaceDelimitedText: replaceDelimitedText,

  /**
   * Updates a component's children by processing a series of updates. The
   * update configurations are each expected to have a `parentNode` property.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  processUpdates: function (parentNode, updates) {
    if (process.env.NODE_ENV !== 'production') {
      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
    }

    for (var k = 0; k < updates.length; k++) {
      var update = updates[k];
      switch (update.type) {
        case 'INSERT_MARKUP':
          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'insert child',
              payload: { toIndex: update.toIndex, content: update.content.toString() }
            });
          }
          break;
        case 'MOVE_EXISTING':
          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'move child',
              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
            });
          }
          break;
        case 'SET_MARKUP':
          setInnerHTML(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace children',
              payload: update.content.toString()
            });
          }
          break;
        case 'TEXT_CONTENT':
          setTextContent(parentNode, update.content);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'replace text',
              payload: update.content.toString()
            });
          }
          break;
        case 'REMOVE_NODE':
          removeChild(parentNode, update.fromNode);
          if (process.env.NODE_ENV !== 'production') {
            ReactInstrumentation.debugTool.onHostOperation({
              instanceID: parentNodeDebugID,
              type: 'remove child',
              payload: { fromIndex: update.fromIndex }
            });
          }
          break;
      }
    }
  }

};

module.exports = DOMChildrenOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMNamespaces = {
  html: 'http://www.w3.org/1999/xhtml',
  mathml: 'http://www.w3.org/1998/Math/MathML',
  svg: 'http://www.w3.org/2000/svg'
};

module.exports = DOMNamespaces;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;

/**
 * Injectable mapping from names to event plugin modules.
 */
var namesToPlugins = {};

/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */
function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
    }
  }
}

/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */
function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

/**
 * Publishes a registration name that is used to identify dispatched events and
 * can be used with `EventPluginHub.putListener` to register listeners.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */
function publishRegistrationName(registrationName, pluginModule, eventName) {
  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (process.env.NODE_ENV !== 'production') {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

/**
 * Registers plugins so that they can extract and dispatch events.
 *
 * @see {EventPluginHub}
 */
var EventPluginRegistry = {

  /**
   * Ordered list of injected plugins.
   */
  plugins: [],

  /**
   * Mapping from event name to dispatch config
   */
  eventNameDispatchConfigs: {},

  /**
   * Mapping from registration name to plugin module
   */
  registrationNameModules: {},

  /**
   * Mapping from registration name to event name
   */
  registrationNameDependencies: {},

  /**
   * Mapping from lowercase registration names to the properly cased version,
   * used to warn in the case of missing event handlers. Available
   * only in __DEV__.
   * @type {Object}
   */
  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
  // Trust the developer to only use possibleRegistrationNames in __DEV__

  /**
   * Injects an ordering of plugins (by plugin name). This allows the ordering
   * to be decoupled from injection of the actual plugins so that ordering is
   * always deterministic regardless of packaging, on-the-fly injection, etc.
   *
   * @param {array} InjectedEventPluginOrder
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginOrder}
   */
  injectEventPluginOrder: function (injectedEventPluginOrder) {
    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
    // Clone the ordering so it cannot be dynamically mutated.
    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  /**
   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
   * in the ordering injected by `injectEventPluginOrder`.
   *
   * Plugins can be injected as part of page initialization or on-the-fly.
   *
   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
   * @internal
   * @see {EventPluginHub.injection.injectEventPluginsByName}
   */
  injectEventPluginsByName: function (injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  /**
   * Looks up the plugin for the supplied event.
   *
   * @param {object} event A synthetic event.
   * @return {?object} The plugin that created the supplied event.
   * @internal
   */
  getPluginModuleForEvent: function (event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
      // that it is not undefined.
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  /**
   * Exposed for unit testing.
   * @private
   */
  _resetEventPlugins: function () {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }

};

module.exports = EventPluginRegistry;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactErrorUtils = __webpack_require__(38);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Injected dependencies:
 */

/**
 * - `ComponentTree`: [required] Module that can convert between React instances
 *   and actual node references.
 */
var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function (Injected) {
    ComponentTree = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
    }
  },
  injectTreeTraversal: function (Injected) {
    TreeTraversal = Injected;
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (process.env.NODE_ENV !== 'production') {
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
  };
}

/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {boolean} simulated If the event is simulated (changes exn behavior)
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */
function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches.
 */
function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

/**
 * Standard/simple iteration through an event's collected dispatches, but stops
 * at the first dispatch execution returning true, and returns that id.
 *
 * @return {?string} id of the first dispatch execution who's listener returns
 * true, or null if no listener returned true.
 */
function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }
      // Listeners and Instances are two parallel arrays that are always in sync.
      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

/**
 * @see executeDispatchesInOrderStopAtTrueImpl
 */
function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

/**
 * Execution of a "direct" dispatch - there must be at most one dispatch
 * accumulated on the event or it is considered an error. It doesn't really make
 * sense for an event with multiple dispatches (bubbled) to keep track of the
 * return values at each dispatch execution, but it does tend to make sense when
 * dealing with "direct" dispatches.
 *
 * @return {*} The return value of executing the single dispatch.
 */
function executeDirectDispatch(event) {
  if (process.env.NODE_ENV !== 'production') {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

/**
 * @param {SyntheticEvent} event
 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
 */
function hasDispatches(event) {
  return !!event._dispatchListeners;
}

/**
 * General utilities that are useful in creating custom Event Plugins.
 */
var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function (node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function (node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function (a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function (a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function (inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function (target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(24);
var ReactPropTypesSecret = __webpack_require__(66);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var hasReadOnlyValue = {
  'button': true,
  'checkbox': true,
  'image': true,
  'hidden': true,
  'radio': true,
  'reset': true,
  'submit': true
};

function _assertSingleLink(inputProps) {
  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
}
function _assertValueLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
}

function _assertCheckedLink(inputProps) {
  _assertSingleLink(inputProps);
  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
}

var propTypes = {
  value: function (props, propName, componentName) {
    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  checked: function (props, propName, componentName) {
    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
      return null;
    }
    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
  },
  onChange: React.PropTypes.func
};

var loggedTypeFailures = {};
function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Provide a linked `value` attribute for controlled forms. You should not use
 * this outside of the ReactDOM controlled form components.
 */
var LinkedValueUtils = {
  checkPropTypes: function (tagName, props, owner) {
    for (var propName in propTypes) {
      if (propTypes.hasOwnProperty(propName)) {
        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
      }
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var addendum = getDeclarationErrorAddendum(owner);
        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
      }
    }
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current value of the input either from value prop or link.
   */
  getValue: function (inputProps) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.value;
    }
    return inputProps.value;
  },

  /**
   * @param {object} inputProps Props for form component
   * @return {*} current checked status of the input either from checked prop
   *             or link.
   */
  getChecked: function (inputProps) {
    if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.value;
    }
    return inputProps.checked;
  },

  /**
   * @param {object} inputProps Props for form component
   * @param {SyntheticEvent} event change event to handle
   */
  executeOnChange: function (inputProps, event) {
    if (inputProps.valueLink) {
      _assertValueLink(inputProps);
      return inputProps.valueLink.requestChange(event.target.value);
    } else if (inputProps.checkedLink) {
      _assertCheckedLink(inputProps);
      return inputProps.checkedLink.requestChange(event.target.checked);
    } else if (inputProps.onChange) {
      return inputProps.onChange.call(undefined, event);
    }
  }
};

module.exports = LinkedValueUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventPluginRegistry = __webpack_require__(32);
var ReactEventEmitterMixin = __webpack_require__(128);
var ViewportMetrics = __webpack_require__(69);

var getVendorPrefixedEventName = __webpack_require__(166);
var isEventSupported = __webpack_require__(44);

/**
 * Summary of `ReactBrowserEventEmitter` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactEventListener, which is injected and can therefore support pluggable
 *    event sources. This is the only work that occurs in the main thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginHub` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginHub` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|EventPluginHub|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var hasEventPageXY;
var alreadyListeningTo = {};
var isMonitoringScrollValue = false;
var reactTopListenersCounter = 0;

// For events like 'submit' which don't consistently bubble (which we trap at a
// lower node than `document`), binding at `document` would cause duplicate
// events so we don't include them here
var topEventMapping = {
  topAbort: 'abort',
  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
  topBlur: 'blur',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topChange: 'change',
  topClick: 'click',
  topCompositionEnd: 'compositionend',
  topCompositionStart: 'compositionstart',
  topCompositionUpdate: 'compositionupdate',
  topContextMenu: 'contextmenu',
  topCopy: 'copy',
  topCut: 'cut',
  topDoubleClick: 'dblclick',
  topDrag: 'drag',
  topDragEnd: 'dragend',
  topDragEnter: 'dragenter',
  topDragExit: 'dragexit',
  topDragLeave: 'dragleave',
  topDragOver: 'dragover',
  topDragStart: 'dragstart',
  topDrop: 'drop',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topFocus: 'focus',
  topInput: 'input',
  topKeyDown: 'keydown',
  topKeyPress: 'keypress',
  topKeyUp: 'keyup',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topMouseDown: 'mousedown',
  topMouseMove: 'mousemove',
  topMouseOut: 'mouseout',
  topMouseOver: 'mouseover',
  topMouseUp: 'mouseup',
  topPaste: 'paste',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topScroll: 'scroll',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topSelectionChange: 'selectionchange',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTextInput: 'textInput',
  topTimeUpdate: 'timeupdate',
  topTouchCancel: 'touchcancel',
  topTouchEnd: 'touchend',
  topTouchMove: 'touchmove',
  topTouchStart: 'touchstart',
  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting',
  topWheel: 'wheel'
};

/**
 * To ensure no conflicts with other potential React instances on the page
 */
var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

function getListeningForDocument(mountAt) {
  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
  // directly.
  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
    mountAt[topListenersIDKey] = reactTopListenersCounter++;
    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
  }
  return alreadyListeningTo[mountAt[topListenersIDKey]];
}

/**
 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
 * example:
 *
 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
 *
 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
 *
 * @internal
 */
var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {

  /**
   * Injectable event backend
   */
  ReactEventListener: null,

  injection: {
    /**
     * @param {object} ReactEventListener
     */
    injectReactEventListener: function (ReactEventListener) {
      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
    }
  },

  /**
   * Sets whether or not any created callbacks should be enabled.
   *
   * @param {boolean} enabled True if callbacks should be enabled.
   */
  setEnabled: function (enabled) {
    if (ReactBrowserEventEmitter.ReactEventListener) {
      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
    }
  },

  /**
   * @return {boolean} True if callbacks are enabled.
   */
  isEnabled: function () {
    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
  },

  /**
   * We listen for bubbled touch events on the document object.
   *
   * Firefox v8.01 (and possibly others) exhibited strange behavior when
   * mounting `onmousemove` events at some node that was not the document
   * element. The symptoms were that if your mouse is not moving over something
   * contained within that mount point (for example on the background) the
   * top-level listeners for `onmousemove` won't be called. However, if you
   * register the `mousemove` on the document object, then it will of course
   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
   * top-level listeners to the document object only, at least for these
   * movement types of events and possibly all events.
   *
   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
   *
   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
   * they bubble to document.
   *
   * @param {string} registrationName Name of listener (e.g. `onClick`).
   * @param {object} contentDocumentHandle Document which owns the container
   */
  listenTo: function (registrationName, contentDocumentHandle) {
    var mountAt = contentDocumentHandle;
    var isListening = getListeningForDocument(mountAt);
    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];

    for (var i = 0; i < dependencies.length; i++) {
      var dependency = dependencies[i];
      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
        if (dependency === 'topWheel') {
          if (isEventSupported('wheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
          } else if (isEventSupported('mousewheel')) {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
          } else {
            // Firefox needs to capture a different mouse scroll event.
            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
          }
        } else if (dependency === 'topScroll') {

          if (isEventSupported('scroll', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
          } else {
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
          }
        } else if (dependency === 'topFocus' || dependency === 'topBlur') {

          if (isEventSupported('focus', true)) {
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
          } else if (isEventSupported('focusin')) {
            // IE has `focusin` and `focusout` events which bubble.
            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
          }

          // to make sure blur and focus event listeners are only attached once
          isListening.topBlur = true;
          isListening.topFocus = true;
        } else if (topEventMapping.hasOwnProperty(dependency)) {
          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
        }

        isListening[dependency] = true;
      }
    }
  },

  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
  },

  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
  },

  /**
   * Protect against document.createEvent() returning null
   * Some popup blocker extensions appear to do this:
   * https://github.com/facebook/react/issues/6887
   */
  supportsEventPageXY: function () {
    if (!document.createEvent) {
      return false;
    }
    var ev = document.createEvent('MouseEvent');
    return ev != null && 'pageX' in ev;
  },

  /**
   * Listens to window scroll and resize events. We cache scroll values so that
   * application code can access them without triggering reflows.
   *
   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
   * pageX/pageY isn't supported (legacy browsers).
   *
   * NOTE: Scroll events do not bubble.
   *
   * @see http://www.quirksmode.org/dom/events/scroll.html
   */
  ensureScrollValueMonitoring: function () {
    if (hasEventPageXY === undefined) {
      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
    }
    if (!hasEventPageXY && !isMonitoringScrollValue) {
      var refresh = ViewportMetrics.refreshScrollValues;
      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
      isMonitoringScrollValue = true;
    }
  }

});

module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var injected = false;

var ReactComponentEnvironment = {

  /**
   * Optionally injectable hook for swapping out mount images in the middle of
   * the tree.
   */
  replaceNodeWithMarkup: null,

  /**
   * Optionally injectable hook for processing a queue of child updates. Will
   * later move into MultiChildComponents.
   */
  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function (environment) {
      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var caughtError = null;

/**
 * Call a function while guarding against errors that happens within it.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} a First argument
 * @param {*} b Second argument
 */
function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  /**
   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
   * handler are sure to be rethrown by rethrowCaughtError.
   */
  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  /**
   * During execution of guarded functions we will capture the first error which
   * we will rethrow to be handled by the top level error handler.
   */
  rethrowCaughtError: function () {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (process.env.NODE_ENV !== 'production') {
  /**
   * To help development we can get better devtools integration by simulating a
   * real browser event.
   */
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');
      // $FlowFixMe https://github.com/facebook/flow/issues/2336
      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 */

// TODO: Replace this with ES6: var ReactInstanceMap = new Map();

var ReactInstanceMap = {

  /**
   * This API should be called `delete` but we'd have to make sure to always
   * transform these to strings for IE support. When this transform is fully
   * supported we can rename it.
   */
  remove: function (key) {
    key._reactInternalInstance = undefined;
  },

  get: function (key) {
    return key._reactInternalInstance;
  },

  has: function (key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function (key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* globals MSApp */



/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */

var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */

function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode;

    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  }

  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.
  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

module.exports = getEventCharCode;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */

var modifierKeyToProp = {
  'Alt': 'altKey',
  'Control': 'ctrlKey',
  'Meta': 'metaKey',
  'Shift': 'shiftKey'
};

// IE8 does not implement getModifierState so we simply map it to the only
// modifier keys exposed by the event itself, does not support Lock-keys.
// Currently, all major browsers except Chrome seems to support Lock-keys.
function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;
  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }
  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

module.exports = getEventModifierState;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  var target = nativeEvent.target || nativeEvent.srcElement || window;

  // Normalize SVG <use> element events #4963
  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  }

  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html
  return target.nodeType === 3 ? target.parentNode : target;
}

module.exports = getEventTarget;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var useHasFeature;
if (ExecutionEnvironment.canUseDOM) {
  useHasFeature = document.implementation && document.implementation.hasFeature &&
  // always returns true in newer browsers as per the standard.
  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
  document.implementation.hasFeature('', '') !== true;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @param {?boolean} capture Check if the capture phase is supported.
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
function isEventSupported(eventNameSuffix, capture) {
  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
    // This is the only way to test support for the `wheel` event in IE9+.
    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
  }

  return isSupported;
}

module.exports = isEventSupported;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var DOMNamespaces = __webpack_require__(31);

var WHITESPACE_TEST = /^[ \r\n\t\f]/;
var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

var createMicrosoftUnsafeLocalFunction = __webpack_require__(40);

// SVG temp container for IE lacking innerHTML
var reusableSVGContainer;

/**
 * Set the innerHTML property of a node, ensuring that whitespace is preserved
 * even in IE8.
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */
var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  // IE does not have innerHTML for SVG nodes, so instead we inject the
  // new markup in a temp node and then move the child nodes across into
  // the target node
  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
    var svgNode = reusableSVGContainer.firstChild;
    while (svgNode.firstChild) {
      node.appendChild(svgNode.firstChild);
    }
  } else {
    node.innerHTML = html;
  }
});

if (ExecutionEnvironment.canUseDOM) {
  // IE8: When updating a just created node with innerHTML only leading
  // whitespace is removed. When updating an existing node with innerHTML
  // whitespace in root TextNodes is also collapsed.
  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

  // Feature detection; only IE8 is known to behave improperly like this.
  var testElement = document.createElement('div');
  testElement.innerHTML = ' ';
  if (testElement.innerHTML === '') {
    setInnerHTML = function (node, html) {
      // Magic theory: IE8 supposedly differentiates between added and updated
      // nodes when processing innerHTML, innerHTML on updated nodes suffers
      // from worse whitespace behavior. Re-adding a node like this triggers
      // the initial and more favorable whitespace behavior.
      // TODO: What to do on a detached node?
      if (node.parentNode) {
        node.parentNode.replaceChild(node, node);
      }

      // We also implement a workaround for non-visible tags disappearing into
      // thin air on IE8, this only happens if there is no visible text
      // in-front of the non-visible tags. Piggyback on the whitespace fix
      // and simply check if any non-visible tags appear in the source.
      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
        // Recover leading whitespace by temporarily prepending any character.
        // \uFEFF has the potential advantage of being zero-width/invisible.
        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
        // in hopes that this is preserved even if "\uFEFF" is transformed to
        // the actual Unicode character (by Babel, for example).
        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
        node.innerHTML = String.fromCharCode(0xFEFF) + html;

        // deleteData leaves an empty `TextNode` which offsets the index of all
        // children. Definitely want to avoid this.
        var textNode = node.firstChild;
        if (textNode.data.length === 1) {
          node.removeChild(textNode);
        } else {
          textNode.deleteData(0, 1);
        }
      } else {
        node.innerHTML = html;
      }
    };
  }
  testElement = null;
}

module.exports = setInnerHTML;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var emptyFunction = __webpack_require__(7);
var warning = __webpack_require__(2);

var validateDOMNesting = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.

  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',

  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title'];

  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
  var buttonScopeTags = inScopeTags.concat(['button']);

  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];

  var emptyAncestorInfo = {
    current: null,

    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,

    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  var updatedAncestorInfo = function (oldInfo, tag, instance) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
    var info = { tag: tag, instance: instance };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }
    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    }

    // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }
    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }
    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }
    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }
    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }
    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }
    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };

  /**
   * Returns whether
   */
  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';
      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but
      case 'option':
        return tag === '#text';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
      case 'colgroup':
        return tag === 'col' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';

      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
      case 'html':
        return tag === 'head' || tag === 'body';
      case '#document':
        return tag === 'html';
    }

    // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };

  /**
   * Returns whether
   */
  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':

      case 'pre':
      case 'listing':

      case 'table':

      case 'hr':

      case 'xmp':

      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  /**
   * Given a ReactCompositeComponent instance, return a list of its recursive
   * owners, starting at the root and ending with the instance itself.
   */
  var findOwnerStack = function (instance) {
    if (!instance) {
      return [];
    }

    var stack = [];
    do {
      stack.push(instance);
    } while (instance = instance._currentElement._owner);
    stack.reverse();
    return stack;
  };

  var didWarn = {};

  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var problematic = invalidParent || invalidAncestor;

    if (problematic) {
      var ancestorTag = problematic.tag;
      var ancestorInstance = problematic.instance;

      var childOwner = childInstance && childInstance._currentElement._owner;
      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;

      var childOwners = findOwnerStack(childOwner);
      var ancestorOwners = findOwnerStack(ancestorOwner);

      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
      var i;

      var deepestCommon = -1;
      for (i = 0; i < minStackLen; i++) {
        if (childOwners[i] === ancestorOwners[i]) {
          deepestCommon = i;
        } else {
          break;
        }
      }

      var UNKNOWN = '(unknown)';
      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
        return inst.getName() || UNKNOWN;
      });
      var ownerInfo = [].concat(
      // If the parent and child instances have a common owner ancestor, start
      // with that -- otherwise we just start with the parent's owners.
      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
      // If we're warning about an invalid (non-parent) ancestry, add '...'
      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');

      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
      if (didWarn[warnKey]) {
        return;
      }
      didWarn[warnKey] = true;

      var tagDisplayName = childTag;
      var whitespaceInfo = '';
      if (childTag === '#text') {
        if (/\S/.test(childText)) {
          tagDisplayName = 'Text nodes';
        } else {
          tagDisplayName = 'Whitespace text nodes';
          whitespaceInfo = ' Make sure you don\'t have any extra whitespace between tags on ' + 'each line of your source code.';
        }
      } else {
        tagDisplayName = '<' + childTag + '>';
      }

      if (invalidParent) {
        var info = '';
        if (ancestorTag === 'table' && childTag === 'tr') {
          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
        }
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
      } else {
        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
      }
    }
  };

  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;

  // For testing
  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;
    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
  };
}

module.exports = validateDOMNesting;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(15);

var ReactNoopUpdateQueue = __webpack_require__(48);

var canDefineProperty = __webpack_require__(50);
var emptyObject = __webpack_require__(17);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

﻿var React = __webpack_require__(16);
var ReactDOM = __webpack_require__(53);
var ReactDOMServer = __webpack_require__(168);
var WinJS = __webpack_require__(28);

//
// Implementation Overview
//
// react-winjs is organized around the concept of prop handlers. A prop handler describes
// how a react-winjs prop affects the underlying WinJS control. Prop handlers come from 3 sources:
//   1. Handwritten common to all controls. These are defined in a variable called
//      *defaultPropHandlers*. These are prop handlers which appear on every react-winjs component.
//   2. WinJS's d.ts file. Most of the prop handlers for each react-winjs component are
//      automatically generated from WinJS's d.ts file. Information from the d.ts file is stored in
//      a variable called *RawControlApis*. *RawControlApis* is generated by running the d.ts file
//      through this tool: https://github.com/winjs/winjs-control-apis
//   3. Handwritten control-specific. These are defined in a variable called *ControlApis*. When
//      a react-winjs component has a prop that needs to be defined manually, this is where it
//      should be defined. There are a number of types of builtin prop handlers defined in the
//      *PropHandlers* variable which can be used here.
//
// When react-winjs builds the list of prop handlers for a component, it gathers them from the above
// list of sources. If multiple sources define a prop handler with the same name, the one from the
// source which appears closest to the bottom of the list above wins.
//
// There's a particular category of WinJS controls that host content that proved to be particularly
// challenging to wrap as React components. More specifically, the controls in this category:
//   - host content
//   - move the hosted content around in the DOM
//   - store the hosted content in a Binding.List
//
// Controls that fall into this category of hosting content include:
//   - AppBar/ToolBar
//   - Hub
//   - Pivot
//
// And the controls that get hosted include (these are the ones that end up being created
// through WinJSChildComponent, described below):
//   - AppBarCommand
//   - HubSection
//   - PivotItem
//
// What made this challenging to solve is that there are some features that aren't achievable in
// a straight forward way through the React APIs. To solve this, you want to be able to:
//   - Render a React component *onto* an existing element. ReactDOM.render can only render *into* an
//     existing element. For example, when creating a HubSection you want to be able to control
//     attributes of the win-hub-section element such as its *class* and *style*. With ReactDOM.render,
//     you'd only be able to render into the win-hub-section element so the React component wouldn't
//     be able to control any attributes of the win-hub-section element.
//   - Hold onto a rendered component and inspect its *type* and *key* prop later. This information
//     comes in handy when diffing an array of components from a previous render pass with an array
//     of components for the current render pass. The diff information is used to mutate a
//     Binding.List to get it into the desired state.
//
// The WinJSChildComponent class provides a convenient API for solving both of these problems. When the
// constructor receives a component, it creates the element (e.g. win-hub-section) that the component
// is rendered *onto*. The owning control (e.g. WinJS.UI.Hub) is free to manage that element and move
// it around the DOM. WinJSChildComponent provides the following APIs:
//   - update: Updates the element based on the component description that is passed in.
//   - dispose: Disposes the react-winjs component and its associated WinJS control.
//   - key: Returns the React key associated with the component.
//   - type: Returns the React type associated with the component.
//

// Generated from https://github.com/winjs/winjs-control-apis
var RawControlApis = {
    AppBar: {
        closedDisplayMode: {
            type: "enum",
            values: [
                "compact",
                "full",
                "minimal",
                "none"
            ]
        },
        data: {
            name: "WinJS.Binding.List",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.ICommand",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onAfterClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        opened: {
            type: "boolean"
        },
        placement: {
            type: "enum",
            values: [
                "bottom",
                "top"
            ]
        }
    },
    AppBarCommand: {
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        extraClass: {
            type: "string"
        },
        firstElementFocus: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        flyout: {
            name: "WinJS.UI.Flyout",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        icon: {
            type: "string"
        },
        id: {
            type: "string"
        },
        label: {
            type: "string"
        },
        lastElementFocus: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onClick: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        priority: {
            type: "number"
        },
        section: {
            type: "string"
        },
        selected: {
            type: "boolean"
        },
        tooltip: {
            type: "string"
        },
        type: {
            type: "string"
        }
    },
    AutoSuggestBox: {
        chooseSuggestionOnEnter: {
            type: "boolean"
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onQueryChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onQuerySubmitted: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onResultSuggestionChosen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSuggestionsRequested: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        placeholderText: {
            type: "string"
        },
        queryText: {
            type: "string"
        },
        searchHistoryContext: {
            type: "string"
        },
        searchHistoryDisabled: {
            type: "boolean"
        }
    },
    BackButton: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        }
    },
    CellSpanningLayout: {
        groupHeaderPosition: {
            type: "enum",
            values: [
                "left",
                "top"
            ]
        },
        groupInfo: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        itemInfo: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        maximumRowsOrColumns: {
            type: "number"
        },
        numberOfItemsPerItemsBlock: {
            type: "any"
        },
        orientation: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        }
    },
    Command: {
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        extraClass: {
            type: "string"
        },
        firstElementFocus: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        flyout: {
            name: "WinJS.UI.Flyout",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        icon: {
            type: "string"
        },
        id: {
            type: "string"
        },
        label: {
            type: "string"
        },
        lastElementFocus: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onClick: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        priority: {
            type: "number"
        },
        section: {
            type: "string"
        },
        selected: {
            type: "boolean"
        },
        tooltip: {
            type: "string"
        },
        type: {
            type: "string"
        }
    },
    ContentDialog: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        onAfterHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        primaryCommandDisabled: {
            type: "boolean"
        },
        primaryCommandText: {
            type: "string"
        },
        secondaryCommandDisabled: {
            type: "boolean"
        },
        secondaryCommandText: {
            type: "string"
        },
        title: {
            type: "string"
        }
    },
    DatePicker: {
        calendar: {
            type: "string"
        },
        current: {
            name: "Date",
            type: "reference",
            typeArguments: []
        },
        datePattern: {
            type: "string"
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        maxYear: {
            type: "number"
        },
        minYear: {
            type: "number"
        },
        monthPattern: {
            type: "string"
        },
        onChange: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        yearPattern: {
            type: "string"
        }
    },
    FlipView: {
        currentPage: {
            type: "number"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        itemDataSource: {
            name: "WinJS.UI.IListDataSource",
            type: "reference",
            typeArguments: [
                {
                    name: "T",
                    type: "type-param"
                }
            ]
        },
        itemSpacing: {
            type: "number"
        },
        itemTemplate: {
            type: "any"
        },
        onDataSourceCountChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onPageCompleted: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onPageSelected: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onPageVisibilityChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        orientation: {
            type: "string"
        }
    },
    Flyout: {
        alignment: {
            type: "string"
        },
        anchor: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        onAfterHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        placement: {
            type: "string"
        }
    },
    GridLayout: {
        backdropColor: {
            type: "string"
        },
        disableBackdrop: {
            type: "boolean"
        },
        groupHeaderPosition: {
            type: "enum",
            values: [
                "left",
                "top"
            ]
        },
        groupInfo: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        itemInfo: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        maxRows: {
            type: "number"
        },
        maximumRowsOrColumns: {
            type: "number"
        },
        numberOfItemsPerItemsBlock: {
            type: "any"
        },
        orientation: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        }
    },
    Hub: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        headerTemplate: {
            type: "any"
        },
        indexOfFirstVisible: {
            type: "number"
        },
        indexOfLastVisible: {
            type: "number"
        },
        loadingState: {
            type: "enum",
            values: [
                "complete",
                "loading"
            ]
        },
        onContentAnimating: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onHeaderInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onLoadingStateChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        orientation: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        },
        scrollPosition: {
            type: "number"
        },
        sectionOnScreen: {
            type: "number"
        },
        sections: {
            name: "WinJS.Binding.List",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.HubSection",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        zoomableView: {
            name: "WinJS.UI.IZoomableView",
            type: "reference",
            typeArguments: [
                {
                    type: "any"
                }
            ]
        }
    },
    HubSection: {
        contentElement: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        header: {
            type: "string"
        },
        isHeaderStatic: {
            type: "boolean"
        }
    },
    ItemContainer: {
        draggable: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSelectionChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSelectionChanging: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        selected: {
            type: "boolean"
        },
        selectionDisabled: {
            type: "boolean"
        },
        swipeBehavior: {
            type: "enum",
            values: [
                "none",
                "select"
            ]
        },
        swipeOrientation: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        },
        tapBehavior: {
            type: "enum",
            values: [
                "directSelect",
                "invokeOnly",
                "none",
                "toggleSelect"
            ]
        }
    },
    ListLayout: {
        backdropColor: {
            type: "string"
        },
        disableBackdrop: {
            type: "boolean"
        },
        groupHeaderPosition: {
            type: "enum",
            values: [
                "left",
                "top"
            ]
        },
        numberOfItemsPerItemsBlock: {
            type: "any"
        },
        orientation: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        }
    },
    ListView: {
        automaticallyLoadPages: {
            type: "boolean"
        },
        currentItem: {
            name: "WinJS.UI.IListViewItem",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        footer: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        groupDataSource: {
            name: "WinJS.UI.IListDataSource",
            type: "reference",
            typeArguments: [
                {
                    name: "T",
                    type: "type-param"
                }
            ]
        },
        groupHeaderTapBehavior: {
            type: "enum",
            values: [
                "invoke",
                "none"
            ]
        },
        groupHeaderTemplate: {
            type: "any"
        },
        header: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        indexOfFirstVisible: {
            type: "number"
        },
        indexOfLastVisible: {
            type: "number"
        },
        itemDataSource: {
            name: "WinJS.UI.IListDataSource",
            type: "reference",
            typeArguments: [
                {
                    name: "T",
                    type: "type-param"
                }
            ]
        },
        itemTemplate: {
            type: "any"
        },
        itemsDraggable: {
            type: "boolean"
        },
        itemsReorderable: {
            type: "boolean"
        },
        layout: {
            name: "WinJS.UI.ILayout2",
            type: "reference",
            typeArguments: []
        },
        loadingBehavior: {
            type: "string"
        },
        loadingState: {
            type: "string"
        },
        maxDeferredItemCleanup: {
            type: "number"
        },
        maxLeadingPages: {
            type: "number"
        },
        maxTrailingPages: {
            type: "number"
        },
        onAccessibilityAnnotationComplete: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onContentAnimating: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onFooterVisibilityChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onGroupHeaderInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onHeaderVisibilityChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragBetween: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragDrop: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragEnd: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragEnter: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragLeave: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemDragStart: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onKeyboardNavigating: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onLoadingStateChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSelectionChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSelectionChanging: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        pagesToLoad: {
            type: "number"
        },
        pagesToLoadThreshold: {
            type: "number"
        },
        scrollPosition: {
            type: "number"
        },
        selection: {
            name: "WinJS.UI.ISelection",
            type: "reference",
            typeArguments: [
                {
                    name: "T",
                    type: "type-param"
                }
            ]
        },
        selectionMode: {
            type: "enum",
            values: [
                "multi",
                "none",
                "single"
            ]
        },
        swipeBehavior: {
            type: "enum",
            values: [
                "none",
                "select"
            ]
        },
        tapBehavior: {
            type: "enum",
            values: [
                "directSelect",
                "invokeOnly",
                "none",
                "toggleSelect"
            ]
        },
        zoomableView: {
            name: "WinJS.UI.IZoomableView",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.ListView",
                    type: "reference",
                    typeArguments: [
                        {
                            name: "T",
                            type: "type-param"
                        }
                    ]
                }
            ]
        }
    },
    Menu: {
        alignment: {
            type: "string"
        },
        anchor: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        commands: {
            name: "Array",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.MenuCommand",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        onAfterHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeHide: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeShow: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        placement: {
            type: "string"
        }
    },
    MenuCommand: {
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        extraClass: {
            type: "string"
        },
        flyout: {
            name: "WinJS.UI.Flyout",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        id: {
            type: "string"
        },
        label: {
            type: "string"
        },
        onClick: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        selected: {
            type: "boolean"
        },
        type: {
            type: "string"
        }
    },
    NavBar: {
        closedDisplayMode: {
            type: "string"
        },
        commands: {
            name: "WinJS.UI.AppBarCommand",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        hidden: {
            type: "boolean"
        },
        onAfterClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onChildrenProcessed: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        opened: {
            type: "boolean"
        },
        placement: {
            type: "string"
        }
    },
    NavBarCommand: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        icon: {
            type: "string"
        },
        label: {
            type: "string"
        },
        location: {
            type: "any"
        },
        onInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        splitButton: {
            type: "boolean"
        },
        splitOpened: {
            type: "boolean"
        },
        state: {
            type: "any"
        },
        tooltip: {
            type: "string"
        }
    },
    NavBarContainer: {
        currentIndex: {
            type: "number"
        },
        data: {
            name: "WinJS.Binding.List",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.NavBarCommand",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        fixedSize: {
            type: "boolean"
        },
        layout: {
            type: "enum",
            values: [
                "horizontal",
                "vertical"
            ]
        },
        maxRows: {
            type: "number"
        },
        onInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSplitToggle: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        template: {
            name: "WinJS.Binding.Template",
            type: "reference",
            typeArguments: []
        }
    },
    Pivot: {
        customLeftHeader: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        customRightHeader: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        items: {
            name: "WinJS.Binding.List",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.PivotItem",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        locked: {
            type: "boolean"
        },
        onItemAnimationEnd: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onItemAnimationStart: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSelectionChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        selectedIndex: {
            type: "number"
        },
        selectedItem: {
            name: "WinJS.UI.PivotItem",
            type: "reference",
            typeArguments: []
        },
        title: {
            type: "string"
        }
    },
    PivotItem: {
        contentElement: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        header: {
            type: "string"
        }
    },
    Rating: {
        averageRating: {
            type: "number"
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        enableClear: {
            type: "boolean"
        },
        maxRating: {
            type: "number"
        },
        onCancel: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onChange: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onPreviewChange: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        tooltipStrings: {
            name: "Array",
            type: "reference",
            typeArguments: [
                {
                    type: "string"
                }
            ]
        },
        userRating: {
            type: "number"
        }
    },
    SearchBox: {
        chooseSuggestionOnEnter: {
            type: "boolean"
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        focusOnKeyboardInput: {
            type: "boolean"
        },
        onQueryChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onQuerySubmitted: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onResultSuggestionChosen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onSuggestionsRequested: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        placeholderText: {
            type: "string"
        },
        queryText: {
            type: "string"
        },
        searchHistoryContext: {
            type: "string"
        },
        searchHistoryDisabled: {
            type: "boolean"
        }
    },
    SemanticZoom: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        enableButton: {
            type: "boolean"
        },
        locked: {
            type: "boolean"
        },
        onZoomChanged: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        zoomFactor: {
            type: "number"
        },
        zoomedOut: {
            type: "boolean"
        }
    },
    SplitView: {
        closedDisplayMode: {
            type: "enum",
            values: [
                "inline",
                "none"
            ]
        },
        contentElement: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onAfterClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        openedDisplayMode: {
            type: "enum",
            values: [
                "inline",
                "overlay"
            ]
        },
        paneElement: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        paneOpened: {
            type: "boolean"
        },
        panePlacement: {
            type: "enum",
            values: [
                "bottom",
                "left",
                "right",
                "top"
            ]
        }
    },
    SplitViewCommand: {
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        icon: {
            type: "string"
        },
        label: {
            type: "string"
        },
        onInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        tooltip: {
            type: "string"
        }
    },
    SplitViewPaneToggle: {
        element: {
            name: "HTMLButtonElement",
            type: "reference",
            typeArguments: []
        },
        onInvoked: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        splitView: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        }
    },
    TimePicker: {
        clock: {
            type: "string"
        },
        current: {
            name: "Date",
            type: "reference",
            typeArguments: []
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        hourPattern: {
            type: "string"
        },
        minuteIncrement: {
            type: "number"
        },
        minutePattern: {
            type: "string"
        },
        onChange: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        periodPattern: {
            type: "string"
        }
    },
    ToggleSwitch: {
        checked: {
            type: "boolean"
        },
        disabled: {
            type: "boolean"
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        labelOff: {
            type: "string"
        },
        labelOn: {
            type: "string"
        },
        onChange: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        title: {
            type: "string"
        }
    },
    ToolBar: {
        closedDisplayMode: {
            type: "enum",
            values: [
                "compact",
                "full"
            ]
        },
        data: {
            name: "WinJS.Binding.List",
            type: "reference",
            typeArguments: [
                {
                    name: "WinJS.UI.ICommand",
                    type: "reference",
                    typeArguments: []
                }
            ]
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        onAfterClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onAfterOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        opened: {
            type: "boolean"
        }
    },
    Tooltip: {
        contentElement: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        element: {
            name: "HTMLElement",
            type: "reference",
            typeArguments: []
        },
        extraClass: {
            type: "string"
        },
        infotip: {
            type: "boolean"
        },
        innerHTML: {
            type: "string"
        },
        onBeforeClose: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onBeforeOpen: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onClosed: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        onOpened: {
            name: "Function",
            type: "reference",
            typeArguments: []
        },
        placement: {
            type: "string"
        }
    }
};

var setImmediate;
var clearImmediate;
if (window.setImmediate && window.clearImmediate) {
    setImmediate = window.setImmediate;
    clearImmediate = window.clearImmediate;
} else {
    setImmediate = function (callback) {
        return setTimeout(callback, 0);
    };
    clearImmediate = window.clearTimeout;
}

function isEvent(propName) {
    return propName[0] === "o" && propName[1] === "n";
}

function mapObject(obj, callback) {
    var result = {};
    Object.keys(obj).forEach(function (key) {
        var value = callback(key, obj[key]);
        if (value !== undefined) {
            result[key] = value;
        }
    });
    return result;
}

function cloneObject(obj) {
    var result = {};
    for (var k in obj) { result[k] = obj[k]; }
    return result;
}

function merge(/* objs */) {
    var result = {};
    for (var i = 0, len = arguments.length; i < len; i++) {
        var obj = arguments[i];
        if (obj) {
            for (var k in obj) { result[k] = obj[k]; }
        }
    }
    return result;
}

function endsWith(s, suffix) {
    return s.length >= suffix.length && s.substr(-suffix.length) === suffix;
}

function arraysShallowEqual(a, b) {
    if (a === b) {
        return true;
    } else if (a.length !== b.length) {
        return false;
    } else {
        for (var i = 0, len = a.length; i < len; i++) {
            if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
}

function nestedSet(obj, path, value) {
    var parts = path.split(".");
    var allButLast = parts.slice(0, parts.length - 1);
    var last = parts[parts.length - 1];
    var finalObj = allButLast.reduce(function (current, key) {
        return current[key];
    }, obj);
    finalObj[last] = value;
}

function deparent(element) {
    var parent = element.parentNode;
    parent && parent.removeChild(element);
}

function fireEvent(element, eventName) {
    var eventObject = document.createEvent("CustomEvent");
    eventObject.initCustomEvent(
        eventName,
        true,  // bubbles
        false, // cancelable
        null   // detail
    );
    element.dispatchEvent(eventObject);
}

function makeClassSet(className) {
    var classSet = {};
    className && className.split(" ").forEach(function (aClass) {
        if (aClass) {
            classSet[aClass] = true;
        }
    });
    return classSet;
}

function getIn(object, path) {
    var parts = path.split(".");
    return parts.reduce(function (current, name) {
        return current && current[name];
    }, object);
}

// Given a type from RawControlApis returns a React propType.
function typeToPropType(typeInfo) {
    if (typeInfo.type === "string") {
        return React.PropTypes.string;
    } else if (typeInfo.type === "boolean") {
        return React.PropTypes.bool;
    } else if (typeInfo.type === "number") {
        return React.PropTypes.number;
    } else if (typeInfo.type === "enum") {
        return React.PropTypes.oneOf(typeInfo.values);
    } else if (typeInfo.type === "any") {
        return React.PropTypes.any;
    } else if (typeInfo.type === "reference") {
        if (typeInfo.name === "Function") {
            return React.PropTypes.func;
        } else if (typeInfo.name === "Array") {
            var itemPropType = typeToPropType(typeInfo.typeArguments[0]);
            return itemPropType ? React.PropTypes.arrayOf(itemPropType) : React.PropTypes.array;
        } else if (getIn(window, typeInfo.name)) {
            var instance = getIn(window, typeInfo.name);
            return React.PropTypes.instanceOf(instance);
        }
    } else {
        console.warn("react-winjs typeToPropType: unable to find propType for type: " + JSON.stringify(typeInfo, null, 2));
    }
}

// TODO: Revisit all of this diffing stuff:
//   - Make it more efficient
//   - It's currently hard to understand because it makes aggressive
//     assumptions (e.g. each item has a key and each item has a winControl)
//   - Is it correct?
//   - Should we just sync an array with a binding list instead of computing
//     edits based on 2 arrays and then applying them to a binding list?
function buildIndex(array) {
    var index = {};
    array.forEach(function (item, i) {
        index[item.key] = i;
    });
    return index;
}
function indexOfKey(array, key) {
    for (var i = 0; i < array.length; i++) {
        if (array[i].key === key) {
            return i;
        }
    }
    return -1;
}
function diffArraysByKey(old, latest) {
    old = old.slice(0);
    var oldIndex = buildIndex(old);
    var latestIndex = buildIndex(latest);
    var edits = [];

    // Handle removals
    for (var i = old.length - 1; i >= 0; i--) {
        var item = old[i];
        if (!latestIndex.hasOwnProperty(item.key)) {
            edits.push({ type: "delete", index: i });
            old.splice(i, 1);
        }
    }

    // Handle insertions and moves
    for (var i = 0; i < latest.length; i++) {
        var item = latest[i];
        if (!oldIndex.hasOwnProperty(item.key)) {
            // Insertion
            edits.push({ type: "insert", index: i, value: item });
            old.splice(i, 0, item);
        } else if (old[i].key !== item.key) {
            // Move
            //edits.push({ type: "move", from: oldIndex[item.key], to: i });
            //old.splice(oldIndex[item.key], 1);

            var fromIndex = indexOfKey(old, item.key);
            edits.push({ type: "move", from: fromIndex, to: i });
            old.splice(fromIndex, 1);
            old.splice(i, 0, item);
        }
    }

    return edits;
}
function applyEditsToBindingList(list, edits) {
    edits.forEach(function (edit) {
        if (edit.type === "delete") {
            list.splice(edit.index, 1);
        } else if (edit.type === "insert") {
            list.splice(edit.index, 0, edit.value.winControl);
        } else if (edit.type === "move") {
            list.move(edit.from, edit.to);
        } else {
            throw "Unsupported edit type: " + edit.type;
        }
    }, this);
}

// interface IWinJSComponent {
//     winControl
//     element
//     data
//     displayName
// }

// interface IWinJSChildComponent extends IWinJSComponent {
//     key
//     type
// }

// Returns a WinJSChildComponent for each component in *children*. Reuses
// WinJSChildComponents from *childComponentsMap* when possible. Disposes members of
// *childComponentsMap* if they are no longer needed.
function processChildren(componentDisplayName, children, childComponentsMap) {
    var newChildComponents = [];
    var newChildComponentsMap = {};

    // A component's *key* represents its identity. If a component in *children* and a
    // component in *childComponentsMap* have the same *key*, then they are assumed to
    // represent the same component.

    React.Children.forEach(children, function (component) {
        if (component) {
            if (component.ref) {
                console.warn(
                    "ref prop (" + component.ref + ") will not work on " +
                    component.type.displayName + " component because it is inside " +
                    "of a " + componentDisplayName + " component"
                );
            }

            if (component.key === null) {
                console.error(
                    component.type.displayName + " component requires a key " +
                    "when inside of a " + componentDisplayName + " component"
                );
            } else {
                var winjsChildComponent = childComponentsMap[component.key];
                if (winjsChildComponent) {
                    if (winjsChildComponent.type === component.type) {
                        winjsChildComponent.update(component);
                    } else {
                        // If a component's *type* has changed then the component must be
                        // recreated from scratch rather than updated. The reason is that
                        // the tagName of the underlying DOM element may have changed. The
                        // only way to change the tagName of the underlying DOM element is
                        // to instantiate a new react-winjs component.
                        winjsChildComponent.dispose();
                        winjsChildComponent = new WinJSChildComponent(component);
                    }
                } else {
                    winjsChildComponent = new WinJSChildComponent(component);
                }
                newChildComponents.push(winjsChildComponent);
                newChildComponentsMap[component.key] = winjsChildComponent;
            }
        }
    });

    Object.keys(childComponentsMap).forEach(function (key) {
        if (!newChildComponentsMap.hasOwnProperty(key)) {
            childComponentsMap[key].dispose();
        }
    });

    return {
        childComponents: newChildComponents,
        childComponentsMap: newChildComponentsMap
    };
}

function prefixedProperty(prefix, property) {
    return prefix + property[0].toUpperCase() + property.substr(1);
}

var isUnitlessProperty = {
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    widows: true,
    zIndex: true,
    zoom: true
};
var vendorPrefixes = ["Moz", "ms", "Webkit"];
Object.keys(isUnitlessProperty).forEach(function (property) {
    vendorPrefixes.forEach(function (prefix) {
        isUnitlessProperty[prefixedProperty(prefix, property)] = true;
    });
});

// Converts the value of a CSS attribute to a string. When certain attributes
// (e.g. width, height) are specified as numbers, this means adding "px" to the
// end of the string value.
function resolveStyleValue(cssProperty, value) {
    if (typeof value === "number") {
        return isUnitlessProperty[cssProperty] || value === 0 ?
            ("" + value) :
            (value + "px");
    } else {
        return value ? ("" + value) : "";
    }
}

var PropHandlers = {
    // Maps to a property on the winControl.
    property: function (propType) {
        return {
            propType: propType,
            preCtorInit: function property_preCtorInit(element, options, data, displayName, propName, value) {
                options[propName] = value;
            },
            update: function property_update(winjsComponent, propName, oldValue, newValue) {
                if (oldValue !== newValue) {
                    winjsComponent.winControl[propName] = newValue;
                }
            }
        };
    },

    // Maps to a property on the winControl which involves setting focus. Such properties
    // are set outside of componentWillReceiveProps to prevent React from undoing the
    // focus move.
    focusProperty: function (propType) {
        return {
            propType: propType,
            preCtorInit: function focusProperty_preCtorInit(element, options, data, displayName, propName, value) {
                options[propName] = value;
            },
            update: function focusProperty_update(winjsComponent, propName, oldValue, newValue) {
                if (oldValue !== newValue) {
                    var asyncToken = winjsComponent.data[propName];
                    asyncToken && clearImmediate(asyncToken);
                    asyncToken = setImmediate(function () {
                        winjsComponent.data[propName] = null;
                        winjsComponent.winControl[propName] = newValue;
                    });
                }
            },
            dispose: function focusProperty_dispose(winjsComponent, propName) {
                var asyncToken = winjsComponent.data[propName];
                asyncToken && clearImmediate(asyncToken);
            }
        };
    },

    // Maps to a property on the winControl's element.
    domProperty: function (propType) {
        return {
            propType: propType,
            preCtorInit: function domProperty_preCtorInit(element, options, data, displayName, propName, value) {
                element[propName] = value;
            },
            update: function domProperty_update(winjsComponent, propName, oldValue, newValue) {
                if (oldValue !== newValue) {
                    winjsComponent.element[propName] = newValue;
                }
            }
        };
    },

    // Maps to an attribute on the winControl's element.
    domAttribute: function (propType) {
        return {
            propType: propType,
            update: function domAttribute_update(winjsComponent, propName, oldValue, newValue) {
                if (oldValue !== newValue) {
                    if (newValue !== null && newValue !== undefined) {
                        winjsComponent.element.setAttribute(propName, "" + newValue);
                    } else {
                        winjsComponent.element.removeAttribute(propName);
                    }
                }
            }
        };
    },

    // Maps to an event on the winControl.
    event: {
        propType: React.PropTypes.func,
        // Can't set options in preCtorInit for events. The problem is WinJS control options
        // use a different code path to hook up events than the event property setters.
        // Consequently, setting an event property will not automatically unhook the event
        // listener that was specified in the options during initialization. To avoid this
        // problem, always go thru the event property setters.
        update: function event_update(winjsComponent, propName, oldValue, newValue) {
            if (oldValue !== newValue) {
                winjsComponent.winControl[propName.toLowerCase()] = newValue;
            }
        }
    },

    // Maps to an event on the winControl's element.
    domEvent: {
        propType: React.PropTypes.func,
        preCtorInit: function domEvent_preCtorInit(element, options, data, displayName, propName, value) {
            element[propName.toLowerCase()] = value;
        },
        update: function domEvent_update(winjsComponent, propName, oldValue, newValue) {
            if (oldValue !== newValue) {
                winjsComponent.element[propName.toLowerCase()] = newValue;
            }
        }
    },

    //  Enable the addition and removal of CSS classes on the root of the winControl
    //  but don't clobber whatever CSS classes the underlying control may have added
    //  (e.g. don't clobber win-listview).
    winControlClassName: {
        propType: React.PropTypes.string,
        preCtorInit: function winControlClassName_preCtorInit(element, options, data, displayName, propName, value) {
            if (value) {
                element.className = value;
            }
            data[propName] = makeClassSet(value);
        },
        update: function winControlClassName_update(winjsComponent, propName, oldValue, newValue) {
            if (oldValue !== newValue) {
                var oldClassSet = winjsComponent.data[propName] || {};
                var newClassSet = makeClassSet(newValue);
                var elementClassList = winjsComponent.winControl.element.classList;
                for (var className in oldClassSet) {
                    if (!newClassSet[className]) {
                        elementClassList.remove(className);
                    }
                }
                for (var className in newClassSet) {
                    if (!oldClassSet[className]) {
                        elementClassList.add(className);
                    }
                }
                winjsComponent.data[propName] = newClassSet;
            }
        }
    },

    //  Enable the addition and removal of inline styles on the root of the winControl
    //  but don't clobber whatever inline styles the underlying control may have added.
    winControlStyle: {
        propType: React.PropTypes.object,
        preCtorInit: function winControlStyle_preCtorInit(element, options, data, displayName, propName, value) {
            var elementStyle = element.style;
            value = value || {};
            for (var cssProperty in value) {
                elementStyle[cssProperty] = resolveStyleValue(cssProperty, value[cssProperty]);
            }
        },
        update: function winControlStyle_update(winjsComponent, propName, oldValue, newValue) {
            if (oldValue !== newValue) {
                oldValue = oldValue || {};
                newValue = newValue || {};
                if(winjsComponent.winControl && winjsComponent.winControl.element) {
                    var elementStyle = winjsComponent.winControl.element.style;
                    for (var cssProperty in oldValue) {
                        if (!newValue.hasOwnProperty(cssProperty)) {
                            elementStyle[cssProperty] = "";
                        }
                    }
                    for (var cssProperty in newValue) {
                        if (oldValue[cssProperty] !== newValue[cssProperty]) {
                            elementStyle[cssProperty] = resolveStyleValue(cssProperty, newValue[cssProperty]);
                        }
                    }
                }
            }
        }
    },

    // Emits a warning to the console whenever prop gets used.
    warn: function PropHandlers_warn(warnMessage) {
        return {
            // Don't need preCtorInit because this prop handler doesn't have any side
            // effects on the WinJS control. update also runs during initialization so
            // update is just as good as preCtorInit for our use case.
            update: function warn_update(winjsComponent, propName, oldValue, newValue) {
                console.warn(winjsComponent.displayName + ": " + warnMessage);
            }
        };
    },

    // Creates a DOM element and mounts a React component on it. Gives this DOM
    // element to the *winControlProperty* property of the winControl.
    propertyWithMount: function PropHandlers_propertyWithMount(winControlProperty) {
        return {
            propType: React.PropTypes.element,
            preCtorInit: function propertyWithMount_preCtorInit(element, options, data, displayName, propName, value) {
                if (value) {
                    data[propName] = document.createElement("div");
                    ReactDOM.render(value, data[propName]);
                    options[winControlProperty] = data[propName];
                }
            },
            update: function propertyWithMount_update(winjsComponent, propName, oldValue, newValue) {
                var winControl = winjsComponent.winControl;
                var element = winjsComponent.data[propName];
                if (newValue) {
                    if (!element) {
                        element = document.createElement("div");
                        winjsComponent.data[propName] = element;
                    }
                    ReactDOM.render(newValue, element);
                    if (winControl[winControlProperty] !== element) {
                        winControl[winControlProperty] = element;
                    }
                } else if (oldValue) {
                    element && ReactDOM.unmountComponentAtNode(element);
                    winControl[winControlProperty] = null;
                }
            },
            dispose: function propertyWithMount_dispose(winjsComponent, propName) {
                var element = winjsComponent.data[propName];
                element && ReactDOM.unmountComponentAtNode(element);
            }
        };
    },


    // Mounts a React component on whatever element gets returned by getMountPoint.
    mountTo: function PropHandlers_mountTo(getMountPoint) {
        return {
            propType: React.PropTypes.element,
            // Can't use preCtorInit because the mount point may not exist until the
            // constructor has run.
            update: function mountTo_update(winjsComponent, propName, oldValue, newValue) {
                var data = winjsComponent.data[propName] || {};
                var version = (data.version || 0) + 1;
                winjsComponent.data[propName] = {
                    // *mountComponent* may run asynchronously and we may queue it multiple
                    // times before it runs. *version* allows us to ensure only the latest
                    // version runs and the others are no ops.
                    version: version,
                    // *element* is the element to which we last mounted the component.
                    element: data.element
                };

                var mountComponent = function () {
                    if (version === winjsComponent.data[propName].version) {
                        var oldElement = winjsComponent.data[propName].element;

                        if (newValue) {
                            var newElement = getMountPoint(winjsComponent);
                            if (oldElement && oldElement !== newElement) {
                                ReactDOM.unmountComponentAtNode(oldElement);
                            }

                            ReactDOM.render(newValue, newElement);
                            winjsComponent.data[propName].element = newElement;
                        } else if (oldValue) {
                            oldElement && ReactDOM.unmountComponentAtNode(oldElement);
                            winjsComponent.data[propName].element = null;
                        }
                    }
                };

                // *isDeclarativeControlContainer* is a hook some WinJS controls provide
                // (e.g. HubSection, PivotItem) to ensure that processing runs on the
                // control only when the control is ready for it. This enables lazy loading
                // of HubSections/PivotItems (e.g. load off screen items asynchronously in
                // batches). Additionally, doing processing thru this hook guarantees that
                // the processing won't run until the control is in the DOM.
                var winControl = winjsComponent.winControl;
                var queueProcessing = winControl.constructor.isDeclarativeControlContainer;
                if (queueProcessing && typeof queueProcessing === "function") {
                    queueProcessing(winControl, mountComponent);
                } else {
                    mountComponent();
                }
            },
            dispose: function mountTo_dispose(winjsComponent, propName) {
                var data = winjsComponent.data[propName] || {};
                var element = data.element;
                element && ReactDOM.unmountComponentAtNode(element);
            }
        };
    },

    // Uses the Binding.List's editing APIs to make it match the children prop. Does this to
    // the Binding.List stored in the winControl's property called bindingListName.
    syncChildrenWithBindingList: function PropHandlers_syncChildrenWithBindingList(bindingListName) {
        return {
            preCtorInit: function syncChildrenWithBindingList_preCtorInit(element, options, data, displayName, propName, value) {
                var latest = processChildren(displayName, value, {});
                data[propName] = {
                    winjsChildComponents: latest.childComponents,
                    winjsChildComponentsMap: latest.childComponentsMap
                };

                options[bindingListName] = new WinJS.Binding.List(
                    latest.childComponents.map(function (winjsChildComponent) {
                        return winjsChildComponent.winControl;
                    })
                );
            },
            update: function syncChildrenWithBindingList_update(winjsComponent, propName, oldValue, newValue) {
                var data = winjsComponent.data[propName] || {};
                var oldChildComponents = data.winjsChildComponents || [];
                var oldChildComponentsMap = data.winjsChildComponentsMap || {};
                var latest = processChildren(winjsComponent.displayName, newValue, oldChildComponentsMap);

                var bindingList = winjsComponent.winControl[bindingListName];
                if (bindingList) {
                    applyEditsToBindingList(
                        bindingList,
                        diffArraysByKey(oldChildComponents, latest.childComponents)
                    );
                } else {
                    winjsComponent.winControl[bindingListName] = new WinJS.Binding.List(latest.childComponents.map(function (winjsChildComponent) {
                        return winjsChildComponent.winControl;
                    }));
                }

                winjsComponent.data[propName] = {
                    winjsChildComponents: latest.childComponents,
                    winjsChildComponentsMap: latest.childComponentsMap
                };
            },
            dispose: function syncChildrenWithBindingList_dispose(winjsComponent, propName) {
                var data = winjsComponent.data[propName] || {};
                var childComponents = data.winjsChildComponents || [];
                childComponents.forEach(function (winjsChildComponent) {
                    winjsChildComponent.dispose();
                });
            }
        }
    }
};

function defineControl(options) {
    // Required
    var winjsControl = options.winjsControl;

    // Optional
    var winControlOptions = options.winControlOptions || {};
    var preCtorInit = options.preCtorInit || function () { };
    var propHandlers = options.propHandlers || {};
    var render = options.render || function (component) {
        return React.DOM.div();
    };
    var displayName = options.displayName;

    function initWinJSComponent(winjsComponent, element, props) {
        winjsComponent.data = {};
        winjsComponent.displayName = displayName;
        winjsComponent.element = element;

        // Give propHandlers that implement preCtorInit the opportunity to run before
        // instantiating the winControl.
        var options = cloneObject(winControlOptions);
        preCtorInit(element, options, winjsComponent.data, displayName);
        Object.keys(props).forEach(function (propName) {
            var handler = propHandlers[propName];
            if (handler && handler.preCtorInit) {
                handler.preCtorInit(element, options, winjsComponent.data, displayName, propName, props[propName]);
            }
        });
        winjsComponent.winControl = new winjsControl(element, options);

        // Process propHandlers that don't implement preCtorInit.
        Object.keys(props).forEach(function (propName) {
            var handler = propHandlers[propName];
            if (handler && !handler.preCtorInit) {
                handler.update(winjsComponent, propName, undefined, props[propName]);
            }
        });
    }

    function updateWinJSComponent(winjsComponent, prevProps, nextProps) {
        // Handle props that were added or changed
        Object.keys(nextProps).forEach(function (propName) {
            var handler = propHandlers[propName];
            if (handler) {
                handler.update(winjsComponent, propName, prevProps[propName], nextProps[propName]);
            }
        });

        // Handle props that were removed
        Object.keys(prevProps).forEach(function (propName) {
            if (!nextProps.hasOwnProperty(propName)) {
                var handler = propHandlers[propName];
                if (handler) {
                    handler.update(winjsComponent, propName, prevProps[propName], undefined);
                }
            }
        });
    }

    function disposeWinJSComponent(winjsComponent) {
        winjsComponent.winControl.dispose && winjsComponent.winControl.dispose();
        Object.keys(propHandlers).forEach(function (propName) {
            var handler = propHandlers[propName];
            handler.dispose && handler.dispose(winjsComponent, propName);
        })
    }

    return React.createClass({
        displayName: displayName,
        statics: {
            initWinJSComponent: initWinJSComponent,
            updateWinJSComponent: updateWinJSComponent,
            disposeWinJSComponent: disposeWinJSComponent
        },
        propTypes: mapObject(propHandlers, function (propName, propHandler) {
            return propHandler.propType;
        }),
        shouldComponentUpdate: function () {
            return false;
        },
        // If choosing to implement componentWillMount, be aware that componentWillMount
        // will run when WinJSChildComponent renders the component to a string via
        // renderRootlessComponent.
        componentDidMount: function () {
            initWinJSComponent(this, ReactDOM.findDOMNode(this), this.props);
        },
        componentWillUnmount: function () {
            disposeWinJSComponent(this);
        },
        componentWillReceiveProps: function (nextProps) {
            updateWinJSComponent(this, this.props, nextProps);
        },
        render: function() {
            return render(this);
        }
    });
}

var hostEl = document.createElement("div");
function renderRootlessComponent(component) {
    var html = ReactDOMServer.renderToStaticMarkup(component);
    hostEl.innerHTML = html;
    var element = hostEl.firstElementChild;
    hostEl.removeChild(element);
    return element;
}

// TODO: Is there a better way to solve this problem that WinJSChildComponent solves?
// TODO: Because we're not going thru React's lifecycle, we're missing out on
// validation of propTypes.
// TODO: ref doesn't work on WinJSChildComponents. The reason is that during updates, we
// don't call ReactDOM.render. Because of this, refs would go stale and only reflect the
// state of the component after its first render. Consequently, we clone the component
// during its first render so it never shows up in refs. This should make it clearer
// that refs don't work than generating stale refs.
function WinJSChildComponent(component) { // implements IWinJSChildComponent
    // Clone the component so a ref isn't generated.
    var clonedComponent = React.cloneElement(component, { ref: null });
    var element = renderRootlessComponent(clonedComponent);
    component.type.initWinJSComponent(this, element, component.props);
    this.key = component.key;
    this.type = component.type;
    this._props = component.props;
    this._disposeWinJSComponent = component.type.disposeWinJSComponent;
};
WinJSChildComponent.prototype.update = function (component) {
    component.type.updateWinJSComponent(this, this._props, component.props);
    this._props = component.props;
};
WinJSChildComponent.prototype.dispose = function () {
    this._disposeWinJSComponent(this);
};


// Prop handlers that are common to every WinJS control.
var defaultPropHandlers = {
    className: PropHandlers.winControlClassName,
    style: PropHandlers.winControlStyle,

    // TODO: Instead of special casing these, support DOM attributes
    // more generically.
    id: PropHandlers.domProperty(React.PropTypes.string),
    "aria-controls": PropHandlers.domAttribute(React.PropTypes.any),
    "aria-expanded": PropHandlers.domAttribute(React.PropTypes.any)
};

// Control-specific prop handlers derived from RawControlApis
var DefaultControlPropHandlers = (function processRawApis() {
    var keepProperty = function keepProperty(propertyName) {
        return !endsWith(propertyName.toLowerCase(), "element");
    };

    return mapObject(RawControlApis, function (controlName, controlApis) {
        var propHandlers = {};
        Object.keys(controlApis).forEach(function (propName) {
            if (isEvent(propName)) {
                propHandlers[propName] = PropHandlers.event;
            } else if (keepProperty(propName)) {
                var typeInfo = controlApis[propName];
                var propType = typeToPropType(typeInfo);
                propHandlers[propName] = PropHandlers.property(propType);
            }
        });
        return propHandlers;
    });
})();

// Each entry in controlApis has the same format as the argument to defineControl except
// updateWithDefaults automatically provides:
//   - winjsControl
//   - displayName
//   - propHandlers
// and updateWithDefaults implements an extra option:
//   - underlyingControlName
// By default, winjsControl, displayName, and propHanders are inferred from the entry's key
// in controlApis. If underlyingControlName is provided, they will instead be inferred from
// that name.
function updateWithDefaults(controlApis) {
    Object.keys(controlApis).forEach(function (controlName) {
        var spec = controlApis[controlName];
        var winjsControlName = spec.underlyingControlName || controlName;
        spec.winjsControl = spec.winjsControl || WinJS.UI[winjsControlName];
        spec.displayName = spec.displayName || winjsControlName;
        spec.propHandlers = merge(
            defaultPropHandlers, // Common to all WinJS controls
            DefaultControlPropHandlers[winjsControlName], // Control-specific derived from RawControlApis
            spec.propHandlers // Control-specific handwritten
        );
    });
    return controlApis;
}

var typeWarnPropHandler = PropHandlers.warn("Invalid prop 'type'. Instead, the command type is" +
    " determined by the component: Button, Toggle, Separator, ContentCommand, FlyoutCommand.");
var CommandSpecs = {
    Button: {
        underlyingControlName: "AppBarCommand",
        winControlOptions: { type: "button" },
        render: function (component) {
            return React.DOM.button();
        },
        propHandlers: {
            type: typeWarnPropHandler,
        }
    },
    Toggle: {
        underlyingControlName: "AppBarCommand",
        winControlOptions: { type: "toggle" },
        render: function (component) {
            return React.DOM.button();
        },
        propHandlers: {
            type: typeWarnPropHandler
        }
    },
    Separator: {
        underlyingControlName: "AppBarCommand",
        winControlOptions: { type: "separator" },
        render: function (component) {
            return React.DOM.hr();
        },
        propHandlers: {
            type: typeWarnPropHandler
        }
    },
    ContentCommand: {
        underlyingControlName: "AppBarCommand",
        winControlOptions: { type: "content" },
        propHandlers: {
            type: typeWarnPropHandler,
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.element;
            })
        }
    },
    FlyoutCommand: {
        underlyingControlName: "AppBarCommand",
        winControlOptions: { type: "flyout" },
        render: function (component) {
            return React.DOM.button();
        },
        propHandlers: {
            type: typeWarnPropHandler,
            flyoutComponent: {
                propType: React.PropTypes.element,
                update: function FlyoutCommand_flyoutComponent_update(winjsComponent, propName, oldValue, newValue) {
                    var data = winjsComponent.data[propName];
                    if (!data) {
                        var flyoutHost = document.createElement("div");
                        flyoutHost.className = "win-react-flyout-host";
                        document.body.appendChild(flyoutHost);
                        winjsComponent.data[propName] = data = {
                            flyoutHost: flyoutHost,
                            flyoutComponent: null
                        };
                    }
                    var oldWinControl = data.flyoutComponent && data.flyoutComponent.winControl;
                    var instance = ReactDOM.render(newValue, data.flyoutHost);
                    if (oldWinControl !== instance.winControl) {
                        winjsComponent.winControl.flyout = instance.winControl;
                    }
                    winjsComponent.data[propName].flyoutComponent = instance;
                },
                dispose: function FlyoutCommand_flyoutComponent_dispose(winjsComponent, propName) {
                    var data = winjsComponent.data[propName];
                    if (data && data.flyoutHost) {
                        ReactDOM.unmountComponentAtNode(data.flyoutHost);
                        deparent(data.flyoutHost);
                    }
                }
            }
        }
    }
};

var ControlApis = updateWithDefaults({
    AppBar: {
        propHandlers: {
            opened: PropHandlers.focusProperty(React.PropTypes.bool),
            children: PropHandlers.syncChildrenWithBindingList("data")
        }
    },
    "AppBar.Button": CommandSpecs.Button,
    "AppBar.Toggle": CommandSpecs.Toggle,
    "AppBar.Separator": CommandSpecs.Separator,
    "AppBar.ContentCommand": CommandSpecs.ContentCommand,
    "AppBar.FlyoutCommand": CommandSpecs.FlyoutCommand,
    AutoSuggestBox: {},
    BackButton: {
        preCtorInit: function (element, options, data, displayName) {
            element.addEventListener("click", function (eventObject) {
                // Prevent React from seeing the "click" event to workaround this React
                // bug: https://github.com/facebook/react/issues/3790
                eventObject.stopPropagation();
            });
        },
        render: function (component) {
            return React.DOM.button();
        }
    },
    // CellSpanningLayout: Not a component so just use off of WinJS.UI?
    ContentDialog: {
        propHandlers: {
            hidden: PropHandlers.focusProperty(React.PropTypes.bool),
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.element.querySelector(".win-contentdialog-content");
            })
        }
    },
    DatePicker: {},
    FlipView: {},
    Flyout: {
        // The WinJS Flyout control doesn't come with a good mount point.
        // App content and control content are siblings in Flyout.element.
        // Consequently, if React rendered to Flyout.element, it would destroy
        // some of Flyout's elements. To fix this, we give Flyout a div
        // (className="win-react-flyout-mount-point") which will contain only
        // app content. The React component renders into this div so it doesn't
        // destroy any control content.
        render: function (component) {
            return React.DOM.div(null, React.DOM.div({ className: "win-react-flyout-mount-point" }));
        },
        propHandlers: {
            hidden: PropHandlers.focusProperty(React.PropTypes.bool),
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.element.querySelector(".win-react-flyout-mount-point");
            })
        }
    },
    // GridLayout: Not a component so just use off of WinJS.UI?
    Hub: {
        propHandlers: {
            children: PropHandlers.syncChildrenWithBindingList("sections")
        }
    },
    "Hub.Section": {
        underlyingControlName: "HubSection",
        propHandlers: {
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.contentElement;
            })
        }
    },
    ItemContainer: {
        propHandlers: {
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.element.querySelector(".win-item");
            })
        }
    },
    // ListLayout: Not a component so just use off of WinJS.UI?
    ListView: {
        propHandlers: {
            currentItem: PropHandlers.focusProperty(React.PropTypes.any),
            headerComponent: PropHandlers.propertyWithMount("header"),
            footerComponent: PropHandlers.propertyWithMount("footer"),
        }
    },
    // TODO: Keyboarding doesn't work in Menu probably because MenuCommands are not direct
    // children of the Menu.
    Menu: {
        propHandlers: {
            hidden: PropHandlers.focusProperty(React.PropTypes.bool),
            children: {
                // children propHandler looks like this rather than using mountTo on
                // winControl.element because this enables props.children to have
                // multiple components whereas the other technique restricts it to one.
                update: function (winjsComponent, propName, oldValue, newValue) {
                    // TODO: dispose
                    ReactDOM.render(React.DOM.div(null, newValue), winjsComponent.winControl.element);
                }
            }
        }
    },
    "Menu.Button": merge(CommandSpecs.Button, {
        underlyingControlName: "MenuCommand"
    }),
    "Menu.Toggle": merge(CommandSpecs.Toggle, {
        underlyingControlName: "MenuCommand"
    }),
    "Menu.Separator": merge(CommandSpecs.Separator, {
        underlyingControlName: "MenuCommand"
    }),
    "Menu.FlyoutCommand": merge(CommandSpecs.FlyoutCommand, {
        underlyingControlName: "MenuCommand"
    }),
    Pivot: {
        propHandlers: {
            children: PropHandlers.syncChildrenWithBindingList("items"),
            customLeftHeaderComponent: PropHandlers.propertyWithMount("customLeftHeader"),
            customRightHeaderComponent: PropHandlers.propertyWithMount("customRightHeader")
        }
    },
    "Pivot.Item": {
        underlyingControlName: "PivotItem",
        propHandlers: {
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.contentElement;
            })
        }
    },
    Rating: {},
    SemanticZoom: {
        propHandlers: {
            zoomedInComponent: {
                propType: React.PropTypes.element,
                preCtorInit: function zoomedInComponent_preCtorInit(element, options, data, displayName, propName, value) {
                    var child = new WinJSChildComponent(value);
                    // Zoomed in component should be the first child.
                    element.insertBefore(child.winControl.element, element.firstElementChild);
                    data[propName] = child;
                },
                update: function zoomedInComponent_update(winjsComponent, propName, oldValue, newValue) {
                    var child = winjsComponent.data[propName];
                    if (child.type === newValue.type) {
                        child.update(newValue);
                    } else {
                        console.warn("SemanticZoom: zoomedInComponent's component type can't change");
                    }
                },
                dispose: function zoomedInComponent_dispose(winjsComponent, propName) {
                    var child = winjsComponent.data[propName];
                    child && child.dispose();
                }
            },
            zoomedOutComponent: {
                propType: React.PropTypes.element,
                preCtorInit: function zoomedOutComponent_preCtorInit(element, options, data, displayName, propName, value) {
                    var child = new WinJSChildComponent(value);
                    // Zoomed out component should be the second child.
                    element.appendChild(child.winControl.element);
                    data[propName] = child;
                },
                update: function zoomedOutComponent_update(winjsComponent, propName, oldValue, newValue) {
                    var child = winjsComponent.data[propName];
                    if (child.type === newValue.type) {
                        child.update(newValue);
                    } else {
                        console.warn("SemanticZoom: zoomedOutComponent's component type can't change");
                    }
                },
                dispose: function zoomedOutComponent_dispose(winjsComponent, propName) {
                    var child = winjsComponent.data[propName];
                    child && child.dispose();
                }
            }
        }
    },
    SplitView: {
        propHandlers: {
            paneOpened: PropHandlers.focusProperty(React.PropTypes.bool),
            paneComponent: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.paneElement;
            }),
            contentComponent: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.contentElement;
            })
        }
    },
    "SplitView.Command": {
        underlyingControlName: "SplitViewCommand",
    },
    SplitViewPaneToggle: {
        render: function (component) {
            return React.DOM.button();
        },
        propHandlers: {
            // paneOpened provides a React-friendly interface for making the SplitViewPaneToggle accessible.
            // When paneOpened is specified, is not undefined, and is not null, it:
            //  - Sets SplitViewPaneToggle's aria-expanded attribute to match paneOpened
            //  - Fires SplitViewPaneToggle's "invoked" event when aria-expanded is mutated
            paneOpened: {
                propType: React.PropTypes.bool,
                update: function paneOpened_update(winjsComponent, propName, oldValue, newValue) {
                    var data = winjsComponent.data[propName];
                    if (!data) {
                        data = {
                            // WinJS.UI.SplitViewPaneToggle depends on WinJS.Utilities._MutationObserver so it
                            // is safe to use it here.
                            ariaExpandedMutationObserver: new WinJS.Utilities._MutationObserver(function () {
                                var element = winjsComponent.element;
                                var ariaExpanded = (element.getAttribute("aria-expanded") === "true");
                                if (ariaExpanded !== winjsComponent.data[propName].value) {
                                    fireEvent(element, "invoked"); // Fire WinJS.UI.SplitViewPaneToggle's invoked event
                                }
                            }),
                            observing: false,
                            value: newValue
                        };
                        winjsComponent.data[propName] = data;
                    }

                    if (oldValue !== newValue) {
                        if (newValue !== null && newValue !== undefined) {
                            winjsComponent.element.setAttribute("aria-expanded", newValue ? "true" : "false");
                            if (!data.observing) {
                                data.observing = true;
                                data.ariaExpandedMutationObserver.observe(winjsComponent.element, {
                                    attributes: true,
                                    attributeFilter: ["aria-expanded"]
                                });
                            }
                        } else {
                            winjsComponent.element.removeAttribute("aria-expanded");
                            if (data.observing) {
                                data.observing = false;
                                data.ariaExpandedMutationObserver.disconnect();
                            }
                        }
                    }

                    data.value = newValue;
                },
                dispose: function paneOpened_dispose(winjsComponent, propName) {
                    var data = winjsComponent.data[propName];
                    if (data && data.observing) {
                        data.ariaExpandedMutationObserver.disconnect();
                    }
                }
            }
        }
    },
    TimePicker: {},
    ToggleSwitch: {},
    ToolBar: {
        propHandlers: {
            opened: PropHandlers.focusProperty(React.PropTypes.bool),
            children: PropHandlers.syncChildrenWithBindingList("data")
        }
    },
    "ToolBar.Button": CommandSpecs.Button,
    "ToolBar.Toggle": CommandSpecs.Toggle,
    "ToolBar.Separator": CommandSpecs.Separator,
    "ToolBar.ContentCommand": CommandSpecs.ContentCommand,
    "ToolBar.FlyoutCommand": CommandSpecs.FlyoutCommand,
    Tooltip: {
        propHandlers: {
            children: PropHandlers.mountTo(function (winjsComponent) {
                return winjsComponent.winControl.element;
            }),
            contentComponent: PropHandlers.propertyWithMount("contentElement")
        }
    }
});

//
// Publish
//

var ReactWinJS = {};

// Controls
//

// Sort to ensure that controls come before their subcontrols
// (e.g. AppBar comes before AppBar.Toggle).
Object.keys(ControlApis).sort().forEach(function (controlName) {
    nestedSet(ReactWinJS, controlName, defineControl(ControlApis[controlName]));
});

// Utilites
//

// Given a function that returns a React component,
// returns an item renderer function that can be used
// with WinJS controls. Useful for describing FlipView
// and ListView item templates as React components.
ReactWinJS.reactRenderer = function reactRenderer(componentFunction) {
    var componentFunctionBound;
    var renderItem = function renderItem(item) {
        var element = document.createElement("div");
        element.className = "win-react-renderer-host";
        ReactDOM.render(componentFunctionBound(item), element);
        WinJS.Utilities.markDisposable(element, function () {
            ReactDOM.unmountComponentAtNode(element);
        });
        return element;
    };

    return function itemRenderer(itemOrItemPromise) {
        if (!componentFunctionBound) {
            componentFunctionBound = componentFunction.bind(this);
        }

        return WinJS.Promise.is(itemOrItemPromise) ?
            itemOrItemPromise.then(renderItem) :
            renderItem(itemOrItemPromise);
    }
};


// Low-level utilities for wrapping custom WinJS-style controls
//

ReactWinJS.defineControl = defineControl;
ReactWinJS.PropHandlers = PropHandlers;
ReactWinJS.defaultPropHandlers = defaultPropHandlers;

module.exports = ReactWinJS;


/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = ReactDOM;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @typechecks
 */

var emptyFunction = __webpack_require__(7);

/**
 * Upstream version of event listener. Does not take into account specific
 * nature of platform.
 */
var EventListener = {
  /**
   * Listen to DOM events during the bubble phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  listen: function listen(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, false);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, false);
        }
      };
    } else if (target.attachEvent) {
      target.attachEvent('on' + eventType, callback);
      return {
        remove: function remove() {
          target.detachEvent('on' + eventType, callback);
        }
      };
    }
  },

  /**
   * Listen to DOM events during the capture phase.
   *
   * @param {DOMEventTarget} target DOM element to register listener on.
   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
   * @param {function} callback Callback function.
   * @return {object} Object with a `remove` method.
   */
  capture: function capture(target, eventType, callback) {
    if (target.addEventListener) {
      target.addEventListener(eventType, callback, true);
      return {
        remove: function remove() {
          target.removeEventListener(eventType, callback, true);
        }
      };
    } else {
      if (process.env.NODE_ENV !== 'production') {
        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
      }
      return {
        remove: emptyFunction
      };
    }
  },

  registerDefault: function registerDefault() {}
};

module.exports = EventListener;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * @param {DOMElement} node input/textarea to focus
 */

function focusNode(node) {
  // IE8 can throw "Can't move focus to the control because it is invisible,
  // not enabled, or of a type that does not accept the focus." for all kinds of
  // reasons that are too expensive and fragile to test.
  try {
    node.focus();
  } catch (e) {}
}

module.exports = focusNode;

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/* eslint-disable fb-www/typeof-undefined */

/**
 * Same as document.activeElement but wraps in a try-catch block. In IE it is
 * not safe to call document.activeElement if there is nothing focused.
 *
 * The activeElement will be null only if the document or document body is not
 * yet defined.
 *
 * @param {?DOMDocument} doc Defaults to current document.
 * @return {?DOMElement}
 */
function getActiveElement(doc) /*?DOMElement*/{
  doc = doc || global.document;
  if (typeof doc === 'undefined') {
    return null;
  }
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

module.exports = getActiveElement;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(180)))

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridColumn: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

module.exports = CSSProperty;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PooledClass = __webpack_require__(13);

var invariant = __webpack_require__(1);

/**
 * A specialized pseudo-event module to help keep track of components waiting to
 * be notified when their DOM representations are available for use.
 *
 * This implements `PooledClass`, so you should never need to instantiate this.
 * Instead, use `CallbackQueue.getPooled()`.
 *
 * @class ReactMountReady
 * @implements PooledClass
 * @internal
 */

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    _classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  /**
   * Enqueues a callback to be invoked when `notifyAll` is invoked.
   *
   * @param {function} callback Invoked when `notifyAll` is invoked.
   * @param {?object} context Context to call `callback` with.
   * @internal
   */


  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
    this._callbacks = this._callbacks || [];
    this._callbacks.push(callback);
    this._contexts = this._contexts || [];
    this._contexts.push(context);
  };

  /**
   * Invokes all enqueued callbacks and clears the queue. This is invoked after
   * the DOM representation of a component has been created or updated.
   *
   * @internal
   */


  CallbackQueue.prototype.notifyAll = function notifyAll() {
    var callbacks = this._callbacks;
    var contexts = this._contexts;
    var arg = this._arg;
    if (callbacks && contexts) {
      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
      this._callbacks = null;
      this._contexts = null;
      for (var i = 0; i < callbacks.length; i++) {
        callbacks[i].call(contexts[i], arg);
      }
      callbacks.length = 0;
      contexts.length = 0;
    }
  };

  CallbackQueue.prototype.checkpoint = function checkpoint() {
    return this._callbacks ? this._callbacks.length : 0;
  };

  CallbackQueue.prototype.rollback = function rollback(len) {
    if (this._callbacks && this._contexts) {
      this._callbacks.length = len;
      this._contexts.length = len;
    }
  };

  /**
   * Resets the internal queue.
   *
   * @internal
   */


  CallbackQueue.prototype.reset = function reset() {
    this._callbacks = null;
    this._contexts = null;
  };

  /**
   * `PooledClass` looks for this.
   */


  CallbackQueue.prototype.destructor = function destructor() {
    this.reset();
  };

  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(19);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInstrumentation = __webpack_require__(8);

var quoteAttributeValueForBrowser = __webpack_require__(167);
var warning = __webpack_require__(2);

var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};

function isAttributeNameSafe(attributeName) {
  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
    return true;
  }
  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
    return false;
  }
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }
  illegalAttributeNameCache[attributeName] = true;
  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
  return false;
}

function shouldIgnoreValue(propertyInfo, value) {
  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
}

/**
 * Operations for dealing with DOM properties.
 */
var DOMPropertyOperations = {

  /**
   * Creates markup for the ID property.
   *
   * @param {string} id Unescaped ID.
   * @return {string} Markup string.
   */
  createMarkupForID: function (id) {
    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
  },

  setAttributeForID: function (node, id) {
    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
  },

  createMarkupForRoot: function () {
    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
  },

  setAttributeForRoot: function (node) {
    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
  },

  /**
   * Creates markup for a property.
   *
   * @param {string} name
   * @param {*} value
   * @return {?string} Markup string, or null if the property was invalid.
   */
  createMarkupForProperty: function (name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      if (shouldIgnoreValue(propertyInfo, value)) {
        return '';
      }
      var attributeName = propertyInfo.attributeName;
      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
        return attributeName + '=""';
      }
      return attributeName + '=' + quoteAttributeValueForBrowser(value);
    } else if (DOMProperty.isCustomAttribute(name)) {
      if (value == null) {
        return '';
      }
      return name + '=' + quoteAttributeValueForBrowser(value);
    }
    return null;
  },

  /**
   * Creates markup for a custom property.
   *
   * @param {string} name
   * @param {*} value
   * @return {string} Markup string, or empty string if the property was invalid.
   */
  createMarkupForCustomAttribute: function (name, value) {
    if (!isAttributeNameSafe(name) || value == null) {
      return '';
    }
    return name + '=' + quoteAttributeValueForBrowser(value);
  },

  /**
   * Sets the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   * @param {*} value
   */
  setValueForProperty: function (node, name, value) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, value);
      } else if (shouldIgnoreValue(propertyInfo, value)) {
        this.deleteValueForProperty(node, name);
        return;
      } else if (propertyInfo.mustUseProperty) {
        // Contrary to `setAttribute`, object properties are properly
        // `toString`ed by IE8/9.
        node[propertyInfo.propertyName] = value;
      } else {
        var attributeName = propertyInfo.attributeName;
        var namespace = propertyInfo.attributeNamespace;
        // `setAttribute` with objects becomes only `[object]` in IE8/9,
        // ('' + value) makes it output the correct toString()-value.
        if (namespace) {
          node.setAttributeNS(namespace, attributeName, '' + value);
        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
          node.setAttribute(attributeName, '');
        } else {
          node.setAttribute(attributeName, '' + value);
        }
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      DOMPropertyOperations.setValueForAttribute(node, name, value);
      return;
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  setValueForAttribute: function (node, name, value) {
    if (!isAttributeNameSafe(name)) {
      return;
    }
    if (value == null) {
      node.removeAttribute(name);
    } else {
      node.setAttribute(name, '' + value);
    }

    if (process.env.NODE_ENV !== 'production') {
      var payload = {};
      payload[name] = value;
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'update attribute',
        payload: payload
      });
    }
  },

  /**
   * Deletes an attributes from a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForAttribute: function (node, name) {
    node.removeAttribute(name);
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  },

  /**
   * Deletes the value for a property on a node.
   *
   * @param {DOMElement} node
   * @param {string} name
   */
  deleteValueForProperty: function (node, name) {
    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
    if (propertyInfo) {
      var mutationMethod = propertyInfo.mutationMethod;
      if (mutationMethod) {
        mutationMethod(node, undefined);
      } else if (propertyInfo.mustUseProperty) {
        var propName = propertyInfo.propertyName;
        if (propertyInfo.hasBooleanValue) {
          node[propName] = false;
        } else {
          node[propName] = '';
        }
      } else {
        node.removeAttribute(propertyInfo.attributeName);
      }
    } else if (DOMProperty.isCustomAttribute(name)) {
      node.removeAttribute(name);
    }

    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
        type: 'remove attribute',
        payload: name
      });
    }
  }

};

module.exports = DOMPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentFlags = {
  hasCachedChildNodes: 1 << 0
};

module.exports = ReactDOMComponentFlags;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(35);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValueDefaultValue = false;

function updateOptionsIfPendingUpdateAndMounted() {
  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
    this._wrapperState.pendingUpdate = false;

    var props = this._currentElement.props;
    var value = LinkedValueUtils.getValue(props);

    if (value != null) {
      updateOptions(this, Boolean(props.multiple), value);
    }
  }
}

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

var valuePropNames = ['value', 'defaultValue'];

/**
 * Validation function for `value` and `defaultValue`.
 * @private
 */
function checkSelectPropTypes(inst, props) {
  var owner = inst._currentElement._owner;
  LinkedValueUtils.checkPropTypes('select', props, owner);

  if (props.valueLink !== undefined && !didWarnValueLink) {
    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
    didWarnValueLink = true;
  }

  for (var i = 0; i < valuePropNames.length; i++) {
    var propName = valuePropNames[i];
    if (props[propName] == null) {
      continue;
    }
    var isArray = Array.isArray(props[propName]);
    if (props.multiple && !isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    } else if (!props.multiple && isArray) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
    }
  }
}

/**
 * @param {ReactDOMComponent} inst
 * @param {boolean} multiple
 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
 * @private
 */
function updateOptions(inst, multiple, propValue) {
  var selectedValue, i;
  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;

  if (multiple) {
    selectedValue = {};
    for (i = 0; i < propValue.length; i++) {
      selectedValue['' + propValue[i]] = true;
    }
    for (i = 0; i < options.length; i++) {
      var selected = selectedValue.hasOwnProperty(options[i].value);
      if (options[i].selected !== selected) {
        options[i].selected = selected;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    selectedValue = '' + propValue;
    for (i = 0; i < options.length; i++) {
      if (options[i].value === selectedValue) {
        options[i].selected = true;
        return;
      }
    }
    if (options.length) {
      options[0].selected = true;
    }
  }
}

/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */
var ReactDOMSelect = {
  getHostProps: function (inst, props) {
    return _assign({}, props, {
      onChange: inst._wrapperState.onChange,
      value: undefined
    });
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      checkSelectPropTypes(inst, props);
    }

    var value = LinkedValueUtils.getValue(props);
    inst._wrapperState = {
      pendingUpdate: false,
      initialValue: value != null ? value : props.defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst),
      wasMultiple: Boolean(props.multiple)
    };

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
      didWarnValueDefaultValue = true;
    }
  },

  getSelectValueContext: function (inst) {
    // ReactDOMOption looks at this initial value so the initial generated
    // markup has correct `selected` attributes
    return inst._wrapperState.initialValue;
  },

  postUpdateWrapper: function (inst) {
    var props = inst._currentElement.props;

    // After the initial mount, we control selected-ness manually so don't pass
    // this value down
    inst._wrapperState.initialValue = undefined;

    var wasMultiple = inst._wrapperState.wasMultiple;
    inst._wrapperState.wasMultiple = Boolean(props.multiple);

    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      inst._wrapperState.pendingUpdate = false;
      updateOptions(inst, Boolean(props.multiple), value);
    } else if (wasMultiple !== Boolean(props.multiple)) {
      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
      if (props.defaultValue != null) {
        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
      } else {
        // Revert the select back to its default unselected state.
        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
      }
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  if (this._rootNodeID) {
    this._wrapperState.pendingUpdate = true;
  }
  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
  return returnValue;
}

module.exports = ReactDOMSelect;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactUpdates = __webpack_require__(10);
var Transaction = __webpack_require__(26);

var emptyFunction = __webpack_require__(7);

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function () {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  /**
   * Call the provided function in a context within which calls to `setState`
   * and friends are batched such that components aren't updated unnecessarily.
   */
  batchedUpdates: function (callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    // The code is written this way to avoid extra allocations
    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function (factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function (instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

var genericComponentClass = null;
var textComponentClass = null;

var ReactHostComponentInjection = {
  // This accepts a class that receives the tag string. This is a catch all
  // that can render any kind of tag.
  injectGenericComponentClass: function (componentClass) {
    genericComponentClass = componentClass;
  },
  // This accepts a text component class that takes the text string to be
  // rendered as props.
  injectTextComponentClass: function (componentClass) {
    textComponentClass = componentClass;
  }
};

/**
 * Get a host internal component class for a specific tag.
 *
 * @param {ReactElement} element The element to create.
 * @return {function} The internal class constructor function.
 */
function createInternalComponent(element) {
  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
  return new genericComponentClass(element);
}

/**
 * @param {ReactText} text
 * @return {ReactComponent}
 */
function createInstanceForText(text) {
  return new textComponentClass(text);
}

/**
 * @param {ReactComponent} component
 * @return {boolean}
 */
function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMSelection = __webpack_require__(120);

var containsNode = __webpack_require__(88);
var focusNode = __webpack_require__(55);
var getActiveElement = __webpack_require__(56);

function isInDocument(node) {
  return containsNode(document.documentElement, node);
}

/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */
var ReactInputSelection = {

  hasSelectionCapabilities: function (elem) {
    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
  },

  getSelectionInformation: function () {
    var focusedElem = getActiveElement();
    return {
      focusedElem: focusedElem,
      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
    };
  },

  /**
   * @restoreSelection: If any selection information was potentially lost,
   * restore it. This is useful when performing operations that could remove dom
   * nodes and place them back in, resulting in focus being lost.
   */
  restoreSelection: function (priorSelectionInformation) {
    var curFocusedElem = getActiveElement();
    var priorFocusedElem = priorSelectionInformation.focusedElem;
    var priorSelectionRange = priorSelectionInformation.selectionRange;
    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
      }
      focusNode(priorFocusedElem);
    }
  },

  /**
   * @getSelection: Gets the selection bounds of a focused textarea, input or
   * contentEditable node.
   * -@input: Look up selection bounds of this input
   * -@return {start: selectionStart, end: selectionEnd}
   */
  getSelection: function (input) {
    var selection;

    if ('selectionStart' in input) {
      // Modern browser with input or textarea.
      selection = {
        start: input.selectionStart,
        end: input.selectionEnd
      };
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      // IE8 input.
      var range = document.selection.createRange();
      // There can only be one selection per document in IE, so it must
      // be in our element.
      if (range.parentElement() === input) {
        selection = {
          start: -range.moveStart('character', -input.value.length),
          end: -range.moveEnd('character', -input.value.length)
        };
      }
    } else {
      // Content editable or old IE textarea.
      selection = ReactDOMSelection.getOffsets(input);
    }

    return selection || { start: 0, end: 0 };
  },

  /**
   * @setSelection: Sets the selection bounds of a textarea or input and focuses
   * the input.
   * -@input     Set selection bounds of this input or textarea
   * -@offsets   Object of same form that is returned from get*
   */
  setSelection: function (input, offsets) {
    var start = offsets.start;
    var end = offsets.end;
    if (end === undefined) {
      end = start;
    }

    if ('selectionStart' in input) {
      input.selectionStart = start;
      input.selectionEnd = Math.min(end, input.value.length);
    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
      var range = input.createTextRange();
      range.collapse(true);
      range.moveStart('character', start);
      range.moveEnd('character', end - start);
      range.select();
    } else {
      ReactDOMSelection.setOffsets(input, offsets);
    }
  }
};

module.exports = ReactInputSelection;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(13);
var Transaction = __webpack_require__(26);
var ReactInstrumentation = __webpack_require__(8);
var ReactServerUpdateQueue = __webpack_require__(143);

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

var noopCallbackQueue = {
  enqueue: function () {}
};

/**
 * @class ReactServerRenderingTransaction
 * @param {boolean} renderToStaticMarkup
 */
function ReactServerRenderingTransaction(renderToStaticMarkup) {
  this.reinitializeTransaction();
  this.renderToStaticMarkup = renderToStaticMarkup;
  this.useCreateElement = false;
  this.updateQueue = new ReactServerUpdateQueue(this);
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array} Empty list of operation wrap procedures.
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return noopCallbackQueue;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return this.updateQueue;
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {},

  checkpoint: function () {},

  rollback: function () {}
};

_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactServerRenderingTransaction);

module.exports = ReactServerRenderingTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(12);
var ReactInstanceMap = __webpack_require__(39);
var ReactInstrumentation = __webpack_require__(8);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var ctor = publicInstance.constructor;
      // Only warn when we have a callerName. Otherwise we should be silent.
      // We're probably calling from enqueueCallback. We don't want to warn
      // there because we already warned for the corresponding lifecycle method.
      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
    }
    return null;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
  }

  return internalInstance;
}

/**
 * ReactUpdateQueue allows for state updates to be scheduled into a later
 * reconciliation step.
 */
var ReactUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    if (process.env.NODE_ENV !== 'production') {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      // During componentWillMount and render this will still be null but after
      // that will always render to something. At least for now. So we can use
      // this hack.
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @param {string} callerName Name of the calling function in the public API.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    // Previously we would throw an error if we didn't have an internal
    // instance. Since we want to make it a no-op instead, we mirror the same
    // behavior we have in other enqueue* methods.
    // We also need to ignore callbacks in componentWillMount. See
    // enqueueUpdates.
    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    // TODO: The callback here is ignored when setState is called from
    // componentWillMount. Either fix it or disallow doing so completely in
    // favor of getInitialState. Alternatively, we can disallow
    // componentWillMount during server-side rendering.
    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function (internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onSetState();
      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;
    // TODO: introduce _pendingContext instead of setting it directly.
    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function (callback, callerName) {
    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
  }

};

module.exports = ReactUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ViewportMetrics = {

  currentScrollLeft: 0,

  currentScrollTop: 0,

  refreshScrollValues: function (scrollPosition) {
    ViewportMetrics.currentScrollLeft = scrollPosition.x;
    ViewportMetrics.currentScrollTop = scrollPosition.y;
  }

};

module.exports = ViewportMetrics;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;

  if (current == null) {
    return next;
  }

  // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).
  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 */

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var contentKey = null;

/**
 * Gets the key used to access text content on a DOM node.
 *
 * @return {?string} Key used to access text content.
 * @internal
 */
function getTextContentAccessor() {
  if (!contentKey && ExecutionEnvironment.canUseDOM) {
    // Prefer textContent to innerText because many browsers support both but
    // SVG <text> elements don't support innerText even when <div> does.
    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
  }
  return contentKey;
}

module.exports = getTextContentAccessor;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var ReactCompositeComponent = __webpack_require__(113);
var ReactEmptyComponent = __webpack_require__(63);
var ReactHostComponent = __webpack_require__(64);

var getNextDebugID = __webpack_require__(164);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

// To avoid a cyclic dependency, we create the final class in this module
var ReactCompositeComponentWrapper = function (element) {
  this.construct(element);
};
_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Check if the type reference is a known internal type. I.e. not a user
 * provided composite type.
 *
 * @param {function} type
 * @return {boolean} Returns true if this is a valid internal type.
 */
function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

/**
 * Given a ReactNode, create an instance that will actually be mounted.
 *
 * @param {ReactNode} node
 * @param {boolean} shouldHaveDebugID
 * @return {object} A new instance of the element's constructor.
 * @protected
 */
function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    var type = element.type;
    if (typeof type !== 'function' && typeof type !== 'string') {
      var info = '';
      if (process.env.NODE_ENV !== 'production') {
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
      }
      info += getDeclarationErrorAddendum(element._owner);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
    }

    // Special case string values
    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      // This is temporarily available for custom components that are not string
      // representations. I.e. ART. Once those are updated to use the string
      // representation, we can drop this code path.
      instance = new element.type(element);

      // We renamed this. Allow the old name for compat. :(
      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
  }

  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
  }

  // These two fields are used by the DOM and ART diffing algorithms
  // respectively. Instead of using expandos on components, we should be
  // storing the state needed by the diffing algorithms elsewhere.
  instance._mountIndex = 0;
  instance._mountImage = null;

  if (process.env.NODE_ENV !== 'production') {
    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
  }

  // Internal instances should fully constructed at this point, so they should
  // not get any new fields added to them at this point.
  if (process.env.NODE_ENV !== 'production') {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */

var supportedInputTypes = {
  'color': true,
  'date': true,
  'datetime': true,
  'datetime-local': true,
  'email': true,
  'month': true,
  'number': true,
  'password': true,
  'range': true,
  'search': true,
  'tel': true,
  'text': true,
  'time': true,
  'url': true,
  'week': true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

module.exports = isTextInputElement;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);
var escapeTextContentForBrowser = __webpack_require__(27);
var setInnerHTML = __webpack_require__(45);

/**
 * Set the textContent property of a node, ensuring that whitespace is preserved
 * even in IE8. innerText is a poor substitute for textContent and, among many
 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
 * as it should.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */
var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
};

if (ExecutionEnvironment.canUseDOM) {
  if (!('textContent' in document.documentElement)) {
    setTextContent = function (node, text) {
      if (node.nodeType === 3) {
        node.nodeValue = text;
        return;
      }
      setInnerHTML(node, escapeTextContentForBrowser(text));
    };
  }
}

module.exports = setTextContent;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given a `prevElement` and `nextElement`, determines if the existing
 * instance should be updated as opposed to being destroyed or replaced by a new
 * instance. Both arguments are elements. This ensures that this logic can
 * operate on stateless trees without any backing instance.
 *
 * @param {?object} prevElement
 * @param {?object} nextElement
 * @return {boolean} True if the existing instance should be updated.
 * @protected
 */

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactCurrentOwner = __webpack_require__(12);
var REACT_ELEMENT_TYPE = __webpack_require__(127);

var getIteratorFn = __webpack_require__(163);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(34);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var ReactCurrentOwner = __webpack_require__(12);
var ReactComponentTreeHook = __webpack_require__(9);
var ReactElement = __webpack_require__(14);

var checkReactTypeSpec = __webpack_require__(177);

var canDefineProperty = __webpack_require__(50);
var getIteratorFn = __webpack_require__(51);
var warning = __webpack_require__(2);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
        info += getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 81 */,
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(16);
var urlToContent = {
    new: "What's New",
    groups: "Some other view",
    settings: "Settings"
};
var OtherPage = React.createClass({
    propTypes: {
        location: React.PropTypes.array.isRequired
    },
    render: function () {
        var title = urlToContent[this.props.location] || "Other";
        return React.createElement("h2", { className: "win-h2", style: { marginLeft: "10px" } }, title);
    }
});
module.exports = OtherPage;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WinJS = __webpack_require__(28);
var React = __webpack_require__(16);
var ProfilePicture_1 = __webpack_require__(84);
var ReactWinJS = __webpack_require__(52);
function calc100PercentMinus(n) {
    return n === 0 ?
        "100%" :
        "calc(100% - " + (n + "px") + ")";
}
var PeoplePage = React.createClass({
    handleToggleSelectionMode: function () {
        this.setState({
            selectionMode: !this.state.selectionMode
        });
        this.props.onNavigate(["people"]);
        this.refs.listView.winControl.selection.clear();
    },
    handleSelectionChanged: function (eventObject) {
        var listView = eventObject.currentTarget.winControl;
        var indices = listView.selection.getIndices();
        // Post to avoid navigating while in the middle of the event handler
        setTimeout(function () {
            this.setState({ selectedPeople: indices });
            this.props.onNavigate(indices.length === 1 && !this.state.selectionMode ? ["people", indices[0]] : ["people"]);
        }.bind(this), 0);
    },
    //handleDelete() {
    //    var people = this.props.people;
    //    var indices = this.state.selectedPeople;
    //    indices.sort();
    //    indices.reverse();
    //    indices.forEach(function (i: number) {
    //        people.splice(i, 1);
    //    });
    //    this.setState({
    //        selectedPeople: [],
    //        selectionMode: false
    //    });
    //    this.props.onPeopleChanged(people);
    //},
    handleContentAnimating: function (eventObject) {
        //// Disable ListView's entrance animation
        //if (eventObject.detail.type === "entrance") {
        //    eventObject.preventDefault();
        //}
    },
    personRenderer: ReactWinJS.reactRenderer(function (person) {
        return (React.createElement("div", null,
            React.createElement(ProfilePicture_1.default, { backgroundUrl: person.data.picture, size: 34 }),
            React.createElement("span", { className: "name" }, person.data.name),
            React.createElement("br", null),
            React.createElement("span", { className: "HQ" },
                "HQ: ",
                person.data.hq,
                " "),
            React.createElement("span", { className: "Rank" },
                "Rank: ",
                person.data.rank,
                " "),
            React.createElement("span", { className: "XP" },
                "XP: ",
                person.data.xp,
                " "),
            React.createElement("span", { className: "Score" },
                "Score: ",
                person.data.score),
            React.createElement("br", null),
            React.createElement("span", { className: "Attacks" },
                "Attacks: ",
                person.data.attacks,
                " "),
            React.createElement("span", { className: "Defenses" },
                "Defenses: ",
                person.data.defenses),
            React.createElement("br", null),
            React.createElement("span", { className: "reputationInvested" },
                "reputation invested: ",
                person.data.reputationInvested),
            React.createElement("br", null)));
    }),
    //groupHeaderRenderer: ReactWinJS.reactRenderer(function(item: any) {
    //    return (
    //        <div>{item.data.title}</div>
    //    );
    //}),
    renderPeoplePane: function (peoplePaneWidth) {
        return (React.createElement("div", { className: "peopleSearchPane", style: { height: "100%", width: peoplePaneWidth, display: "inline-block", verticalAlign: "top" } },
            React.createElement(ReactWinJS.ListView, { ref: "listView", className: "peopleListView win-selectionstylefilled", style: { height: "calc(100% - 48px)" }, itemDataSource: this.props.people.dataSource, itemTemplate: this.personRenderer, 
                //groupDataSource={this.props.people.groups.dataSource}
                //groupHeaderTemplate={this.groupHeaderRenderer}
                layout: this.state.layout, selectionMode: this.state.selectionMode ? "multi" : "single", tapBehavior: this.state.selectionMode ? "toggleSelect" : "directSelect", onSelectionChanged: this.handleSelectionChanged, onContentAnimating: this.handleContentAnimating })));
    },
    renderProfilePane: function (selectedIndex, peoplePaneWidth) {
        if (selectedIndex === null) {
            return (React.createElement("div", { className: "profilePane", style: { height: "100%", width: calc100PercentMinus(peoplePaneWidth), display: "inline-block", verticalAlign: "top" } },
                React.createElement("div", { style: { display: "flex", height: "100%", justifyContent: "center", alignItems: "center", flexDirection: "column" } },
                    React.createElement("h1", { className: "win-h1", style: { color: "grey" } }, "No Selection"))));
        }
        else {
            var selectedPerson = this.props.people.getAt(selectedIndex);
            return (React.createElement("div", { className: "profilePane", style: { height: "100%", width: calc100PercentMinus(peoplePaneWidth), display: "inline-block", verticalAlign: "top" } },
                React.createElement("div", { className: "profileHeader" },
                    React.createElement("div", { className: "name" }, selectedPerson.name),
                    React.createElement("div", { className: "personInfo" },
                        React.createElement(ProfilePicture_1.default, { backgroundUrl: selectedPerson.picture, size: 100 }),
                        React.createElement("div", { className: "profileStatus" },
                            React.createElement("div", { className: "updated" },
                                "attacksWon: ",
                                selectedPerson.attacks),
                            React.createElement("div", { className: "updated" },
                                "defensesWon: ",
                                selectedPerson.defenses),
                            React.createElement("div", { className: "updated" },
                                "hasPlanetaryCommand: ",
                                selectedPerson.planetary),
                            React.createElement("div", { className: "updated" },
                                "hqLevel: ",
                                selectedPerson.hq),
                            React.createElement("div", { className: "updated" },
                                "joinDate: ",
                                selectedPerson.joinDate),
                            React.createElement("div", { className: "updated" },
                                "lastLoginTime: ",
                                selectedPerson.login),
                            React.createElement("div", { className: "updated" },
                                "lastUpdated: ",
                                selectedPerson.updated),
                            React.createElement("div", { className: "updated" },
                                "planet: ",
                                selectedPerson.planet),
                            React.createElement("div", { className: "updated" },
                                "playerId: ",
                                selectedPerson.id),
                            React.createElement("div", { className: "updated" },
                                "rank: ",
                                selectedPerson.rank),
                            React.createElement("div", { className: "updated" },
                                "reputationInvested: ",
                                selectedPerson.reputationInvested),
                            React.createElement("div", { className: "updated" },
                                "rank: ",
                                selectedPerson.rank),
                            React.createElement("div", { className: "updated" },
                                "score: ",
                                selectedPerson.score),
                            React.createElement("div", { className: "updated" },
                                "troopsDonated: ",
                                selectedPerson.troopsDonated),
                            React.createElement("div", { className: "updated" },
                                "troopsReceived: ",
                                selectedPerson.troopsReceived),
                            React.createElement("div", { className: "updated" },
                                "XP: ",
                                selectedPerson.xp)))),
                React.createElement("div", { className: "separator" })));
        }
    },
    propTypes: {
        mode: React.PropTypes.oneOf(["small", "medium", "large"]).isRequired,
        people: React.PropTypes.object.isRequired,
        //members: React.PropTypes.object.isRequired,
        location: React.PropTypes.array.isRequired,
        onNavigate: React.PropTypes.func.isRequired,
        onPeopleChanged: React.PropTypes.func.isRequired
    },
    getInitialState: function () {
        return {
            layout: { type: WinJS.UI.ListLayout },
            selectedPeople: [],
            selectionMode: false
        };
    },
    render: function () {
        var selectedIndex = this.props.location.length >= 2 ? this.props.location[1] : null;
        if (this.props.mode === "small") {
            if (selectedIndex === null) {
                return this.renderPeoplePane("100%");
            }
            else {
                return this.renderProfilePane(selectedIndex, 0);
            }
        }
        else {
            var peoplePaneWidth = 320;
            return (React.createElement("div", { style: { height: "100%" } },
                this.renderPeoplePane(peoplePaneWidth),
                this.renderProfilePane(selectedIndex, peoplePaneWidth)));
        }
    }
});
module.exports = PeoplePage;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = __webpack_require__(16);
var ProfilePicture = (function (_super) {
    __extends(ProfilePicture, _super);
    function ProfilePicture() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProfilePicture.prototype.render = function () {
        var size = this.props.size;
        var cssUrl = "url(" + this.props.backgroundUrl + ")";
        return (React.createElement("div", { className: "profilePicture", style: {
                backgroundImage: cssUrl,
                width: size,
                height: size,
                WebkitBorderRadius: size,
                MozBorderRadius: size,
                borderRadius: size,
                backgroundSize: "cover",
                display: "inline-block"
            } },
            React.createElement("img", { src: "assets/img/profile.png", height: size, width: size })));
    };
    return ProfilePicture;
}(React.Component));
exports.default = ProfilePicture;


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WinJS = __webpack_require__(28);
var React = __webpack_require__(16);
var ReactDOM = __webpack_require__(53);
//import * as ReactWinJS from 'react-winjs';
var ReactWinJS = __webpack_require__(52);
//import PeoplePage from './PeoplePage';
var PeoplePage = __webpack_require__(83);
var OtherPage = __webpack_require__(82);
//import * as Data from './FakeData'
//var Data = require('./FakeData.ts');
var Data = __webpack_require__(181);
var splitViewId = "rootSplitView";
var splitViewConfigs = {
    small: {
        closedDisplayMode: "none",
        openedDisplayMode: "overlay"
    },
    medium: {
        closedDisplayMode: "inline",
        openedDisplayMode: "overlay"
    },
    large: {
        closedDisplayMode: "inline",
        openedDisplayMode: "inline"
    }
};
function merge() {
    var k;
    var result = {};
    for (var i = 0, len = arguments.length; i < len; i++) {
        var obj = arguments[i];
        if (obj) {
            for (k in obj) {
                result[k] = obj[k];
            }
        }
    }
    return result;
}
function getMode() {
    return (window.innerWidth >= 1366 ? "large" :
        window.innerWidth >= 800 ? "medium" :
            "small");
}
var App = React.createClass({
    getSplitViewConfig: function () {
        return splitViewConfigs[this.state.mode];
    },
    handlePeopleChanged: function (newPeople) {
        this.setState({
            people: newPeople
        });
    },
    handleNavigation: function (newLocation) {
        this.setState({
            location: newLocation
        });
    },
    handleBack: function () {
        var location = this.state.location;
        location.pop();
        this.handleNavigation(location);
    },
    handleResize: function () {
        var prevMode = this.state.mode;
        var nextMode = getMode();
        if (prevMode !== nextMode) {
            this.setState({ mode: nextMode });
        }
    },
    handleCommandInvoked: function (newLocation) {
        this.setState({
            location: newLocation,
            paneOpened: this.getSplitViewConfig().openedDisplayMode === "overlay" ? false : this.state.paneOpened
        });
    },
    handleTogglePane: function () {
        this.setState({ paneOpened: !this.state.paneOpened });
    },
    handleAfterClose: function () {
        this.setState({ paneOpened: false });
    },
    getInitialState: function () {
        var mode = getMode();
        var groupKey = function (data) {
            return data.name[0].toUpperCase();
        };
        var groupData = function (data) {
            return { title: groupKey(data) };
        };
        var sorter = function (a, b) {
            if (a.name < b.name) {
                return -1;
            }
            else if (a.name > b.name) {
                return 1;
            }
            else {
                return 0;
            }
        };
        var data = new WinJS.Binding.List(Data.people)
            .createSorted(sorter)
            .createGrouped(groupKey, groupData);
        return {
            people: data,
            mode: mode,
            location: ["people"]
        };
    },
    componentWillMount: function () {
        window.addEventListener("resize", this.handleResize);
    },
    componentWillUnmount: function () {
        window.removeEventListener("resize", this.handleResize);
    },
    renderPeoplePage: function () {
        return (React.createElement(PeoplePage, { mode: this.state.mode, people: this.state.people, location: this.state.location, onNavigate: this.handleNavigation, onPeopleChanged: this.handlePeopleChanged }));
    },
    renderOtherPage: function () {
        return React.createElement(OtherPage, { location: this.state.location });
    },
    renderContent: function () {
        if (this.state.location.length === 0 || this.state.location[0] === "people") {
            return this.renderPeoplePage();
        }
        else {
            return this.renderOtherPage();
        }
    },
    // TODO: Fix Me!
    renderBackButton: function () {
        var canGoBack = this.state.location.length > 1;
        var shouldShowBackButton = canGoBack && this.state.mode === "small";
        return shouldShowBackButton ?
            React.createElement("button", { style: { display: "inline-block" }, className: "win-backbutton", onClick: this.handleBack }) :
            null;
    },
    render: function () {
        var paneComponent = (React.createElement("div", null,
            React.createElement(ReactWinJS.SplitView.Command, { label: "People", icon: "contact", onInvoked: this.handleCommandInvoked.bind(null, ["people"]) }),
            React.createElement(ReactWinJS.SplitView.Command, { label: "What's New", icon: "comment", onInvoked: this.handleCommandInvoked.bind(null, ["new"]) }),
            React.createElement(ReactWinJS.SplitView.Command
            /* TODO: same as the text? */
            , { 
                /* TODO: same as the text? */
                label: "Some other view.", icon: "people", onInvoked: this.handleCommandInvoked.bind(null, ["groups"]) }),
            React.createElement(ReactWinJS.SplitView.Command, { style: { position: "absolute", bottom: 0, width: "100%" }, label: "Settings", icon: "settings", onInvoked: this.handleCommandInvoked.bind(null, ["settings"]) })));
        var contentComponent = this.renderContent();
        return (React.createElement("div", { style: { height: "100%" } },
            React.createElement("div", { style: { height: 48, backgroundColor: "rgba(1, 121, 216, 0.3)" }, className: "win-ui-dark" },
                React.createElement(ReactWinJS.SplitViewPaneToggle, { "aria-controls": splitViewId, style: { display: 'inline-block' }, paneOpened: this.state.paneOpened, onInvoked: this.handleTogglePane }),
                this.renderBackButton(),
                React.createElement("h4", { className: "win-h4", style: { display: "inline-block", marginLeft: 5 } }, "fcuk")),
            React.createElement(ReactWinJS.SplitView, { id: splitViewId, style: { height: "calc(100% - 48px)" }, paneComponent: paneComponent, contentComponent: contentComponent, onAfterClose: this.handleAfterClose, paneOpened: this.state.paneOpened })));
    }
});
ReactDOM.render(React.createElement(App, null), document.getElementById("app"));


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(86);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

var isTextNode = __webpack_require__(96);

/*eslint-disable no-bitwise */

/**
 * Checks if a given DOM node contains or is another DOM node.
 */
function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

module.exports = containsNode;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var invariant = __webpack_require__(1);

/**
 * Convert array-like objects to arrays.
 *
 * This API assumes the caller knows the contents of the data type. For less
 * well defined inputs use createArrayFromMixed.
 *
 * @param {object|function|filelist} obj
 * @return {array}
 */
function toArray(obj) {
  var length = obj.length;

  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
  // in old versions of Safari).
  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;

  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;

  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;

  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;

  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
  // without method will throw during the slice call and skip straight to the
  // fallback.
  if (obj.hasOwnProperty) {
    try {
      return Array.prototype.slice.call(obj);
    } catch (e) {
      // IE < 9 does not support Array#slice on collections objects
    }
  }

  // Fall back to copying key by key. This assumes all keys have a value,
  // so will not preserve sparsely populated inputs.
  var ret = Array(length);
  for (var ii = 0; ii < length; ii++) {
    ret[ii] = obj[ii];
  }
  return ret;
}

/**
 * Perform a heuristic test to determine if an object is "array-like".
 *
 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
 *   Joshu replied: "Mu."
 *
 * This function determines if its argument has "array nature": it returns
 * true if the argument is an actual array, an `arguments' object, or an
 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
 *
 * It will return false for other array-like objects like Filelist.
 *
 * @param {*} obj
 * @return {boolean}
 */
function hasArrayNature(obj) {
  return (
    // not null/false
    !!obj && (
    // arrays are objects, NodeLists are functions in Safari
    typeof obj == 'object' || typeof obj == 'function') &&
    // quacks like an array
    'length' in obj &&
    // not window
    !('setInterval' in obj) &&
    // no DOM node should be considered an array-like
    // a 'select' element has 'length' and 'item' properties on IE8
    typeof obj.nodeType != 'number' && (
    // a real array
    Array.isArray(obj) ||
    // arguments
    'callee' in obj ||
    // HTMLCollection/NodeList
    'item' in obj)
  );
}

/**
 * Ensure that the argument is an array by wrapping it in an array if it is not.
 * Creates a copy of the argument if it is already an array.
 *
 * This is mostly useful idiomatically:
 *
 *   var createArrayFromMixed = require('createArrayFromMixed');
 *
 *   function takesOneOrMoreThings(things) {
 *     things = createArrayFromMixed(things);
 *     ...
 *   }
 *
 * This allows you to treat `things' as an array, but accept scalars in the API.
 *
 * If you need to convert an array-like object, like `arguments`, into an array
 * use toArray instead.
 *
 * @param {*} obj
 * @return {array}
 */
function createArrayFromMixed(obj) {
  if (!hasArrayNature(obj)) {
    return [obj];
  } else if (Array.isArray(obj)) {
    return obj.slice();
  } else {
    return toArray(obj);
  }
}

module.exports = createArrayFromMixed;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/*eslint-disable fb-www/unsafe-html*/

var ExecutionEnvironment = __webpack_require__(6);

var createArrayFromMixed = __webpack_require__(89);
var getMarkupWrap = __webpack_require__(91);
var invariant = __webpack_require__(1);

/**
 * Dummy container used to render all markup.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Pattern used by `getNodeName`.
 */
var nodeNamePattern = /^\s*<(\w+)/;

/**
 * Extracts the `nodeName` of the first element in a string of markup.
 *
 * @param {string} markup String of markup.
 * @return {?string} Node name of the supplied markup.
 */
function getNodeName(markup) {
  var nodeNameMatch = markup.match(nodeNamePattern);
  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
}

/**
 * Creates an array containing the nodes rendered from the supplied markup. The
 * optionally supplied `handleScript` function will be invoked once for each
 * <script> element that is rendered. If no `handleScript` function is supplied,
 * an exception is thrown if any <script> elements are rendered.
 *
 * @param {string} markup A string of valid HTML markup.
 * @param {?function} handleScript Invoked once for each rendered <script>.
 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
 */
function createNodesFromMarkup(markup, handleScript) {
  var node = dummyNode;
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
  var nodeName = getNodeName(markup);

  var wrap = nodeName && getMarkupWrap(nodeName);
  if (wrap) {
    node.innerHTML = wrap[1] + markup + wrap[2];

    var wrapDepth = wrap[0];
    while (wrapDepth--) {
      node = node.lastChild;
    }
  } else {
    node.innerHTML = markup;
  }

  var scripts = node.getElementsByTagName('script');
  if (scripts.length) {
    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
    createArrayFromMixed(scripts).forEach(handleScript);
  }

  var nodes = Array.from(node.childNodes);
  while (node.lastChild) {
    node.removeChild(node.lastChild);
  }
  return nodes;
}

module.exports = createNodesFromMarkup;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/*eslint-disable fb-www/unsafe-html */

var ExecutionEnvironment = __webpack_require__(6);

var invariant = __webpack_require__(1);

/**
 * Dummy container used to detect which wraps are necessary.
 */
var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

/**
 * Some browsers cannot use `innerHTML` to render certain elements standalone,
 * so we wrap them, render the wrapped nodes, then extract the desired node.
 *
 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
 */

var shouldWrap = {};

var selectWrap = [1, '<select multiple="true">', '</select>'];
var tableWrap = [1, '<table>', '</table>'];
var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];

var markupWrap = {
  '*': [1, '?<div>', '</div>'],

  'area': [1, '<map>', '</map>'],
  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  'legend': [1, '<fieldset>', '</fieldset>'],
  'param': [1, '<object>', '</object>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],

  'optgroup': selectWrap,
  'option': selectWrap,

  'caption': tableWrap,
  'colgroup': tableWrap,
  'tbody': tableWrap,
  'tfoot': tableWrap,
  'thead': tableWrap,

  'td': trWrap,
  'th': trWrap
};

// Initialize the SVG elements since we know they'll always need to be wrapped
// consistently. If they are created inside a <div> they will be initialized in
// the wrong namespace (and will not display).
var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
svgElements.forEach(function (nodeName) {
  markupWrap[nodeName] = svgWrap;
  shouldWrap[nodeName] = true;
});

/**
 * Gets the markup wrap configuration for the supplied `nodeName`.
 *
 * NOTE: This lazily detects which wraps are necessary for the current browser.
 *
 * @param {string} nodeName Lowercase `nodeName`.
 * @return {?array} Markup wrap configuration, if applicable.
 */
function getMarkupWrap(nodeName) {
  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
  if (!markupWrap.hasOwnProperty(nodeName)) {
    nodeName = '*';
  }
  if (!shouldWrap.hasOwnProperty(nodeName)) {
    if (nodeName === '*') {
      dummyNode.innerHTML = '<link />';
    } else {
      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
    }
    shouldWrap[nodeName] = !dummyNode.firstChild;
  }
  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
}

module.exports = getMarkupWrap;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



/**
 * Gets the scroll position of the supplied element or window.
 *
 * The return values are unbounded, unlike `getScrollPosition`. This means they
 * may be negative or exceed the element boundaries (which is possible using
 * inertial scrolling).
 *
 * @param {DOMWindow|DOMElement} scrollable
 * @return {object} Map with `x` and `y` keys.
 */

function getUnboundedScrollPosition(scrollable) {
  if (scrollable.Window && scrollable instanceof scrollable.Window) {
    return {
      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
    };
  }
  return {
    x: scrollable.scrollLeft,
    y: scrollable.scrollTop
  };
}

module.exports = getUnboundedScrollPosition;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(93);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM node.
 */
function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var isNode = __webpack_require__(95);

/**
 * @param {*} object The object to check.
 * @return {boolean} Whether or not the object is a DOM text node.
 */
function isTextNode(object) {
  return isNode(object) && object.nodeType == 3;
}

module.exports = isTextNode;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var ExecutionEnvironment = __webpack_require__(6);

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var performance = __webpack_require__(98);

var performanceNow;

/**
 * Detect if we can use `window.performance.now()` and gracefully fallback to
 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
 * because of Facebook's testing infrastructure.
 */
if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;

/***/ }),
/* 100 */
/***/ (function(module, exports) {

module.exports = {
	"name": "fcuk",
	"icon": "SquadSymbols_11",
	"description": "https%3a%2f%2fswc-fcuk.github.io%2f",
	"membershipRestrictions": {
		"openEnrollment": true,
		"maxSize": 30,
		"minScoreAtEnrollment": 0,
		"faction": "empire"
	},
	"members": [
		{
			"name": "2tee2",
			"isOwner": true,
			"isOfficer": true,
			"joinDate": 1477748463,
			"troopsDonated": 5336,
			"troopsReceived": 5538,
			"rank": 1,
			"hqLevel": 8,
			"reputationInvested": 263,
			"xp": 1631,
			"score": 5712,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 1410,
			"defensesWon": 154,
			"planet": "planet6",
			"lastLoginTime": 1490545544,
			"lastUpdated": 1490547149,
			"hasPlanetaryCommand": true,
			"playerId": "779a335e-7216-11e6-8b58-06033c004f77"
		},
		{
			"name": "Jaqueline",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1487765772,
			"troopsDonated": 581,
			"troopsReceived": 240,
			"rank": 2,
			"hqLevel": 5,
			"reputationInvested": 57,
			"xp": 749,
			"score": 1729,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 251,
			"defensesWon": 121,
			"planet": "planet1",
			"lastLoginTime": 1490545365,
			"lastUpdated": 1490546365,
			"hasPlanetaryCommand": false,
			"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79"
		},
		{
			"name": "Ramsses",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1484181522,
			"troopsDonated": 543,
			"troopsReceived": 252,
			"rank": 3,
			"hqLevel": 7,
			"reputationInvested": 95,
			"xp": 1247,
			"score": 801,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 234,
			"defensesWon": 28,
			"planet": "planet1",
			"lastLoginTime": 1490551905,
			"lastUpdated": 1490551980,
			"hasPlanetaryCommand": true,
			"playerId": "ccfd90b3-d858-11e6-8705-061c98004f78"
		},
		{
			"name": "BkeII",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1484179531,
			"troopsDonated": 350,
			"troopsReceived": 366,
			"rank": 4,
			"hqLevel": 5,
			"reputationInvested": 48,
			"xp": 876,
			"score": 799,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 259,
			"defensesWon": 21,
			"planet": "planet1",
			"lastLoginTime": 1490041346,
			"lastUpdated": 1490503367,
			"hasPlanetaryCommand": false,
			"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb"
		},
		{
			"name": "ннн",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1488735598,
			"troopsDonated": 247,
			"troopsReceived": 347,
			"rank": 5,
			"hqLevel": 5,
			"reputationInvested": 21,
			"xp": 833,
			"score": 770,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 198,
			"defensesWon": 5,
			"planet": "planet1",
			"lastLoginTime": 1490553156,
			"lastUpdated": 1490553162,
			"hasPlanetaryCommand": false,
			"playerId": "7db8fdb4-01c5-11e7-9191-06dc8c004fbd"
		},
		{
			"name": "scar78",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1481302386,
			"troopsDonated": 1109,
			"troopsReceived": 1401,
			"rank": 6,
			"hqLevel": 6,
			"reputationInvested": 171,
			"xp": 1252,
			"score": 456,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 264,
			"defensesWon": 36,
			"planet": "planet3",
			"lastLoginTime": 1490534888,
			"lastUpdated": 1490534890,
			"hasPlanetaryCommand": true,
			"playerId": "0476b083-bbc4-11e6-8233-061c98004f78"
		},
		{
			"name": "lordroger",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1489027536,
			"troopsDonated": 8,
			"troopsReceived": 14,
			"rank": 7,
			"hqLevel": 4,
			"reputationInvested": 0,
			"xp": 575,
			"score": 446,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 91,
			"defensesWon": 4,
			"planet": "planet1",
			"lastLoginTime": 1490469007,
			"lastUpdated": 1490525207,
			"hasPlanetaryCommand": false,
			"playerId": "c0da9a0c-0353-11e7-850d-06cb44004f79"
		},
		{
			"name": "ROMAN",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490177010,
			"troopsDonated": 0,
			"troopsReceived": 0,
			"rank": 8,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 376,
			"score": 340,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 47,
			"defensesWon": 2,
			"planet": "planet1",
			"lastLoginTime": 1490176277,
			"lastUpdated": 1490540460,
			"hasPlanetaryCommand": false,
			"playerId": "4c92ebab-088c-11e7-9fcf-06033c004f77"
		},
		{
			"name": "Dragan",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1488810156,
			"troopsDonated": 43,
			"troopsReceived": 39,
			"rank": 9,
			"hqLevel": 3,
			"reputationInvested": 12,
			"xp": 216,
			"score": 267,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 34,
			"defensesWon": 1,
			"planet": "planet1",
			"lastLoginTime": 1490552297,
			"lastUpdated": 1490552300,
			"hasPlanetaryCommand": false,
			"playerId": "089eb96b-026d-11e7-953a-06033c004f77"
		},
		{
			"name": "whitebuffalo",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490172111,
			"troopsDonated": 50,
			"troopsReceived": 39,
			"rank": 10,
			"hqLevel": 4,
			"reputationInvested": 2,
			"xp": 571,
			"score": 256,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 70,
			"defensesWon": 3,
			"planet": "planet1",
			"lastLoginTime": 1490504691,
			"lastUpdated": 1490535435,
			"hasPlanetaryCommand": false,
			"playerId": "ba27b37e-0eb6-11e7-9236-063864004f75"
		},
		{
			"name": "STALKER",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490181004,
			"troopsDonated": 28,
			"troopsReceived": 10,
			"rank": 11,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 387,
			"score": 179,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 20,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490546208,
			"lastUpdated": 1490548080,
			"hasPlanetaryCommand": false,
			"playerId": "9254dd74-0eee-11e7-9902-06cb44004f79"
		},
		{
			"name": "123456789",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1489881925,
			"troopsDonated": 27,
			"troopsReceived": 22,
			"rank": 12,
			"hqLevel": 3,
			"reputationInvested": 1,
			"xp": 347,
			"score": 172,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 15,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490496932,
			"lastUpdated": 1490547429,
			"hasPlanetaryCommand": false,
			"playerId": "51f2aa75-0c34-11e7-b7db-06a77e004fbb"
		},
		{
			"name": "JuanMa",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1487894432,
			"troopsDonated": 110,
			"troopsReceived": 223,
			"rank": 13,
			"hqLevel": 5,
			"reputationInvested": 29,
			"xp": 712,
			"score": 170,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 118,
			"defensesWon": 2,
			"planet": "planet1",
			"lastLoginTime": 1489886686,
			"lastUpdated": 1490504948,
			"hasPlanetaryCommand": false,
			"playerId": "4b379b97-f56b-11e6-91d6-06e6ee004fbc"
		},
		{
			"name": "Quasar",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1481208966,
			"troopsDonated": 1084,
			"troopsReceived": 1368,
			"rank": 14,
			"hqLevel": 7,
			"reputationInvested": 154,
			"xp": 1490,
			"score": 157,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 4,
			"defensesWon": 69,
			"planet": "planet1",
			"lastLoginTime": 1490553405,
			"lastUpdated": 1490553428,
			"hasPlanetaryCommand": true,
			"playerId": "3076de44-a12f-11e6-85c9-060a32004f8c"
		},
		{
			"name": "bbbb",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490170874,
			"troopsDonated": 8,
			"troopsReceived": 2,
			"rank": 15,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 432,
			"score": 151,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 13,
			"defensesWon": 3,
			"planet": "planet1",
			"lastLoginTime": 1490547411,
			"lastUpdated": 1490549626,
			"hasPlanetaryCommand": false,
			"playerId": "55b1e6ee-0d4b-11e7-999d-069da4004f8b"
		},
		{
			"name": "manoel",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490181076,
			"troopsDonated": 0,
			"troopsReceived": 5,
			"rank": 16,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 181,
			"score": 137,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 13,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490225237,
			"lastUpdated": 1490225755,
			"hasPlanetaryCommand": false,
			"playerId": "d04907da-9a5a-11e6-81bb-06e6ee004fbc"
		},
		{
			"name": "max",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490547501,
			"troopsDonated": 0,
			"troopsReceived": 0,
			"rank": 17,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 211,
			"score": 129,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 5,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490551698,
			"lastUpdated": 1490552138,
			"hasPlanetaryCommand": false,
			"playerId": "6a2e346b-123c-11e7-ba69-06c66a004f76"
		},
		{
			"name": "bb8 37",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490547195,
			"troopsDonated": 2,
			"troopsReceived": 8,
			"rank": 18,
			"hqLevel": 2,
			"reputationInvested": 0,
			"xp": 164,
			"score": 128,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 6,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490553092,
			"lastUpdated": 1490553226,
			"hasPlanetaryCommand": false,
			"playerId": "25f1c9aa-0ffb-11e7-bad8-061c98004f78"
		},
		{
			"name": "NickyP",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490548182,
			"troopsDonated": 4,
			"troopsReceived": 0,
			"rank": 19,
			"hqLevel": 2,
			"reputationInvested": 0,
			"xp": 201,
			"score": 118,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 3,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490553364,
			"lastUpdated": 1490553366,
			"hasPlanetaryCommand": false,
			"playerId": "7f3328d9-1242-11e7-85e1-06dc8c004fbd"
		},
		{
			"name": "rose",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490180248,
			"troopsDonated": 12,
			"troopsReceived": 23,
			"rank": 20,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 432,
			"score": 108,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 10,
			"defensesWon": 1,
			"planet": "planet1",
			"lastLoginTime": 1490516280,
			"lastUpdated": 1490543061,
			"hasPlanetaryCommand": false,
			"playerId": "cbe8ed43-05c7-11e7-ba0b-060a32004f8c"
		},
		{
			"name": "david",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490180053,
			"troopsDonated": 0,
			"troopsReceived": 4,
			"rank": 21,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 305,
			"score": 107,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 1,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490424423,
			"lastUpdated": 1490424427,
			"hasPlanetaryCommand": false,
			"playerId": "2f2feb37-07d4-11e7-8d08-061c98004f78"
		},
		{
			"name": "wftx",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490547507,
			"troopsDonated": 0,
			"troopsReceived": 0,
			"rank": 22,
			"hqLevel": 2,
			"reputationInvested": 0,
			"xp": 123,
			"score": 100,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": null,
			"attacksWon": 0,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490546830,
			"lastUpdated": 1490547509,
			"hasPlanetaryCommand": false,
			"playerId": "dac23a1a-1243-11e7-bb9b-06033c004f77"
		},
		{
			"name": "Adi",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490171564,
			"troopsDonated": 0,
			"troopsReceived": 0,
			"rank": 23,
			"hqLevel": 3,
			"reputationInvested": 0,
			"xp": 201,
			"score": 91,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 2,
			"defensesWon": 0,
			"planet": "planet1",
			"lastLoginTime": 1490261952,
			"lastUpdated": 1490439583,
			"hasPlanetaryCommand": false,
			"playerId": "06c434a2-0e4a-11e7-999d-069da4004f8b"
		},
		{
			"name": "yuuto",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1490252443,
			"troopsDonated": 9,
			"troopsReceived": 12,
			"rank": 24,
			"hqLevel": 8,
			"reputationInvested": 0,
			"xp": 1654,
			"score": 72,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 900,
			"defensesWon": 127,
			"planet": "planet1",
			"lastLoginTime": 1490521556,
			"lastUpdated": 1490523789,
			"hasPlanetaryCommand": true,
			"playerId": "53efb8da-4105-11e6-ac60-063864004f75"
		},
		{
			"name": "Desigur",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1488213753,
			"troopsDonated": 65,
			"troopsReceived": 112,
			"rank": 25,
			"hqLevel": 5,
			"reputationInvested": 14,
			"xp": 823,
			"score": 70,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 30,
			"defensesWon": 9,
			"planet": "planet1",
			"lastLoginTime": 1490528393,
			"lastUpdated": 1490528400,
			"hasPlanetaryCommand": true,
			"playerId": "7cec7cfc-fc08-11e6-8147-063864004f75"
		},
		{
			"name": "Apollo Creed",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1480872669,
			"troopsDonated": 323,
			"troopsReceived": 506,
			"rank": 26,
			"hqLevel": 5,
			"reputationInvested": 46,
			"xp": 928,
			"score": 66,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 157,
			"defensesWon": 48,
			"planet": "planet3",
			"lastLoginTime": 1488750159,
			"lastUpdated": 1490528089,
			"hasPlanetaryCommand": true,
			"playerId": "02adde88-b3cf-11e6-af61-06e6ee004fbc"
		},
		{
			"name": "Darth Goof",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1481302375,
			"troopsDonated": 373,
			"troopsReceived": 589,
			"rank": 27,
			"hqLevel": 5,
			"reputationInvested": 101,
			"xp": 884,
			"score": 44,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 95,
			"defensesWon": 35,
			"planet": "planet1",
			"lastLoginTime": 1488409328,
			"lastUpdated": 1490535446,
			"hasPlanetaryCommand": false,
			"playerId": "6b56da58-bcc2-11e6-8e5c-06cb44004f79"
		},
		{
			"name": "Snowy",
			"isOwner": false,
			"isOfficer": true,
			"joinDate": 1486204110,
			"troopsDonated": 708,
			"troopsReceived": 306,
			"rank": 28,
			"hqLevel": 6,
			"reputationInvested": 81,
			"xp": 1078,
			"score": 1,
			"warParty": 0,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 35,
			"defensesWon": 14,
			"planet": "planet1",
			"lastLoginTime": 1489362185,
			"lastUpdated": 1490499218,
			"hasPlanetaryCommand": false,
			"playerId": "a11bec70-ea6f-11e6-95f2-060a32004f8c"
		},
		{
			"name": "Lófütyi",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1486489859,
			"troopsDonated": 229,
			"troopsReceived": 422,
			"rank": 28,
			"hqLevel": 6,
			"reputationInvested": 72,
			"xp": 1160,
			"score": 1,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 53,
			"defensesWon": 11,
			"planet": "planet1",
			"lastLoginTime": 1489860531,
			"lastUpdated": 1490543345,
			"hasPlanetaryCommand": true,
			"playerId": "1ebf2fe5-d76a-11e6-8f8c-06c66a004f76"
		},
		{
			"name": "Darth Enego",
			"isOwner": false,
			"isOfficer": false,
			"joinDate": 1487007906,
			"troopsDonated": 185,
			"troopsReceived": 233,
			"rank": 28,
			"hqLevel": 6,
			"reputationInvested": 63,
			"xp": 1059,
			"score": 1,
			"warParty": 1,
			"tournamentRating": 0,
			"tournamentScores": "@{planet23=0; planet8=0}",
			"attacksWon": 188,
			"defensesWon": 4,
			"planet": "planet1",
			"lastLoginTime": 1490302250,
			"lastUpdated": 1490517263,
			"hasPlanetaryCommand": true,
			"playerId": "72ed2610-da97-11e6-b64c-06a77e004fbb"
		}
	],
	"created": 1477748463,
	"highestRankAchieved": 1116,
	"activeMemberCount": 25,
	"squadWarReadyCount": 27,
	"currentWarId": "0395397b-10dc-11e7-84ee-06a77e004fbb",
	"warSignUpTime": null,
	"warRating": null,
	"isSameFactionWarAllowed": true,
	"score": 13578,
	"rank": 1116,
	"id": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
	"memberCount": 30,
	"warHistory": [
		{
			"warId": "4f47daba-bb22-11e6-aca8-06e6ee004fbc",
			"endDate": 1481139469,
			"score": 15,
			"opponentScore": 0,
			"opponentGuildId": "83e84e84-103c-11e5-ab56-06a77e004fbb",
			"opponentName": "rebelsalience",
			"opponentIcon": "SquadSymbols_15"
		},
		{
			"warId": "2eb528fe-bd26-11e6-99eb-06a77e004fbb",
			"endDate": 1481361037,
			"score": 14,
			"opponentScore": 14,
			"opponentGuildId": "50b8bd5f-b0cc-11e6-8402-069da4004f8b",
			"opponentName": "Phoenix-Legion",
			"opponentIcon": "SquadSymbols_05"
		},
		{
			"warId": "8f0478f4-bff0-11e6-aa77-063864004f75",
			"endDate": 1481667856,
			"score": 15,
			"opponentScore": 12,
			"opponentGuildId": "8ac62757-a126-11e6-bf37-063864004f75",
			"opponentName": "X.Streme-Elite",
			"opponentIcon": "SquadSymbols_01"
		},
		{
			"warId": "2e451145-c2e0-11e6-9ed2-06cb44004f79",
			"endDate": 1481990674,
			"score": 15,
			"opponentScore": 5,
			"opponentGuildId": "e9e9a0ca-b650-11e6-8f5b-06dc8c004fbd",
			"opponentName": "RebelsEnforcers",
			"opponentIcon": "SquadSymbols_09"
		},
		{
			"warId": "a01d751c-c807-11e6-b400-060a32004f8c",
			"endDate": 1482557372,
			"score": 15,
			"opponentScore": 12,
			"opponentGuildId": "c9e057f7-a3e1-11e5-9c9b-06dc8c004fbd",
			"opponentName": "RUSSIANBEAR",
			"opponentIcon": "SquadSymbols_15"
		},
		{
			"warId": "bc423047-dcbe-11e6-8705-061c98004f78",
			"endDate": 1484835040,
			"score": 37,
			"opponentScore": 30,
			"opponentGuildId": "4114ffe0-a382-11e6-a225-069da4004f8b",
			"opponentName": "italianstellar",
			"opponentIcon": "SquadSymbols_16"
		},
		{
			"warId": "18dd6e62-df63-11e6-a0d9-061c98004f78",
			"endDate": 1485125535,
			"score": 45,
			"opponentScore": 2,
			"opponentGuildId": "90baf836-f36b-11e4-96f7-06dc8c004fbd",
			"opponentName": "chewbacca",
			"opponentIcon": "SquadSymbols_06"
		},
		{
			"warId": "f4e4d190-e890-11e6-9b37-06cb44004f79",
			"endDate": 1486134803,
			"score": 43,
			"opponentScore": 21,
			"opponentGuildId": "37a8a38d-ba10-11e5-8219-063864004f75",
			"opponentName": "ITALIANIS",
			"opponentIcon": "SquadSymbols_05"
		},
		{
			"warId": "b09a245e-eae9-11e6-8d5b-063864004f75",
			"endDate": 1486392805,
			"score": 45,
			"opponentScore": 15,
			"opponentGuildId": "20bad61e-b65c-11e5-99f7-06cb44004f79",
			"opponentName": "the.last.jedi",
			"opponentIcon": "SquadSymbols_15"
		},
		{
			"warId": "fd4c036f-f2ad-11e6-a79f-063864004f75",
			"endDate": 1487246773,
			"score": 44,
			"opponentScore": 11,
			"opponentGuildId": "a54c476b-466c-11e5-adae-06e6ee004fbc",
			"opponentName": "India",
			"opponentIcon": "SquadSymbols_02"
		},
		{
			"warId": "45fd456a-f56f-11e6-89b5-06cb44004f79",
			"endDate": 1487556207,
			"score": 45,
			"opponentScore": 26,
			"opponentGuildId": "939e4c19-6305-11e6-9059-06c66a004f76",
			"opponentName": "DroidekaSchinder",
			"opponentIcon": "SquadSymbols_15"
		},
		{
			"warId": "e3b52b59-f936-11e6-922c-06dc8c004fbd",
			"endDate": 1487965298,
			"score": 44,
			"opponentScore": 24,
			"opponentGuildId": "28d852b8-4aaa-11e6-adb8-06dc8c004fbd",
			"opponentName": "RebelsUnionS",
			"opponentIcon": "SquadSymbols_01"
		},
		{
			"warId": "55d464a8-febf-11e6-b985-06a77e004fbb",
			"endDate": 1488573640,
			"score": 43,
			"opponentScore": 37,
			"opponentGuildId": "bd0823b8-b643-11e6-8233-061c98004f78",
			"opponentName": "ThaiSmile",
			"opponentIcon": "SquadSymbols_02"
		},
		{
			"warId": "c9b13fcc-02a7-11e7-822d-06c66a004f76",
			"endDate": 1489003329,
			"score": 45,
			"opponentScore": 10,
			"opponentGuildId": "28d852b8-4aaa-11e6-adb8-06dc8c004fbd",
			"opponentName": "RebelsUnionS",
			"opponentIcon": "SquadSymbols_01"
		},
		{
			"warId": "f10eb347-0cf6-11e7-b7db-06a77e004fbb",
			"endDate": 1490136836,
			"score": 44,
			"opponentScore": 19,
			"opponentGuildId": "4de67ac0-4807-11e6-9377-060a32004f8c",
			"opponentName": "portugaldea%c3%a7o",
			"opponentIcon": "SquadSymbols_05"
		}
	],
	"level": 28,
	"totalRepInvested": 1786,
	"perks": {
		"available": {
			"CBar_CFac": "perk_CBar_CFac6",
			"DntAmt_DntT": "perk_DntAmt_DntT5",
			"GCon_DntT": "perk_GCon_DntT5",
			"GCon_TDrd": "perk_GCon_TDrd4",
			"CHro_GAll": "perk_CHro_GAll4",
			"GCrd_GCon": "perk_GCrd_GCon4",
			"CCan_TDrd": "perk_CCan_TDrd5",
			"TDrd": "perk_TDrd4",
			"CBar_CCan": "perk_CBar_CCan6",
			"CFac_CCan": "perk_CFac_CCan4",
			"GAll_GCon": "perk_GAll_GCon4",
			"GCrd_DntT": "perk_GCrd_DntT2"
		},
		"inProgress": {
			"perk_CFac_CCan5": 5,
			"perk_GCon_TDrd5": 31
		}
	},
	"lastPerkNotif": 1490243436
};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = {
  Properties: {
    // Global States and Properties
    'aria-current': 0, // state
    'aria-details': 0,
    'aria-disabled': 0, // state
    'aria-hidden': 0, // state
    'aria-invalid': 0, // state
    'aria-keyshortcuts': 0,
    'aria-label': 0,
    'aria-roledescription': 0,
    // Widget Attributes
    'aria-autocomplete': 0,
    'aria-checked': 0,
    'aria-expanded': 0,
    'aria-haspopup': 0,
    'aria-level': 0,
    'aria-modal': 0,
    'aria-multiline': 0,
    'aria-multiselectable': 0,
    'aria-orientation': 0,
    'aria-placeholder': 0,
    'aria-pressed': 0,
    'aria-readonly': 0,
    'aria-required': 0,
    'aria-selected': 0,
    'aria-sort': 0,
    'aria-valuemax': 0,
    'aria-valuemin': 0,
    'aria-valuenow': 0,
    'aria-valuetext': 0,
    // Live Region Attributes
    'aria-atomic': 0,
    'aria-busy': 0,
    'aria-live': 0,
    'aria-relevant': 0,
    // Drag-and-Drop Attributes
    'aria-dropeffect': 0,
    'aria-grabbed': 0,
    // Relationship Attributes
    'aria-activedescendant': 0,
    'aria-colcount': 0,
    'aria-colindex': 0,
    'aria-colspan': 0,
    'aria-controls': 0,
    'aria-describedby': 0,
    'aria-errormessage': 0,
    'aria-flowto': 0,
    'aria-labelledby': 0,
    'aria-owns': 0,
    'aria-posinset': 0,
    'aria-rowcount': 0,
    'aria-rowindex': 0,
    'aria-rowspan': 0,
    'aria-setsize': 0
  },
  DOMAttributeNames: {},
  DOMPropertyNames: {}
};

module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDOMComponentTree = __webpack_require__(5);

var focusNode = __webpack_require__(55);

var AutoFocusUtils = {
  focusDOMComponent: function () {
    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
  }
};

module.exports = AutoFocusUtils;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(21);
var ExecutionEnvironment = __webpack_require__(6);
var FallbackCompositionState = __webpack_require__(109);
var SyntheticCompositionEvent = __webpack_require__(150);
var SyntheticInputEvent = __webpack_require__(153);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
var START_KEYCODE = 229;

var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;

var documentMode = null;
if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
}

// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();

// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);

/**
 * Opera <= 12 includes TextEvent in window, but does not fire
 * text input events. Rely on keypress instead.
 */
function isPresto() {
  var opera = window.opera;
  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
}

var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

// Events and their corresponding property names.
var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
  }
};

// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress = false;

/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */
function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}

/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */
function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case 'topCompositionStart':
      return eventTypes.compositionStart;
    case 'topCompositionEnd':
      return eventTypes.compositionEnd;
    case 'topCompositionUpdate':
      return eventTypes.compositionUpdate;
  }
}

/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
}

/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */
function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topKeyUp':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case 'topKeyDown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;
    case 'topKeyPress':
    case 'topMouseDown':
    case 'topBlur':
      // Events are not possible without cancelling IME.
      return true;
    default:
      return false;
  }
}

/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */
function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;
  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }
  return null;
}

// Track the current IME composition fallback object, if any.
var currentComposition = null;

/**
 * @return {?object} A SyntheticCompositionEvent.
 */
function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!currentComposition) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!currentComposition && eventType === eventTypes.compositionStart) {
      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (currentComposition) {
        fallbackData = currentComposition.getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);
    if (customData !== null) {
      event.data = customData;
    }
  }

  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */
function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case 'topCompositionEnd':
      return getDataFromCustomEvent(nativeEvent);
    case 'topKeyPress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;
      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'topTextInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data;

      // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to blacklist it.
      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}

/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {string} topLevelType Record from `EventConstants`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */
function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (currentComposition) {
    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = currentComposition.getData();
      FallbackCompositionState.release(currentComposition);
      currentComposition = null;
      return chars;
    }
    return null;
  }

  switch (topLevelType) {
    case 'topPaste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;
    case 'topKeyPress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
        return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case 'topCompositionEnd':
      return useFallbackCompositionData ? null : nativeEvent.data;
    default:
      return null;
  }
}

/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */
function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  }

  // If no characters are being inserted, no BeforeInput event should
  // be fired.
  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);

  event.data = chars;
  EventPropagators.accumulateTwoPhaseDispatches(event);
  return event;
}

/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */
var BeforeInputEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
  }
};

module.exports = BeforeInputEventPlugin;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(57);
var ExecutionEnvironment = __webpack_require__(6);
var ReactInstrumentation = __webpack_require__(8);

var camelizeStyleName = __webpack_require__(87);
var dangerousStyleValue = __webpack_require__(160);
var hyphenateStyleName = __webpack_require__(94);
var memoizeStringOnly = __webpack_require__(97);
var warning = __webpack_require__(2);

var processStyleName = memoizeStringOnly(function (styleName) {
  return hyphenateStyleName(styleName);
});

var hasShorthandPropertyBug = false;
var styleFloatAccessor = 'cssFloat';
if (ExecutionEnvironment.canUseDOM) {
  var tempStyle = document.createElement('div').style;
  try {
    // IE8 throws "Invalid argument." if resetting shorthand style properties.
    tempStyle.font = '';
  } catch (e) {
    hasShorthandPropertyBug = true;
  }
  // IE8 only supports accessing cssFloat (standard) as styleFloat
  if (document.documentElement.style.cssFloat === undefined) {
    styleFloatAccessor = 'styleFloat';
  }
}

if (process.env.NODE_ENV !== 'production') {
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

  // style values shouldn't contain a semicolon
  var badStyleValueWithSemicolonPattern = /;\s*$/;

  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;

  var warnHyphenatedStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
  };

  var warnBadVendoredStyleName = function (name, owner) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
  };

  var warnStyleValueWithSemicolon = function (name, value, owner) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;
    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
  };

  var warnStyleValueIsNaN = function (name, value, owner) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;
    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
  };

  var checkRenderMessage = function (owner) {
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' Check the render method of `' + name + '`.';
      }
    }
    return '';
  };

  /**
   * @param {string} name
   * @param {*} value
   * @param {ReactDOMComponent} component
   */
  var warnValidStyle = function (name, value, component) {
    var owner;
    if (component) {
      owner = component._currentElement._owner;
    }
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name, owner);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name, owner);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value, owner);
    }

    if (typeof value === 'number' && isNaN(value)) {
      warnStyleValueIsNaN(name, value, owner);
    }
  };
}

/**
 * Operations for dealing with CSS properties.
 */
var CSSPropertyOperations = {

  /**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */
  createMarkupForStyles: function (styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      var styleValue = styles[styleName];
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styleValue, component);
      }
      if (styleValue != null) {
        serialized += processStyleName(styleName) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, component) + ';';
      }
    }
    return serialized || null;
  },

  /**
   * Sets the value for multiple styles on a node.  If a value is specified as
   * '' (empty string), the corresponding style property will be unset.
   *
   * @param {DOMElement} node
   * @param {object} styles
   * @param {ReactDOMComponent} component
   */
  setValueForStyles: function (node, styles, component) {
    if (process.env.NODE_ENV !== 'production') {
      ReactInstrumentation.debugTool.onHostOperation({
        instanceID: component._debugID,
        type: 'update styles',
        payload: styles
      });
    }

    var style = node.style;
    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (process.env.NODE_ENV !== 'production') {
        warnValidStyle(styleName, styles[styleName], component);
      }
      var styleValue = dangerousStyleValue(styleName, styles[styleName], component);
      if (styleName === 'float' || styleName === 'cssFloat') {
        styleName = styleFloatAccessor;
      }
      if (styleValue) {
        style[styleName] = styleValue;
      } else {
        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
        if (expansion) {
          // Shorthand property that IE8 won't like unsetting, so unset each
          // component to placate it
          for (var individualStyleName in expansion) {
            style[individualStyleName] = '';
          }
        } else {
          style[styleName] = '';
        }
      }
    }
  }

};

module.exports = CSSPropertyOperations;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(20);
var EventPropagators = __webpack_require__(21);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);
var SyntheticEvent = __webpack_require__(11);

var getEventTarget = __webpack_require__(43);
var isEventSupported = __webpack_require__(44);
var isTextInputElement = __webpack_require__(74);

var eventTypes = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
  }
};

/**
 * For IE shims
 */
var activeElement = null;
var activeElementInst = null;
var activeElementValue = null;
var activeElementValueProp = null;

/**
 * SECTION: handle `change` event
 */
function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

var doesChangeEventBubble = false;
if (ExecutionEnvironment.canUseDOM) {
  // See `handleChange` comment below
  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
  EventPropagators.accumulateTwoPhaseDispatches(event);

  // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.
  ReactUpdates.batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  EventPluginHub.enqueueEvents(event);
  EventPluginHub.processEventQueue(false);
}

function startWatchingForChangeEventIE8(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
}

function stopWatchingForChangeEventIE8() {
  if (!activeElement) {
    return;
  }
  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
  activeElement = null;
  activeElementInst = null;
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === 'topChange') {
    return targetInst;
  }
}
function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForChangeEventIE8();
    startWatchingForChangeEventIE8(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForChangeEventIE8();
  }
}

/**
 * SECTION: handle `input` event
 */
var isInputEventSupported = false;
if (ExecutionEnvironment.canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  // IE10+ fire input events to often, such when a placeholder
  // changes or when an input with a placeholder is focused.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 11);
}

/**
 * (For IE <=11) Replacement getter/setter for the `value` property that gets
 * set on the active element.
 */
var newValueProp = {
  get: function () {
    return activeElementValueProp.get.call(this);
  },
  set: function (val) {
    // Cast to a string so we can do equality checks.
    activeElementValue = '' + val;
    activeElementValueProp.set.call(this, val);
  }
};

/**
 * (For IE <=11) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */
function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElementValue = target.value;
  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');

  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
  // on DOM elements
  Object.defineProperty(activeElement, 'value', newValueProp);
  if (activeElement.attachEvent) {
    activeElement.attachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.addEventListener('propertychange', handlePropertyChange, false);
  }
}

/**
 * (For IE <=11) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */
function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  // delete restores the original property definition
  delete activeElement.value;

  if (activeElement.detachEvent) {
    activeElement.detachEvent('onpropertychange', handlePropertyChange);
  } else {
    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
  }

  activeElement = null;
  activeElementInst = null;
  activeElementValue = null;
  activeElementValueProp = null;
}

/**
 * (For IE <=11) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }
  var value = nativeEvent.srcElement.value;
  if (value === activeElementValue) {
    return;
  }
  activeElementValue = value;

  manualDispatchChangeEvent(nativeEvent);
}

/**
 * If a `change` event should be fired, returns the target's ID.
 */
function getTargetInstForInputEvent(topLevelType, targetInst) {
  if (topLevelType === 'topInput') {
    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
    // what we want so fall through here and trigger an abstract event
    return targetInst;
  }
}

function handleEventsForInputEventIE(topLevelType, target, targetInst) {
  if (topLevelType === 'topFocus') {
    // In IE8, we can capture almost all .value changes by adding a
    // propertychange handler and looking for events with propertyName
    // equal to 'value'
    // In IE9-11, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === 'topBlur') {
    stopWatchingForValueChange();
  }
}

// For IE8 and IE9.
function getTargetInstForInputEventIE(topLevelType, targetInst) {
  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    if (activeElement && activeElement.value !== activeElementValue) {
      activeElementValue = activeElement.value;
      return activeElementInst;
    }
  }
}

/**
 * SECTION: handle `click` event
 */
function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === 'topClick') {
    return targetInst;
  }
}

/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */
var ChangeEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    var getTargetInstFunc, handleEventFunc;
    if (shouldUseChangeEvent(targetNode)) {
      if (doesChangeEventBubble) {
        getTargetInstFunc = getTargetInstForChangeEvent;
      } else {
        handleEventFunc = handleEventsForChangeEventIE8;
      }
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventIE;
        handleEventFunc = handleEventsForInputEventIE;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);
      if (inst) {
        var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, nativeEventTarget);
        event.type = 'change';
        EventPropagators.accumulateTwoPhaseDispatches(event);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    }
  }

};

module.exports = ChangeEventPlugin;

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var DOMLazyTree = __webpack_require__(18);
var ExecutionEnvironment = __webpack_require__(6);

var createNodesFromMarkup = __webpack_require__(90);
var emptyFunction = __webpack_require__(7);
var invariant = __webpack_require__(1);

var Danger = {

  /**
   * Replaces a node with a string of markup at its current position within its
   * parent. The markup must render into a single root node.
   *
   * @param {DOMElement} oldChild Child node to replace.
   * @param {string} markup Markup to render in place of the child node.
   * @internal
   */
  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;

    if (typeof markup === 'string') {
      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
      oldChild.parentNode.replaceChild(newChild, oldChild);
    } else {
      DOMLazyTree.replaceChildWithTree(oldChild, markup);
    }
  }

};

module.exports = Danger;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Module that is injectable into `EventPluginHub`, that specifies a
 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
 * plugins, without having to package every one of them. This is better than
 * having plugins be ordered in the same order that they are injected because
 * that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];

module.exports = DefaultEventPluginOrder;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(21);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticMouseEvent = __webpack_require__(25);

var eventTypes = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: ['topMouseOut', 'topMouseOver']
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: ['topMouseOut', 'topMouseOver']
  }
};

var EnterLeaveEventPlugin = {

  eventTypes: eventTypes,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      return null;
    }
    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
      // Must not be a mouse in or mouse out - ignoring.
      return null;
    }

    var win;
    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;
      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;
    if (topLevelType === 'topMouseOut') {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);

    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
    leave.type = 'mouseleave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;

    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
    enter.type = 'mouseenter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;

    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);

    return [leave, enter];
  }

};

module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var PooledClass = __webpack_require__(13);

var getTextContentAccessor = __webpack_require__(72);

/**
 * This helper class stores information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 * @param {DOMEventTarget} root
 */
function FallbackCompositionState(root) {
  this._root = root;
  this._startText = this.getText();
  this._fallbackText = null;
}

_assign(FallbackCompositionState.prototype, {
  destructor: function () {
    this._root = null;
    this._startText = null;
    this._fallbackText = null;
  },

  /**
   * Get current text of input.
   *
   * @return {string}
   */
  getText: function () {
    if ('value' in this._root) {
      return this._root.value;
    }
    return this._root[getTextContentAccessor()];
  },

  /**
   * Determine the differing substring between the initially stored
   * text content and the current content.
   *
   * @return {string}
   */
  getData: function () {
    if (this._fallbackText) {
      return this._fallbackText;
    }

    var start;
    var startValue = this._startText;
    var startLength = startValue.length;
    var end;
    var endValue = this.getText();
    var endLength = endValue.length;

    for (start = 0; start < startLength; start++) {
      if (startValue[start] !== endValue[start]) {
        break;
      }
    }

    var minEnd = startLength - start;
    for (end = 1; end <= minEnd; end++) {
      if (startValue[startLength - end] !== endValue[endLength - end]) {
        break;
      }
    }

    var sliceTail = end > 1 ? 1 - end : undefined;
    this._fallbackText = endValue.slice(start, sliceTail);
    return this._fallbackText;
  }
});

PooledClass.addPoolingTo(FallbackCompositionState);

module.exports = FallbackCompositionState;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(19);

var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

var HTMLDOMPropertyConfig = {
  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
  Properties: {
    /**
     * Standard Properties
     */
    accept: 0,
    acceptCharset: 0,
    accessKey: 0,
    action: 0,
    allowFullScreen: HAS_BOOLEAN_VALUE,
    allowTransparency: 0,
    alt: 0,
    // specifies target context for links with `preload` type
    as: 0,
    async: HAS_BOOLEAN_VALUE,
    autoComplete: 0,
    // autoFocus is polyfilled/normalized by AutoFocusUtils
    // autoFocus: HAS_BOOLEAN_VALUE,
    autoPlay: HAS_BOOLEAN_VALUE,
    capture: HAS_BOOLEAN_VALUE,
    cellPadding: 0,
    cellSpacing: 0,
    charSet: 0,
    challenge: 0,
    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    cite: 0,
    classID: 0,
    className: 0,
    cols: HAS_POSITIVE_NUMERIC_VALUE,
    colSpan: 0,
    content: 0,
    contentEditable: 0,
    contextMenu: 0,
    controls: HAS_BOOLEAN_VALUE,
    coords: 0,
    crossOrigin: 0,
    data: 0, // For `<object />` acts as `src`.
    dateTime: 0,
    'default': HAS_BOOLEAN_VALUE,
    defer: HAS_BOOLEAN_VALUE,
    dir: 0,
    disabled: HAS_BOOLEAN_VALUE,
    download: HAS_OVERLOADED_BOOLEAN_VALUE,
    draggable: 0,
    encType: 0,
    form: 0,
    formAction: 0,
    formEncType: 0,
    formMethod: 0,
    formNoValidate: HAS_BOOLEAN_VALUE,
    formTarget: 0,
    frameBorder: 0,
    headers: 0,
    height: 0,
    hidden: HAS_BOOLEAN_VALUE,
    high: 0,
    href: 0,
    hrefLang: 0,
    htmlFor: 0,
    httpEquiv: 0,
    icon: 0,
    id: 0,
    inputMode: 0,
    integrity: 0,
    is: 0,
    keyParams: 0,
    keyType: 0,
    kind: 0,
    label: 0,
    lang: 0,
    list: 0,
    loop: HAS_BOOLEAN_VALUE,
    low: 0,
    manifest: 0,
    marginHeight: 0,
    marginWidth: 0,
    max: 0,
    maxLength: 0,
    media: 0,
    mediaGroup: 0,
    method: 0,
    min: 0,
    minLength: 0,
    // Caution; `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`.
    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    name: 0,
    nonce: 0,
    noValidate: HAS_BOOLEAN_VALUE,
    open: HAS_BOOLEAN_VALUE,
    optimum: 0,
    pattern: 0,
    placeholder: 0,
    playsInline: HAS_BOOLEAN_VALUE,
    poster: 0,
    preload: 0,
    profile: 0,
    radioGroup: 0,
    readOnly: HAS_BOOLEAN_VALUE,
    referrerPolicy: 0,
    rel: 0,
    required: HAS_BOOLEAN_VALUE,
    reversed: HAS_BOOLEAN_VALUE,
    role: 0,
    rows: HAS_POSITIVE_NUMERIC_VALUE,
    rowSpan: HAS_NUMERIC_VALUE,
    sandbox: 0,
    scope: 0,
    scoped: HAS_BOOLEAN_VALUE,
    scrolling: 0,
    seamless: HAS_BOOLEAN_VALUE,
    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
    shape: 0,
    size: HAS_POSITIVE_NUMERIC_VALUE,
    sizes: 0,
    span: HAS_POSITIVE_NUMERIC_VALUE,
    spellCheck: 0,
    src: 0,
    srcDoc: 0,
    srcLang: 0,
    srcSet: 0,
    start: HAS_NUMERIC_VALUE,
    step: 0,
    style: 0,
    summary: 0,
    tabIndex: 0,
    target: 0,
    title: 0,
    // Setting .type throws on non-<input> tags
    type: 0,
    useMap: 0,
    value: 0,
    width: 0,
    wmode: 0,
    wrap: 0,

    /**
     * RDFa Properties
     */
    about: 0,
    datatype: 0,
    inlist: 0,
    prefix: 0,
    // property is also supported for OpenGraph in meta tags.
    property: 0,
    resource: 0,
    'typeof': 0,
    vocab: 0,

    /**
     * Non-standard Properties
     */
    // autoCapitalize and autoCorrect are supported in Mobile Safari for
    // keyboard hints.
    autoCapitalize: 0,
    autoCorrect: 0,
    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
    autoSave: 0,
    // color is for Safari mask-icon link
    color: 0,
    // itemProp, itemScope, itemType are for
    // Microdata support. See http://schema.org/docs/gs.html
    itemProp: 0,
    itemScope: HAS_BOOLEAN_VALUE,
    itemType: 0,
    // itemID and itemRef are for Microdata support as well but
    // only specified in the WHATWG spec document. See
    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
    itemID: 0,
    itemRef: 0,
    // results show looking glass icon and recent searches on input
    // search fields in WebKit/Blink
    results: 0,
    // IE-only attribute that specifies security restrictions on an iframe
    // as an alternative to the sandbox attribute on IE<10
    security: 0,
    // IE-only attribute that controls focus behavior
    unselectable: 0
  },
  DOMAttributeNames: {
    acceptCharset: 'accept-charset',
    className: 'class',
    htmlFor: 'for',
    httpEquiv: 'http-equiv'
  },
  DOMPropertyNames: {}
};

module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactReconciler = __webpack_require__(22);

var instantiateReactComponent = __webpack_require__(73);
var KeyEscapeUtils = __webpack_require__(34);
var shouldUpdateReactComponent = __webpack_require__(76);
var traverseAllChildren = __webpack_require__(77);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  // We found a component instance.
  var keyUnique = childInstances[name] === undefined;
  if (process.env.NODE_ENV !== 'production') {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = __webpack_require__(9);
    }
    if (!keyUnique) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

/**
 * ReactChildReconciler provides helpers for initializing or updating a set of
 * children. Its output is suitable for passing it onto ReactMultiChild which
 * does diffed reordering and insertion.
 */
var ReactChildReconciler = {
  /**
   * Generates a "mount image" for each of the supplied children. In the case
   * of `ReactDOMComponent`, a mount image is a string of markup.
   *
   * @param {?object} nestedChildNodes Nested child maps.
   * @return {?object} A set of child instances.
   * @internal
   */
  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID // 0 in production and for roots
  ) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (process.env.NODE_ENV !== 'production') {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  /**
   * Updates the rendered children and returns a new set of children.
   *
   * @param {?object} prevChildren Previously initialized set of children.
   * @param {?object} nextChildren Flat child element maps.
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   * @return {?object} A new set of child instances.
   * @internal
   */
  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID // 0 in production and for roots
  ) {
    // We currently don't have a way to track moves here but if we use iterators
    // instead of for..in we can zip the iterators and check if an item has
    // moved.
    // TODO: If nothing has changed, return the prevChildren object so that we
    // can quickly bailout if nothing has changed.
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }
        // The child must be instantiated before it's mounted.
        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;
        // Creating mount image now ensures refs are resolved in right order
        // (see https://github.com/facebook/react/pull/7101 for explanation).
        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }
    // Unmount children that are no longer present.
    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  /**
   * Unmounts all rendered children. This should be used to clean up children
   * when this component is unmounted.
   *
   * @param {?object} renderedChildren Previously initialized set of children.
   * @internal
   */
  unmountChildren: function (renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }

};

module.exports = ReactChildReconciler;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(30);
var ReactDOMIDOperations = __webpack_require__(117);

/**
 * Abstracts away all functionality of the reconciler that requires knowledge of
 * the browser context. TODO: These callers should be refactored to avoid the
 * need for this injection.
 */
var ReactComponentBrowserEnvironment = {

  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup

};

module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var React = __webpack_require__(24);
var ReactComponentEnvironment = __webpack_require__(37);
var ReactCurrentOwner = __webpack_require__(12);
var ReactErrorUtils = __webpack_require__(38);
var ReactInstanceMap = __webpack_require__(39);
var ReactInstrumentation = __webpack_require__(8);
var ReactNodeTypes = __webpack_require__(136);
var ReactReconciler = __webpack_require__(22);

if (process.env.NODE_ENV !== 'production') {
  var checkReactTypeSpec = __webpack_require__(159);
}

var emptyObject = __webpack_require__(17);
var invariant = __webpack_require__(1);
var shallowEqual = __webpack_require__(29);
var shouldUpdateReactComponent = __webpack_require__(76);
var warning = __webpack_require__(2);

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

// Separated into a function to contain deoptimizations caused by try/finally.
function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    // Top-level wrappers (see ReactMount) and empty components (see
    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
    // Both are implementation details that should go away in the future.
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

/**
 * ------------------ The Life-Cycle of a Composite Component ------------------
 *
 * - constructor: Initialization of state. The instance is now retained.
 *   - componentWillMount
 *   - render
 *   - [children's constructors]
 *     - [children's componentWillMount and render]
 *     - [children's componentDidMount]
 *     - componentDidMount
 *
 *       Update Phases:
 *       - componentWillReceiveProps (only called if parent updated)
 *       - shouldComponentUpdate
 *         - componentWillUpdate
 *           - render
 *           - [children's constructors or receive props phases]
 *         - componentDidUpdate
 *
 *     - componentWillUnmount
 *     - [children's componentWillUnmount]
 *   - [children destroyed]
 * - (destroyed): The instance is now blank, released by React and ready for GC.
 *
 * -----------------------------------------------------------------------------
 */

/**
 * An incrementing ID assigned to each component when it is mounted. This is
 * used to enforce the order in which `ReactUpdates` updates dirty components.
 *
 * @private
 */
var nextMountID = 1;

/**
 * @lends {ReactCompositeComponent.prototype}
 */
var ReactCompositeComponent = {

  /**
   * Base constructor for all composite component.
   *
   * @param {ReactElement} element
   * @final
   * @internal
   */
  construct: function (element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    // See ReactUpdateQueue
    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    // See ReactUpdates and ReactUpdateQueue.
    this._pendingCallbacks = null;

    // ComponentWillUnmount shall only be called once
    this._calledComponentWillUnmount = false;

    if (process.env.NODE_ENV !== 'production') {
      this._warnedAboutRefsInRender = false;
    }
  },

  /**
   * Initializes the component, renders markup, and registers event listeners.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?object} hostParent
   * @param {?object} hostContainerInfo
   * @param {?object} context
   * @return {?string} Rendered markup to be inserted into the DOM.
   * @final
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    // Initialize the public class
    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    // Support functional components
    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      // This will throw later in _renderValidatedComponent, but add an early
      // warning now to help debugging
      if (inst.render == null) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName) : void 0;
    }

    // These should be set up in the constructor, but as a convenience for
    // simpler class abstractions, we set them up after the fact.
    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    // Store a reference from the instance back to the internal representation
    ReactInstanceMap.set(inst, this);

    if (process.env.NODE_ENV !== 'production') {
      // Since plain JS classes are defined without any special initialization
      // logic, we can not catch common errors early. Therefore, we have to
      // catch them here, at initialization time, instead.
      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
    if (process.env.NODE_ENV !== 'production') {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (process.env.NODE_ENV !== 'production') {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    // This can still be an instance in case of factory components
    // but we'll count this as time spent rendering as the more common case.
    if (process.env.NODE_ENV !== 'production') {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      // Try again - we've informed the component about the error, so they can render an error message this time.
      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }
      // When mounting, calls to `setState` by `componentWillMount` will set
      // `this._pendingStateQueue` without triggering a re-render.
      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    // If not a stateless component, we now render
    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
    );
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (process.env.NODE_ENV !== 'production') {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function () {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  /**
   * Releases any resources allocated by `mountComponent`.
   *
   * @final
   * @internal
   */
  unmountComponent: function (safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (process.env.NODE_ENV !== 'production') {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    // Reset pending fields
    // Even if this component is scheduled for another update in ReactUpdates,
    // it would still be ignored because these fields are reset.
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    // These fields do not really need to be reset since this object is no
    // longer accessible.
    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    // Delete the reference from the instance to this internal representation
    // which allow the internals to be properly cleaned up even if the user
    // leaks a reference to the public instance.
    ReactInstanceMap.remove(inst);

    // Some existing components rely on inst.props even after they've been
    // destroyed (in event handlers).
    // TODO: inst.props = null;
    // TODO: inst.state = null;
    // TODO: inst.context = null;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  /**
   * Filters the context object to only contain keys specified in
   * `contextTypes`, and asserts that they are valid.
   *
   * @param {object} context
   * @return {?object}
   * @private
   */
  _processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  /**
   * @param {object} currentContext
   * @return {object}
   * @private
   */
  _processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
  },

  /**
   * Assert that the context types are valid
   *
   * @param {object} typeSpecs Map of context field to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @private
   */
  _checkContextTypes: function (typeSpecs, values, location) {
    if (process.env.NODE_ENV !== 'production') {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function (nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  /**
   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
   * is set, update the component.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  performUpdateIfNecessary: function (transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  /**
   * Perform an update to a mounted component. The componentWillReceiveProps and
   * shouldComponentUpdate methods are called, then (assuming the update isn't
   * skipped) the remaining update lifecycle methods are called and the DOM
   * representation is updated.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevParentElement
   * @param {ReactElement} nextParentElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;

    var willReceive = false;
    var nextContext;

    // Determine if the context has changed or not
    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    // Not a simple state update but a props update
    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    // An update here will schedule an update but immediately set
    // _pendingStateQueue which will ensure that any state updates gets
    // immediately reconciled instead of waiting for the next batch.
    if (willReceive && inst.componentWillReceiveProps) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (process.env.NODE_ENV !== 'production') {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;
      // Will set `this.props`, `this.state` and `this.context`.
      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      // If it's determined that a component should not update, we still want
      // to set props and state but we shortcut the rest of the update.
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function (props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = _assign({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  /**
   * Merges new props and state, notifies delegate methods of update and
   * performs update.
   *
   * @param {ReactElement} nextElement Next element
   * @param {object} nextProps Next public object to set as properties.
   * @param {?object} nextState Next object to set as state.
   * @param {?object} nextContext Next public object to set as context.
   * @param {ReactReconcileTransaction} transaction
   * @param {?object} unmaskedContext
   * @private
   */
  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (process.env.NODE_ENV !== 'production') {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  /**
   * Call the component's `render` method and update the DOM accordingly.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  _updateRenderedComponent: function (transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (process.env.NODE_ENV !== 'production') {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
      );
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (process.env.NODE_ENV !== 'production') {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  /**
   * Overridden in shallow rendering.
   *
   * @protected
   */
  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  /**
   * @protected
   */
  _renderValidatedComponentWithoutOwnerOrContext: function () {
    var inst = this._instance;
    var renderedElement;

    if (process.env.NODE_ENV !== 'production') {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (process.env.NODE_ENV !== 'production') {
      // We allow auto-mocks to proceed as if they're returning null.
      if (renderedElement === undefined && inst.render._isMockFunction) {
        // This is probably bad practice. Consider warning here and
        // deprecating this convenience.
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  /**
   * @private
   */
  _renderValidatedComponent: function () {
    var renderedElement;
    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    !(
    // TODO: An `isValidNode` function would probably be more appropriate
    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;

    return renderedElement;
  },

  /**
   * Lazily allocates the refs object and stores `component` as `ref`.
   *
   * @param {string} ref Reference name.
   * @param {component} component Component to store as `ref`.
   * @final
   * @private
   */
  attachRef: function (ref, component) {
    var inst = this.getPublicInstance();
    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
    var publicComponentInstance = component.getPublicInstance();
    if (process.env.NODE_ENV !== 'production') {
      var componentName = component && component.getName ? component.getName() : 'a component';
      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  /**
   * Detaches a reference name.
   *
   * @param {string} ref Name to dereference.
   * @final
   * @private
   */
  detachRef: function (ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  /**
   * Get a text description of the component that can be used to identify it
   * in error messages.
   * @return {string} The name or null.
   * @internal
   */
  getName: function () {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  /**
   * Get the publicly accessible representation of this component - i.e. what
   * is exposed by refs and returned by render. Can be null for stateless
   * components.
   *
   * @return {ReactComponent} the public component instance.
   * @internal
   */
  getPublicInstance: function () {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  // Stub
  _instantiateReactComponent: null

};

module.exports = ReactCompositeComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/* global hasOwnProperty:true */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var AutoFocusUtils = __webpack_require__(102);
var CSSPropertyOperations = __webpack_require__(104);
var DOMLazyTree = __webpack_require__(18);
var DOMNamespaces = __webpack_require__(31);
var DOMProperty = __webpack_require__(19);
var DOMPropertyOperations = __webpack_require__(59);
var EventPluginHub = __webpack_require__(20);
var EventPluginRegistry = __webpack_require__(32);
var ReactBrowserEventEmitter = __webpack_require__(36);
var ReactDOMComponentFlags = __webpack_require__(60);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMInput = __webpack_require__(118);
var ReactDOMOption = __webpack_require__(119);
var ReactDOMSelect = __webpack_require__(61);
var ReactDOMTextarea = __webpack_require__(123);
var ReactInstrumentation = __webpack_require__(8);
var ReactMultiChild = __webpack_require__(135);
var ReactServerRenderingTransaction = __webpack_require__(67);

var emptyFunction = __webpack_require__(7);
var escapeTextContentForBrowser = __webpack_require__(27);
var invariant = __webpack_require__(1);
var isEventSupported = __webpack_require__(44);
var shallowEqual = __webpack_require__(29);
var validateDOMNesting = __webpack_require__(46);
var warning = __webpack_require__(2);

var Flags = ReactDOMComponentFlags;
var deleteListener = EventPluginHub.deleteListener;
var getNode = ReactDOMComponentTree.getNodeFromInstance;
var listenTo = ReactBrowserEventEmitter.listenTo;
var registrationNameModules = EventPluginRegistry.registrationNameModules;

// For quickly matching children type, to test if can be treated as content.
var CONTENT_TYPES = { 'string': true, 'number': true };

var STYLE = 'style';
var HTML = '__html';
var RESERVED_PROPS = {
  children: null,
  dangerouslySetInnerHTML: null,
  suppressContentEditableWarning: null
};

// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
var DOC_FRAGMENT_TYPE = 11;

function getDeclarationErrorAddendum(internalInstance) {
  if (internalInstance) {
    var owner = internalInstance._currentElement._owner || null;
    if (owner) {
      var name = owner.getName();
      if (name) {
        return ' This DOM node was rendered by `' + name + '`.';
      }
    }
  }
  return '';
}

function friendlyStringify(obj) {
  if (typeof obj === 'object') {
    if (Array.isArray(obj)) {
      return '[' + obj.map(friendlyStringify).join(', ') + ']';
    } else {
      var pairs = [];
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
        }
      }
      return '{' + pairs.join(', ') + '}';
    }
  } else if (typeof obj === 'string') {
    return JSON.stringify(obj);
  } else if (typeof obj === 'function') {
    return '[function object]';
  }
  // Differs from JSON.stringify in that undefined because undefined and that
  // inf and nan don't become null
  return String(obj);
}

var styleMutationWarning = {};

function checkAndWarnForMutatedStyle(style1, style2, component) {
  if (style1 == null || style2 == null) {
    return;
  }
  if (shallowEqual(style1, style2)) {
    return;
  }

  var componentName = component._tag;
  var owner = component._currentElement._owner;
  var ownerName;
  if (owner) {
    ownerName = owner.getName();
  }

  var hash = ownerName + '|' + componentName;

  if (styleMutationWarning.hasOwnProperty(hash)) {
    return;
  }

  styleMutationWarning[hash] = true;

  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
}

/**
 * @param {object} component
 * @param {?object} props
 */
function assertValidProps(component, props) {
  if (!props) {
    return;
  }
  // Note the use of `==` which checks for null or undefined.
  if (voidElementTags[component._tag]) {
    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
  }
  if (props.dangerouslySetInnerHTML != null) {
    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
  }
  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
}

function enqueuePutListener(inst, registrationName, listener, transaction) {
  if (transaction instanceof ReactServerRenderingTransaction) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // IE8 has no API for event capturing and the `onScroll` event doesn't
    // bubble.
    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : void 0;
  }
  var containerInfo = inst._hostContainerInfo;
  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
  listenTo(registrationName, doc);
  transaction.getReactMountReady().enqueue(putListener, {
    inst: inst,
    registrationName: registrationName,
    listener: listener
  });
}

function putListener() {
  var listenerToPut = this;
  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
}

function inputPostMount() {
  var inst = this;
  ReactDOMInput.postMountWrapper(inst);
}

function textareaPostMount() {
  var inst = this;
  ReactDOMTextarea.postMountWrapper(inst);
}

function optionPostMount() {
  var inst = this;
  ReactDOMOption.postMountWrapper(inst);
}

var setAndValidateContentChildDev = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  setAndValidateContentChildDev = function (content) {
    var hasExistingContent = this._contentDebugID != null;
    var debugID = this._debugID;
    // This ID represents the inlined child that has no backing instance:
    var contentDebugID = -debugID;

    if (content == null) {
      if (hasExistingContent) {
        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
      }
      this._contentDebugID = null;
      return;
    }

    validateDOMNesting(null, String(content), this, this._ancestorInfo);
    this._contentDebugID = contentDebugID;
    if (hasExistingContent) {
      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
    } else {
      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
    }
  };
}

// There are so many media events, it makes sense to just
// maintain a list rather than create a `trapBubbledEvent` for each
var mediaEvents = {
  topAbort: 'abort',
  topCanPlay: 'canplay',
  topCanPlayThrough: 'canplaythrough',
  topDurationChange: 'durationchange',
  topEmptied: 'emptied',
  topEncrypted: 'encrypted',
  topEnded: 'ended',
  topError: 'error',
  topLoadedData: 'loadeddata',
  topLoadedMetadata: 'loadedmetadata',
  topLoadStart: 'loadstart',
  topPause: 'pause',
  topPlay: 'play',
  topPlaying: 'playing',
  topProgress: 'progress',
  topRateChange: 'ratechange',
  topSeeked: 'seeked',
  topSeeking: 'seeking',
  topStalled: 'stalled',
  topSuspend: 'suspend',
  topTimeUpdate: 'timeupdate',
  topVolumeChange: 'volumechange',
  topWaiting: 'waiting'
};

function trapBubbledEventsLocal() {
  var inst = this;
  // If a component renders to null or if another component fatals and causes
  // the state of the tree to be corrupted, `node` here can be null.
  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
  var node = getNode(inst);
  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;

  switch (inst._tag) {
    case 'iframe':
    case 'object':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'video':
    case 'audio':

      inst._wrapperState.listeners = [];
      // Create listener for each media event
      for (var event in mediaEvents) {
        if (mediaEvents.hasOwnProperty(event)) {
          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
        }
      }
      break;
    case 'source':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
      break;
    case 'img':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
      break;
    case 'form':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
      break;
    case 'input':
    case 'select':
    case 'textarea':
      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
      break;
  }
}

function postUpdateSelectWrapper() {
  ReactDOMSelect.postUpdateWrapper(this);
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.

var omittedCloseTags = {
  'area': true,
  'base': true,
  'br': true,
  'col': true,
  'embed': true,
  'hr': true,
  'img': true,
  'input': true,
  'keygen': true,
  'link': true,
  'meta': true,
  'param': true,
  'source': true,
  'track': true,
  'wbr': true
};

var newlineEatingTags = {
  'listing': true,
  'pre': true,
  'textarea': true
};

// For HTML, certain tags cannot have children. This has the same purpose as
// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  'menuitem': true
}, omittedCloseTags);

// We accept any tag to be rendered but since this gets injected into arbitrary
// HTML, we want to make sure that it's a safe tag.
// http://www.w3.org/TR/REC-xml/#NT-Name

var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
var validatedTagCache = {};
var hasOwnProperty = {}.hasOwnProperty;

function validateDangerousTag(tag) {
  if (!hasOwnProperty.call(validatedTagCache, tag)) {
    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
    validatedTagCache[tag] = true;
  }
}

function isCustomComponent(tagName, props) {
  return tagName.indexOf('-') >= 0 || props.is != null;
}

var globalIdCounter = 1;

/**
 * Creates a new React class that is idempotent and capable of containing other
 * React components. It accepts event listeners and DOM properties that are
 * valid according to `DOMProperty`.
 *
 *  - Event listeners: `onClick`, `onMouseDown`, etc.
 *  - DOM properties: `className`, `name`, `title`, etc.
 *
 * The `style` property functions differently from the DOM API. It accepts an
 * object mapping of style properties to values.
 *
 * @constructor ReactDOMComponent
 * @extends ReactMultiChild
 */
function ReactDOMComponent(element) {
  var tag = element.type;
  validateDangerousTag(tag);
  this._currentElement = element;
  this._tag = tag.toLowerCase();
  this._namespaceURI = null;
  this._renderedChildren = null;
  this._previousStyle = null;
  this._previousStyleCopy = null;
  this._hostNode = null;
  this._hostParent = null;
  this._rootNodeID = 0;
  this._domID = 0;
  this._hostContainerInfo = null;
  this._wrapperState = null;
  this._topLevelWrapper = null;
  this._flags = 0;
  if (process.env.NODE_ENV !== 'production') {
    this._ancestorInfo = null;
    setAndValidateContentChildDev.call(this, null);
  }
}

ReactDOMComponent.displayName = 'ReactDOMComponent';

ReactDOMComponent.Mixin = {

  /**
   * Generates root tag markup then recurses. This method has side effects and
   * is not idempotent.
   *
   * @internal
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {?ReactDOMComponent} the parent component instance
   * @param {?object} info about the host container
   * @param {object} context
   * @return {string} The computed markup.
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    this._rootNodeID = globalIdCounter++;
    this._domID = hostContainerInfo._idCounter++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var props = this._currentElement.props;

    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        this._wrapperState = {
          listeners: null
        };
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'input':
        ReactDOMInput.mountWrapper(this, props, hostParent);
        props = ReactDOMInput.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'option':
        ReactDOMOption.mountWrapper(this, props, hostParent);
        props = ReactDOMOption.getHostProps(this, props);
        break;
      case 'select':
        ReactDOMSelect.mountWrapper(this, props, hostParent);
        props = ReactDOMSelect.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
      case 'textarea':
        ReactDOMTextarea.mountWrapper(this, props, hostParent);
        props = ReactDOMTextarea.getHostProps(this, props);
        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
        break;
    }

    assertValidProps(this, props);

    // We create tags in the namespace of their parent container, except HTML
    // tags get no namespace.
    var namespaceURI;
    var parentTag;
    if (hostParent != null) {
      namespaceURI = hostParent._namespaceURI;
      parentTag = hostParent._tag;
    } else if (hostContainerInfo._tag) {
      namespaceURI = hostContainerInfo._namespaceURI;
      parentTag = hostContainerInfo._tag;
    }
    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
      namespaceURI = DOMNamespaces.html;
    }
    if (namespaceURI === DOMNamespaces.html) {
      if (this._tag === 'svg') {
        namespaceURI = DOMNamespaces.svg;
      } else if (this._tag === 'math') {
        namespaceURI = DOMNamespaces.mathml;
      }
    }
    this._namespaceURI = namespaceURI;

    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo._tag) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(this._tag, null, this, parentInfo);
      }
      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
    }

    var mountImage;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var el;
      if (namespaceURI === DOMNamespaces.html) {
        if (this._tag === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          var type = this._currentElement.type;
          div.innerHTML = '<' + type + '></' + type + '>';
          el = div.removeChild(div.firstChild);
        } else if (props.is) {
          el = ownerDocument.createElement(this._currentElement.type, props.is);
        } else {
          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          el = ownerDocument.createElement(this._currentElement.type);
        }
      } else {
        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
      }
      ReactDOMComponentTree.precacheNode(this, el);
      this._flags |= Flags.hasCachedChildNodes;
      if (!this._hostParent) {
        DOMPropertyOperations.setAttributeForRoot(el);
      }
      this._updateDOMProperties(null, props, transaction);
      var lazyTree = DOMLazyTree(el);
      this._createInitialChildren(transaction, props, context, lazyTree);
      mountImage = lazyTree;
    } else {
      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
      var tagContent = this._createContentMarkup(transaction, props, context);
      if (!tagContent && omittedCloseTags[this._tag]) {
        mountImage = tagOpen + '/>';
      } else {
        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
      }
    }

    switch (this._tag) {
      case 'input':
        transaction.getReactMountReady().enqueue(inputPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'textarea':
        transaction.getReactMountReady().enqueue(textareaPostMount, this);
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'select':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'button':
        if (props.autoFocus) {
          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
        }
        break;
      case 'option':
        transaction.getReactMountReady().enqueue(optionPostMount, this);
        break;
    }

    return mountImage;
  },

  /**
   * Creates markup for the open tag and all attributes.
   *
   * This method has side effects because events get registered.
   *
   * Iterating over object properties is faster than iterating over arrays.
   * @see http://jsperf.com/obj-vs-arr-iteration
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @return {string} Markup of opening tag.
   */
  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
    var ret = '<' + this._currentElement.type;

    for (var propKey in props) {
      if (!props.hasOwnProperty(propKey)) {
        continue;
      }
      var propValue = props[propKey];
      if (propValue == null) {
        continue;
      }
      if (registrationNameModules.hasOwnProperty(propKey)) {
        if (propValue) {
          enqueuePutListener(this, propKey, propValue, transaction);
        }
      } else {
        if (propKey === STYLE) {
          if (propValue) {
            if (process.env.NODE_ENV !== 'production') {
              // See `_updateDOMProperties`. style block
              this._previousStyle = propValue;
            }
            propValue = this._previousStyleCopy = _assign({}, props.style);
          }
          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
        }
        var markup = null;
        if (this._tag != null && isCustomComponent(this._tag, props)) {
          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
          }
        } else {
          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
        }
        if (markup) {
          ret += ' ' + markup;
        }
      }
    }

    // For static pages, no need to put React ID and checksum. Saves lots of
    // bytes.
    if (transaction.renderToStaticMarkup) {
      return ret;
    }

    if (!this._hostParent) {
      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
    }
    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
    return ret;
  },

  /**
   * Creates markup for the content between the tags.
   *
   * @private
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} props
   * @param {object} context
   * @return {string} Content markup.
   */
  _createContentMarkup: function (transaction, props, context) {
    var ret = '';

    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        ret = innerHTML.__html;
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      if (contentToUse != null) {
        // TODO: Validate that text is allowed as a child of this node
        ret = escapeTextContentForBrowser(contentToUse);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        ret = mountImages.join('');
      }
    }
    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
      // text/html ignores the first character in these tags if it's a newline
      // Prefer to break application/xml over text/html (for now) by adding
      // a newline specifically to get eaten by the parser. (Alternately for
      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
      // \r is normalized out by HTMLTextAreaElement#value.)
      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
      // See: Parsing of "textarea" "listing" and "pre" elements
      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
      return '\n' + ret;
    } else {
      return ret;
    }
  },

  _createInitialChildren: function (transaction, props, context, lazyTree) {
    // Intentional use of != to avoid catching zero/false.
    var innerHTML = props.dangerouslySetInnerHTML;
    if (innerHTML != null) {
      if (innerHTML.__html != null) {
        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
      }
    } else {
      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
      var childrenToUse = contentToUse != null ? null : props.children;
      // TODO: Validate that text is allowed as a child of this node
      if (contentToUse != null) {
        // Avoid setting textContent when the text is empty. In IE11 setting
        // textContent on a text area will cause the placeholder to not
        // show within the textarea until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        if (contentToUse !== '') {
          if (process.env.NODE_ENV !== 'production') {
            setAndValidateContentChildDev.call(this, contentToUse);
          }
          DOMLazyTree.queueText(lazyTree, contentToUse);
        }
      } else if (childrenToUse != null) {
        var mountImages = this.mountChildren(childrenToUse, transaction, context);
        for (var i = 0; i < mountImages.length; i++) {
          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
        }
      }
    }
  },

  /**
   * Receives a next element and updates the component.
   *
   * @internal
   * @param {ReactElement} nextElement
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @param {object} context
   */
  receiveComponent: function (nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;
    this.updateComponent(transaction, prevElement, nextElement, context);
  },

  /**
   * Updates a DOM component after it has already been allocated and
   * attached to the DOM. Reconciles the root DOM node, then recurses.
   *
   * @param {ReactReconcileTransaction} transaction
   * @param {ReactElement} prevElement
   * @param {ReactElement} nextElement
   * @internal
   * @overridable
   */
  updateComponent: function (transaction, prevElement, nextElement, context) {
    var lastProps = prevElement.props;
    var nextProps = this._currentElement.props;

    switch (this._tag) {
      case 'input':
        lastProps = ReactDOMInput.getHostProps(this, lastProps);
        nextProps = ReactDOMInput.getHostProps(this, nextProps);
        break;
      case 'option':
        lastProps = ReactDOMOption.getHostProps(this, lastProps);
        nextProps = ReactDOMOption.getHostProps(this, nextProps);
        break;
      case 'select':
        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
        break;
      case 'textarea':
        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
        break;
    }

    assertValidProps(this, nextProps);
    this._updateDOMProperties(lastProps, nextProps, transaction);
    this._updateDOMChildren(lastProps, nextProps, transaction, context);

    switch (this._tag) {
      case 'input':
        // Update the wrapper around inputs *after* updating props. This has to
        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
        // raise warnings and prevent the new value from being assigned.
        ReactDOMInput.updateWrapper(this);
        break;
      case 'textarea':
        ReactDOMTextarea.updateWrapper(this);
        break;
      case 'select':
        // <select> value update needs to occur after <option> children
        // reconciliation
        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
        break;
    }
  },

  /**
   * Reconciles the properties by detecting differences in property values and
   * updating the DOM as necessary. This function is probably the single most
   * critical path for performance optimization.
   *
   * TODO: Benchmark whether checking for changed values in memory actually
   *       improves performance (especially statically positioned elements).
   * TODO: Benchmark the effects of putting this at the top since 99% of props
   *       do not change for a given reconciliation.
   * TODO: Benchmark areas that can be improved with caching.
   *
   * @private
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {?DOMElement} node
   */
  _updateDOMProperties: function (lastProps, nextProps, transaction) {
    var propKey;
    var styleName;
    var styleUpdates;
    for (propKey in lastProps) {
      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
        continue;
      }
      if (propKey === STYLE) {
        var lastStyle = this._previousStyleCopy;
        for (styleName in lastStyle) {
          if (lastStyle.hasOwnProperty(styleName)) {
            styleUpdates = styleUpdates || {};
            styleUpdates[styleName] = '';
          }
        }
        this._previousStyleCopy = null;
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (lastProps[propKey]) {
          // Only call deleteListener if there was a listener previously or
          // else willDeleteListener gets called when there wasn't actually a
          // listener (e.g., onClick={null})
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, lastProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
      }
    }
    for (propKey in nextProps) {
      var nextProp = nextProps[propKey];
      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
        continue;
      }
      if (propKey === STYLE) {
        if (nextProp) {
          if (process.env.NODE_ENV !== 'production') {
            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
            this._previousStyle = nextProp;
          }
          nextProp = this._previousStyleCopy = _assign({}, nextProp);
        } else {
          this._previousStyleCopy = null;
        }
        if (lastProp) {
          // Unset styles on `lastProp` but not on `nextProp`.
          for (styleName in lastProp) {
            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = '';
            }
          }
          // Update styles that changed since `lastProp`.
          for (styleName in nextProp) {
            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
              styleUpdates = styleUpdates || {};
              styleUpdates[styleName] = nextProp[styleName];
            }
          }
        } else {
          // Relies on `updateStylesByID` not mutating `styleUpdates`.
          styleUpdates = nextProp;
        }
      } else if (registrationNameModules.hasOwnProperty(propKey)) {
        if (nextProp) {
          enqueuePutListener(this, propKey, nextProp, transaction);
        } else if (lastProp) {
          deleteListener(this, propKey);
        }
      } else if (isCustomComponent(this._tag, nextProps)) {
        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
        }
      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
        var node = getNode(this);
        // If we're updating to null or undefined, we should remove the property
        // from the DOM node instead of inadvertently setting to a string. This
        // brings us in line with the same behavior we have on initial render.
        if (nextProp != null) {
          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
        } else {
          DOMPropertyOperations.deleteValueForProperty(node, propKey);
        }
      }
    }
    if (styleUpdates) {
      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
    }
  },

  /**
   * Reconciles the children with the various properties that affect the
   * children content.
   *
   * @param {object} lastProps
   * @param {object} nextProps
   * @param {ReactReconcileTransaction} transaction
   * @param {object} context
   */
  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;

    // Note the use of `!=` which checks for null or undefined.
    var lastChildren = lastContent != null ? null : lastProps.children;
    var nextChildren = nextContent != null ? null : nextProps.children;

    // If we're switching from children to content/html or vice versa, remove
    // the old content
    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
    if (lastChildren != null && nextChildren == null) {
      this.updateChildren(null, transaction, context);
    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
      this.updateTextContent('');
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    }

    if (nextContent != null) {
      if (lastContent !== nextContent) {
        this.updateTextContent('' + nextContent);
        if (process.env.NODE_ENV !== 'production') {
          setAndValidateContentChildDev.call(this, nextContent);
        }
      }
    } else if (nextHtml != null) {
      if (lastHtml !== nextHtml) {
        this.updateMarkup('' + nextHtml);
      }
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
      }
    } else if (nextChildren != null) {
      if (process.env.NODE_ENV !== 'production') {
        setAndValidateContentChildDev.call(this, null);
      }

      this.updateChildren(nextChildren, transaction, context);
    }
  },

  getHostNode: function () {
    return getNode(this);
  },

  /**
   * Destroys all event registrations for this instance. Does not remove from
   * the DOM. That must be done by the parent.
   *
   * @internal
   */
  unmountComponent: function (safely) {
    switch (this._tag) {
      case 'audio':
      case 'form':
      case 'iframe':
      case 'img':
      case 'link':
      case 'object':
      case 'source':
      case 'video':
        var listeners = this._wrapperState.listeners;
        if (listeners) {
          for (var i = 0; i < listeners.length; i++) {
            listeners[i].remove();
          }
        }
        break;
      case 'html':
      case 'head':
      case 'body':
        /**
         * Components like <html> <head> and <body> can't be removed or added
         * easily in a cross-browser way, however it's valuable to be able to
         * take advantage of React's reconciliation for styling and <title>
         * management. So we just document it and throw in dangerous cases.
         */
         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
        break;
    }

    this.unmountChildren(safely);
    ReactDOMComponentTree.uncacheNode(this);
    EventPluginHub.deleteAllListeners(this);
    this._rootNodeID = 0;
    this._domID = 0;
    this._wrapperState = null;

    if (process.env.NODE_ENV !== 'production') {
      setAndValidateContentChildDev.call(this, null);
    }
  },

  getPublicInstance: function () {
    return getNode(this);
  }

};

_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);

module.exports = ReactDOMComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var validateDOMNesting = __webpack_require__(46);

var DOC_NODE_TYPE = 9;

function ReactDOMContainerInfo(topLevelWrapper, node) {
  var info = {
    _topLevelWrapper: topLevelWrapper,
    _idCounter: 1,
    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
    _node: node,
    _tag: node ? node.nodeName.toLowerCase() : null,
    _namespaceURI: node ? node.namespaceURI : null
  };
  if (process.env.NODE_ENV !== 'production') {
    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
  }
  return info;
}

module.exports = ReactDOMContainerInfo;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var DOMLazyTree = __webpack_require__(18);
var ReactDOMComponentTree = __webpack_require__(5);

var ReactDOMEmptyComponent = function (instantiate) {
  // ReactCompositeComponent uses this:
  this._currentElement = null;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;
  this._hostContainerInfo = null;
  this._domID = 0;
};
_assign(ReactDOMEmptyComponent.prototype, {
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    var domID = hostContainerInfo._idCounter++;
    this._domID = domID;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var nodeValue = ' react-empty: ' + this._domID + ' ';
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var node = ownerDocument.createComment(nodeValue);
      ReactDOMComponentTree.precacheNode(this, node);
      return DOMLazyTree(node);
    } else {
      if (transaction.renderToStaticMarkup) {
        // Normally we'd insert a comment node, but since this is a situation
        // where React won't take over (static pages), we can simply return
        // nothing.
        return '';
      }
      return '<!--' + nodeValue + '-->';
    }
  },
  receiveComponent: function () {},
  getHostNode: function () {
    return ReactDOMComponentTree.getNodeFromInstance(this);
  },
  unmountComponent: function () {
    ReactDOMComponentTree.uncacheNode(this);
  }
});

module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMChildrenOperations = __webpack_require__(30);
var ReactDOMComponentTree = __webpack_require__(5);

/**
 * Operations used to process updates to DOM nodes.
 */
var ReactDOMIDOperations = {

  /**
   * Updates a component's children by processing a series of updates.
   *
   * @param {array<object>} updates List of update configurations.
   * @internal
   */
  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
    DOMChildrenOperations.processUpdates(node, updates);
  }
};

module.exports = ReactDOMIDOperations;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMPropertyOperations = __webpack_require__(59);
var LinkedValueUtils = __webpack_require__(35);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnCheckedLink = false;
var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMInput.updateWrapper(this);
  }
}

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}

/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */
var ReactDOMInput = {
  getHostProps: function (inst, props) {
    var value = LinkedValueUtils.getValue(props);
    var checked = LinkedValueUtils.getChecked(props);

    var hostProps = _assign({
      // Make sure we set .type before any other properties (setting .value
      // before .type means .value is lost in IE11 and below)
      type: undefined,
      // Make sure we set .step before .value (setting .value before .step
      // means .value is rounded on mount, based upon step precision)
      step: undefined,
      // Make sure we set .min & .max before .value (to ensure proper order
      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
      min: undefined,
      max: undefined
    }, props, {
      defaultChecked: undefined,
      defaultValue: undefined,
      value: value != null ? value : inst._wrapperState.initialValue,
      checked: checked != null ? checked : inst._wrapperState.initialChecked,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);

      var owner = inst._currentElement._owner;

      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnCheckedLink = true;
      }
      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnCheckedDefaultChecked = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnValueDefaultValue = true;
      }
    }

    var defaultValue = props.defaultValue;
    inst._wrapperState = {
      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
      initialValue: props.value != null ? props.value : defaultValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };

    if (process.env.NODE_ENV !== 'production') {
      inst._wrapperState.controlled = isControlled(props);
    }
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    if (process.env.NODE_ENV !== 'production') {
      var controlled = isControlled(props);
      var owner = inst._currentElement._owner;

      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnUncontrolledToControlled = true;
      }
      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
        didWarnControlledToUncontrolled = true;
      }
    }

    // TODO: Shouldn't this be getChecked(props)?
    var checked = props.checked;
    if (checked != null) {
      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
    }

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {

      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
    } else {
      if (props.value == null && props.defaultValue != null) {
        // In Chrome, assigning defaultValue to certain input types triggers input validation.
        // For number inputs, the display value loses trailing decimal points. For email inputs,
        // Chrome raises "The specified value <x> is not a valid email address".
        //
        // Here we check to see if the defaultValue has actually changed, avoiding these problems
        // when the user is inputting text
        //
        // https://github.com/facebook/react/issues/7253
        if (node.defaultValue !== '' + props.defaultValue) {
          node.defaultValue = '' + props.defaultValue;
        }
      }
      if (props.checked == null && props.defaultChecked != null) {
        node.defaultChecked = !!props.defaultChecked;
      }
    }
  },

  postMountWrapper: function (inst) {
    var props = inst._currentElement.props;

    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);

    // Detach value from defaultValue. We won't do anything if we're working on
    // submit or reset inputs as those values & defaultValues are linked. They
    // are not resetable nodes so this operation doesn't matter and actually
    // removes browser-default values (eg "Submit Query") when no value is
    // provided.

    switch (props.type) {
      case 'submit':
      case 'reset':
        break;
      case 'color':
      case 'date':
      case 'datetime':
      case 'datetime-local':
      case 'month':
      case 'time':
      case 'week':
        // This fixes the no-show issue on iOS Safari and Android Chrome:
        // https://github.com/facebook/react/issues/7233
        node.value = '';
        node.value = node.defaultValue;
        break;
      default:
        node.value = node.value;
        break;
    }

    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
    // this is needed to work around a chrome bug where setting defaultChecked
    // will sometimes influence the value of checked (even after detachment).
    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
    // We need to temporarily unset name to avoid disrupting radio button groups.
    var name = node.name;
    if (name !== '') {
      node.name = '';
    }
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !node.defaultChecked;
    if (name !== '') {
      node.name = name;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;

  var returnValue = LinkedValueUtils.executeOnChange(props, event);

  // Here we use asap to wait until all updates have propagated, which
  // is important when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  ReactUpdates.asap(forceUpdateIfMounted, this);

  var name = props.name;
  if (props.type === 'radio' && name != null) {
    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    }

    // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form, let's just use the global
    // `querySelectorAll` to ensure we don't miss anything.
    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];
      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      }
      // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.
      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
      // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.
      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
    }
  }

  return returnValue;
}

module.exports = ReactDOMInput;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var React = __webpack_require__(24);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMSelect = __webpack_require__(61);

var warning = __webpack_require__(2);
var didWarnInvalidOptionChildren = false;

function flattenChildren(children) {
  var content = '';

  // Flatten children and warn if they aren't strings or numbers;
  // invalid types are ignored.
  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }
    if (typeof child === 'string' || typeof child === 'number') {
      content += child;
    } else if (!didWarnInvalidOptionChildren) {
      didWarnInvalidOptionChildren = true;
      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
    }
  });

  return content;
}

/**
 * Implements an <option> host component that warns when `selected` is set.
 */
var ReactDOMOption = {
  mountWrapper: function (inst, props, hostParent) {
    // TODO (yungsters): Remove support for `selected` in <option>.
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
    }

    // Look up whether this option is 'selected'
    var selectValue = null;
    if (hostParent != null) {
      var selectParent = hostParent;

      if (selectParent._tag === 'optgroup') {
        selectParent = selectParent._hostParent;
      }

      if (selectParent != null && selectParent._tag === 'select') {
        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
      }
    }

    // If the value is null (e.g., no specified value or after initial mount)
    // or missing (e.g., for <datalist>), we don't change props.selected
    var selected = null;
    if (selectValue != null) {
      var value;
      if (props.value != null) {
        value = props.value + '';
      } else {
        value = flattenChildren(props.children);
      }
      selected = false;
      if (Array.isArray(selectValue)) {
        // multiple
        for (var i = 0; i < selectValue.length; i++) {
          if ('' + selectValue[i] === value) {
            selected = true;
            break;
          }
        }
      } else {
        selected = '' + selectValue === value;
      }
    }

    inst._wrapperState = { selected: selected };
  },

  postMountWrapper: function (inst) {
    // value="" should make a value attribute (#6219)
    var props = inst._currentElement.props;
    if (props.value != null) {
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      node.setAttribute('value', props.value);
    }
  },

  getHostProps: function (inst, props) {
    var hostProps = _assign({ selected: undefined, children: undefined }, props);

    // Read state only from initial mount because <select> updates value
    // manually; we need the initial state only for server rendering
    if (inst._wrapperState.selected != null) {
      hostProps.selected = inst._wrapperState.selected;
    }

    var content = flattenChildren(props.children);

    if (content) {
      hostProps.children = content;
    }

    return hostProps;
  }

};

module.exports = ReactDOMOption;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

var getNodeForCharacterOffset = __webpack_require__(165);
var getTextContentAccessor = __webpack_require__(72);

/**
 * While `isCollapsed` is available on the Selection object and `collapsed`
 * is available on the Range object, IE11 sometimes gets them wrong.
 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
 */
function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
  return anchorNode === focusNode && anchorOffset === focusOffset;
}

/**
 * Get the appropriate anchor and focus node/offset pairs for IE.
 *
 * The catch here is that IE's selection API doesn't provide information
 * about whether the selection is forward or backward, so we have to
 * behave as though it's always forward.
 *
 * IE text differs from modern selection in that it behaves as though
 * block elements end with a new line. This means character offsets will
 * differ between the two APIs.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getIEOffsets(node) {
  var selection = document.selection;
  var selectedRange = selection.createRange();
  var selectedLength = selectedRange.text.length;

  // Duplicate selection so we can move range without breaking user selection.
  var fromStart = selectedRange.duplicate();
  fromStart.moveToElementText(node);
  fromStart.setEndPoint('EndToStart', selectedRange);

  var startOffset = fromStart.text.length;
  var endOffset = startOffset + selectedLength;

  return {
    start: startOffset,
    end: endOffset
  };
}

/**
 * @param {DOMElement} node
 * @return {?object}
 */
function getModernOffsets(node) {
  var selection = window.getSelection && window.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode;
  var anchorOffset = selection.anchorOffset;
  var focusNode = selection.focusNode;
  var focusOffset = selection.focusOffset;

  var currentRange = selection.getRangeAt(0);

  // In Firefox, range.startContainer and range.endContainer can be "anonymous
  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
  // divs do not seem to expose properties, triggering a "Permission denied
  // error" if any of its properties are accessed. The only seemingly possible
  // way to avoid erroring is to access a property that typically works for
  // non-anonymous divs and catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
  try {
    /* eslint-disable no-unused-expressions */
    currentRange.startContainer.nodeType;
    currentRange.endContainer.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  // If the node and offset values are the same, the selection is collapsed.
  // `Selection.isCollapsed` is available natively, but IE sometimes gets
  // this value wrong.
  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);

  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

  var tempRange = currentRange.cloneRange();
  tempRange.selectNodeContents(node);
  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);

  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
  var end = start + rangeLength;

  // Detect whether the selection is backward.
  var detectionRange = document.createRange();
  detectionRange.setStart(anchorNode, anchorOffset);
  detectionRange.setEnd(focusNode, focusOffset);
  var isBackward = detectionRange.collapsed;

  return {
    start: isBackward ? end : start,
    end: isBackward ? start : end
  };
}

/**
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setIEOffsets(node, offsets) {
  var range = document.selection.createRange().duplicate();
  var start, end;

  if (offsets.end === undefined) {
    start = offsets.start;
    end = start;
  } else if (offsets.start > offsets.end) {
    start = offsets.end;
    end = offsets.start;
  } else {
    start = offsets.start;
    end = offsets.end;
  }

  range.moveToElementText(node);
  range.moveStart('character', start);
  range.setEndPoint('EndToStart', range);
  range.moveEnd('character', end - start);
  range.select();
}

/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */
function setModernOffsets(node, offsets) {
  if (!window.getSelection) {
    return;
  }

  var selection = window.getSelection();
  var length = node[getTextContentAccessor()].length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);

  // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.
  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    var range = document.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);

var ReactDOMSelection = {
  /**
   * @param {DOMElement} node
   */
  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

  /**
   * @param {DOMElement|DOMTextNode} node
   * @param {object} offsets
   */
  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
};

module.exports = ReactDOMSelection;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactDefaultInjection = __webpack_require__(126);
var ReactServerRendering = __webpack_require__(142);
var ReactVersion = __webpack_require__(144);

ReactDefaultInjection.inject();

var ReactDOMServer = {
  renderToString: ReactServerRendering.renderToString,
  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
  version: ReactVersion
};

module.exports = ReactDOMServer;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var DOMChildrenOperations = __webpack_require__(30);
var DOMLazyTree = __webpack_require__(18);
var ReactDOMComponentTree = __webpack_require__(5);

var escapeTextContentForBrowser = __webpack_require__(27);
var invariant = __webpack_require__(1);
var validateDOMNesting = __webpack_require__(46);

/**
 * Text nodes violate a couple assumptions that React makes about components:
 *
 *  - When mounting text into the DOM, adjacent text nodes are merged.
 *  - Text nodes cannot be assigned a React root ID.
 *
 * This component is used to wrap strings between comment nodes so that they
 * can undergo the same reconciliation that is applied to elements.
 *
 * TODO: Investigate representing React components in the DOM with text nodes.
 *
 * @class ReactDOMTextComponent
 * @extends ReactComponent
 * @internal
 */
var ReactDOMTextComponent = function (text) {
  // TODO: This is really a ReactText (ReactNode), not a ReactElement
  this._currentElement = text;
  this._stringText = '' + text;
  // ReactDOMComponentTree uses these:
  this._hostNode = null;
  this._hostParent = null;

  // Properties
  this._domID = 0;
  this._mountIndex = 0;
  this._closingComment = null;
  this._commentNodes = null;
};

_assign(ReactDOMTextComponent.prototype, {

  /**
   * Creates the markup for this text node. This node is not intended to have
   * any features besides containing text content.
   *
   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
   * @return {string} Markup for this text node.
   * @internal
   */
  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
    if (process.env.NODE_ENV !== 'production') {
      var parentInfo;
      if (hostParent != null) {
        parentInfo = hostParent._ancestorInfo;
      } else if (hostContainerInfo != null) {
        parentInfo = hostContainerInfo._ancestorInfo;
      }
      if (parentInfo) {
        // parentInfo should always be present except for the top-level
        // component when server rendering
        validateDOMNesting(null, this._stringText, this, parentInfo);
      }
    }

    var domID = hostContainerInfo._idCounter++;
    var openingValue = ' react-text: ' + domID + ' ';
    var closingValue = ' /react-text ';
    this._domID = domID;
    this._hostParent = hostParent;
    if (transaction.useCreateElement) {
      var ownerDocument = hostContainerInfo._ownerDocument;
      var openingComment = ownerDocument.createComment(openingValue);
      var closingComment = ownerDocument.createComment(closingValue);
      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
      if (this._stringText) {
        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
      }
      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
      ReactDOMComponentTree.precacheNode(this, openingComment);
      this._closingComment = closingComment;
      return lazyTree;
    } else {
      var escapedText = escapeTextContentForBrowser(this._stringText);

      if (transaction.renderToStaticMarkup) {
        // Normally we'd wrap this between comment nodes for the reasons stated
        // above, but since this is a situation where React won't take over
        // (static pages), we can simply return the text as it is.
        return escapedText;
      }

      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
    }
  },

  /**
   * Updates this component by updating the text content.
   *
   * @param {ReactText} nextText The next text content
   * @param {ReactReconcileTransaction} transaction
   * @internal
   */
  receiveComponent: function (nextText, transaction) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        // TODO: Save this as pending props and use performUpdateIfNecessary
        // and/or updateComponent to do the actual update for consistency with
        // other component types?
        this._stringText = nextStringText;
        var commentNodes = this.getHostNode();
        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
      }
    }
  },

  getHostNode: function () {
    var hostNode = this._commentNodes;
    if (hostNode) {
      return hostNode;
    }
    if (!this._closingComment) {
      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
      var node = openingComment.nextSibling;
      while (true) {
        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
          this._closingComment = node;
          break;
        }
        node = node.nextSibling;
      }
    }
    hostNode = [this._hostNode, this._closingComment];
    this._commentNodes = hostNode;
    return hostNode;
  },

  unmountComponent: function () {
    this._closingComment = null;
    this._commentNodes = null;
    ReactDOMComponentTree.uncacheNode(this);
  }

});

module.exports = ReactDOMTextComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3),
    _assign = __webpack_require__(4);

var LinkedValueUtils = __webpack_require__(35);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var didWarnValueLink = false;
var didWarnValDefaultVal = false;

function forceUpdateIfMounted() {
  if (this._rootNodeID) {
    // DOM component is still mounted; update
    ReactDOMTextarea.updateWrapper(this);
  }
}

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
var ReactDOMTextarea = {
  getHostProps: function (inst, props) {
    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;

    // Always set children to the same thing. In IE9, the selection range will
    // get reset if `textContent` is mutated.  We could add a check in setTextContent
    // to only set the value if/when the value differs from the node value (which would
    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
    // The value can be a boolean or object so that's why it's forced to be a string.
    var hostProps = _assign({}, props, {
      value: undefined,
      defaultValue: undefined,
      children: '' + inst._wrapperState.initialValue,
      onChange: inst._wrapperState.onChange
    });

    return hostProps;
  },

  mountWrapper: function (inst, props) {
    if (process.env.NODE_ENV !== 'production') {
      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
      if (props.valueLink !== undefined && !didWarnValueLink) {
        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
        didWarnValueLink = true;
      }
      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
        didWarnValDefaultVal = true;
      }
    }

    var value = LinkedValueUtils.getValue(props);
    var initialValue = value;

    // Only bother fetching default value if we're going to use it
    if (value == null) {
      var defaultValue = props.defaultValue;
      // TODO (yungsters): Remove support for children content in <textarea>.
      var children = props.children;
      if (children != null) {
        if (process.env.NODE_ENV !== 'production') {
          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
        }
        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
        if (Array.isArray(children)) {
          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
          children = children[0];
        }

        defaultValue = '' + children;
      }
      if (defaultValue == null) {
        defaultValue = '';
      }
      initialValue = defaultValue;
    }

    inst._wrapperState = {
      initialValue: '' + initialValue,
      listeners: null,
      onChange: _handleChange.bind(inst)
    };
  },

  updateWrapper: function (inst) {
    var props = inst._currentElement.props;

    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var value = LinkedValueUtils.getValue(props);
    if (value != null) {
      // Cast `value` to a string to ensure the value is set correctly. While
      // browsers typically do this as necessary, jsdom doesn't.
      var newValue = '' + value;

      // To avoid side effects (such as losing text selection), only set value if changed
      if (newValue !== node.value) {
        node.value = newValue;
      }
      if (props.defaultValue == null) {
        node.defaultValue = newValue;
      }
    }
    if (props.defaultValue != null) {
      node.defaultValue = props.defaultValue;
    }
  },

  postMountWrapper: function (inst) {
    // This is in postMount because we need access to the DOM node, which is not
    // available until after the component has mounted.
    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
    var textContent = node.textContent;

    // Only set node.value if textContent is equal to the expected
    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
    // will populate textContent as well.
    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
    if (textContent === inst._wrapperState.initialValue) {
      node.value = textContent;
    }
  }
};

function _handleChange(event) {
  var props = this._currentElement.props;
  var returnValue = LinkedValueUtils.executeOnChange(props, event);
  ReactUpdates.asap(forceUpdateIfMounted, this);
  return returnValue;
}

module.exports = ReactDOMTextarea;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */
function getLowestCommonAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;

  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  // If A is deeper, crawl up.
  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  // If B is deeper, crawl up.
  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  // Walk in lockstep until we find a match.
  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

/**
 * Return if A is an ancestor of B.
 */
function isAncestor(instA, instB) {
  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;

  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

/**
 * Return the parent instance of the passed-in instance.
 */
function getParentInstance(inst) {
  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;

  return inst._hostParent;
}

/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */
function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */
function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactInvalidSetStateWarningHook = __webpack_require__(133);
var ReactHostOperationHistoryHook = __webpack_require__(131);
var ReactComponentTreeHook = __webpack_require__(9);
var ExecutionEnvironment = __webpack_require__(6);

var performanceNow = __webpack_require__(99);
var warning = __webpack_require__(2);

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),
      // Text nodes don't have owners but this is close enough.
      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
    lifeCycleTimerHasWarned = true;
  }
  if (isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure =
// $FlowFixMe https://github.com/facebook/flow/issues/2345
typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  // Chrome has an issue of dropping markers recorded too fast:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
  // To work around this, we will not report very small measurements.
  // I determined the magic number by tweaking it back and forth.
  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
  // When the bug is fixed, we can `measure()` unconditionally if we want to.
  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  performance.clearMeasures(measurementName);
}

var ReactDebugTool = {
  addHook: function (hook) {
    hooks.push(hook);
  },
  removeHook: function (hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function () {
    return isProfiling;
  },
  beginProfiling: function () {
    if (isProfiling) {
      return;
    }

    isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function () {
    if (!isProfiling) {
      return;
    }

    isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function () {
    return flushHistory;
  },
  onBeginFlush: function () {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function () {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function (debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function () {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function () {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function (operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function () {
    emitEvent('onSetState');
  },
  onSetChildren: function (debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function (debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function (debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function (debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function () {
    emitEvent('onTestEvent');
  }
};

// TODO remove these when RN/www gets updated
ReactDebugTool.addDevtool = ReactDebugTool.addHook;
ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ARIADOMPropertyConfig = __webpack_require__(101);
var BeforeInputEventPlugin = __webpack_require__(103);
var ChangeEventPlugin = __webpack_require__(105);
var DefaultEventPluginOrder = __webpack_require__(107);
var EnterLeaveEventPlugin = __webpack_require__(108);
var HTMLDOMPropertyConfig = __webpack_require__(110);
var ReactComponentBrowserEnvironment = __webpack_require__(112);
var ReactDOMComponent = __webpack_require__(114);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactDOMEmptyComponent = __webpack_require__(116);
var ReactDOMTreeTraversal = __webpack_require__(124);
var ReactDOMTextComponent = __webpack_require__(122);
var ReactDefaultBatchingStrategy = __webpack_require__(62);
var ReactEventListener = __webpack_require__(129);
var ReactInjection = __webpack_require__(132);
var ReactReconcileTransaction = __webpack_require__(139);
var SVGDOMPropertyConfig = __webpack_require__(145);
var SelectEventPlugin = __webpack_require__(146);
var SimpleEventPlugin = __webpack_require__(147);

var alreadyInjected = false;

function inject() {
  if (alreadyInjected) {
    // TODO: This is currently true because these injections are shared between
    // the client and the server package. They should be built independently
    // and not share any injection state. Then this problem will be solved.
    return;
  }
  alreadyInjected = true;

  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);

  /**
   * Inject modules for resolving DOM hierarchy and plugin ordering.
   */
  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);

  /**
   * Some important event plugins included by default (without having to require
   * them).
   */
  ReactInjection.EventPluginHub.injectEventPluginsByName({
    SimpleEventPlugin: SimpleEventPlugin,
    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
    ChangeEventPlugin: ChangeEventPlugin,
    SelectEventPlugin: SelectEventPlugin,
    BeforeInputEventPlugin: BeforeInputEventPlugin
  });

  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);

  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);

  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
    return new ReactDOMEmptyComponent(instantiate);
  });

  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
}

module.exports = {
  inject: inject
};

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPluginHub = __webpack_require__(20);

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {

  /**
   * Streams a fired top-level event to `EventPluginHub` where plugins have the
   * opportunity to create `ReactEvent`s to be dispatched.
   */
  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var EventListener = __webpack_require__(54);
var ExecutionEnvironment = __webpack_require__(6);
var PooledClass = __webpack_require__(13);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactUpdates = __webpack_require__(10);

var getEventTarget = __webpack_require__(43);
var getUnboundedScrollPosition = __webpack_require__(92);

/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */
function findParent(inst) {
  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.
  while (inst._hostParent) {
    inst = inst._hostParent;
  }
  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
  var container = rootNode.parentNode;
  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
}

// Used to store ancestor hierarchy in top level callback
function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
  this.topLevelType = topLevelType;
  this.nativeEvent = nativeEvent;
  this.ancestors = [];
}
_assign(TopLevelCallbackBookKeeping.prototype, {
  destructor: function () {
    this.topLevelType = null;
    this.nativeEvent = null;
    this.ancestors.length = 0;
  }
});
PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);

function handleTopLevelImpl(bookKeeping) {
  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);

  // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.
  var ancestor = targetInst;
  do {
    bookKeeping.ancestors.push(ancestor);
    ancestor = ancestor && findParent(ancestor);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
  }
}

function scrollValueMonitor(cb) {
  var scrollPosition = getUnboundedScrollPosition(window);
  cb(scrollPosition);
}

var ReactEventListener = {
  _enabled: true,
  _handleTopLevel: null,

  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

  setHandleTopLevel: function (handleTopLevel) {
    ReactEventListener._handleTopLevel = handleTopLevel;
  },

  setEnabled: function (enabled) {
    ReactEventListener._enabled = !!enabled;
  },

  isEnabled: function () {
    return ReactEventListener._enabled;
  },

  /**
   * Traps top-level events by using event bubbling.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  /**
   * Traps a top-level event by using event capturing.
   *
   * @param {string} topLevelType Record from `EventConstants`.
   * @param {string} handlerBaseName Event name (e.g. "click").
   * @param {object} element Element on which to attach listener.
   * @return {?object} An object with a remove function which will forcefully
   *                  remove the listener.
   * @internal
   */
  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
    if (!element) {
      return null;
    }
    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
  },

  monitorScrollValue: function (refresh) {
    var callback = scrollValueMonitor.bind(null, refresh);
    EventListener.listen(window, 'scroll', callback);
  },

  dispatchEvent: function (topLevelType, nativeEvent) {
    if (!ReactEventListener._enabled) {
      return;
    }

    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
    try {
      // Event queue being processed in the same cycle allows
      // `preventDefault`.
      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
    } finally {
      TopLevelCallbackBookKeeping.release(bookKeeping);
    }
  }
};

module.exports = ReactEventListener;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactFeatureFlags = {
  // When true, call console.time() before and .timeEnd() after each top-level
  // render (both initial renders and updates). Useful when looking at prod-mode
  // timeline profiles in Chrome, for example.
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function (operation) {
    history.push(operation);
  },
  clearHistory: function () {
    if (ReactHostOperationHistoryHook._preventClearing) {
      // Should only be used for tests.
      return;
    }

    history = [];
  },
  getHistory: function () {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var DOMProperty = __webpack_require__(19);
var EventPluginHub = __webpack_require__(20);
var EventPluginUtils = __webpack_require__(33);
var ReactComponentEnvironment = __webpack_require__(37);
var ReactEmptyComponent = __webpack_require__(63);
var ReactBrowserEventEmitter = __webpack_require__(36);
var ReactHostComponent = __webpack_require__(64);
var ReactUpdates = __webpack_require__(10);

var ReactInjection = {
  Component: ReactComponentEnvironment.injection,
  DOMProperty: DOMProperty.injection,
  EmptyComponent: ReactEmptyComponent.injection,
  EventPluginHub: EventPluginHub.injection,
  EventPluginUtils: EventPluginUtils.injection,
  EventEmitter: ReactBrowserEventEmitter.injection,
  HostComponent: ReactHostComponent.injection,
  Updates: ReactUpdates.injection
};

module.exports = ReactInjection;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var warning = __webpack_require__(2);

if (process.env.NODE_ENV !== 'production') {
  var processingChildContext = false;

  var warnInvalidSetState = function () {
    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function () {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function () {
    processingChildContext = false;
  },
  onSetState: function () {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var adler32 = __webpack_require__(158);

var TAG_END = /\/?>/;
var COMMENT_START = /^<\!\-\-/;

var ReactMarkupChecksum = {
  CHECKSUM_ATTR_NAME: 'data-react-checksum',

  /**
   * @param {string} markup Markup string
   * @return {string} Markup string with checksum attribute attached
   */
  addChecksumToMarkup: function (markup) {
    var checksum = adler32(markup);

    // Add checksum (handle both parent tags, comments and self-closing tags)
    if (COMMENT_START.test(markup)) {
      return markup;
    } else {
      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
    }
  },

  /**
   * @param {string} markup to use
   * @param {DOMElement} element root React element
   * @returns {boolean} whether or not the markup is the same
   */
  canReuseMarkup: function (markup, element) {
    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
    var markupChecksum = adler32(markup);
    return markupChecksum === existingChecksum;
  }
};

module.exports = ReactMarkupChecksum;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactComponentEnvironment = __webpack_require__(37);
var ReactInstanceMap = __webpack_require__(39);
var ReactInstrumentation = __webpack_require__(8);

var ReactCurrentOwner = __webpack_require__(12);
var ReactReconciler = __webpack_require__(22);
var ReactChildReconciler = __webpack_require__(111);

var emptyFunction = __webpack_require__(7);
var flattenChildren = __webpack_require__(161);
var invariant = __webpack_require__(1);

/**
 * Make an update for markup to be rendered and inserted at a supplied index.
 *
 * @param {string} markup Markup that renders into an element.
 * @param {number} toIndex Destination index.
 * @private
 */
function makeInsertMarkup(markup, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for moving an existing element to another index.
 *
 * @param {number} fromIndex Source index of the existing element.
 * @param {number} toIndex Destination index of the element.
 * @private
 */
function makeMove(child, afterNode, toIndex) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

/**
 * Make an update for removing an element at an index.
 *
 * @param {number} fromIndex Index of the element to remove.
 * @private
 */
function makeRemove(child, node) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the markup of a node.
 *
 * @param {string} markup Markup that renders into an element.
 * @private
 */
function makeSetMarkup(markup) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Make an update for setting the text content.
 *
 * @param {string} textContent Text content to set.
 * @private
 */
function makeTextContent(textContent) {
  // NOTE: Null values reduce hidden classes.
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

/**
 * Push an update, if any, onto the queue. Creates a new queue if none is
 * passed and always returns the queue. Mutative.
 */
function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

/**
 * Processes any enqueued updates.
 *
 * @private
 */
function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (process.env.NODE_ENV !== 'production') {
  var getDebugID = function (inst) {
    if (!inst._debugID) {
      // Check for ART-like instances. TODO: This is silly/gross.
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function (children) {
    var debugID = getDebugID(this);
    // TODO: React Native empty components are also multichild.
    // This means they still get into this method but don't have _debugID.
    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

/**
 * ReactMultiChild are capable of reconciling multiple children.
 *
 * @class ReactMultiChild
 * @internal
 */
var ReactMultiChild = {

  /**
   * Provides common functionality for components that must reconcile multiple
   * children. This is used by `ReactDOMComponent` to mount, update, and
   * unmount child components.
   *
   * @lends {ReactMultiChild.prototype}
   */
  Mixin: {

    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
      if (process.env.NODE_ENV !== 'production') {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
        }
      }
      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
    },

    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
      var nextChildren;
      var selfDebugID = 0;
      if (process.env.NODE_ENV !== 'production') {
        selfDebugID = getDebugID(this);
        if (this._currentElement) {
          try {
            ReactCurrentOwner.current = this._currentElement._owner;
            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
          } finally {
            ReactCurrentOwner.current = null;
          }
          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
          return nextChildren;
        }
      }
      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
      return nextChildren;
    },

    /**
     * Generates a "mount image" for each of the supplied children. In the case
     * of `ReactDOMComponent`, a mount image is a string of markup.
     *
     * @param {?object} nestedChildren Nested child maps.
     * @return {array} An array of mounted representations.
     * @internal
     */
    mountChildren: function (nestedChildren, transaction, context) {
      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
      this._renderedChildren = children;

      var mountImages = [];
      var index = 0;
      for (var name in children) {
        if (children.hasOwnProperty(name)) {
          var child = children[name];
          var selfDebugID = 0;
          if (process.env.NODE_ENV !== 'production') {
            selfDebugID = getDebugID(this);
          }
          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
          child._mountIndex = index++;
          mountImages.push(mountImage);
        }
      }

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, children);
      }

      return mountImages;
    },

    /**
     * Replaces any rendered children with a text content string.
     *
     * @param {string} nextContent String of content.
     * @internal
     */
    updateTextContent: function (nextContent) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      // Set new text content.
      var updates = [makeTextContent(nextContent)];
      processQueue(this, updates);
    },

    /**
     * Replaces any rendered children with a markup string.
     *
     * @param {string} nextMarkup String of markup.
     * @internal
     */
    updateMarkup: function (nextMarkup) {
      var prevChildren = this._renderedChildren;
      // Remove any rendered children.
      ReactChildReconciler.unmountChildren(prevChildren, false);
      for (var name in prevChildren) {
        if (prevChildren.hasOwnProperty(name)) {
           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
        }
      }
      var updates = [makeSetMarkup(nextMarkup)];
      processQueue(this, updates);
    },

    /**
     * Updates the rendered children with new children.
     *
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @internal
     */
    updateChildren: function (nextNestedChildrenElements, transaction, context) {
      // Hook used by React ART
      this._updateChildren(nextNestedChildrenElements, transaction, context);
    },

    /**
     * @param {?object} nextNestedChildrenElements Nested child element maps.
     * @param {ReactReconcileTransaction} transaction
     * @final
     * @protected
     */
    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
      var prevChildren = this._renderedChildren;
      var removedNodes = {};
      var mountImages = [];
      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
      if (!nextChildren && !prevChildren) {
        return;
      }
      var updates = null;
      var name;
      // `nextIndex` will increment for each child in `nextChildren`, but
      // `lastIndex` will be the last index visited in `prevChildren`.
      var nextIndex = 0;
      var lastIndex = 0;
      // `nextMountIndex` will increment for each newly mounted child.
      var nextMountIndex = 0;
      var lastPlacedNode = null;
      for (name in nextChildren) {
        if (!nextChildren.hasOwnProperty(name)) {
          continue;
        }
        var prevChild = prevChildren && prevChildren[name];
        var nextChild = nextChildren[name];
        if (prevChild === nextChild) {
          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
          prevChild._mountIndex = nextIndex;
        } else {
          if (prevChild) {
            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
            // The `removedNodes` loop below will actually remove the child.
          }
          // The child must be instantiated before it's mounted.
          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
          nextMountIndex++;
        }
        nextIndex++;
        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
      }
      // Remove children that are no longer present.
      for (name in removedNodes) {
        if (removedNodes.hasOwnProperty(name)) {
          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
        }
      }
      if (updates) {
        processQueue(this, updates);
      }
      this._renderedChildren = nextChildren;

      if (process.env.NODE_ENV !== 'production') {
        setChildrenForInstrumentation.call(this, nextChildren);
      }
    },

    /**
     * Unmounts all rendered children. This should be used to clean up children
     * when this component is unmounted. It does not actually perform any
     * backend operations.
     *
     * @internal
     */
    unmountChildren: function (safely) {
      var renderedChildren = this._renderedChildren;
      ReactChildReconciler.unmountChildren(renderedChildren, safely);
      this._renderedChildren = null;
    },

    /**
     * Moves a child component to the supplied index.
     *
     * @param {ReactComponent} child Component to move.
     * @param {number} toIndex Destination index of the element.
     * @param {number} lastIndex Last index visited of the siblings of `child`.
     * @protected
     */
    moveChild: function (child, afterNode, toIndex, lastIndex) {
      // If the index of `child` is less than `lastIndex`, then it needs to
      // be moved. Otherwise, we do not need to move it because a child will be
      // inserted or moved before `child`.
      if (child._mountIndex < lastIndex) {
        return makeMove(child, afterNode, toIndex);
      }
    },

    /**
     * Creates a child component.
     *
     * @param {ReactComponent} child Component to create.
     * @param {string} mountImage Markup to insert.
     * @protected
     */
    createChild: function (child, afterNode, mountImage) {
      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },

    /**
     * Removes a child component.
     *
     * @param {ReactComponent} child Child to remove.
     * @protected
     */
    removeChild: function (child, node) {
      return makeRemove(child, node);
    },

    /**
     * Mounts a child with the supplied name.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to mount.
     * @param {string} name Name of the child.
     * @param {number} index Index at which to insert the child.
     * @param {ReactReconcileTransaction} transaction
     * @private
     */
    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
      child._mountIndex = index;
      return this.createChild(child, afterNode, mountImage);
    },

    /**
     * Unmounts a rendered child.
     *
     * NOTE: This is part of `updateChildren` and is here for readability.
     *
     * @param {ReactComponent} child Component to unmount.
     * @private
     */
    _unmountChild: function (child, node) {
      var update = this.removeChild(child, node);
      child._mountIndex = null;
      return update;
    }

  }

};

module.exports = ReactMultiChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(24);

var invariant = __webpack_require__(1);

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function (node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
  }
};

module.exports = ReactNodeTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var invariant = __webpack_require__(1);

/**
 * @param {?object} object
 * @return {boolean} True if `object` is a valid owner.
 * @final
 */
function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

/**
 * ReactOwners are capable of storing references to owned components.
 *
 * All components are capable of //being// referenced by owner components, but
 * only ReactOwner components are capable of //referencing// owned components.
 * The named reference is known as a "ref".
 *
 * Refs are available when mounted and updated during reconciliation.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return (
 *         <div onClick={this.handleClick}>
 *           <CustomComponent ref="custom" />
 *         </div>
 *       );
 *     },
 *     handleClick: function() {
 *       this.refs.custom.handleClick();
 *     },
 *     componentDidMount: function() {
 *       this.refs.custom.initialize();
 *     }
 *   });
 *
 * Refs should rarely be used. When refs are used, they should only be done to
 * control data that is not handled by React's data flow.
 *
 * @class ReactOwner
 */
var ReactOwner = {
  /**
   * Adds a component by ref to an owner component.
   *
   * @param {ReactComponent} component Component to reference.
   * @param {string} ref Name by which to refer to the component.
   * @param {ReactOwner} owner Component on which to record the ref.
   * @final
   * @internal
   */
  addComponentAsRefTo: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
    owner.attachRef(ref, component);
  },

  /**
   * Removes a component by ref from an owner component.
   *
   * @param {ReactComponent} component Component to dereference.
   * @param {string} ref Name of the ref to remove.
   * @param {ReactOwner} owner Component on which the ref is recorded.
   * @final
   * @internal
   */
  removeComponentAsRefFrom: function (component, ref, owner) {
    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
    var ownerPublicInstance = owner.getPublicInstance();
    // Check that `component`'s owner is still alive and that `component` is still the current ref
    // because we do not want to detach the ref if another component stole it.
    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var CallbackQueue = __webpack_require__(58);
var PooledClass = __webpack_require__(13);
var ReactBrowserEventEmitter = __webpack_require__(36);
var ReactInputSelection = __webpack_require__(65);
var ReactInstrumentation = __webpack_require__(8);
var Transaction = __webpack_require__(26);
var ReactUpdateQueue = __webpack_require__(68);

/**
 * Ensures that, when possible, the selection range (currently selected text
 * input) is not disturbed by performing the transaction.
 */
var SELECTION_RESTORATION = {
  /**
   * @return {Selection} Selection information.
   */
  initialize: ReactInputSelection.getSelectionInformation,
  /**
   * @param {Selection} sel Selection information returned from `initialize`.
   */
  close: ReactInputSelection.restoreSelection
};

/**
 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
 * high level DOM manipulations (like temporarily removing a text input from the
 * DOM).
 */
var EVENT_SUPPRESSION = {
  /**
   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
   * the reconciliation.
   */
  initialize: function () {
    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
    ReactBrowserEventEmitter.setEnabled(false);
    return currentlyEnabled;
  },

  /**
   * @param {boolean} previouslyEnabled Enabled status of
   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
   *   restores the previous value.
   */
  close: function (previouslyEnabled) {
    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
  }
};

/**
 * Provides a queue for collecting `componentDidMount` and
 * `componentDidUpdate` callbacks during the transaction.
 */
var ON_DOM_READY_QUEUEING = {
  /**
   * Initializes the internal `onDOMReady` queue.
   */
  initialize: function () {
    this.reactMountReady.reset();
  },

  /**
   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
   */
  close: function () {
    this.reactMountReady.notifyAll();
  }
};

/**
 * Executed within the scope of the `Transaction` instance. Consider these as
 * being member methods, but with an implied ordering while being isolated from
 * each other.
 */
var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];

if (process.env.NODE_ENV !== 'production') {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

/**
 * Currently:
 * - The order that these are listed in the transaction is critical:
 * - Suppresses events.
 * - Restores selection range.
 *
 * Future:
 * - Restore document/overflow scroll positions that were unintentionally
 *   modified via DOM insertions above the top viewport boundary.
 * - Implement/integrate with customized constraint based layout system and keep
 *   track of which dimensions must be remeasured.
 *
 * @class ReactReconcileTransaction
 */
function ReactReconcileTransaction(useCreateElement) {
  this.reinitializeTransaction();
  // Only server-side rendering really needs this option (see
  // `ReactServerRendering`), but server-side uses
  // `ReactServerRenderingTransaction` instead. This option is here so that it's
  // accessible and defaults to false when `ReactDOMComponent` and
  // `ReactDOMTextComponent` checks it in `mountComponent`.`
  this.renderToStaticMarkup = false;
  this.reactMountReady = CallbackQueue.getPooled(null);
  this.useCreateElement = useCreateElement;
}

var Mixin = {
  /**
   * @see Transaction
   * @abstract
   * @final
   * @return {array<object>} List of operation wrap procedures.
   *   TODO: convert to array<TransactionWrapper>
   */
  getTransactionWrappers: function () {
    return TRANSACTION_WRAPPERS;
  },

  /**
   * @return {object} The queue to collect `onDOMReady` callbacks with.
   */
  getReactMountReady: function () {
    return this.reactMountReady;
  },

  /**
   * @return {object} The queue to collect React async events.
   */
  getUpdateQueue: function () {
    return ReactUpdateQueue;
  },

  /**
   * Save current transaction state -- if the return value from this method is
   * passed to `rollback`, the transaction will be reset to that state.
   */
  checkpoint: function () {
    // reactMountReady is the our only stateful wrapper
    return this.reactMountReady.checkpoint();
  },

  rollback: function (checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  /**
   * `PooledClass` looks for this, and will invoke this before allowing this
   * instance to be reused.
   */
  destructor: function () {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);

PooledClass.addPoolingTo(ReactReconcileTransaction);

module.exports = ReactReconcileTransaction;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactOwner = __webpack_require__(137);

var ReactRef = {};

function attachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance());
  } else {
    // Legacy ref
    ReactOwner.addComponentAsRefTo(component, ref, owner);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    // Legacy ref
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
  // If either the owner or a `ref` has changed, make sure the newest owner
  // has stored a reference to `this`, and the previous owner (if different)
  // has forgotten the reference to `this`. We use the element instead
  // of the public this.props because the post processing cannot determine
  // a ref. The ref conceptually lives on the element.

  // TODO: Should this even be possible? The owner cannot change because
  // it's forbidden by shouldUpdateReactComponent. The ref can change
  // if you swap the keys of but not the refs. Reconsider where this check
  // is made. It probably belongs where the key checking and
  // instantiateReactComponent is done.

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef ||
  // If owner changes but we have an unchanged function ref, don't update refs
  typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactServerBatchingStrategy = {
  isBatchingUpdates: false,
  batchedUpdates: function (callback) {
    // Don't do anything here. During the server rendering we don't want to
    // schedule any updates. We will simply ignore them.
  }
};

module.exports = ReactServerBatchingStrategy;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(3);

var React = __webpack_require__(24);
var ReactDOMContainerInfo = __webpack_require__(115);
var ReactDefaultBatchingStrategy = __webpack_require__(62);
var ReactInstrumentation = __webpack_require__(8);
var ReactMarkupChecksum = __webpack_require__(134);
var ReactReconciler = __webpack_require__(22);
var ReactServerBatchingStrategy = __webpack_require__(141);
var ReactServerRenderingTransaction = __webpack_require__(67);
var ReactUpdates = __webpack_require__(10);

var emptyObject = __webpack_require__(17);
var instantiateReactComponent = __webpack_require__(73);
var invariant = __webpack_require__(1);

var pendingTransactions = 0;

/**
 * @param {ReactElement} element
 * @return {string} the HTML markup
 */
function renderToStringImpl(element, makeStaticMarkup) {
  var transaction;
  try {
    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);

    transaction = ReactServerRenderingTransaction.getPooled(makeStaticMarkup);

    pendingTransactions++;

    return transaction.perform(function () {
      var componentInstance = instantiateReactComponent(element, true);
      var markup = ReactReconciler.mountComponent(componentInstance, transaction, null, ReactDOMContainerInfo(), emptyObject, 0 /* parentDebugID */
      );
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onUnmountComponent(componentInstance._debugID);
      }
      if (!makeStaticMarkup) {
        markup = ReactMarkupChecksum.addChecksumToMarkup(markup);
      }
      return markup;
    }, null);
  } finally {
    pendingTransactions--;
    ReactServerRenderingTransaction.release(transaction);
    // Revert to the DOM batching strategy since these two renderers
    // currently share these stateful modules.
    if (!pendingTransactions) {
      ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
    }
  }
}

/**
 * Render a ReactElement to its initial HTML. This should only be used on the
 * server.
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring
 */
function renderToString(element) {
  !React.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : _prodInvariant('46') : void 0;
  return renderToStringImpl(element, false);
}

/**
 * Similar to renderToString, except this doesn't create extra DOM attributes
 * such as data-react-id that React uses internally.
 * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostaticmarkup
 */
function renderToStaticMarkup(element) {
  !React.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : _prodInvariant('47') : void 0;
  return renderToStringImpl(element, true);
}

module.exports = {
  renderToString: renderToString,
  renderToStaticMarkup: renderToStaticMarkup
};
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ReactUpdateQueue = __webpack_require__(68);

var warning = __webpack_require__(2);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the update queue used for server rendering.
 * It delegates to ReactUpdateQueue while server rendering is in progress and
 * switches to ReactNoopUpdateQueue after the transaction has completed.
 * @class ReactServerUpdateQueue
 * @param {Transaction} transaction
 */

var ReactServerUpdateQueue = function () {
  function ReactServerUpdateQueue(transaction) {
    _classCallCheck(this, ReactServerUpdateQueue);

    this.transaction = transaction;
  }

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */


  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
    return false;
  };

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
    }
  };

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
    } else {
      warnNoop(publicInstance, 'forceUpdate');
    }
  };

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} completeState Next state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
    } else {
      warnNoop(publicInstance, 'replaceState');
    }
  };

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object|function} partialState Next partial state to be merged with state.
   * @internal
   */


  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
    if (this.transaction.isInTransaction()) {
      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
    } else {
      warnNoop(publicInstance, 'setState');
    }
  };

  return ReactServerUpdateQueue;
}();

module.exports = ReactServerUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.4.2';

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var NS = {
  xlink: 'http://www.w3.org/1999/xlink',
  xml: 'http://www.w3.org/XML/1998/namespace'
};

// We use attributes for everything SVG so let's avoid some duplication and run
// code instead.
// The following are all specified in the HTML config already so we exclude here.
// - class (as className)
// - color
// - height
// - id
// - lang
// - max
// - media
// - method
// - min
// - name
// - style
// - target
// - type
// - width
var ATTRS = {
  accentHeight: 'accent-height',
  accumulate: 0,
  additive: 0,
  alignmentBaseline: 'alignment-baseline',
  allowReorder: 'allowReorder',
  alphabetic: 0,
  amplitude: 0,
  arabicForm: 'arabic-form',
  ascent: 0,
  attributeName: 'attributeName',
  attributeType: 'attributeType',
  autoReverse: 'autoReverse',
  azimuth: 0,
  baseFrequency: 'baseFrequency',
  baseProfile: 'baseProfile',
  baselineShift: 'baseline-shift',
  bbox: 0,
  begin: 0,
  bias: 0,
  by: 0,
  calcMode: 'calcMode',
  capHeight: 'cap-height',
  clip: 0,
  clipPath: 'clip-path',
  clipRule: 'clip-rule',
  clipPathUnits: 'clipPathUnits',
  colorInterpolation: 'color-interpolation',
  colorInterpolationFilters: 'color-interpolation-filters',
  colorProfile: 'color-profile',
  colorRendering: 'color-rendering',
  contentScriptType: 'contentScriptType',
  contentStyleType: 'contentStyleType',
  cursor: 0,
  cx: 0,
  cy: 0,
  d: 0,
  decelerate: 0,
  descent: 0,
  diffuseConstant: 'diffuseConstant',
  direction: 0,
  display: 0,
  divisor: 0,
  dominantBaseline: 'dominant-baseline',
  dur: 0,
  dx: 0,
  dy: 0,
  edgeMode: 'edgeMode',
  elevation: 0,
  enableBackground: 'enable-background',
  end: 0,
  exponent: 0,
  externalResourcesRequired: 'externalResourcesRequired',
  fill: 0,
  fillOpacity: 'fill-opacity',
  fillRule: 'fill-rule',
  filter: 0,
  filterRes: 'filterRes',
  filterUnits: 'filterUnits',
  floodColor: 'flood-color',
  floodOpacity: 'flood-opacity',
  focusable: 0,
  fontFamily: 'font-family',
  fontSize: 'font-size',
  fontSizeAdjust: 'font-size-adjust',
  fontStretch: 'font-stretch',
  fontStyle: 'font-style',
  fontVariant: 'font-variant',
  fontWeight: 'font-weight',
  format: 0,
  from: 0,
  fx: 0,
  fy: 0,
  g1: 0,
  g2: 0,
  glyphName: 'glyph-name',
  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
  glyphOrientationVertical: 'glyph-orientation-vertical',
  glyphRef: 'glyphRef',
  gradientTransform: 'gradientTransform',
  gradientUnits: 'gradientUnits',
  hanging: 0,
  horizAdvX: 'horiz-adv-x',
  horizOriginX: 'horiz-origin-x',
  ideographic: 0,
  imageRendering: 'image-rendering',
  'in': 0,
  in2: 0,
  intercept: 0,
  k: 0,
  k1: 0,
  k2: 0,
  k3: 0,
  k4: 0,
  kernelMatrix: 'kernelMatrix',
  kernelUnitLength: 'kernelUnitLength',
  kerning: 0,
  keyPoints: 'keyPoints',
  keySplines: 'keySplines',
  keyTimes: 'keyTimes',
  lengthAdjust: 'lengthAdjust',
  letterSpacing: 'letter-spacing',
  lightingColor: 'lighting-color',
  limitingConeAngle: 'limitingConeAngle',
  local: 0,
  markerEnd: 'marker-end',
  markerMid: 'marker-mid',
  markerStart: 'marker-start',
  markerHeight: 'markerHeight',
  markerUnits: 'markerUnits',
  markerWidth: 'markerWidth',
  mask: 0,
  maskContentUnits: 'maskContentUnits',
  maskUnits: 'maskUnits',
  mathematical: 0,
  mode: 0,
  numOctaves: 'numOctaves',
  offset: 0,
  opacity: 0,
  operator: 0,
  order: 0,
  orient: 0,
  orientation: 0,
  origin: 0,
  overflow: 0,
  overlinePosition: 'overline-position',
  overlineThickness: 'overline-thickness',
  paintOrder: 'paint-order',
  panose1: 'panose-1',
  pathLength: 'pathLength',
  patternContentUnits: 'patternContentUnits',
  patternTransform: 'patternTransform',
  patternUnits: 'patternUnits',
  pointerEvents: 'pointer-events',
  points: 0,
  pointsAtX: 'pointsAtX',
  pointsAtY: 'pointsAtY',
  pointsAtZ: 'pointsAtZ',
  preserveAlpha: 'preserveAlpha',
  preserveAspectRatio: 'preserveAspectRatio',
  primitiveUnits: 'primitiveUnits',
  r: 0,
  radius: 0,
  refX: 'refX',
  refY: 'refY',
  renderingIntent: 'rendering-intent',
  repeatCount: 'repeatCount',
  repeatDur: 'repeatDur',
  requiredExtensions: 'requiredExtensions',
  requiredFeatures: 'requiredFeatures',
  restart: 0,
  result: 0,
  rotate: 0,
  rx: 0,
  ry: 0,
  scale: 0,
  seed: 0,
  shapeRendering: 'shape-rendering',
  slope: 0,
  spacing: 0,
  specularConstant: 'specularConstant',
  specularExponent: 'specularExponent',
  speed: 0,
  spreadMethod: 'spreadMethod',
  startOffset: 'startOffset',
  stdDeviation: 'stdDeviation',
  stemh: 0,
  stemv: 0,
  stitchTiles: 'stitchTiles',
  stopColor: 'stop-color',
  stopOpacity: 'stop-opacity',
  strikethroughPosition: 'strikethrough-position',
  strikethroughThickness: 'strikethrough-thickness',
  string: 0,
  stroke: 0,
  strokeDasharray: 'stroke-dasharray',
  strokeDashoffset: 'stroke-dashoffset',
  strokeLinecap: 'stroke-linecap',
  strokeLinejoin: 'stroke-linejoin',
  strokeMiterlimit: 'stroke-miterlimit',
  strokeOpacity: 'stroke-opacity',
  strokeWidth: 'stroke-width',
  surfaceScale: 'surfaceScale',
  systemLanguage: 'systemLanguage',
  tableValues: 'tableValues',
  targetX: 'targetX',
  targetY: 'targetY',
  textAnchor: 'text-anchor',
  textDecoration: 'text-decoration',
  textRendering: 'text-rendering',
  textLength: 'textLength',
  to: 0,
  transform: 0,
  u1: 0,
  u2: 0,
  underlinePosition: 'underline-position',
  underlineThickness: 'underline-thickness',
  unicode: 0,
  unicodeBidi: 'unicode-bidi',
  unicodeRange: 'unicode-range',
  unitsPerEm: 'units-per-em',
  vAlphabetic: 'v-alphabetic',
  vHanging: 'v-hanging',
  vIdeographic: 'v-ideographic',
  vMathematical: 'v-mathematical',
  values: 0,
  vectorEffect: 'vector-effect',
  version: 0,
  vertAdvY: 'vert-adv-y',
  vertOriginX: 'vert-origin-x',
  vertOriginY: 'vert-origin-y',
  viewBox: 'viewBox',
  viewTarget: 'viewTarget',
  visibility: 0,
  widths: 0,
  wordSpacing: 'word-spacing',
  writingMode: 'writing-mode',
  x: 0,
  xHeight: 'x-height',
  x1: 0,
  x2: 0,
  xChannelSelector: 'xChannelSelector',
  xlinkActuate: 'xlink:actuate',
  xlinkArcrole: 'xlink:arcrole',
  xlinkHref: 'xlink:href',
  xlinkRole: 'xlink:role',
  xlinkShow: 'xlink:show',
  xlinkTitle: 'xlink:title',
  xlinkType: 'xlink:type',
  xmlBase: 'xml:base',
  xmlns: 0,
  xmlnsXlink: 'xmlns:xlink',
  xmlLang: 'xml:lang',
  xmlSpace: 'xml:space',
  y: 0,
  y1: 0,
  y2: 0,
  yChannelSelector: 'yChannelSelector',
  z: 0,
  zoomAndPan: 'zoomAndPan'
};

var SVGDOMPropertyConfig = {
  Properties: {},
  DOMAttributeNamespaces: {
    xlinkActuate: NS.xlink,
    xlinkArcrole: NS.xlink,
    xlinkHref: NS.xlink,
    xlinkRole: NS.xlink,
    xlinkShow: NS.xlink,
    xlinkTitle: NS.xlink,
    xlinkType: NS.xlink,
    xmlBase: NS.xml,
    xmlLang: NS.xml,
    xmlSpace: NS.xml
  },
  DOMAttributeNames: {}
};

Object.keys(ATTRS).forEach(function (key) {
  SVGDOMPropertyConfig.Properties[key] = 0;
  if (ATTRS[key]) {
    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
  }
});

module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var EventPropagators = __webpack_require__(21);
var ExecutionEnvironment = __webpack_require__(6);
var ReactDOMComponentTree = __webpack_require__(5);
var ReactInputSelection = __webpack_require__(65);
var SyntheticEvent = __webpack_require__(11);

var getActiveElement = __webpack_require__(56);
var isTextInputElement = __webpack_require__(74);
var shallowEqual = __webpack_require__(29);

var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;

var eventTypes = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
  }
};

var activeElement = null;
var activeElementInst = null;
var lastSelection = null;
var mouseDown = false;

// Track whether a listener exists for this plugin. If none exist, we do
// not extract events. See #3639.
var hasListener = false;

/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */
function getSelection(node) {
  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else if (window.getSelection) {
    var selection = window.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  } else if (document.selection) {
    var range = document.selection.createRange();
    return {
      parentElement: range.parentElement(),
      text: range.text,
      top: range.boundingTop,
      left: range.boundingLeft
    };
  }
}

/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @return {?SyntheticEvent}
 */
function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
    return null;
  }

  // Only fire when selection has actually changed.
  var currentSelection = getSelection(activeElement);
  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;

    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);

    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement;

    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

    return syntheticEvent;
  }

  return null;
}

/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */
var SelectEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (!hasListener) {
      return null;
    }

    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case 'topFocus':
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement = targetNode;
          activeElementInst = targetInst;
          lastSelection = null;
        }
        break;
      case 'topBlur':
        activeElement = null;
        activeElementInst = null;
        lastSelection = null;
        break;

      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.
      case 'topMouseDown':
        mouseDown = true;
        break;
      case 'topContextMenu':
      case 'topMouseUp':
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);

      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.
      case 'topSelectionChange':
        if (skipSelectionChangeEvent) {
          break;
        }
      // falls through
      case 'topKeyDown':
      case 'topKeyUp':
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  },

  didPutListener: function (inst, registrationName, listener) {
    if (registrationName === 'onSelect') {
      hasListener = true;
    }
  }
};

module.exports = SelectEventPlugin;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(3);

var EventListener = __webpack_require__(54);
var EventPropagators = __webpack_require__(21);
var ReactDOMComponentTree = __webpack_require__(5);
var SyntheticAnimationEvent = __webpack_require__(148);
var SyntheticClipboardEvent = __webpack_require__(149);
var SyntheticEvent = __webpack_require__(11);
var SyntheticFocusEvent = __webpack_require__(152);
var SyntheticKeyboardEvent = __webpack_require__(154);
var SyntheticMouseEvent = __webpack_require__(25);
var SyntheticDragEvent = __webpack_require__(151);
var SyntheticTouchEvent = __webpack_require__(155);
var SyntheticTransitionEvent = __webpack_require__(156);
var SyntheticUIEvent = __webpack_require__(23);
var SyntheticWheelEvent = __webpack_require__(157);

var emptyFunction = __webpack_require__(7);
var getEventCharCode = __webpack_require__(41);
var invariant = __webpack_require__(1);

/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: ['topAbort'],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = {
 *   'topAbort': { sameConfig }
 * };
 */
var eventTypes = {};
var topLevelEventsToDispatchConfig = {};
['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
  var onEvent = 'on' + capitalizedEvent;
  var topEvent = 'top' + capitalizedEvent;

  var type = {
    phasedRegistrationNames: {
      bubbled: onEvent,
      captured: onEvent + 'Capture'
    },
    dependencies: [topEvent]
  };
  eventTypes[event] = type;
  topLevelEventsToDispatchConfig[topEvent] = type;
});

var onClickListeners = {};

function getDictionaryKey(inst) {
  // Prevents V8 performance issue:
  // https://github.com/facebook/react/pull/7232
  return '.' + inst._rootNodeID;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

var SimpleEventPlugin = {

  eventTypes: eventTypes,

  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
    if (!dispatchConfig) {
      return null;
    }
    var EventConstructor;
    switch (topLevelType) {
      case 'topAbort':
      case 'topCanPlay':
      case 'topCanPlayThrough':
      case 'topDurationChange':
      case 'topEmptied':
      case 'topEncrypted':
      case 'topEnded':
      case 'topError':
      case 'topInput':
      case 'topInvalid':
      case 'topLoad':
      case 'topLoadedData':
      case 'topLoadedMetadata':
      case 'topLoadStart':
      case 'topPause':
      case 'topPlay':
      case 'topPlaying':
      case 'topProgress':
      case 'topRateChange':
      case 'topReset':
      case 'topSeeked':
      case 'topSeeking':
      case 'topStalled':
      case 'topSubmit':
      case 'topSuspend':
      case 'topTimeUpdate':
      case 'topVolumeChange':
      case 'topWaiting':
        // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0
        EventConstructor = SyntheticEvent;
        break;
      case 'topKeyPress':
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }
      /* falls through */
      case 'topKeyDown':
      case 'topKeyUp':
        EventConstructor = SyntheticKeyboardEvent;
        break;
      case 'topBlur':
      case 'topFocus':
        EventConstructor = SyntheticFocusEvent;
        break;
      case 'topClick':
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }
      /* falls through */
      case 'topDoubleClick':
      case 'topMouseDown':
      case 'topMouseMove':
      case 'topMouseUp':
      // TODO: Disabled elements should not respond to mouse events
      /* falls through */
      case 'topMouseOut':
      case 'topMouseOver':
      case 'topContextMenu':
        EventConstructor = SyntheticMouseEvent;
        break;
      case 'topDrag':
      case 'topDragEnd':
      case 'topDragEnter':
      case 'topDragExit':
      case 'topDragLeave':
      case 'topDragOver':
      case 'topDragStart':
      case 'topDrop':
        EventConstructor = SyntheticDragEvent;
        break;
      case 'topTouchCancel':
      case 'topTouchEnd':
      case 'topTouchMove':
      case 'topTouchStart':
        EventConstructor = SyntheticTouchEvent;
        break;
      case 'topAnimationEnd':
      case 'topAnimationIteration':
      case 'topAnimationStart':
        EventConstructor = SyntheticAnimationEvent;
        break;
      case 'topTransitionEnd':
        EventConstructor = SyntheticTransitionEvent;
        break;
      case 'topScroll':
        EventConstructor = SyntheticUIEvent;
        break;
      case 'topWheel':
        EventConstructor = SyntheticWheelEvent;
        break;
      case 'topCopy':
      case 'topCut':
      case 'topPaste':
        EventConstructor = SyntheticClipboardEvent;
        break;
    }
    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    EventPropagators.accumulateTwoPhaseDispatches(event);
    return event;
  },

  didPutListener: function (inst, registrationName, listener) {
    // Mobile Safari does not fire properly bubble click events on
    // non-interactive elements, which means delegated click listeners do not
    // fire. The workaround for this bug involves attaching an empty click
    // listener on the target node.
    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
      if (!onClickListeners[key]) {
        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
      }
    }
  },

  willDeleteListener: function (inst, registrationName) {
    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
      var key = getDictionaryKey(inst);
      onClickListeners[key].remove();
      delete onClickListeners[key];
    }
  }

};

module.exports = SimpleEventPlugin;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */
var AnimationEventInterface = {
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);

module.exports = SyntheticAnimationEvent;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */
var ClipboardEventInterface = {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

module.exports = SyntheticClipboardEvent;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */
var CompositionEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);

module.exports = SyntheticCompositionEvent;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(25);

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var DragEventInterface = {
  dataTransfer: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

module.exports = SyntheticDragEvent;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(23);

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var FocusEventInterface = {
  relatedTarget: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

module.exports = SyntheticFocusEvent;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
var InputEventInterface = {
  data: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);

module.exports = SyntheticInputEvent;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(23);

var getEventCharCode = __webpack_require__(41);
var getEventKey = __webpack_require__(162);
var getEventModifierState = __webpack_require__(42);

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var KeyboardEventInterface = {
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.

    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.

    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }
    return 0;
  }
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticUIEvent = __webpack_require__(23);

var getEventModifierState = __webpack_require__(42);

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */
var TouchEventInterface = {
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticUIEvent}
 */
function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

module.exports = SyntheticTouchEvent;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticEvent = __webpack_require__(11);

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */
var TransitionEventInterface = {
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticEvent}
 */
function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);

module.exports = SyntheticTransitionEvent;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var SyntheticMouseEvent = __webpack_require__(25);

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */
var WheelEventInterface = {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX :
    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY :
    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY :
    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,

  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
};

/**
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {string} dispatchMarker Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @extends {SyntheticMouseEvent}
 */
function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

module.exports = SyntheticWheelEvent;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var MOD = 65521;

// adler32 is not cryptographically strong, and is only used to sanity check that
// markup generated on the server matches the markup generated on the client.
// This implementation (a modified version of the SheetJS version) has been optimized
// for our use case, at the expense of conforming to the adler32 specification
// for non-ascii inputs.
function adler32(data) {
  var a = 1;
  var b = 0;
  var i = 0;
  var l = data.length;
  var m = l & ~0x3;
  while (i < m) {
    var n = Math.min(i + 4096, m);
    for (; i < n; i += 4) {
      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
    }
    a %= MOD;
    b %= MOD;
  }
  for (; i < l; i++) {
    b += a += data.charCodeAt(i);
  }
  a %= MOD;
  b %= MOD;
  return a | b << 16;
}

module.exports = adler32;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(3);

var ReactPropTypeLocationNames = __webpack_require__(138);
var ReactPropTypesSecret = __webpack_require__(66);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(9);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var CSSProperty = __webpack_require__(57);
var warning = __webpack_require__(2);

var isUnitlessNumber = CSSProperty.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

module.exports = dangerousStyleValue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var KeyEscapeUtils = __webpack_require__(34);
var traverseAllChildren = __webpack_require__(77);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

/**
 * @param {function} traverseContext Context passed through traversal.
 * @param {?ReactComponent} child React child component.
 * @param {!string} name String name of key path to child.
 * @param {number=} selfDebugID Optional debugID of the current internal instance.
 */
function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  // We found a component instance.
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (process.env.NODE_ENV !== 'production') {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = __webpack_require__(9);
      }
      if (!keyUnique) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

/**
 * Flattens children that are typically specified as `props.children`. Any null
 * children will not be included in the resulting object.
 * @return {!object} flattened children keyed by name.
 */
function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (process.env.NODE_ENV !== 'production') {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var getEventCharCode = __webpack_require__(41);

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var normalizeKey = {
  'Esc': 'Escape',
  'Spacebar': ' ',
  'Left': 'ArrowLeft',
  'Up': 'ArrowUp',
  'Right': 'ArrowRight',
  'Down': 'ArrowDown',
  'Del': 'Delete',
  'Win': 'OS',
  'Menu': 'ContextMenu',
  'Apps': 'ContextMenu',
  'Scroll': 'ScrollLock',
  'MozPrintableKey': 'Unidentified'
};

/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */
var translateToKey = {
  8: 'Backspace',
  9: 'Tab',
  12: 'Clear',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  19: 'Pause',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  33: 'PageUp',
  34: 'PageDown',
  35: 'End',
  36: 'Home',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  45: 'Insert',
  46: 'Delete',
  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
  144: 'NumLock',
  145: 'ScrollLock',
  224: 'Meta'
};

/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */
function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.

    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
    if (key !== 'Unidentified') {
      return key;
    }
  }

  // Browser does not implement `key`, polyfill as much of it as we can.
  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent);

    // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.
    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }
  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }
  return '';
}

module.exports = getEventKey;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var nextDebugID = 1;

function getNextDebugID() {
  return nextDebugID++;
}

module.exports = getNextDebugID;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }
  return node;
}

/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */
function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }
    node = node.parentNode;
  }
}

/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */
function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === 3) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

module.exports = getNodeForCharacterOffset;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ExecutionEnvironment = __webpack_require__(6);

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};

  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  prefixes['ms' + styleProp] = 'MS' + eventName;
  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();

  return prefixes;
}

/**
 * A list of event names to a configurable list of vendor prefixes.
 */
var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};

/**
 * Event names that have already been detected and prefixed (if applicable).
 */
var prefixedEventNames = {};

/**
 * Element to check for prefixes on.
 */
var style = {};

/**
 * Bootstrap if a DOM exists.
 */
if (ExecutionEnvironment.canUseDOM) {
  style = document.createElement('div').style;

  // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.
  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  }

  // Same as above
  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}

/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return '';
}

module.exports = getVendorPrefixedEventName;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var escapeTextContentForBrowser = __webpack_require__(27);

/**
 * Escapes attribute value to prevent scripting attacks.
 *
 * @param {*} value Value to escape.
 * @return {string} An escaped string.
 */
function quoteAttributeValueForBrowser(value) {
  return '"' + escapeTextContentForBrowser(value) + '"';
}

module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(121);


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(15);

var invariant = __webpack_require__(1);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var PooledClass = __webpack_require__(170);
var ReactElement = __webpack_require__(14);

var emptyFunction = __webpack_require__(7);
var traverseAllChildren = __webpack_require__(179);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(15),
    _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(47);
var ReactElement = __webpack_require__(14);
var ReactPropTypeLocationNames = __webpack_require__(49);
var ReactNoopUpdateQueue = __webpack_require__(48);

var emptyObject = __webpack_require__(17);
var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

/**
 * Policies that describe methods in `ReactClassInterface`.
 */


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or host components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: 'DEFINE_MANY',

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: 'DEFINE_MANY',

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: 'DEFINE_MANY',

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: 'DEFINE_MANY',

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: 'DEFINE_MANY',

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: 'DEFINE_MANY_MERGED',

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: 'DEFINE_MANY_MERGED',

  /**
   * @return {object}
   * @optional
   */
  getChildContext: 'DEFINE_MANY_MERGED',

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: 'DEFINE_ONCE',

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: 'DEFINE_MANY',

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: 'DEFINE_MANY',

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: 'DEFINE_MANY',

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: 'DEFINE_ONCE',

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: 'DEFINE_MANY',

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: 'OVERRIDE_BASE'

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, 'childContext');
    }
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, 'context');
    }
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, 'prop');
    }
    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but only in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }
  }
}

function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (isAlreadyDefined) {
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classes.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    if (process.env.NODE_ENV !== 'production') {
      var typeofSpec = typeof spec;
      var isMixinValid = typeofSpec === 'object' && spec !== null;

      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }

    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === 'DEFINE_MANY_MERGED') {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === 'DEFINE_MANY') {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

    var isInherited = name in Constructor;
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  }
};

var ReactClassComponent = function () {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(14);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(79);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(14);
var ReactPropTypeLocationNames = __webpack_require__(49);
var ReactPropTypesSecret = __webpack_require__(80);

var emptyFunction = __webpack_require__(7);
var getIteratorFn = __webpack_require__(51);
var warning = __webpack_require__(2);

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),
  symbol: createPrimitiveTypeChecker('symbol'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
/*eslint-disable no-self-compare*/
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return x !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}
/*eslint-enable no-self-compare*/

/**
 * We use an Error-like object for backward compatibility as people may call
 * PropTypes directly and inspect their output. However we don't use real
 * Errors anymore. We don't inspect their stack anyway, and creating them
 * is prohibitively expensive if they are created too often, such as what
 * happens in oneOfType() for any type before the one that matched.
 */
function PropTypeError(message) {
  this.message = message;
  this.stack = '';
}
// Make `instanceof Error` still work for returned errors.
PropTypeError.prototype = Error.prototype;

function createChainableTypeChecker(validate) {
  if (process.env.NODE_ENV !== 'production') {
    var manualPropTypeCallCache = {};
  }
  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (process.env.NODE_ENV !== 'production') {
      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
        var cacheKey = componentName + ':' + propName;
        if (!manualPropTypeCallCache[cacheKey]) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
          manualPropTypeCallCache[cacheKey] = true;
        }
      }
    }
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        if (props[propName] === null) {
          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
        }
        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName, secret) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
    }
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!ReactElement.isValidElement(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (is(propValue, expectedValues[i])) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
    }
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === 'symbol') {
    return true;
  }

  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
  if (propValue['@@toStringTag'] === 'Symbol') {
    return true;
  }

  // Fallback for non-spec compliant Symbols which are polyfilled.
  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
    return true;
  }

  return false;
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  if (isSymbol(propType, propValue)) {
    return 'symbol';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return ANONYMOUS;
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(47);
var ReactNoopUpdateQueue = __webpack_require__(48);

var emptyObject = __webpack_require__(17);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = ReactPureComponent;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.4.2';

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(15);

var ReactPropTypeLocationNames = __webpack_require__(49);
var ReactPropTypesSecret = __webpack_require__(80);

var invariant = __webpack_require__(1);
var warning = __webpack_require__(2);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(9);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(9);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(15);

var ReactElement = __webpack_require__(14);

var invariant = __webpack_require__(1);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(15);

var ReactCurrentOwner = __webpack_require__(12);
var REACT_ELEMENT_TYPE = __webpack_require__(78);

var getIteratorFn = __webpack_require__(51);
var invariant = __webpack_require__(1);
var KeyEscapeUtils = __webpack_require__(169);
var warning = __webpack_require__(2);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 180 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var squad = __webpack_require__(100);
var nextPersonId = 0;
var firstNames = [];
var lastNames = [];
var loremIpsum = [];
var statuses = [];
var posterWidth = 400;
var posterHeight = 400;
var _canvas;
function makePoster(color) {
    if (!_canvas) {
        _canvas = document.createElement("canvas");
        _canvas.width = posterWidth;
        _canvas.height = posterHeight;
    }
    var ctxt = _canvas.getContext("2d");
    ctxt.fillStyle = color;
    ctxt.fillRect(0, 0, posterWidth, posterHeight);
    return _canvas.toDataURL();
}
var posterColors = [
    [68, 34, 87], [100, 66, 119], [132, 98, 151],
    [164, 162, 165], [196, 194, 197], [228, 226, 229],
    [220, 77, 6], [252, 109, 38], [255, 141, 70]
];
var posters = posterColors.map(function (color) {
    return makePoster("rgb(" + color.join(", ") + ")");
});
function randomInt(first, last) {
    return Math.round(Math.random() * (last - first)) + first;
}
function randomElement(array) {
    return array[randomInt(0, array.length - 1)];
}
function genArray(minLength, maxLength, genElement) {
    var len = randomInt(minLength, maxLength);
    var result = new Array(len);
    for (var i = 0; i < len; i++) {
        result[i] = genElement();
    }
    return result;
}
function genName() {
    return randomElement(firstNames) + " " + randomElement(lastNames);
}
function genPhoneNumber() {
    return "555-0" + randomInt(100, 199);
}
function genPerson() {
    return {
        id: nextPersonId++,
        name: genName(),
        status: randomElement(statuses),
        score: randomElement([2, 3, 4, 5, 6, 7, 8, 9]),
        picture: randomElement(posters),
        mobilePhone: genPhoneNumber(),
        workPhone: genPhoneNumber()
    };
}
var personCount = 50;
var people = genArray(personCount, personCount, genPerson);
people = [];
var person;
squad.members.forEach(function (element) {
    person = {
        attacks: element.attacksWon,
        defenses: element.defensesWon,
        planetary: element.hasPlanetaryCommand,
        hq: element.hqLevel,
        officer: element.isOfficer,
        ownner: element.isOwner,
        joinDate: element.joinDate,
        login: element.lastLoginTime,
        updated: element.lastUpdated,
        name: element.name,
        planet: element.planet,
        id: element.playerId,
        rank: element.rank,
        reputationInvested: element.reputationInvested,
        score: element.score,
        tournamentRating: element.tournamentRating,
        tournamentScores: element.tournamentScores,
        troopsDonated: element.troopsDonated,
        troopsReceived: element.troopsReceived,
        warParty: element.warParty,
        xp: element.xp,
        picture: randomElement(posters)
    };
    people.push(person);
});
//var memberDetails: Array<Object>
var memberDetails = [];
memberDetails.push(__webpack_require__(182)("./" + squad.members[0].playerId + '@1490386192.json'));
memberDetails.push(__webpack_require__(183));
memberDetails.push(__webpack_require__(185));
var members = [];
var member;
memberDetails.forEach(function (element) {
    member = {
        timeZoneOffset: element.playerModel.timeZoneOffset,
        scalars: element.scalars,
        troops: element.playerModel.upgrades.troop
    };
    members.push(member);
    console.log(member);
});
console.log({
    people: people,
    members: members
});
console.log({
    people: people
});
module.exports = {
    people: people,
    members: members
};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./779a335e-7216-11e6-8b58-06033c004f77@1490386192.json": 184
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 182;

/***/ }),
/* 183 */
/***/ (function(module, exports) {

module.exports = {
	"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
	"playerModel": {
		"guildInfo": {
			"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
			"guildName": "fcuk",
			"icon": "SquadSymbols_11",
			"joinDate": 1487765772,
			"playerHasOutstandingJoinRequest": false
		},
		"upgrades": {
			"troop": {
				"Dark": 5,
				"Storm": 5,
				"EmpireSpeeder": 5,
				"ATST": 5,
				"Scout": 4,
				"2MTank": 5,
				"HeroATST": 5,
				"HeroATMP": 5,
				"Dewback": 5,
				"ATMP": 4,
				"HeroCrimsonGuard": 5,
				"Technician": 5
			},
			"specialAttack": {
				"AtmosMig": 1
			},
			"building": {},
			"equipment": {}
		},
		"prizes": {
			"troop": {
				"Dewback": 1,
				"Scout": 60,
				"ATMP": 22,
				"HeroATST": 23,
				"Shock": 51,
				"2MTank": 18,
				"SecurityDroid": 68,
				"EmpireSpeeder": 37,
				"ATAT": 17,
				"HeroCrimsonGuard": 12,
				"HeroATMP": 12,
				"HeroATAT": 14,
				"EmpireHovertankSample": 7,
				"KubazInvader": 3,
				"Technician": 6,
				"EmpireTognath": 3,
				"HeavyStorm": 12,
				"ProbeDroid": 7
			},
			"specialAttack": {
				"AtmosMig": 50,
				"TieBomber": 2,
				"TieDefender": 1,
				"TieInterceptor": 3,
				"TieFighter": 1
			},
			"resources": {},
			"crates": {
				"available": {},
				"inProgress": {},
				"next": 353,
				"nextDailyCrateTime": 1490414400,
				"nextHolonetTime": 1488271928
			}
		},
		"donatedTroops": {
			"troopMercenaryEmpireGamorreanWarrior2": {
				"779a335e-7216-11e6-8b58-06033c004f77": 2
			},
			"troopHeavyStorm7": {
				"3076de44-a12f-11e6-85c9-060a32004f8c": 1
			}
		},
		"buildingsUnderConstruction": [],
		"map": {
			"next": 280,
			"planet": "planet1",
			"buildings": [
				{
					"key": "bld_8",
					"x": 14,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_70",
					"x": 17,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_7",
					"x": 13,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_6",
					"x": 12,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_5",
					"x": 11,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_106",
					"x": 7,
					"z": 19,
					"uid": "empireCreditGenerator4",
					"lastCollectTime": 1490380540,
					"currentStorage": 0
				},
				{
					"key": "bld_20",
					"x": 15,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_64",
					"x": 17,
					"z": 7,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_4",
					"x": 10,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_63",
					"x": 17,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_3",
					"x": 9,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_2",
					"x": 8,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_62",
					"x": 7,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_61",
					"x": 17,
					"z": 15,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_68",
					"x": 17,
					"z": 9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_24",
					"x": 19,
					"z": 13,
					"uid": "empireCreditGenerator4",
					"lastCollectTime": 1490380543,
					"currentStorage": 0
				},
				{
					"key": "bld_67",
					"x": 16,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_66",
					"x": 17,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_65",
					"x": 17,
					"z": 16,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_78",
					"x": 19,
					"z": 19,
					"uid": "empireCreditStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_91",
					"x": 7,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_90",
					"x": 8,
					"z": 6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_86",
					"x": 17,
					"z": 12,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_85",
					"x": 17,
					"z": 13,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_84",
					"x": 17,
					"z": 14,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_88",
					"x": 17,
					"z": 10,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_87",
					"x": 17,
					"z": 11,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_60",
					"x": 15,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_17",
					"x": 9,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_16",
					"x": 10,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_15",
					"x": 11,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_14",
					"x": 12,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_58",
					"x": 19,
					"z": 10,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490380544,
					"currentStorage": 0
				},
				{
					"key": "bld_19",
					"x": 13,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_18",
					"x": 14,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_13",
					"x": 16,
					"z": 6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_82",
					"x": 10,
					"z": 15,
					"uid": "empireMortar4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_81",
					"x": 12,
					"z": 8,
					"uid": "empireMortar4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_23",
					"x": 13,
					"z": 19,
					"uid": "empireCreditStorage4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_76",
					"x": 1,
					"z": 19,
					"uid": "empireCreditGenerator4",
					"lastCollectTime": 1490380539,
					"currentStorage": 0
				},
				{
					"key": "bld_79",
					"x": 16,
					"z": 19,
					"uid": "empireMaterialsStorage4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_107",
					"x": 4,
					"z": 19,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490380539,
					"currentStorage": 0
				},
				{
					"key": "bld_54",
					"x": 19,
					"z": 16,
					"uid": "empireMaterialsStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_53",
					"x": 10,
					"z": 19,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490380541,
					"currentStorage": 0
				},
				{
					"key": "bld_110",
					"x": 12,
					"z": 15,
					"uid": "empireRocketTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_52",
					"x": 10,
					"z": 8,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_55",
					"x": 6,
					"z": 8,
					"uid": "empireSquadBuilding4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_73",
					"x": 14,
					"z": 8,
					"uid": "empireRocketTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_124",
					"x": 15,
					"z": 10,
					"uid": "empireShieldGenerator4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_112",
					"x": 8,
					"z": 12,
					"uid": "empireShieldGenerator4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_118",
					"x": 6,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_117",
					"x": 5,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_119",
					"x": 4,
					"z": 6,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_122",
					"x": 6,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_116",
					"x": 5,
					"z": 17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_115",
					"x": 4,
					"z": 17,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_22",
					"x": 6,
					"z": 15,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_111",
					"x": 6,
					"z": 12,
					"uid": "empireRocketTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_121",
					"x": 4,
					"z": 16,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_120",
					"x": 4,
					"z": 15,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_9",
					"x": 4,
					"z": 7,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_114",
					"x": 4,
					"z": 14,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_113",
					"x": 4,
					"z": 13,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_83",
					"x": 4,
					"z": 11,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_12",
					"x": 4,
					"z": 10,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_89",
					"x": 4,
					"z": 9,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_10",
					"x": 4,
					"z": 12,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_21",
					"x": 4,
					"z": 8,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_80",
					"x": 16,
					"z": 8,
					"uid": "empireTrapStrikeGeneric4",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_72",
					"x": 15,
					"z": 14,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_108",
					"x": 15,
					"z": 16,
					"uid": "empireTrapStrikeGeneric4",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_123",
					"x": -2,
					"z": 19,
					"uid": "empireScoutTower1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_25",
					"x": 13,
					"z": -1,
					"uid": "empireStarport4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_71",
					"x": 7,
					"z": -1,
					"uid": "empireStarport4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_59",
					"x": 2,
					"z": 1,
					"uid": "empireFactory4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_69",
					"x": 0,
					"z": 6,
					"uid": "empireBarracks5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_56",
					"x": 0,
					"z": 9,
					"uid": "empireBarracks4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_93",
					"x": -2,
					"z": 2,
					"uid": "empireOffenseLab5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_109",
					"x": 0,
					"z": 12,
					"uid": "empireBarracks4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_127",
					"x": -1,
					"z": 15,
					"uid": "empireTacticalCommand4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_1",
					"x": 10,
					"z": 10,
					"uid": "empireHQ5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_254",
					"x": -5,
					"z": 16,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490380537,
					"currentStorage": 0
				},
				{
					"key": "bld_253",
					"x": -4,
					"z": 12,
					"uid": "empireCreditGenerator5",
					"lastCollectTime": 1490380536,
					"currentStorage": 0
				},
				{
					"key": "bld_247",
					"x": -21,
					"z": -21,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_240",
					"x": -19,
					"z": -19,
					"uid": "empireRocketTurret1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_245",
					"x": -19,
					"z": -21,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_242",
					"x": -17,
					"z": -21,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_246",
					"x": -21,
					"z": -19,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_241",
					"x": -21,
					"z": -17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_250",
					"x": -19,
					"z": -17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_249",
					"x": -17,
					"z": -17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_243",
					"x": -17,
					"z": -19,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_248",
					"x": -18,
					"z": -17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_244",
					"x": -17,
					"z": -18,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_92",
					"x": -17,
					"z": -20,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_11",
					"x": -20,
					"z": -17,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_26",
					"x": 20,
					"z": -21,
					"uid": "empireDroidHut1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_275",
					"x": -1,
					"z": -17,
					"uid": "junkSmall1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_277",
					"x": -15,
					"z": 17,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 2
				},
				{
					"key": "bld_77",
					"x": 19,
					"z": 2,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490380546,
					"currentStorage": 0
				},
				{
					"key": "bld_57",
					"x": 19,
					"z": 6,
					"uid": "empireCreditGenerator5",
					"lastCollectTime": 1490380545,
					"currentStorage": 0
				}
			]
		},
		"inventory": {
			"storage": {
				"credits": {
					"amount": 19858,
					"capacity": 225000,
					"scale": 1
				},
				"materials": {
					"amount": 14854,
					"capacity": 225000,
					"scale": 1
				},
				"contraband": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				},
				"reputation": {
					"amount": 1,
					"capacity": 14,
					"scale": 1
				},
				"crystals": {
					"amount": 424,
					"capacity": -1,
					"scale": 1
				},
				"droids": {
					"amount": 2,
					"capacity": 5,
					"scale": 1
				},
				"xp": {
					"amount": 749,
					"capacity": -1,
					"scale": 1
				},
				"troop": {
					"amount": 0,
					"capacity": 20,
					"scale": 1
				},
				"hero": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				},
				"champion": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				}
			},
			"capacity": -1,
			"subStorage": {
				"troop": {
					"storage": {
						"troopEmpireSpeeder5": {
							"amount": 3,
							"capacity": -1,
							"scale": 6
						},
						"troopTechnician5": {
							"amount": 2,
							"capacity": -1,
							"scale": 4
						}
					},
					"capacity": 52,
					"subStorage": {}
				},
				"specialAttack": {
					"storage": {},
					"capacity": 0,
					"subStorage": {}
				},
				"hero": {
					"storage": {
						"troopHeroCrimsonGuard5": {
							"amount": 1,
							"capacity": 1,
							"scale": 1
						},
						"troopHeroATMP5": {
							"amount": 1,
							"capacity": 1,
							"scale": 1
						}
					},
					"capacity": 2,
					"subStorage": {}
				},
				"champion": {
					"storage": {},
					"capacity": 0,
					"subStorage": {}
				}
			}
		},
		"faction": "empire",
		"currentQuest": "",
		"protectedUntil": 1490402045,
		"protectionFrom": 1490358845,
		"protectionCooldownUntil": {},
		"battleLogs": [
			{
				"battleId": "b37576de-07c9-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "ff0aa6ba-fa7e-11e6-9158-06cb44004f79",
					"name": "pasz",
					"faction": "rebel",
					"guildId": "e6290edb-70fb-11e4-b32e-06dc8c004fbd",
					"guildName": "Ramblahz",
					"attackRating": 381,
					"attackRatingDelta": 5,
					"defenseRating": 12,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 156,
					"defenseRatingDelta": -5,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489394992,
				"looted": {
					"credits": 11267,
					"materials": 12576
				},
				"earned": {
					"credits": 11267,
					"materials": 12576
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 21414,
					"materials": 23902
				},
				"troopsExpended": {
					"troopHeroChewbacca4": 1,
					"troopBantha4": 5,
					"troopWookie4": 3,
					"specialAttackZ951": 1,
					"specialAttackAWing1": 1,
					"troopPathfinder5": 4,
					"troopAAT14": 2
				},
				"attackerGuildTroopsExpended": {
					"troopWookie4": 2,
					"troopSoldier4": 2
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 53,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 18,
				"defenderPotentialMedalGain": 12,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "203a3bca-0807-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "a233bc79-8a34-11e5-8743-063864004f75",
					"name": "Obi Two",
					"faction": "rebel",
					"guildId": "766c920d-5aa1-11e6-b06d-06dc8c004fbd",
					"guildName": "CollateralDamage",
					"attackRating": 3816,
					"attackRatingDelta": -23,
					"defenseRating": -707,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 184,
					"defenseRatingDelta": 28,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489421597,
				"looted": {},
				"earned": {},
				"maxLootable": {
					"contraband": 0,
					"credits": 21199,
					"materials": 23902
				},
				"troopsExpended": {
					"troopVanguard1": 1
				},
				"attackerGuildTroopsExpended": null,
				"defenderGuildTroopsExpended": null,
				"baseDamagePercent": 0,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "0",
				"server": true,
				"attackerEquipment": [
					"eqpRebelWallHealth7",
					"eqpRebelHQHealth7",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretDamage4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "f9c638e9-0807-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "898c5bcc-9553-11e6-a21c-06033c004f77",
					"name": "Эдуард",
					"faction": "rebel",
					"guildId": "4bc498fe-1c77-11e6-b5c3-06dc8c004fbd",
					"guildName": "GTOrebels",
					"attackRating": 2739,
					"attackRatingDelta": 6,
					"defenseRating": -648,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 178,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489421693,
				"looted": {
					"credits": 20199,
					"materials": 22902
				},
				"earned": {
					"contraband": 0,
					"credits": 21199,
					"materials": 23902
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 21199,
					"materials": 23902
				},
				"troopsExpended": {
					"troopSoldier6": 24,
					"troopJuggernaut6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 92,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 19,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth6",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretDamage3"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "64308117-086c-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "5affe0b0-edde-11e6-9e25-06033c004f77",
					"name": "resquiel",
					"faction": "rebel",
					"guildId": "6b6c443a-5f62-11e6-b250-06e6ee004fbc",
					"guildName": "SHOCK_WAVE",
					"attackRating": 4101,
					"attackRatingDelta": 6,
					"defenseRating": -212,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 172,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489464867,
				"looted": {
					"materials": 17842,
					"credits": 15200
				},
				"earned": {
					"contraband": 0,
					"materials": 18842,
					"credits": 16200
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 20400,
					"materials": 23042
				},
				"troopsExpended": {
					"troopAAT16": 3,
					"troopSoldier6": 44,
					"troopHeavyRebel5": 1,
					"troopMercenaryRebelGamorreanWarrior1": 1,
					"specialAttackXWing6": 1,
					"troopHeroLeia5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 92,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 25,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth2",
					"eqpRebelContrabandGeneratorHealth3",
					"eqpRebelMaterialsGeneratorHealth1",
					"eqpRebelHQHealth3",
					"eqpRebelCreditGeneratorHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "50795ca7-08d0-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "1fe88ac7-a837-11e6-8dfd-061c98004f78",
					"name": "TACX",
					"faction": "rebel",
					"guildId": "28873c9d-ac9a-11e4-a9a2-06e6ee004fbc",
					"guildName": "RebelThorns",
					"attackRating": 2499,
					"attackRatingDelta": 10,
					"defenseRating": -111,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 162,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489507734,
				"looted": {
					"materials": 21354,
					"credits": 18760
				},
				"earned": {
					"contraband": 0,
					"materials": 22354,
					"credits": 19760
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19760,
					"materials": 22354
				},
				"troopsExpended": {
					"troopSoldier6": 20,
					"troopMedic6": 2,
					"troopBantha6": 4
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 19,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage2",
					"eqpRebelMortarTurretDamage2",
					"eqpRebelWallHealth5",
					"eqpRebelSandSoldier2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "53602098-0958-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "d5cc4ee7-e231-11e6-81e1-06dc8c004fbd",
					"name": "Léna",
					"faction": "rebel",
					"guildId": "d6f3b631-739b-11e6-859a-069da4004f8b",
					"guildName": "Power-Hungry",
					"attackRating": 324,
					"attackRatingDelta": -11,
					"defenseRating": -166,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 175,
					"defenseRatingDelta": 13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489566157,
				"looted": {
					"credits": 6648,
					"materials": 7200
				},
				"earned": {
					"credits": 6648,
					"materials": 7200
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19248,
					"materials": 21802
				},
				"troopsExpended": {
					"troopJuggernaut5": 1,
					"troopAAT15": 2,
					"troopIthorianInfiltrator5": 1,
					"troopDesertSkiff5": 1,
					"troopRebelSpeeder5": 1,
					"troopWookie5": 2,
					"troopMedic5": 1,
					"troopKubazInvader5": 1,
					"specialAttackHWK2902": 1,
					"specialAttackBWing2": 1,
					"troopHeroLeia5": 1,
					"specialAttackXWing5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 47,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 18,
				"defenderPotentialMedalGain": 13,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelCreditGeneratorHealth1",
					"eqpRebelMaterialsGeneratorHealth1",
					"eqpRebelContrabandGeneratorHealth1",
					"eqpRebelHQHealth2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "0d9b4bf2-0959-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "3b810174-a651-11e5-b5e8-06e084004f92",
					"name": "skywall",
					"faction": "rebel",
					"guildId": "c9e057f7-a3e1-11e5-9c9b-06dc8c004fbd",
					"guildName": "RUSSIANBEAR",
					"attackRating": 2441,
					"attackRatingDelta": 10,
					"defenseRating": -736,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 165,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489566509,
				"looted": {
					"credits": 15191,
					"materials": 17280
				},
				"earned": {
					"contraband": 0,
					"credits": 500,
					"materials": 18280
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 16191,
					"materials": 18280
				},
				"troopsExpended": {
					"troopSoldier6": 13,
					"troopHeavyRebel6": 1,
					"troopMarksman6": 2,
					"troopMedic5": 2,
					"troopT2BTank4": 1,
					"troopHeroChewbacca4": 1,
					"troopJuggernaut5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 13,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelContrabandGeneratorHealth1",
					"eqpRebelMaterialsGeneratorHealth2",
					"eqpRebelCreditGeneratorHealth2",
					"eqpRebelHQHealth3",
					"eqpRebelWallHealth2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "91dcef07-09dc-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "d34ebf88-a222-11e6-bcbb-061c98004f78",
					"name": "GOKU",
					"faction": "rebel",
					"guildId": "37a8a38d-ba10-11e5-8219-063864004f75",
					"guildName": "ITALIANIS",
					"attackRating": 1365,
					"attackRatingDelta": -12,
					"defenseRating": -761,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 179,
					"defenseRatingDelta": 14,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489622923,
				"looted": {
					"credits": 2315,
					"materials": 2436
				},
				"earned": {
					"credits": 2315,
					"materials": 2436
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 10324,
					"materials": 16930
				},
				"troopsExpended": {
					"troopSoldier5": 20,
					"troopWookie5": 1,
					"troopHeavyRebel5": 1,
					"troopHeroR2D25": 1,
					"troopRebelSpeeder5": 3,
					"troopAAT15": 2,
					"troopJuggernaut5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopStorm6": 1
				},
				"baseDamagePercent": 35,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 16,
				"defenderPotentialMedalGain": 14,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth5",
					"eqpRebelBurstTurretDamage1",
					"eqpRebelRapidFireTurretHealth2",
					"eqpRebelContrabandGeneratorHealth5"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "d8f80fa9-09dc-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "556106bb-38eb-11e5-a37a-06e6ee004fbc",
					"name": "compozer",
					"faction": "rebel",
					"guildId": "8cf7f386-2f14-11e6-9fc8-060a32004f8c",
					"guildName": "The_Resistance",
					"attackRating": 40101,
					"attackRatingDelta": 10,
					"defenseRating": 575,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 169,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489623069,
				"looted": {
					"credits": 8308,
					"materials": 14821
				},
				"earned": {
					"contraband": 0,
					"credits": 9308,
					"materials": 15821
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 9308,
					"materials": 15821
				},
				"troopsExpended": {
					"troopSoldier9": 19,
					"troopRebelSpeeder9": 1,
					"troopHeroChewbacca9": 1,
					"troopMercenaryRebelTwilekIncinerator5": 1,
					"troopRebelJetpackTrooper10": 3
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopSniper7": 2,
					"troopStorm6": 1
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 43,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelWallHealth7",
					"eqpRebelHQHealth7",
					"eqpRebelCreditGeneratorHealth5",
					"eqpRebelMaterialsGeneratorHealth5",
					"eqpRebelSandSoldier2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "9fbd8552-0a62-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "4c6c3388-dc51-11e6-b64c-06a77e004fbb",
					"name": "ED1",
					"faction": "rebel",
					"guildId": "d0db2376-b404-11e6-bec8-06c66a004f76",
					"guildName": "SquadChuckNorris",
					"attackRating": 14559,
					"attackRatingDelta": 10,
					"defenseRating": -502,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 159,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489680546,
				"looted": {
					"materials": 23860,
					"credits": 16616
				},
				"earned": {
					"contraband": 0,
					"materials": 0,
					"credits": 17616
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17616,
					"materials": 24860
				},
				"troopsExpended": {
					"troopSoldier6": 16,
					"troopHeroChewbacca6": 1,
					"troopDesertSkiff6": 1,
					"troopHeavyRebel6": 6,
					"troopMedic5": 4
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage1",
					"eqpRebelHQHealth4",
					"eqpRebelMaterialsGeneratorHealth3",
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelWallHealth4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "fbfea76a-0ae8-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "966aa35a-ac20-11e5-8219-063864004f75",
					"name": "huff",
					"faction": "rebel",
					"guildId": "fce9e6a4-4fb9-11e6-b957-06cb44004f79",
					"guildName": "FIRESTORMERS",
					"attackRating": 560,
					"attackRatingDelta": 18,
					"defenseRating": -314,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 141,
					"defenseRatingDelta": -18,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489738258,
				"looted": {
					"materials": 22808,
					"credits": 16532
				},
				"earned": {
					"contraband": 0,
					"materials": 23808,
					"credits": 17532
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17532,
					"materials": 23808
				},
				"troopsExpended": {
					"troopJuggernaut6": 2,
					"troopHeavyRebel5": 3,
					"troopHeroChewbacca6": 1,
					"troopWookie5": 2,
					"troopSoldier5": 14
				},
				"attackerGuildTroopsExpended": {
					"troopRebelSpeeder8": 1,
					"troopAAT17": 1,
					"troopSoldier5": 2
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 18,
				"defenderPotentialMedalGain": 14,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMaterialsGeneratorHealth3",
					"eqpRebelWallHealth3",
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelHQHealth4",
					"eqpRebelContrabandGeneratorHealth3"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "dd17ecb2-0b6e-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "607941c8-ac4c-11e6-b0d5-06e6ee004fbc",
					"name": "killer",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 8649,
					"attackRatingDelta": 10,
					"defenseRating": -2085,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 131,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489795742,
				"looted": {
					"materials": 21966,
					"credits": 16466
				},
				"earned": {
					"contraband": 0,
					"materials": 22966,
					"credits": 17466
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17466,
					"materials": 22966
				},
				"troopsExpended": {
					"troopVanguard1": 14,
					"troopSoldier1": 24
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 28,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth1",
					"eqpRebelMaterialsGeneratorHealth1",
					"eqpRebelSandSoldier1",
					"eqpRebelRapidFireTurretDamage1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "f62d5115-0bf4-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "d25602b6-41e0-11e5-9d4a-06e6ee004fbc",
					"name": "zylo4u",
					"faction": "rebel",
					"guildId": "a31f4508-4b49-11e6-97a2-06e6ee004fbc",
					"guildName": "Deutsch_Reverse",
					"attackRating": 13472,
					"attackRatingDelta": -32,
					"defenseRating": 1437,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 169,
					"defenseRatingDelta": 38,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489853293,
				"looted": {},
				"earned": {},
				"maxLootable": {
					"contraband": 0,
					"credits": 17413,
					"materials": 22294
				},
				"troopsExpended": {
					"troopATTE9": 2,
					"troopBantha8": 8,
					"troopChampionRebelHeavyDroideka2": 1,
					"troopHeroLeia8": 1,
					"specialAttackZ958": 1
				},
				"attackerGuildTroopsExpended": null,
				"defenderGuildTroopsExpended": null,
				"baseDamagePercent": 0,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 38,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "0",
				"server": true,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelHQHealth7",
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelSandSoldier2",
					"eqpRebelWallHealth9",
					"eqpRebelMortarTurretDamage4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "1a070524-0bf5-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "70aed17b-dc2e-11e6-ba45-06033c004f77",
					"name": "juank",
					"faction": "rebel",
					"guildId": "853185af-9cce-11e6-acc5-06a77e004fbb",
					"guildName": "CAT_ATTACK",
					"attackRating": 488,
					"attackRatingDelta": -11,
					"defenseRating": -16,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 182,
					"defenseRatingDelta": 13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489853453,
				"looted": {
					"credits": 4200,
					"materials": 4200
				},
				"earned": {
					"credits": 4200,
					"materials": 4200
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17413,
					"materials": 22294
				},
				"troopsExpended": {
					"troopWookie5": 3,
					"troopHeroChewbacca4": 1,
					"troopRebelSpeeder4": 2,
					"troopT2BTank4": 2,
					"troopSoldier5": 12,
					"troopMedic4": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 37,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 18,
				"defenderPotentialMedalGain": 13,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "823edc3a-0bf5-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "5c5f6f20-e735-11e6-81e1-06dc8c004fbd",
					"name": "Asasinn",
					"faction": "rebel",
					"guildId": "cc159135-a554-11e6-91a8-06dc8c004fbd",
					"guildName": "CAZAIMPERIO",
					"attackRating": 3803,
					"attackRatingDelta": 10,
					"defenseRating": 350,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 172,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489853592,
				"looted": {
					"materials": 19197,
					"credits": 14316
				},
				"earned": {
					"contraband": 0,
					"materials": 20197,
					"credits": 15316
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 15316,
					"materials": 20197
				},
				"troopsExpended": {
					"troopVanguard5": 1,
					"troopHeroChewbacca6": 1,
					"troopWookie6": 5,
					"troopMedic5": 2,
					"troopJuggernaut5": 1,
					"troopRebelTognath1": 1,
					"troopMarksman5": 1,
					"troopSoldier5": 11
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 25,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelCreditGeneratorHealth1",
					"eqpRebelContrabandGeneratorHealth1",
					"eqpRebelMaterialsGeneratorHealth1",
					"eqpRebelHQHealth2",
					"eqpRebelWallHealth2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "33dcab99-0c7b-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "a2161066-002e-11e7-9191-06dc8c004fbd",
					"name": "Dimkash",
					"faction": "rebel",
					"guildId": "d78dc476-e5e2-11e5-af82-06e6ee004fbc",
					"guildName": "Na_Vi",
					"attackRating": 262,
					"attackRatingDelta": -10,
					"defenseRating": 123,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 184,
					"defenseRatingDelta": 12,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489910942,
				"looted": {},
				"earned": {},
				"maxLootable": {
					"contraband": 0,
					"credits": 22354,
					"materials": 20442
				},
				"troopsExpended": {
					"troopBantha4": 9,
					"troopAAT14": 3,
					"troopHeroChewbacca5": 1,
					"troopSoldier4": 5
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 4,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 18,
				"defenderPotentialMedalGain": 12,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "54d0a51d-0c7b-11e7-b7db-06a77e004fbb",
				"attacker": {
					"playerId": "a0c9694a-c454-11e6-86de-06cb44004f79",
					"name": "Maitre Guigui",
					"faction": "rebel",
					"guildId": "91c3fda6-ff08-11e5-927b-06c66a004f76",
					"guildName": "FrenchRebel",
					"attackRating": 5796,
					"attackRatingDelta": -24,
					"defenseRating": -698,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 213,
					"defenseRatingDelta": 29,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489911004,
				"looted": {
					"materials": 11400,
					"credits": 11505
				},
				"earned": {
					"materials": 11400,
					"credits": 11505
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 22354,
					"materials": 20442
				},
				"troopsExpended": {
					"troopSoldier5": 19,
					"troopJuggernaut5": 1,
					"troopHeavyRebel5": 2,
					"troopMedic5": 2,
					"troopHeroHanSolo5": 1,
					"troopPathfinder5": 6
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 1
				},
				"baseDamagePercent": 27,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 28,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth4",
					"eqpRebelBurstTurretHealth1",
					"eqpRebelWallHealth4",
					"eqpRebelRapidFireTurretHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "8ef0dd42-0c7b-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "b025bc7d-f4c0-11e6-8841-060a32004f8c",
					"name": "amperesun",
					"faction": "rebel",
					"guildId": "046036a6-46e8-11e6-8fd6-06cb44004f79",
					"guildName": "rebel-avengers",
					"attackRating": 2235,
					"attackRatingDelta": -16,
					"defenseRating": 173,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 232,
					"defenseRatingDelta": 19,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489911124,
				"looted": {
					"credits": 2496,
					"materials": 7728
				},
				"earned": {
					"credits": 2496,
					"materials": 7728
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17012,
					"materials": 14762
				},
				"troopsExpended": {
					"troopJuggernaut5": 1,
					"troopHeroChewbacca5": 1,
					"troopMedic5": 2,
					"troopWookie5": 9,
					"troopPathfinder5": 2,
					"troopSoldier5": 3,
					"specialAttackXWing5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 21,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 19,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "05a92b05-0c7c-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "a42948da-223c-11e6-9ca4-06e6ee004fbc",
					"name": "FlyingSimpson",
					"faction": "rebel",
					"guildId": "858b8241-b1a9-11e5-beef-06033c004f77",
					"guildName": "German-Rebells-E",
					"attackRating": 16599,
					"attackRatingDelta": 10,
					"defenseRating": -1904,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 222,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489911370,
				"looted": {
					"materials": 10033,
					"credits": 14891
				},
				"earned": {
					"contraband": 0,
					"materials": 11033,
					"credits": 15891
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 15891,
					"materials": 11033
				},
				"troopsExpended": {
					"troopHeavyRebel8": 3,
					"troopMedic8": 1,
					"troopChampionRebelDroideka7": 1,
					"troopAAT18": 2,
					"troopHeroLukeSkywalker6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 1,
					"troopHeavyStorm7": 1
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelHQHealth7",
					"eqpRebelWallHealth8",
					"eqpRebelSandSoldier2",
					"eqpRebelBurstTurretDamage3"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "55721edb-0d01-11e7-9fcf-06033c004f77",
				"attacker": {
					"playerId": "036b72db-5ed0-11e5-99f8-06e6ee004fbc",
					"name": "JOHN MAX",
					"faction": "rebel",
					"guildId": "aaf70f4a-d8e0-11e5-89ca-069da4004f8b",
					"guildName": "Praetorian_Guard",
					"attackRating": 16797,
					"attackRatingDelta": 10,
					"defenseRating": -5086,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 212,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489968581,
				"looted": {
					"credits": 20115,
					"materials": 19272
				},
				"earned": {
					"contraband": 0,
					"credits": 21115,
					"materials": 20272
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 21115,
					"materials": 20272
				},
				"troopsExpended": {
					"troopJuggernaut7": 1,
					"troopHeroHanSolo8": 1,
					"troopMedic8": 3,
					"troopAAT18": 1,
					"troopMarksman8": 2,
					"troopHeavyRebel8": 3,
					"troopMercenaryRebelGamorreanWarrior1": 1,
					"troopSoldier8": 13,
					"specialAttackBWing6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth8",
					"eqpRebelRapidFireTurretHealth6",
					"eqpRebelHQHealth8",
					"eqpRebelSandSoldier2",
					"eqpRebelCreditGeneratorHealth6"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "4c5515e9-0d87-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "35b1cd9f-f847-11e6-a79f-063864004f75",
					"name": "androidtappy2.0",
					"faction": "rebel",
					"guildId": "e040a6a0-5e40-11e6-931e-063864004f75",
					"guildName": "NewOldBoldRebels",
					"attackRating": 2739,
					"attackRatingDelta": 3,
					"defenseRating": 183,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 209,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490026144,
				"looted": {
					"credits": 18162,
					"materials": 10444
				},
				"earned": {
					"credits": 18162,
					"materials": 2809
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 20332,
					"materials": 20138
				},
				"troopsExpended": {
					"troopSoldier5": 45
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 50,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 22,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "5c792f09-0dca-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "7df57cd9-5220-11e6-af35-061c98004f78",
					"name": "Franco",
					"faction": "rebel",
					"guildId": "f7550118-30ac-11e6-aa76-06e6ee004fbc",
					"guildName": "RedForce5",
					"attackRating": 7616,
					"attackRatingDelta": 10,
					"defenseRating": -2034,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 199,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490054985,
				"looted": {
					"materials": 19030,
					"credits": 18705
				},
				"earned": {
					"contraband": 0,
					"materials": 20030,
					"credits": 19705
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19705,
					"materials": 20030
				},
				"troopsExpended": {
					"troopSoldier8": 8,
					"troopMedic7": 3,
					"troopJuggernaut8": 2,
					"troopMercenaryRebelTwilekIncinerator1": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelSandSoldier1",
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelHQHealth6",
					"eqpRebelBurstTurretDamage2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "81b8967f-0e50-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "088b1cdc-a98f-11e5-99f7-06cb44004f79",
					"name": "karlo",
					"faction": "rebel",
					"guildId": "eb561122-3111-11e6-8121-069da4004f8b",
					"guildName": "Peterpro",
					"attackRating": 11404,
					"attackRatingDelta": 3,
					"defenseRating": -4876,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 196,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490112539,
				"looted": {
					"credits": 3353,
					"materials": 4165
				},
				"earned": {
					"contraband": 0,
					"credits": 3613,
					"materials": 4425
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 4353,
					"materials": 5332
				},
				"troopsExpended": {
					"troopSoldier8": 30,
					"troopJuggernaut8": 1,
					"troopMarksman8": 1,
					"troopMercenaryRebelGamorreanWarrior3": 1,
					"troopHeroHanSolo7": 1,
					"specialAttackXWing8": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 69,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMortarTurretHealth3",
					"eqpRebelRapidFireTurretHealth3",
					"eqpRebelWallHealth6",
					"eqpRebelRapidFireTurretDamage2",
					"eqpRebelMortarTurretDamage3"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "81fe5773-0e93-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "5d5153ff-182b-11e6-9a6f-060a32004f8c",
					"name": "Paul Muadib",
					"faction": "rebel",
					"guildId": "cc57d57e-b569-11e5-92aa-06a77e004fbb",
					"guildName": "Sweden_Alliance",
					"attackRating": 4775,
					"attackRatingDelta": 3,
					"defenseRating": -484,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 193,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490141359,
				"looted": {
					"credits": 17462,
					"materials": 21990
				},
				"earned": {
					"contraband": 0,
					"credits": 17562,
					"materials": 13337
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 18462,
					"materials": 22990
				},
				"troopsExpended": {
					"troopMercenaryRebelTwilekIncinerator3": 1,
					"troopMedic8": 1,
					"troopRebelJetpackTrooper8": 2,
					"troopMercenaryRebelGamorreanWarrior3": 1,
					"troopJuggernaut7": 1,
					"troopSoldier8": 4,
					"troopVanguard8": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 2
				},
				"baseDamagePercent": 64,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 30,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelMortarTurretDamage5",
					"eqpRebelWallHealth8",
					"eqpRebelSandSoldier2",
					"eqpRebelCreditGeneratorHealth6"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "55c1b6e9-0ed9-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "669e38b3-d6a2-11e6-97e5-06cb44004f79",
					"name": "Mossified4",
					"faction": "rebel",
					"guildId": "6c3825b2-33cd-11e6-bc42-06033c004f77",
					"guildName": "Bulgariawariors",
					"attackRating": 1637,
					"attackRatingDelta": -12,
					"defenseRating": -333,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 207,
					"defenseRatingDelta": 14,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490171342,
				"looted": {
					"credits": 114
				},
				"earned": {
					"credits": 114
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 13453,
					"materials": 14671
				},
				"troopsExpended": {
					"troopT2BTank4": 5,
					"troopHeavyRebel4": 4,
					"troopMedic4": 2,
					"troopWookie4": 3,
					"troopSoldier4": 4
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireStormDeath7": 2,
					"troopStorm7": 1,
					"troopShock3": 1,
					"troopShock7": 2,
					"troopTechnician7": 1
				},
				"baseDamagePercent": 41,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 14,
				"defenderPotentialMedalGain": 14,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMaterialsGeneratorHealth3",
					"eqpRebelHQHealth4",
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelWallHealth4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "01cc6083-0eda-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "b2b051e9-fc6a-11e4-8ba4-06a77e004fbb",
					"name": "del rouki",
					"faction": "rebel",
					"guildId": "7f513e01-61df-11e5-a98d-06c66a004f76",
					"guildName": "ALIANZA_MEXICO",
					"attackRating": 5035,
					"attackRatingDelta": 6,
					"defenseRating": -1401,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 201,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490171645,
				"looted": {
					"materials": 13092,
					"credits": 12239
				},
				"earned": {
					"contraband": 0,
					"materials": 14092,
					"credits": 13239
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 13643,
					"materials": 14887
				},
				"troopsExpended": {
					"troopMarksman7": 1,
					"troopMedic6": 2,
					"troopHeavyRebel7": 3,
					"troopHeroChewbacca5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 50,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth6",
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelWallHealth7"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "e6770c09-0f3e-11e7-a842-06a77e004fbb",
				"attacker": {
					"playerId": "690c37a1-75a5-11e5-9097-06cb44004f79",
					"name": "reddog",
					"faction": "rebel",
					"guildId": "a79cc967-d532-11e6-93f1-06a77e004fbb",
					"guildName": "the.mojo.revolt",
					"attackRating": 62151,
					"attackRatingDelta": 10,
					"defenseRating": -7748,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 191,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490214975,
				"looted": {
					"materials": 27176,
					"credits": 25392
				},
				"earned": {
					"contraband": 0,
					"materials": 28176,
					"credits": 26392
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 26392,
					"materials": 28176
				},
				"troopsExpended": {
					"troopChampionRebelDroideka10": 1,
					"troopSoldier9": 11,
					"troopHeavyRebel9": 2,
					"troopMedic9": 5,
					"troopHeroHanSolo8": 1,
					"troopT2BTank9": 1,
					"troopDesertSkiff9": 1,
					"troopVanguard9": 2,
					"troopMarksman9": 1,
					"troopRebelSpeeder9": 1,
					"troopRebelJetpackTrooper9": 1,
					"troopHailfire8": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopStorm7": 2,
					"troopSniper7": 2
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 21,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelRapidFireTurretHealth6",
					"eqpRebelWallHealth8",
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelSandSoldier2",
					"eqpRebelCreditGeneratorHealth6",
					"eqpRebelMaterialsGeneratorHealth6"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "0f57419d-0fc5-11e7-bad8-061c98004f78",
				"attacker": {
					"playerId": "c10cc81c-fe39-11e6-953a-06033c004f77",
					"name": "jungyouchan",
					"faction": "rebel",
					"guildId": "ceafc77e-42bc-11e6-a5a8-06a77e004fbb",
					"guildName": "Galactic.Wolves",
					"attackRating": 5680,
					"attackRatingDelta": 3,
					"defenseRating": -41,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 188,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490272565,
				"looted": {
					"materials": 7776,
					"credits": 9185
				},
				"earned": {
					"contraband": 0,
					"materials": 8266,
					"credits": 9675
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17849,
					"materials": 15646
				},
				"troopsExpended": {
					"troopHeroChewbacca5": 1,
					"troopMedic5": 1,
					"troopSoldier5": 16,
					"troopRebelSpeeder5": 2,
					"troopT2BTank5": 1
				},
				"attackerGuildTroopsExpended": {
					"troopRebelSpeeder7": 1,
					"troopMedic7": 1,
					"troopSoldier8": 2
				},
				"defenderGuildTroopsExpended": {
					"troopDark5": 1,
					"troopMercenaryEmpireGamorreanWarrior2": 2
				},
				"baseDamagePercent": 59,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 28,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "1065f6f8-1008-11e7-84ee-06a77e004fbb",
				"attacker": {
					"playerId": "a1457956-ccc0-11e5-a6b6-06e6ee004fbc",
					"name": "xyucropbl",
					"faction": "rebel",
					"guildId": "a6b8dfa8-9573-11e6-b072-06c66a004f76",
					"guildName": "NEW.%5b00ffff%5dJEDI",
					"attackRating": 8253,
					"attackRatingDelta": 10,
					"defenseRating": -1053,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 178,
					"defenseRatingDelta": -10,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490301315,
				"looted": {
					"materials": 16129,
					"credits": 10580
				},
				"earned": {
					"contraband": 0,
					"materials": 17129,
					"credits": 11580
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 11580,
					"materials": 17129
				},
				"troopsExpended": {
					"troopSoldier8": 37,
					"troopJuggernaut8": 1,
					"troopHeroRebelJohhar2": 1,
					"troopChampionRebelDroideka5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopDark6": 4
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelBurstTurretDamage3",
					"eqpRebelMortarTurretDamage6",
					"eqpRebelRapidFireTurretDamage6",
					"eqpRebelSandSoldier2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "301963a5-108e-11e7-ab17-06cb44004f79",
				"attacker": {
					"playerId": "8f27c985-60c2-11e6-8f08-069da4004f8b",
					"name": "Obi Wan",
					"faction": "rebel",
					"guildId": "46dbe111-890e-11e4-be23-06e6ee004fbc",
					"guildName": "Nordwind",
					"attackRating": 6066,
					"attackRatingDelta": 6,
					"defenseRating": -1278,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2da37e9d-b0b4-11e6-913a-06cb44004f79",
					"name": "Jaqueline",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1590,
					"attackRatingDelta": 0,
					"defenseRating": 172,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490358947,
				"looted": {
					"materials": 22944,
					"credits": 15634
				},
				"earned": {
					"contraband": 0,
					"materials": 23944,
					"credits": 16634
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 16634,
					"materials": 23944
				},
				"troopsExpended": {
					"troopHeroHanSolo7": 1,
					"troopJuggernaut7": 1,
					"troopHailfire3": 1,
					"troopSoldier7": 24
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 76,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 10,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelRapidFireTurretDamage3",
					"eqpRebelMortarTurretHealth3",
					"eqpRebelHQHealth6",
					"eqpRebelWallHealth6"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			}
		],
		"campaigns": {
			"cmp_fue": {
				"uid": "cmp_fue",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"sw_hth_outposts": {
				"uid": "sw_hth_outposts",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_0_hb_e": {
				"uid": "cmp_0_hb_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_1_utts_e": {
				"uid": "cmp_1_utts_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_2_tsw_e": {
				"uid": "cmp_2_tsw_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_3_tjg_e": {
				"uid": "cmp_3_tjg_e",
				"timeZone": 0,
				"completed": true,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_4_sotm_e": {
				"uid": "cmp_4_sotm_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_5_tih_e": {
				"uid": "cmp_5_tih_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_7_bs_e": {
				"uid": "cmp_7_bs_e",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			}
		},
		"missions": {
			"fue_defendBaseMission_00": {
				"uid": "fue_defendBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5c616fee-b0b4-11e6-913a-06cb44004f79",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHalfBuildings",
					"RetainHQ",
					"AvoidCompleteLoss"
				],
				"grindMissionRetries": 0
			},
			"fue_impIntroBaseMission_00": {
				"uid": "fue_impIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "98098007-b0b4-11e6-913a-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"fue_rebIntroBaseMission_00": {
				"uid": "fue_rebIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d8a6555b-b0b4-11e6-913a-06cb44004f79",
				"lootRemaining": {
					"credits": 1062,
					"materials": 1000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"sw_hth_outpost_s_1": {
				"uid": "sw_hth_outpost_s_1",
				"campaignUid": "sw_hth_outposts",
				"status": "Default",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_1": {
				"uid": "camp_1_utts_e_1",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5e82425d-b0b6-11e6-92e0-06c66a004f76",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2": {
				"uid": "camp_1_utts_e_2",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "b20eab06-b0ba-11e6-9fa7-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2a": {
				"uid": "camp_1_utts_e_2a",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "e22cebc3-bdaf-11e6-a741-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_3": {
				"uid": "camp_1_utts_e_3",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_Wall_T1_25"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_4": {
				"uid": "camp_1_utts_e_4",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "86b50871-be24-11e6-b9bb-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_5": {
				"uid": "camp_1_utts_e_5",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT2EmpStarport"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_6": {
				"uid": "camp_1_utts_e_6",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "6217e567-bf0a-11e6-bdec-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_7": {
				"uid": "camp_1_utts_e_7",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2EmpCreGen"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_9": {
				"uid": "camp_1_utts_e_9",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "7158ddb3-bfd4-11e6-bdec-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_10": {
				"uid": "camp_1_utts_e_10",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own4Turrets"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_1": {
				"uid": "camp_2_tsw_e_1",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "fbbfcb19-bff2-11e6-a25b-060a32004f8c",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_2": {
				"uid": "camp_2_tsw_e_2",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T1EmpFactory"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_3": {
				"uid": "camp_2_tsw_e_3",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "fa57e0cb-bff3-11e6-a25b-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_4": {
				"uid": "camp_2_tsw_e_4",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpCredGen"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_5": {
				"uid": "camp_2_tsw_e_5",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "8efbefc3-c079-11e6-949d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_1": {
				"uid": "camp_3_tjg_e_1",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "d32aec1e-c079-11e6-949d-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_2": {
				"uid": "camp_3_tjg_e_2",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpBarracks"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_3": {
				"uid": "camp_3_tjg_e_3",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "417ab13a-c0d7-11e6-a741-06cb44004f79",
				"lootRemaining": {
					"credits": 500,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_4": {
				"uid": "camp_3_tjg_e_4",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "949adcbf-c322-11e6-b27f-06dc8c004fbd",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_5": {
				"uid": "camp_3_tjg_e_5",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T2EmpMatStor"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_6": {
				"uid": "camp_3_tjg_e_6",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "4235e347-c3ba-11e6-b51d-061c98004f78",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_7": {
				"uid": "camp_3_tjg_e_7",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpRFTurrets"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_8": {
				"uid": "camp_3_tjg_e_8",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d496599a-c3c7-11e6-b400-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_9": {
				"uid": "camp_3_tjg_e_9",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT3EmpHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_10": {
				"uid": "camp_3_tjg_e_10",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "56146023-c3c8-11e6-b400-060a32004f8c",
				"lootRemaining": {
					"credits": 375,
					"materials": 375,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"Kill_TuskenHero_t1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_1": {
				"uid": "camp_4_sotm_e_1",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMortar_T1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_2": {
				"uid": "camp_4_sotm_e_2",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireBarracks_T3_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_3": {
				"uid": "camp_4_sotm_e_3",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "7d44c9b0-c3f6-11e6-aaf5-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_4": {
				"uid": "camp_4_sotm_e_4",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f97eb360-c3f6-11e6-aaf5-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_5": {
				"uid": "camp_4_sotm_e_5",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9cb3a101-c459-11e6-aaf5-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_6": {
				"uid": "camp_4_sotm_e_6",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "301fd86c-c4ef-11e6-88cb-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_7": {
				"uid": "camp_4_sotm_e_7",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_turret_t1_6"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_8": {
				"uid": "camp_4_sotm_e_8",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_wall_t1_40"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_9": {
				"uid": "camp_4_sotm_e_9",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_10": {
				"uid": "camp_4_sotm_e_10",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_starport_t2_2"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_11": {
				"uid": "camp_4_sotm_e_11",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "4393ecd2-c542-11e6-86de-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_12": {
				"uid": "camp_4_sotm_e_12",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "be12678a-d9af-11e6-8f8c-06c66a004f76",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_13": {
				"uid": "camp_4_sotm_e_13",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "cfe03daa-db68-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_14": {
				"uid": "camp_4_sotm_e_14",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1cf7a709-db69-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_1": {
				"uid": "camp_5_tih_e_1",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMaterialsGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_2": {
				"uid": "camp_5_tih_e_2",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireOffenseLab_t1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_3": {
				"uid": "camp_5_tih_e_3",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5007b19c-ddb1-11e6-994c-06dc8c004fbd",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_4": {
				"uid": "camp_5_tih_e_4",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_12_t3_walls"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_5": {
				"uid": "camp_5_tih_e_5",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c2f00335-ddbf-11e6-95c1-063864004f75",
				"lootRemaining": {
					"credits": 1000,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_6": {
				"uid": "camp_5_tih_e_6",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "24d1fe51-ddc0-11e6-95c1-063864004f75",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_7": {
				"uid": "camp_5_tih_e_7",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireCreditGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_8": {
				"uid": "camp_5_tih_e_8",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "754e5bb8-e2e0-11e6-9b37-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_1": {
				"uid": "chapter_7_bs_e_1",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "13cc8230-e63a-11e6-a0d9-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_2": {
				"uid": "chapter_7_bs_e_2",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "8b8b6893-e645-11e6-a05d-06a77e004fbb",
				"lootRemaining": {
					"credits": 2100,
					"materials": 2100,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_3": {
				"uid": "chapter_7_bs_e_3",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "465dab7f-e978-11e6-9e25-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_4": {
				"uid": "chapter_7_bs_e_4",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireHQ_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_5": {
				"uid": "chapter_7_bs_e_5",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "0d20d972-e979-11e6-9e25-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_6": {
				"uid": "chapter_7_bs_e_6",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_7": {
				"uid": "chapter_7_bs_e_7",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "4fce3f2e-e979-11e6-9e25-06033c004f77",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_8": {
				"uid": "chapter_7_bs_e_8",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 1,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2cd4501a-f635-11e6-a83b-061c98004f78",
				"lootRemaining": {
					"credits": 2400,
					"materials": 2400,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_9": {
				"uid": "chapter_7_bs_e_9",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 1,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d22615e6-f3da-11e6-aa87-06a77e004fbb",
				"lootRemaining": {
					"credits": 2600,
					"materials": 2600,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Destroy_rebelTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_10": {
				"uid": "chapter_7_bs_e_10",
				"campaignUid": "cmp_7_bs_e",
				"status": "Active",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": "fd245fc9-0e3e-11e7-9789-06dc8c004fbd",
				"lootRemaining": {
					"credits": 2900,
					"materials": 2900,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			}
		},
		"tournaments": {
			"conflict_forestOps_tat_01": {
				"uid": "conflict_forestOps_tat_01",
				"rating": 0,
				"collected": true,
				"percentile": 0,
				"tier": "tournament_tier_1",
				"redeemedRewards": [
					"lc_conf_crystal_tier1"
				],
				"attacksWon": 0,
				"attacksLost": 1,
				"defensesWon": 3,
				"defensesLost": 9,
				"donatedTroops": 115
			}
		},
		"isFueInProgress": false,
		"DamagedBuildings": {
			"bld_124": 100,
			"bld_54": 100,
			"bld_84": 100,
			"bld_72": 100,
			"bld_112": 100,
			"bld_78": 100,
			"bld_108": 100,
			"bld_24": 100,
			"bld_254": 100,
			"bld_26": 100,
			"bld_79": 100,
			"bld_61": 100,
			"bld_66": 100,
			"bld_58": 100,
			"bld_65": 100,
			"bld_67": 100,
			"bld_23": 100,
			"bld_123": 100,
			"bld_253": 100,
			"bld_110": 100,
			"bld_60": 100,
			"bld_53": 100,
			"bld_127": 100,
			"bld_82": 100,
			"bld_8": 100,
			"bld_106": 100,
			"bld_109": 100,
			"bld_1": 100,
			"bld_25": 100,
			"bld_73": 100,
			"bld_76": 100,
			"bld_85": 100,
			"bld_57": 100,
			"bld_56": 100,
			"bld_77": 100,
			"bld_107": 100,
			"bld_70": 0,
			"bld_7": 80,
			"bld_6": 51,
			"bld_5": 13,
			"bld_20": 13,
			"bld_64": 0,
			"bld_4": 17,
			"bld_63": 0,
			"bld_3": 0,
			"bld_2": 0,
			"bld_62": 0,
			"bld_68": 0,
			"bld_91": 0,
			"bld_90": 0,
			"bld_86": 0,
			"bld_88": 0,
			"bld_87": 0,
			"bld_17": 0,
			"bld_16": 0,
			"bld_15": 0,
			"bld_14": 13,
			"bld_19": 13,
			"bld_18": 17,
			"bld_13": 17,
			"bld_81": 47,
			"bld_52": 0,
			"bld_55": 0,
			"bld_118": 0,
			"bld_117": 0,
			"bld_119": 0,
			"bld_122": 0,
			"bld_116": 0,
			"bld_115": 19,
			"bld_22": 0,
			"bld_111": 0,
			"bld_121": 0,
			"bld_120": 0,
			"bld_9": 0,
			"bld_114": 0,
			"bld_113": 0,
			"bld_83": 0,
			"bld_12": 0,
			"bld_89": 0,
			"bld_10": 0,
			"bld_21": 0,
			"bld_80": 51,
			"bld_71": 39,
			"bld_59": 0,
			"bld_69": 29,
			"bld_93": 0,
			"bld_247": 0,
			"bld_240": 0,
			"bld_245": 0,
			"bld_242": 0,
			"bld_246": 0,
			"bld_241": 0,
			"bld_250": 0,
			"bld_249": 0,
			"bld_243": 0,
			"bld_248": 0,
			"bld_244": 0,
			"bld_92": 0,
			"bld_11": 0
		},
		"deviceInfo": {},
		"timeZoneOffset": 2,
		"contracts": [
			{
				"uid": "rockSmall1",
				"endTime": 1490380576,
				"contractType": "Clear",
				"buildingId": "bld_277",
				"perkIds": []
			},
			{
				"uid": "junkSmall1",
				"endTime": 1490380578,
				"contractType": "Clear",
				"buildingId": "bld_275",
				"perkIds": []
			},
			{
				"uid": "troopATST5",
				"endTime": 1490380726,
				"contractType": "Troop",
				"buildingId": "bld_59",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder5",
				"endTime": 1490380801,
				"contractType": "Troop",
				"buildingId": "bld_59",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder5",
				"endTime": 1490380876,
				"contractType": "Troop",
				"buildingId": "bld_59",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder5",
				"endTime": 1490380951,
				"contractType": "Troop",
				"buildingId": "bld_59",
				"perkIds": []
			},
			{
				"uid": "troopATMP5",
				"endTime": 1490451268,
				"contractType": "Research",
				"buildingId": "bld_93",
				"perkIds": []
			}
		],
		"frozenBuildings": [],
		"isConnectedAccount": true,
		"pvpTargetServedTime": 1490358851,
		"intros": [],
		"lastMission": "chapter_7_bs_e_10",
		"isRateIncentivized": false,
		"lastPaymentTime": null,
		"lastWarParticipationTime": 1490166102,
		"identitySwitchTimes": {},
		"openOffer": null,
		"unlockedPlanets": [],
		"relocationStarCount": -1,
		"holonetRewards": [
			"reward_securityDroid_e_ltr",
			"reward_atmosMig_e_ltr",
			"reward_desBiome_e_ltr",
			"reward_forBiome_e_ltr"
		],
		"playerObjectives": {
			"planet1": {
				"groupId": "obj_tatooine_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_train_herocrimsonguard_easy_e",
						"hq": 5,
						"count": 1,
						"target": 1,
						"state": "rewarded"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 5,
						"count": 15,
						"target": 15,
						"state": "rewarded"
					},
					{
						"uid": "obj_deploy_atat_hard_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					}
				]
			},
			"planet8": {
				"groupId": "obj_forestOps_yavin_23",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_heroatmp_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_forestOps_destroy_type_turret_hard_e",
						"hq": 5,
						"count": 0,
						"target": 10,
						"state": "active"
					}
				]
			},
			"planet23": {
				"groupId": "obj_tfa_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_destroy_creditstorage_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_destroy_materialsstorage_hard_e",
						"hq": 5,
						"count": 0,
						"target": 2,
						"state": "active"
					}
				]
			},
			"planet21": {
				"groupId": "obj_hoth_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_heroatst_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_destroy_mortar_hard_e",
						"hq": 5,
						"count": 0,
						"target": 3,
						"state": "active"
					}
				]
			},
			"planet3": {
				"groupId": "obj_dandoran_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_heroatst_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_destroy_burstturret_hard_e",
						"hq": 5,
						"count": 0,
						"target": 3,
						"state": "active"
					}
				]
			},
			"planet6": {
				"groupId": "obj_erkit_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_destroy_starport_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_train_atst_hard_e",
						"hq": 5,
						"count": 0,
						"target": 3,
						"state": "active"
					}
				]
			}
		},
		"lastObjectiveCheckTime": 1490380402,
		"raids": {
			"planet1": {
				"planetId": "planet1",
				"raidId": "raid_Tatooine1",
				"raidPoolId": "raidpool_desBiome_hq5_e",
				"raidMissionId": "raid_desBiome_e_hq5_1",
				"retried": false,
				"startTime": 1490418000,
				"endTime": null,
				"lastRaidStars": 3,
				"lastRaidId": "raid_Tatooine2",
				"lastRaidPoolId": "raidpool_desBiome_hq5_e",
				"lastRaidMissionId": "raid_desBiome_e_hq5_3",
				"nextRaidStartTime": 1490461200
			}
		},
		"perksInfo": {
			"perks": {
				"activatedPerks": [
					{
						"perkId": "perk_CBar_CFac5",
						"startTime": 1488907867,
						"endTime": 1488951067
					},
					{
						"perkId": "perk_GCrd_GCon4",
						"startTime": 1488907895,
						"endTime": 1488951095
					},
					{
						"perkId": "perk_CBar_CCan6",
						"startTime": 1488907910,
						"endTime": 1488951110
					}
				],
				"cooldowns": {
					"CBar_CFac": 1489008667,
					"GCrd_GCon": 1489008695,
					"CBar_CCan": 1489008710
				},
				"hasActivatedFirstPerk": true
			}
		},
		"armoryInfo": {
			"firstCratePurchased": false
		},
		"activeArmory": {
			"equipment": [],
			"capacity": null
		},
		"shards": {
			"shrd_troopShock": 29,
			"shrd_specialAttackAtmosMig": 9
		},
		"troopDonationProgress": {
			"donationCount": 10,
			"lastTrackedDonationTime": 1490380457,
			"repDonationCooldownEndTime": 1490425200
		},
		"purchasedCrates": []
	},
	"scalars": {
		"attacksLost": 26,
		"attacksWon": 251,
		"defensesLost": 234,
		"defensesWon": 121,
		"attacksStarted": 278,
		"attacksCompleted": 277,
		"attackRating": 1590,
		"defenseRating": 172,
		"xp": 0,
		"NF1219": 1
	},
	"name": "Jaqueline"
};

/***/ }),
/* 184 */
/***/ (function(module, exports) {

module.exports = {
	"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
	"playerModel": {
		"guildInfo": {
			"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
			"guildName": "fcuk",
			"icon": "",
			"joinDate": 1477748463,
			"playerHasOutstandingJoinRequest": false
		},
		"upgrades": {
			"troop": {
				"Storm": 7,
				"Dark": 6,
				"ATST": 7,
				"2MTank": 6,
				"Scout": 6,
				"EmpireSpeeder": 7,
				"HeroATST": 6,
				"HeroATMP": 7,
				"Dewback": 6,
				"HeroCrimsonGuard": 7,
				"ATMP": 6,
				"Technician": 7,
				"ATAT": 7,
				"HeroATAT": 7,
				"HeavyStorm": 7,
				"ProbeDroid": 7,
				"Shock": 3,
				"MHC": 7,
				"ChampionEmpireDroideka": 5,
				"Sniper": 7,
				"EmpireGamorreanWarrior": 2
			},
			"specialAttack": {
				"TieInterceptor": 6,
				"TieFighter": 6,
				"TieBomber": 6,
				"TieDefender": 7,
				"AtmosMig": 2
			},
			"building": {},
			"equipment": {
				"eqpEmpireHQHealth": 7,
				"eqpEmpireMortarTurretDamage": 6,
				"eqpEmpireRapidFireTurretDamage": 6,
				"eqpEmpireWallHealth": 7,
				"eqpEmpireMortarTurretHealth": 6,
				"eqpEmpireRapidFireTurretHealth": 6,
				"eqpEmpirePentagonTrooper": 3,
				"eqpEmpireMaterialsGeneratorHealth": 4,
				"eqpEmpireCreditGeneratorHealth": 7,
				"eqpEmpireContrabandGeneratorHealth": 4,
				"eqpEmpirePentagonHeavyTrooper": 3,
				"eqpEmpireBurstTurretDamage": 3,
				"eqpEmpireBurstTurretHealth": 3,
				"eqpEmpireCargoGreatDane": 1,
				"eqpEmpireSandtrooper": 2,
				"eqpEmpireArcticATMP": 1,
				"eqpEmpireSnowtrooper": 1
			}
		},
		"prizes": {
			"troop": {
				"KubazInvader": 93,
				"promoRancorEmpire": 6,
				"EmpireStormDeath": 111,
				"EmpireHeavyStormDeath": 96,
				"EmpireScoutDeath": 219,
				"EmpireGamorreanWarrior": 10,
				"EmpireSpeeder": 56,
				"ProbeDroid": 44,
				"HeavyStorm": 97,
				"Sniper": 49,
				"HeroATST": 25,
				"HeroATAT": 14,
				"Technician": 41,
				"SecurityDroid": 41,
				"Shock": 36,
				"HeroATMP": 9,
				"ATAT": 17,
				"HeroCrimsonGuard": 12,
				"ATDP": 18,
				"HeroDarthVader": 10,
				"EmpireTwilekIncinerator": 25,
				"EmpireJumptrooper": 19,
				"MHC": 16,
				"EmpireHovertankSample": 3,
				"KraytDragon": 4,
				"EmpireJohhar": 6,
				"EmpireTognath": 3
			},
			"specialAttack": {
				"TieInterceptor": 9,
				"TieFighter": 6,
				"TieDefender": 4,
				"TieBomber": 3,
				"VT49": 1,
				"TieAdvanced": 1,
				"ImperialDropship": 1
			},
			"resources": {},
			"crates": {
				"available": {},
				"inProgress": {},
				"next": 659,
				"nextDailyCrateTime": 1490414400,
				"nextHolonetTime": 1488270626
			}
		},
		"donatedTroops": {},
		"buildingsUnderConstruction": [
			"bld_121"
		],
		"map": {
			"next": 487,
			"planet": "planet6",
			"buildings": [
				{
					"key": "bld_148",
					"x": 10,
					"z": 2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_143",
					"x": 3,
					"z": -1,
					"uid": "empireTrapStrikeAOE6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_156",
					"x": -5,
					"z": -6,
					"uid": "empireBurstTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_91",
					"x": -10,
					"z": -1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_202",
					"x": -7,
					"z": -8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_201",
					"x": -7,
					"z": -5,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_215",
					"x": 3,
					"z": -6,
					"uid": "empireRapidFireTurret7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_17",
					"x": 5,
					"z": -8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_19",
					"x": 5,
					"z": -7,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_211",
					"x": 7,
					"z": 3,
					"uid": "empireTrapStrikeGeneric6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_18",
					"x": 5,
					"z": -6,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_13",
					"x": 5,
					"z": -5,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_71",
					"x": -10,
					"z": 3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_107",
					"x": -9,
					"z": -1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_104",
					"x": 10,
					"z": 3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_108",
					"x": 10,
					"z": 1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_69",
					"x": 10,
					"z": 0,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_102",
					"x": -7,
					"z": -6,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_61",
					"x": -11,
					"z": -1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_67",
					"x": -4,
					"z": 7,
					"uid": "empireBurstTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_66",
					"x": -1,
					"z": 8,
					"uid": "empireRocketTurret7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_80",
					"x": -11,
					"z": 0,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_114",
					"x": -11,
					"z": 1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_79",
					"x": -7,
					"z": -7,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_78",
					"x": -11,
					"z": 2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_76",
					"x": -7,
					"z": 0,
					"uid": "empireCreditStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_122",
					"x": 3,
					"z": 1,
					"uid": "empireShieldGenerator7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_60",
					"x": -11,
					"z": 3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_210",
					"x": 3,
					"z": 5,
					"uid": "empireTrapStrikeGeneric7",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_55",
					"x": -2,
					"z": 4,
					"uid": "empireSquadBuilding7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_117",
					"x": -4,
					"z": 1,
					"uid": "empireShieldGenerator7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_216",
					"x": -9,
					"z": 1,
					"uid": "empireMortar6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_157",
					"x": 5,
					"z": 3,
					"uid": "empireBurstTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_88",
					"x": -3,
					"z": 13,
					"uid": "empireStarport7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_144",
					"x": -4,
					"z": -1,
					"uid": "empireTrapStrikeAOE6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_53",
					"x": -10,
					"z": -9,
					"uid": "empireMaterialsGenerator7",
					"lastCollectTime": 1490383764,
					"currentStorage": 540
				},
				{
					"key": "bld_52",
					"x": 3,
					"z": 7,
					"uid": "empireRapidFireTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_22",
					"x": -6,
					"z": 3,
					"uid": "empireRapidFireTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_115",
					"x": -8,
					"z": 3,
					"uid": "empireTrapStrikeGeneric6",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_120",
					"x": -10,
					"z": -13,
					"uid": "empireCreditGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 494
				},
				{
					"key": "bld_444",
					"x": 7,
					"z": 17,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 2
				},
				{
					"key": "bld_459",
					"x": -4,
					"z": 19,
					"uid": "junkMedium1",
					"lastCollectTime": null,
					"currentStorage": 3
				},
				{
					"key": "bld_465",
					"x": 5,
					"z": 17,
					"uid": "junkMedium1",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_466",
					"x": -5,
					"z": 16,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 2
				},
				{
					"key": "bld_476",
					"x": 15,
					"z": -6,
					"uid": "junkLarge1",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_479",
					"x": 2,
					"z": 20,
					"uid": "junkSmall1",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_482",
					"x": 15,
					"z": -4,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 2
				},
				{
					"key": "bld_483",
					"x": -13,
					"z": 18,
					"uid": "junkLarge1",
					"lastCollectTime": null,
					"currentStorage": 2
				},
				{
					"key": "bld_333",
					"x": -2,
					"z": -5,
					"uid": "empirePlatformDroideka5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_212",
					"x": -1,
					"z": -9,
					"uid": "empireShieldGenerator7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_116",
					"x": 3,
					"z": -3,
					"uid": "empireRocketTurret7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_446",
					"x": 1,
					"z": -9,
					"uid": "empireMaterialsStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_312",
					"x": 6,
					"z": -6,
					"uid": "empireTrapStrikeAOE6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_323",
					"x": -10,
					"z": -21,
					"uid": "empireContrabandCantina2",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_74",
					"x": -6,
					"z": -21,
					"uid": "empireCreditGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 494
				},
				{
					"key": "bld_159",
					"x": 13,
					"z": -2,
					"uid": "empireNavigationCenter4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_311",
					"x": 14,
					"z": 12,
					"uid": "empireBarracks7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_101",
					"x": 13,
					"z": 2,
					"uid": "empireScoutTower1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_26",
					"x": 20,
					"z": -21,
					"uid": "empireDroidHut1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_214",
					"x": -16,
					"z": 0,
					"uid": "empireArmory3",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_65",
					"x": 12,
					"z": -6,
					"uid": "empireMaterialsGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 479
				},
				{
					"key": "bld_94",
					"x": -7,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_208",
					"x": -5,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_207",
					"x": -6,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_152",
					"x": 6,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_103",
					"x": 3,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_5",
					"x": 4,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_3",
					"x": 5,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_56",
					"x": -7,
					"z": 13,
					"uid": "empireBarracks6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_72",
					"x": 4,
					"z": 13,
					"uid": "empireBarracks6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_111",
					"x": -5,
					"z": -3,
					"uid": "empireRocketTurret6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_16",
					"x": -6,
					"z": -8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_7",
					"x": -6,
					"z": -12,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_90",
					"x": -6,
					"z": -9,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_12",
					"x": -6,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_11",
					"x": -6,
					"z": -11,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_10",
					"x": -6,
					"z": -10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_14",
					"x": 4,
					"z": -8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_58",
					"x": 4,
					"z": -9,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_151",
					"x": 4,
					"z": -10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_6",
					"x": 4,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_203",
					"x": 4,
					"z": -12,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_57",
					"x": 4,
					"z": -11,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_310",
					"x": -1,
					"z": -11,
					"uid": "empireRapidFireTurret7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_15",
					"x": -1,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_322",
					"x": 2,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_321",
					"x": 0,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_320",
					"x": 3,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_316",
					"x": -2,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_315",
					"x": -5,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_314",
					"x": -3,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_313",
					"x": -4,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_319",
					"x": 1,
					"z": -13,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_146",
					"x": -1,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_145",
					"x": -2,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_20",
					"x": 0,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_206",
					"x": 1,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_204",
					"x": -3,
					"z": 10,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_205",
					"x": -7,
					"z": -4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_150",
					"x": -7,
					"z": -3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_154",
					"x": 5,
					"z": -4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_81",
					"x": 5,
					"z": -3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_153",
					"x": -8,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_318",
					"x": 7,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_147",
					"x": 10,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_2",
					"x": 9,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_68",
					"x": 8,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_9",
					"x": 10,
					"z": -1,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_84",
					"x": 8,
					"z": -1,
					"uid": "empireTrapStrikeGeneric6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_217",
					"x": 8,
					"z": -6,
					"uid": "empireCreditGenerator7",
					"lastCollectTime": 1490383764,
					"currentStorage": 554
				},
				{
					"key": "bld_54",
					"x": -11,
					"z": -5,
					"uid": "empireMaterialsStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_106",
					"x": -7,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_89",
					"x": 5,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_82",
					"x": 6,
					"z": -21,
					"uid": "empireOffenseLab7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_64",
					"x": 7,
					"z": -13,
					"uid": "empireCreditGenerator7",
					"lastCollectTime": 1490383764,
					"currentStorage": 554
				},
				{
					"key": "bld_73",
					"x": -10,
					"z": -17,
					"uid": "empireMaterialsGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 480
				},
				{
					"key": "bld_328",
					"x": -6,
					"z": -17,
					"uid": "empireContrabandGenerator3",
					"lastCollectTime": 1490383764,
					"currentStorage": 31
				},
				{
					"key": "bld_445",
					"x": -2,
					"z": -17,
					"uid": "empireCreditStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_480",
					"x": 2,
					"z": -17,
					"uid": "empireContrabandGenerator1",
					"lastCollectTime": 1490383764,
					"currentStorage": 19
				},
				{
					"key": "bld_142",
					"x": 6,
					"z": -17,
					"uid": "empireMaterialsGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 693
				},
				{
					"key": "bld_218",
					"x": -2,
					"z": -21,
					"uid": "empireMaterialsGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 479
				},
				{
					"key": "bld_141",
					"x": 2,
					"z": -21,
					"uid": "empireCreditGenerator7",
					"lastCollectTime": 1490383764,
					"currentStorage": 1021
				},
				{
					"key": "bld_23",
					"x": -4,
					"z": -9,
					"uid": "empireCreditStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_77",
					"x": 7,
					"z": -9,
					"uid": "empireMaterialsStorage7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_24",
					"x": 11,
					"z": -10,
					"uid": "empireCreditGenerator7",
					"lastCollectTime": 1490383764,
					"currentStorage": 554
				},
				{
					"key": "bld_229",
					"x": 5,
					"z": 0,
					"uid": "empireContrabandStorage3",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_200",
					"x": -9,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_309",
					"x": -4,
					"z": -11,
					"uid": "empireMortar7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_83",
					"x": 2,
					"z": -11,
					"uid": "empireMortar6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_75",
					"x": 8,
					"z": 1,
					"uid": "empireMortar7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_317",
					"x": 6,
					"z": -2,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_1",
					"x": -2,
					"z": -1,
					"uid": "empireHQ8",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_92",
					"x": -10,
					"z": 4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_109",
					"x": -7,
					"z": 9,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_70",
					"x": -7,
					"z": 7,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_105",
					"x": -7,
					"z": 8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_8",
					"x": -7,
					"z": 6,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_93",
					"x": 6,
					"z": 9,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_209",
					"x": 6,
					"z": 8,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_149",
					"x": 6,
					"z": 7,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_21",
					"x": 6,
					"z": 6,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_25",
					"x": -18,
					"z": 5,
					"uid": "empireStarport7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_453",
					"x": -7,
					"z": 5,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_455",
					"x": 7,
					"z": 5,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_456",
					"x": 6,
					"z": 5,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_449",
					"x": -4,
					"z": 10,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_447",
					"x": 2,
					"z": 10,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_4",
					"x": 9,
					"z": 3,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_62",
					"x": 9,
					"z": 4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_110",
					"x": 8,
					"z": 4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_450",
					"x": 7,
					"z": 4,
					"uid": "empireWall5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_63",
					"x": 8,
					"z": 12,
					"uid": "empireFactory7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_113",
					"x": -11,
					"z": 7,
					"uid": "empireTacticalCommand7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_158",
					"x": 8,
					"z": 7,
					"uid": "empireFleetCommand7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_213",
					"x": 13,
					"z": 5,
					"uid": "empireStarport7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_59",
					"x": -9,
					"z": 4,
					"uid": "empireWall7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_451",
					"x": -8,
					"z": 4,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_452",
					"x": -8,
					"z": 5,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_121",
					"x": -15,
					"z": -4,
					"uid": "empireMaterialsGenerator6",
					"lastCollectTime": 1490383764,
					"currentStorage": 0
				},
				{
					"key": "bld_155",
					"x": -13,
					"z": 12,
					"uid": "empireFactory7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_123",
					"x": -17,
					"z": 12,
					"uid": "empireBarracks7",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_484",
					"x": -21,
					"z": -8,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_485",
					"x": 3,
					"z": 18,
					"uid": "junkMedium1",
					"lastCollectTime": null,
					"currentStorage": 3
				},
				{
					"key": "bld_448",
					"x": -13,
					"z": -8,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_454",
					"x": -13,
					"z": -12,
					"uid": "empireWall6",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_486",
					"x": 11,
					"z": 19,
					"uid": "rockSmall1",
					"lastCollectTime": null,
					"currentStorage": 2
				}
			]
		},
		"inventory": {
			"storage": {
				"credits": {
					"amount": 75546,
					"capacity": 1500000,
					"scale": 1
				},
				"materials": {
					"amount": 35437,
					"capacity": 1500000,
					"scale": 1
				},
				"contraband": {
					"amount": 5553,
					"capacity": 50000,
					"scale": 1
				},
				"reputation": {
					"amount": 0,
					"capacity": 18,
					"scale": 1
				},
				"crystals": {
					"amount": 47,
					"capacity": -1,
					"scale": 1
				},
				"droids": {
					"amount": 4,
					"capacity": 5,
					"scale": 1
				},
				"xp": {
					"amount": 1630,
					"capacity": -1,
					"scale": 1
				},
				"troop": {
					"amount": 0,
					"capacity": 20,
					"scale": 1
				},
				"hero": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				},
				"champion": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				}
			},
			"capacity": -1,
			"subStorage": {
				"troop": {
					"storage": {
						"troopMercenaryEmpireGamorreanWarrior2": {
							"amount": 3,
							"capacity": -1,
							"scale": 6
						},
						"troopATAT7": {
							"amount": 2,
							"capacity": -1,
							"scale": 30
						},
						"troopTechnician7": {
							"amount": 3,
							"capacity": -1,
							"scale": 4
						},
						"troopEmpireSpeeder7": {
							"amount": 1,
							"capacity": -1,
							"scale": 6
						}
					},
					"capacity": 96,
					"subStorage": {}
				},
				"specialAttack": {
					"storage": {
						"specialAttackTieBomber6": {
							"amount": 1,
							"capacity": -1,
							"scale": 3
						},
						"specialAttackTieDefender7": {
							"amount": 1,
							"capacity": -1,
							"scale": 4
						}
					},
					"capacity": 27,
					"subStorage": {}
				},
				"hero": {
					"storage": {
						"troopHeroATAT7": {
							"amount": 1,
							"capacity": 1,
							"scale": 1
						}
					},
					"capacity": 3,
					"subStorage": {}
				},
				"champion": {
					"storage": {
						"troopChampionEmpireDroideka5": {
							"amount": 0,
							"capacity": 0,
							"scale": 1
						}
					},
					"capacity": 1,
					"subStorage": {}
				}
			}
		},
		"faction": "empire",
		"currentQuest": "",
		"protectedUntil": 1490426378,
		"protectionFrom": 1490383178,
		"protectionCooldownUntil": {},
		"battleLogs": [
			{
				"battleId": "dd436072-0985-11e7-9fcf-06033c004f77",
				"attacker": {
					"playerId": "f6d2cbf9-7588-11e5-8b68-061c98004f78",
					"name": "taka",
					"faction": "rebel",
					"guildId": "0e4c8ec1-099a-11e5-8ba4-06a77e004fbb",
					"guildName": "JAPAN-JEDI",
					"attackRating": 8363,
					"attackRatingDelta": -27,
					"defenseRating": -822,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -39,
					"defenseRatingDelta": 32,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489585781,
				"looted": {
					"contraband": 592,
					"materials": 32580,
					"credits": 32969
				},
				"earned": {
					"contraband": 592,
					"materials": 32580,
					"credits": 32969
				},
				"maxLootable": {
					"contraband": 732,
					"credits": 61047,
					"materials": 43308
				},
				"troopsExpended": {
					"troopSoldier8": 4,
					"troopHeavyRebel9": 11,
					"troopMedic9": 4,
					"troopJuggernaut8": 1,
					"troopHeroLukeSkywalker8": 1,
					"specialAttackXWing8": 2,
					"troopChampionRebelHeavyDroideka1": 1,
					"troopChampionRebelDroideka4": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 44,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 32,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelHQHealth6",
					"eqpRebelWallHealth7",
					"eqpRebelSandSoldier1",
					"eqpRebelRapidFireTurretDamage4"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet1"
			},
			{
				"battleId": "53c31198-0986-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "70f511b2-52e7-11e5-bf3f-06e6ee004fbc",
					"name": "Schattentöter",
					"faction": "rebel",
					"guildId": "462f5d23-6c2f-11e5-8b68-061c98004f78",
					"guildName": "light-saber",
					"attackRating": 20691,
					"attackRatingDelta": 4,
					"defenseRating": -6983,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -43,
					"defenseRatingDelta": -4,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489585950,
				"looted": {
					"contraband": 140,
					"credits": 35876,
					"materials": 21228
				},
				"earned": {
					"contraband": 140,
					"credits": 35876,
					"materials": 21228
				},
				"maxLootable": {
					"contraband": 673,
					"credits": 45247,
					"materials": 27452
				},
				"troopsExpended": {
					"troopHeavyRebel9": 9,
					"troopMedic9": 9,
					"troopSoldier9": 12,
					"troopHeroChewbacca8": 1,
					"specialAttackXWing8": 3
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 56,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelMortarTurretDamage5",
					"eqpRebelHQHealth7",
					"eqpRebelMortarTurretHealth5",
					"eqpRebelWallHealth7",
					"eqpRebelMaterialsGeneratorHealth6"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet1"
			},
			{
				"battleId": "50af7e6d-09d2-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "024152de-484b-11e4-8f8b-06dc8c004fbd",
					"name": "Striker",
					"faction": "rebel",
					"guildId": "48677c4a-af89-11e5-92aa-06a77e004fbb",
					"guildName": "JediTempleBlue",
					"attackRating": 73720,
					"attackRatingDelta": 13,
					"defenseRating": 9520,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -56,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489618553,
				"looted": {
					"contraband": 626,
					"credits": 38855,
					"materials": 18979
				},
				"earned": {
					"contraband": 626,
					"credits": 39855,
					"materials": 19979
				},
				"maxLootable": {
					"contraband": 626,
					"credits": 39855,
					"materials": 19979
				},
				"troopsExpended": {
					"troopVanguard7": 2,
					"troopSoldier10": 53,
					"troopMedic10": 4,
					"troopHailfire10": 3,
					"troopATTE9": 1,
					"troopHeroRebelJohhar10": 1,
					"troopChampionRebelDroideka22": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4,
					"troopDark6": 1
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 24,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelMortarTurretHealth5",
					"eqpRebelWallHealth8",
					"eqpRebelMortarTurretDamage5",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelCreditGeneratorHealth5"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "a87e047d-0a58-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "c2dc33d6-c444-11e6-86de-06cb44004f79",
					"name": "[000000]AKUMA",
					"faction": "rebel",
					"guildId": "741229f6-e24f-11e6-a05d-06a77e004fbb",
					"guildName": "%5b000005%5dBAKUFU",
					"attackRating": 17230,
					"attackRatingDelta": 13,
					"defenseRating": 354,
					"defenseRatingDelta": 0,
					"tournamentRating": 8982,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -69,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489676270,
				"looted": {
					"contraband": 691,
					"credits": 75908,
					"materials": 52451
				},
				"earned": {
					"contraband": 189,
					"credits": 76908,
					"materials": 53451
				},
				"maxLootable": {
					"contraband": 691,
					"credits": 76908,
					"materials": 53451
				},
				"troopsExpended": {
					"troopIthorianInfiltrator1": 2,
					"troopVanguard5": 2,
					"troopSoldier8": 41,
					"troopMedic8": 4,
					"troopHeroLeia8": 1,
					"troopMercenaryRebelTwilekIncinerator1": 2
				},
				"attackerGuildTroopsExpended": {
					"troopHeavyRebel8": 4,
					"troopMedic8": 2,
					"troopSoldier8": 1
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth6",
					"eqpRebelHQHealth5",
					"eqpRebelCreditGeneratorHealth5",
					"eqpRebelSandSoldier4",
					"eqpRebelHeavySandSoldier2"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "c659c98d-0ade-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "bd8644bf-9f19-11e5-b1d5-06dc8c004fbd",
					"name": "That Guy",
					"faction": "rebel",
					"guildId": "f55622f5-96c3-11e5-b05b-06c66a004f76",
					"guildName": "obw.elite",
					"attackRating": 84910,
					"attackRatingDelta": 13,
					"defenseRating": -157,
					"defenseRatingDelta": 0,
					"tournamentRating": 15460,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -82,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489733833,
				"looted": {
					"contraband": 636,
					"materials": 50159,
					"credits": 70487
				},
				"earned": {
					"contraband": 636,
					"materials": 51159,
					"credits": 71487
				},
				"maxLootable": {
					"contraband": 636,
					"credits": 71487,
					"materials": 51159
				},
				"troopsExpended": {
					"troopVanguard4": 1,
					"troopBantha8": 2,
					"troopHeavyRebel10": 12,
					"troopMedic10": 4,
					"troopHeroLukeSkywalker10": 1,
					"troopSoldier10": 11,
					"troopChampionRebelHeavyDroideka15": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 24,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth10",
					"eqpRebelCreditGeneratorHealth10",
					"eqpRebelHeavySandSoldier6",
					"eqpRebelSandSoldier8",
					"eqpRebelMaterialsGeneratorHealth10",
					"eqpRebelRapidFireTurretHealth10"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "e1a43650-0b64-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "fab8f1a9-8ba4-11e5-9152-06e6ee004fbc",
					"name": "patrik-s",
					"faction": "rebel",
					"guildId": "3d2ed0ce-b05e-11e4-a3ca-06e6ee004fbc",
					"guildName": "Russian_League",
					"attackRating": 66487,
					"attackRatingDelta": 13,
					"defenseRating": 48250,
					"defenseRatingDelta": 0,
					"tournamentRating": 26862,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -95,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489791447,
				"looted": {
					"contraband": 532,
					"materials": 11462,
					"credits": 15545
				},
				"earned": {
					"contraband": 532,
					"materials": 12462,
					"credits": 16545
				},
				"maxLootable": {
					"contraband": 532,
					"credits": 16545,
					"materials": 12462
				},
				"troopsExpended": {
					"troopSoldier10": 23,
					"troopVanguard10": 1,
					"troopHeavyRebel10": 8,
					"troopMedic10": 3,
					"troopHeroLukeSkywalker10": 1,
					"troopChampionRebelHeavyDroideka13": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopDark6": 4,
					"troopDewback6": 4
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 24,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth8",
					"eqpRebelWallHealth10",
					"eqpRebelHeavySandSoldier9",
					"eqpRebelMortarTurretHealth8",
					"eqpRebelMortarTurretDamage8",
					"eqpRebelRapidFireTurretDamage8",
					"eqpRebelSandSoldier10"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "fe4b9b8f-0bea-11e7-b7db-06a77e004fbb",
				"attacker": {
					"playerId": "63d69914-be2e-11e6-b16d-06c66a004f76",
					"name": "Империи пиздец",
					"faction": "rebel",
					"guildId": "c9e057f7-a3e1-11e5-9c9b-06dc8c004fbd",
					"guildName": "RUSSIANBEAR",
					"attackRating": 5884,
					"attackRatingDelta": 13,
					"defenseRating": -159,
					"defenseRatingDelta": 0,
					"tournamentRating": 115,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -108,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489849207,
				"looted": {
					"contraband": 635,
					"credits": 80864,
					"materials": 53876
				},
				"earned": {
					"contraband": 635,
					"credits": 81864,
					"materials": 54876
				},
				"maxLootable": {
					"contraband": 635,
					"credits": 81864,
					"materials": 54876
				},
				"troopsExpended": {
					"troopVanguard1": 1,
					"troopHeavyRebel8": 5,
					"troopMedic7": 3,
					"troopSoldier7": 38,
					"troopATAP6": 1,
					"troopHeroLeia6": 1,
					"troopHailfire7": 1,
					"specialAttackXWing6": 6,
					"troopChampionRebelDroideka4": 1
				},
				"attackerGuildTroopsExpended": {
					"troopHeavyRebel8": 2,
					"troopHailfire7": 2,
					"troopSoldier7": 4
				},
				"defenderGuildTroopsExpended": {
					"troopScout6": 1,
					"troopDark6": 3,
					"troopStorm7": 1,
					"troopStorm6": 4,
					"troopATST7": 1
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 16,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth6",
					"eqpRebelHQHealth6",
					"eqpRebelSandSoldier2",
					"eqpRebelBurstTurretHealth3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "19a4ade7-0c71-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "0bf3dd5d-40ce-11e5-b2bd-06a77e004fbb",
					"name": "aoshima",
					"faction": "rebel",
					"guildId": "4b52143f-5bb0-11e5-a0cc-063864004f75",
					"guildName": "WPS(%e6%b9%be%e5%b2%b8%e8%ad%a6%e5%af%9f%e7%bd%b2)",
					"attackRating": 72070,
					"attackRatingDelta": 13,
					"defenseRating": -1978,
					"defenseRatingDelta": 0,
					"tournamentRating": 10905,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -121,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489906683,
				"looted": {
					"contraband": 598,
					"materials": 25070,
					"credits": 69491
				},
				"earned": {
					"contraband": 598,
					"materials": 26070,
					"credits": 70491
				},
				"maxLootable": {
					"contraband": 598,
					"credits": 70491,
					"materials": 26070
				},
				"troopsExpended": {
					"troopMercenaryRebelGamorreanWarrior2": 1,
					"troopRebelJetpackTrooper10": 12,
					"troopHailfire9": 1,
					"troopSoldier9": 3,
					"troopJuggernaut10": 1,
					"troopHeroChewbacca10": 1,
					"specialAttackXWing10": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4,
					"troopHeavyStorm7": 1
				},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 22,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth8",
					"eqpRebelHQHealth8",
					"eqpRebelMortarTurretHealth6",
					"eqpRebelBurstTurretDamage3",
					"eqpRebelRapidFireTurretHealth6",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretDamage5"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "35ce2fed-0cf7-11e7-b7db-06a77e004fbb",
				"attacker": {
					"playerId": "f8870a2c-6850-11e5-9097-06cb44004f79",
					"name": "min",
					"faction": "rebel",
					"guildId": "614154f8-9f5b-11e5-bb9f-06e6ee004fbc",
					"guildName": "German.Fun.Hope",
					"attackRating": 35791,
					"attackRatingDelta": 8,
					"defenseRating": -2062,
					"defenseRatingDelta": 0,
					"tournamentRating": 2067,
					"tournamentRatingDelta": 240
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -129,
					"defenseRatingDelta": -8,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489964303,
				"looted": {
					"contraband": 567,
					"materials": 8964,
					"credits": 10983
				},
				"earned": {
					"contraband": 567,
					"materials": 9964,
					"credits": 11983
				},
				"maxLootable": {
					"contraband": 591,
					"credits": 16037,
					"materials": 13849
				},
				"troopsExpended": {
					"troopBantha8": 3,
					"troopSoldier9": 41,
					"troopVanguard7": 2,
					"troopJuggernaut9": 1,
					"troopMedic9": 4,
					"troopHeroLukeSkywalker9": 1,
					"troopMercenaryRebelRider5": 1,
					"troopVanguard8": 1,
					"troopIthorianInfiltrator8": 1,
					"troopPathfinder8": 1,
					"troopChampionRebelHeavyDroideka7": 1,
					"specialAttackBWing9": 4,
					"troopChampionRebelDroideka12": 1
				},
				"attackerGuildTroopsExpended": {
					"troopRebelJetpackTrooper10": 4,
					"troopSoldier10": 1
				},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 2,
					"troopTechnician7": 1,
					"troopMercenaryEmpireGamorreanWarrior2": 1,
					"troopDark6": 1,
					"troopStorm7": 2
				},
				"baseDamagePercent": 84,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 40,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth8",
					"eqpRebelBurstTurretDamage3",
					"eqpRebelWallHealth8",
					"eqpRebelMortarTurretDamage4",
					"eqpRebelCreditGeneratorHealth6",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "4b09b91a-0d5c-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "9fe349df-8f70-11e5-8743-063864004f75",
					"name": "Eaeldred",
					"faction": "rebel",
					"guildId": "0a94b8e3-f63f-11e6-89b5-06cb44004f79",
					"guildName": "RedShirtRebels",
					"attackRating": 6015,
					"attackRatingDelta": 6,
					"defenseRating": -1340,
					"defenseRatingDelta": 0,
					"tournamentRating": 315,
					"tournamentRatingDelta": 52
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -135,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490007744,
				"looted": {
					"contraband": 64,
					"materials": 42291,
					"credits": 51128
				},
				"earned": {
					"contraband": 64,
					"materials": 42291,
					"credits": 51128
				},
				"maxLootable": {
					"contraband": 643,
					"credits": 52773,
					"materials": 43359
				},
				"troopsExpended": {
					"troopSoldier8": 32,
					"troopMedic8": 8,
					"troopHeavyRebel8": 2,
					"specialAttackBWing8": 7,
					"troopHeroChewbacca8": 1,
					"troopRebelSpeeder8": 4
				},
				"attackerGuildTroopsExpended": {
					"troopHeavyRebel8": 2,
					"troopT2BTank7": 1,
					"troopSoldier8": 3,
					"troopMarksman9": 1
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 76,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 20,
				"defenderPotentialMedalGain": 16,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelWallHealth7",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelSandSoldier2",
					"eqpRebelMortarTurretHealth5",
					"eqpRebelHQHealth7"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "8d91473d-0d5c-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "ceb70c44-e311-11e5-9b2c-061c98004f78",
					"name": "pelusio",
					"faction": "rebel",
					"guildId": "53e0e6bf-b5a4-11e5-961b-06c66a004f76",
					"guildName": "BRASIL-DOS-JEDIS",
					"attackRating": 56277,
					"attackRatingDelta": 13,
					"defenseRating": -1417,
					"defenseRatingDelta": 0,
					"tournamentRating": 5600,
					"tournamentRatingDelta": 400
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -148,
					"defenseRatingDelta": -13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490007789,
				"looted": {
					"contraband": 636,
					"materials": 21601,
					"credits": 26908
				},
				"earned": {
					"contraband": 636,
					"materials": 22601,
					"credits": 27908
				},
				"maxLootable": {
					"contraband": 636,
					"credits": 27908,
					"materials": 22601
				},
				"troopsExpended": {
					"troopVanguard8": 3,
					"troopHeavyRebel10": 2,
					"troopMedic9": 6,
					"troopSoldier9": 15,
					"troopHeroHanSolo10": 1,
					"troopRebelJetpackTrooper8": 4,
					"troopHailfire10": 4
				},
				"attackerGuildTroopsExpended": {
					"troopRebelJetpackTrooper10": 4,
					"troopHailfire10": 1,
					"troopHeavyRebel10": 1
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 43,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelBurstTurretHealth3",
					"eqpRebelMortarTurretDamage4",
					"eqpRebelRapidFireTurretDamage3",
					"eqpRebelRapidFireTurretHealth3",
					"eqpRebelBurstTurretDamage3",
					"eqpRebelContrabandGeneratorHealth3",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "f5170ede-0e24-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "18237300-cd21-11e6-8cd4-06dc8c004fbd",
					"name": "Diyark",
					"faction": "rebel",
					"guildId": "388c67bd-b16f-11e5-beef-06033c004f77",
					"guildName": "Espa%c3%b1oles-3",
					"attackRating": 12117,
					"attackRatingDelta": -26,
					"defenseRating": -3265,
					"defenseRatingDelta": 0,
					"tournamentRating": 1088,
					"tournamentRatingDelta": -200
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -117,
					"defenseRatingDelta": 31,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490093846,
				"looted": {
					"materials": 45834,
					"credits": 44615
				},
				"earned": {
					"materials": 45834,
					"credits": 44615
				},
				"maxLootable": {
					"contraband": 711,
					"credits": 57185,
					"materials": 47201
				},
				"troopsExpended": {
					"troopAAT16": 4,
					"troopHeavyRebel7": 5,
					"troopMedic7": 4,
					"troopSoldier7": 17
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 42,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage2",
					"eqpRebelWallHealth5",
					"eqpRebelSandSoldier3",
					"eqpRebelMortarTurretDamage2"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "2ec153ba-0e25-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "bbd362ad-a854-11e5-8530-060350004f90",
					"name": "badgirl",
					"faction": "rebel",
					"guildId": "7e03346a-752f-11e5-9097-06cb44004f79",
					"guildName": "hurtinem",
					"attackRating": 15133,
					"attackRatingDelta": 4,
					"defenseRating": -1354,
					"defenseRatingDelta": 0,
					"tournamentRating": 678,
					"tournamentRatingDelta": 40
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -121,
					"defenseRatingDelta": -4,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490093991,
				"looted": {
					"contraband": 140,
					"credits": 27528,
					"materials": 19191
				},
				"earned": {
					"contraband": 140,
					"credits": 27528,
					"materials": 19191
				},
				"maxLootable": {
					"contraband": 588,
					"credits": 29754,
					"materials": 20191
				},
				"troopsExpended": {
					"troopSoldier7": 1,
					"troopRebelJetpackTrooper8": 2,
					"troopHailfire9": 3,
					"troopJuggernaut9": 1,
					"troopHeroLukeSkywalker7": 1,
					"troopMedic8": 3,
					"troopMarksman8": 3,
					"troopHeavyRebel8": 1,
					"specialAttackXWing8": 7,
					"troopChampionRebelHeavyDroideka3": 1,
					"troopChampionRebelDroideka9": 1
				},
				"attackerGuildTroopsExpended": {
					"troopJuggernaut10": 1,
					"troopMarksman10": 2
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 53,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth9",
					"eqpRebelHQHealth9",
					"eqpRebelSandSoldier2",
					"eqpRebelMortarTurretDamage6",
					"eqpRebelRapidFireTurretDamage6"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "04f608e3-0e68-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "9f768b54-f0f4-11e4-9fd2-06e6ee004fbc",
					"name": "rebel 10",
					"faction": "rebel",
					"guildId": "ae09b8d3-0348-11e6-9b28-06dc8c004fbd",
					"guildName": "Delta7",
					"attackRating": 41292,
					"attackRatingDelta": 4,
					"defenseRating": -1711,
					"defenseRatingDelta": 0,
					"tournamentRating": 6210,
					"tournamentRatingDelta": 40
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -125,
					"defenseRatingDelta": -4,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490122692,
				"looted": {
					"contraband": 481,
					"credits": 2104,
					"materials": 7471
				},
				"earned": {
					"contraband": 481,
					"credits": 2474,
					"materials": 7841
				},
				"maxLootable": {
					"contraband": 489,
					"credits": 5564,
					"materials": 10546
				},
				"troopsExpended": {
					"troopVanguard9": 1,
					"troopMedic9": 5,
					"troopSoldier9": 6,
					"troopHeavyRebel9": 5,
					"troopATAP9": 3,
					"specialAttackZ959": 1,
					"troopMercenaryRebelGamorreanWarrior5": 1,
					"troopWookie9": 1,
					"troopHeroLukeSkywalker8": 1,
					"troopMercenaryRebelTwilekIncinerator5": 2,
					"troopChampionRebelDroideka12": 1,
					"troopChampionRebelHeavyDroideka6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4,
					"troopTechnician7": 1
				},
				"baseDamagePercent": 56,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 40,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth8",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelWallHealth9",
					"eqpRebelHeavySandSoldier1",
					"eqpRebelSandSoldier3",
					"eqpRebelRapidFireTurretHealth6"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "14a36b36-0eab-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "db2fee30-64f7-11e6-a77a-06c66a004f76",
					"name": "Mack",
					"faction": "rebel",
					"guildId": "fa698ae7-533d-11e6-89ec-069da4004f8b",
					"guildName": "brasil-br-wars",
					"attackRating": 4611,
					"attackRatingDelta": 14,
					"defenseRating": -581,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5866,
					"attackRatingDelta": 0,
					"defenseRating": -139,
					"defenseRatingDelta": -14,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490151538,
				"looted": {
					"contraband": 22,
					"materials": 9040,
					"credits": 5987
				},
				"earned": {
					"contraband": 22,
					"materials": 10040,
					"credits": 6987
				},
				"maxLootable": {
					"contraband": 484,
					"credits": 10303,
					"materials": 23117
				},
				"troopsExpended": {
					"troopDesertSkiff7": 1,
					"troopVanguard1": 4,
					"specialAttackYWing6": 1,
					"troopSoldier7": 77,
					"troopHeroChewbacca7": 1
				},
				"attackerGuildTroopsExpended": {
					"troopJuggernaut8": 1,
					"troopHeavyRebel9": 2,
					"troopSoldier9": 1,
					"troopSoldier7": 1
				},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 2,
					"troopDewback6": 5,
					"troopStorm7": 1
				},
				"baseDamagePercent": 68,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 23,
				"defenderPotentialMedalGain": 16,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelRapidFireTurretDamage4",
					"eqpRebelSandSoldier2",
					"eqpRebelBurstTurretDamage3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "0200fbfd-0ece-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5853,
					"attackRatingDelta": -13,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "057817ce-8d08-11e6-8102-061c98004f78",
					"name": "Shady",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 12109,
					"attackRatingDelta": 0,
					"defenseRating": -2325,
					"defenseRatingDelta": 16,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490166433,
				"looted": {},
				"earned": {},
				"maxLootable": {
					"contraband": 2960,
					"credits": 438788,
					"materials": 205883
				},
				"troopsExpended": {
					"troopHeroATMP7": 1,
					"troopEmpireHeavyStormDeath7": 3,
					"troopHeavyStorm7": 2,
					"troopSniper7": 2
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 6,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 30,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [
					"eqpRebelWallHealth8",
					"eqpRebelHQHealth7",
					"eqpRebelMortarTurretHealth5",
					"eqpRebelMaterialsGeneratorHealth5",
					"eqpRebelSandSoldier2",
					"eqpRebelCreditGeneratorHealth5",
					"eqpRebelContrabandGeneratorHealth5"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "5d66164c-0ecf-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5840,
					"attackRatingDelta": -13,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "041ed939-8e6c-11e4-8f1f-06dc8c004fbd",
					"name": "frankyklf",
					"faction": "rebel",
					"guildId": "eb561122-3111-11e6-8121-069da4004f8b",
					"guildName": "Peterpro",
					"attackRating": 7114,
					"attackRatingDelta": 0,
					"defenseRating": 636,
					"defenseRatingDelta": 16,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490167045,
				"looted": {
					"materials": 41482,
					"credits": 5783
				},
				"earned": {
					"contraband": 0,
					"materials": 41582,
					"credits": 5883
				},
				"maxLootable": {
					"contraband": 4793,
					"credits": 204533,
					"materials": 204475
				},
				"troopsExpended": {
					"troopATAT7": 1,
					"troopHeroATAT7": 1,
					"troopTechnician7": 4,
					"troopMHC7": 2,
					"troopMercenaryEmpireGamorreanWarrior2": 4
				},
				"attackerGuildTroopsExpended": {
					"troopStorm7": 4,
					"troopDewback6": 4,
					"troopDark6": 3
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 25,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 27,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [
					"eqpRebelRapidFireTurretDamage3",
					"eqpRebelMortarTurretDamage3",
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelBurstTurretDamage2",
					"eqpRebelSandSoldier1"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "e5627cbb-0ed1-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5852,
					"attackRatingDelta": 12,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "4c248d43-3f8d-11e4-93a1-06a77e004fbb",
					"name": "Zacaaron",
					"faction": "rebel",
					"guildId": "010d24b8-57f5-11e4-b32e-06dc8c004fbd",
					"guildName": "Malaysia.Rebels",
					"attackRating": 383,
					"attackRatingDelta": 0,
					"defenseRating": -382,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490168155,
				"looted": {
					"contraband": 0,
					"credits": 87072,
					"materials": 82458
				},
				"earned": {
					"contraband": 0,
					"credits": 88072,
					"materials": 83458
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 88072,
					"materials": 83458
				},
				"troopsExpended": {
					"specialAttackTieBomber6": 2,
					"troopShock3": 1,
					"troopStorm7": 1,
					"troopMercenaryEmpireGamorreanWarrior2": 2,
					"troopHeroATAT7": 1,
					"troopTechnician7": 4,
					"troopMHC7": 4,
					"troopHeavyStorm7": 4,
					"specialAttackTieDefender7": 5,
					"troopChampionEmpireDroideka5": 1
				},
				"attackerGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 12,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [],
				"planetId": "planet6"
			},
			{
				"battleId": "8e47750d-0ed5-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5863,
					"attackRatingDelta": 11,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "e82e8c62-be29-11e6-8d5b-069da4004f8b",
					"name": "General Fastio",
					"faction": "rebel",
					"guildId": "4b52143f-5bb0-11e5-a0cc-063864004f75",
					"guildName": "WPS(%e6%b9%be%e5%b2%b8%e8%ad%a6%e5%af%9f%e7%bd%b2)",
					"attackRating": 694,
					"attackRatingDelta": 0,
					"defenseRating": -657,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490169716,
				"looted": {
					"credits": 21342,
					"materials": 21218
				},
				"earned": {
					"contraband": 0,
					"credits": 22342,
					"materials": 22218
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 22342,
					"materials": 22218
				},
				"troopsExpended": {
					"troopHeavyStorm7": 4,
					"troopHeroCrimsonGuard6": 1,
					"troopTechnician7": 5,
					"troopEmpireSpeeder7": 2,
					"troopMHC7": 4
				},
				"attackerGuildTroopsExpended": {
					"troopHeavyStorm7": 1,
					"troopEmpireSpeeder7": 4
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [],
				"planetId": "planet6"
			},
			{
				"battleId": "98a340c9-0ed8-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5869,
					"attackRatingDelta": 6,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "c63c0e9a-92b1-11e6-be50-060a32004f8c",
					"name": "Mars 5",
					"faction": "rebel",
					"guildId": "519ed4f6-a98b-11e5-9ddb-060a32004f8c",
					"guildName": "DerAufstand",
					"attackRating": 11007,
					"attackRatingDelta": 0,
					"defenseRating": -4731,
					"defenseRatingDelta": -6,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490171064,
				"looted": {
					"contraband": 52,
					"materials": 88339,
					"credits": 35919
				},
				"earned": {
					"contraband": 52,
					"materials": 88589,
					"credits": 36169
				},
				"maxLootable": {
					"contraband": 1189,
					"credits": 141326,
					"materials": 253950
				},
				"troopsExpended": {
					"troopTechnician7": 8,
					"troopHeroATAT7": 1,
					"troopMHC7": 4,
					"troopStorm7": 4,
					"troopEmpireSpeeder7": 2,
					"troopChampionEmpireDroideka5": 1,
					"specialAttackTieDefender7": 2,
					"specialAttackTieBomber6": 1
				},
				"attackerGuildTroopsExpended": {
					"troopDewback6": 1,
					"troopDark6": 2,
					"troopStorm7": 1,
					"troopEmpireSpeeder7": 2,
					"troopTechnician7": 1
				},
				"defenderGuildTroopsExpended": {
					"troopSoldier9": 4,
					"troopWookie6": 4,
					"troopSoldier8": 4
				},
				"baseDamagePercent": 57,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 19,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelWallHealth8",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelBurstTurretHealth5",
					"eqpRebelMortarTurretHealth6"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "b487453d-0edb-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5876,
					"attackRatingDelta": 7,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "7111f662-087f-11e6-9814-061c98004f78",
					"name": "tank",
					"faction": "rebel",
					"guildId": "b72747c6-f868-11e5-a115-061c98004f78",
					"guildName": "HELIX1.0",
					"attackRating": 433,
					"attackRatingDelta": 0,
					"defenseRating": -432,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490172405,
				"looted": {
					"contraband": 0,
					"materials": 53120,
					"credits": 41070
				},
				"earned": {
					"contraband": 0,
					"materials": 54120,
					"credits": 42070
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 57540,
					"materials": 54120
				},
				"troopsExpended": {
					"troopHeroATAT7": 1,
					"troopTechnician7": 4,
					"troopATAT7": 2,
					"troopHeavyStorm7": 5
				},
				"attackerGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 92,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 12,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelRapidFireTurretDamage1",
					"eqpRebelWallHealth3",
					"eqpRebelHQHealth4"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "84700878-0edf-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 7,
					"defenseRating": -139,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "85d0c4d1-2f8b-11e6-8acf-06a77e004fbb",
					"name": "leo",
					"faction": "rebel",
					"guildId": "2f55f7f7-5164-11e4-93fb-06e6ee004fbc",
					"guildName": "rebellsupersqaud",
					"attackRating": 552,
					"attackRatingDelta": 0,
					"defenseRating": -551,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490174024,
				"looted": {
					"contraband": 285,
					"credits": 16058,
					"materials": 29213
				},
				"earned": {
					"contraband": 285,
					"credits": 17058,
					"materials": 30213
				},
				"maxLootable": {
					"contraband": 285,
					"credits": 17058,
					"materials": 30213
				},
				"troopsExpended": {
					"troopATAT7": 2,
					"troopTechnician7": 4,
					"troopHeroATAT7": 1,
					"troopMercenaryEmpireGamorreanWarrior2": 3,
					"troopStorm7": 2
				},
				"attackerGuildTroopsExpended": {
					"troopEmpireSpeeder7": 4
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 98,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 12,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"defenderEquipment": [
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelContrabandGeneratorHealth2",
					"eqpRebelHQHealth4",
					"eqpRebelWallHealth4"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "1f8c126b-0ef1-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "1ec44237-75ce-11e6-9f0c-06a77e004fbb",
					"name": "tmys",
					"faction": "rebel",
					"guildId": "b8043491-8b17-11e5-8743-063864004f75",
					"guildName": "TEMPLAR-JEDIs",
					"attackRating": 19170,
					"attackRatingDelta": 8,
					"defenseRating": -1077,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -147,
					"defenseRatingDelta": -8,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490181578,
				"looted": {
					"contraband": 547,
					"materials": 11562,
					"credits": 6618
				},
				"earned": {
					"contraband": 547,
					"materials": 12562,
					"credits": 7618
				},
				"maxLootable": {
					"contraband": 547,
					"credits": 7952,
					"materials": 18698
				},
				"troopsExpended": {
					"troopSoldier7": 12,
					"troopMedic7": 4,
					"specialAttackFangFighter5": 1,
					"troopHeavyRebel7": 6,
					"troopBigMouthAlien1": 1,
					"troopVanguard6": 2,
					"troopAAT17": 1,
					"troopMercenaryRebelGamorreanWarrior1": 1,
					"troopATAP7": 1,
					"specialAttackBWing7": 4,
					"troopATRT3": 1
				},
				"attackerGuildTroopsExpended": {
					"troopHailfire7": 1
				},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 3,
					"troopScout6": 4,
					"troopTechnician7": 1
				},
				"baseDamagePercent": 87,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHeavySandSoldier2",
					"eqpRebelHovertank1",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "0951f753-0f56-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "bdf22bf9-bf58-11e5-950e-06a77e004fbb",
					"name": "Giuke Skyrunner",
					"faction": "rebel",
					"guildId": "441e7d38-9291-11e5-999b-06cb44004f79",
					"guildName": "%5b0000FF%5dITALIANI",
					"attackRating": 37043,
					"attackRatingDelta": 4,
					"defenseRating": -2452,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -151,
					"defenseRatingDelta": -4,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490224917,
				"looted": {
					"contraband": 628,
					"credits": 46035,
					"materials": 48229
				},
				"earned": {
					"contraband": 628,
					"credits": 46035,
					"materials": 48229
				},
				"maxLootable": {
					"contraband": 628,
					"credits": 53466,
					"materials": 49229
				},
				"troopsExpended": {
					"troopRebelSpeeder8": 19,
					"troopHeroLukeSkywalker8": 1,
					"troopMedic9": 2,
					"specialAttackZ9510": 3,
					"troopSoldier9": 15,
					"specialAttackBWing7": 2
				},
				"attackerGuildTroopsExpended": {
					"troopJuggernaut10": 1,
					"troopHailfire10": 2,
					"troopVanguard10": 1,
					"troopSoldier9": 3
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 72,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 40,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMortarTurretDamage7",
					"eqpRebelMortarTurretHealth7",
					"eqpRebelRapidFireTurretDamage6",
					"eqpRebelRapidFireTurretHealth6",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "9ec6058c-0f99-11e7-a8ec-069da4004f8b",
				"attacker": {
					"playerId": "3fc94f01-5fa8-11e5-b7e2-06c66a004f76",
					"name": "totocaca",
					"faction": "rebel",
					"guildId": "1c17475d-f5ed-11e5-a546-06c66a004f76",
					"guildName": "FRance",
					"attackRating": 34228,
					"attackRatingDelta": 8,
					"defenseRating": -3187,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -159,
					"defenseRatingDelta": -8,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490253955,
				"looted": {
					"contraband": 533,
					"materials": 39886,
					"credits": 36503
				},
				"earned": {
					"contraband": 533,
					"materials": 40886,
					"credits": 37503
				},
				"maxLootable": {
					"contraband": 533,
					"credits": 37503,
					"materials": 40886
				},
				"troopsExpended": {
					"troopVanguard6": 1,
					"troopSoldier9": 11,
					"troopMedic9": 5,
					"troopHeavyRebel9": 3,
					"troopJuggernaut9": 1,
					"troopHeroHanSolo8": 1,
					"troopHailfire9": 3,
					"troopDesertSkiff9": 1,
					"specialAttackFangFighter1": 1,
					"troopChampionRebelHeavyDroideka5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 3,
					"troopScout6": 2,
					"troopTechnician7": 1,
					"troopDark6": 1
				},
				"baseDamagePercent": 86,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 40,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth8",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelHQHealth7",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelMortarTurretDamage5"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "0fbf1469-0ffe-11e7-84ee-06a77e004fbb",
				"attacker": {
					"playerId": "43233014-f117-11e6-a844-06dc8c004fbd",
					"name": "Paladin",
					"faction": "rebel",
					"guildId": "ea37ef0c-6326-11e6-81b6-063864004f75",
					"guildName": "ROGUE1",
					"attackRating": 1105,
					"attackRatingDelta": -12,
					"defenseRating": -24,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -145,
					"defenseRatingDelta": 14,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490297108,
				"looted": {
					"contraband": 17,
					"materials": 22412,
					"credits": 29308
				},
				"earned": {
					"contraband": 17,
					"materials": 22412,
					"credits": 29308
				},
				"maxLootable": {
					"contraband": 817,
					"credits": 61356,
					"materials": 61338
				},
				"troopsExpended": {
					"troopJuggernaut5": 1,
					"troopSoldier6": 47,
					"troopHeroChewbacca5": 1,
					"troopMedic5": 3
				},
				"attackerGuildTroopsExpended": {
					"troopHeavyRebel6": 2,
					"troopSoldier6": 10
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 40,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 26,
				"defenderPotentialMedalGain": 14,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelCreditGeneratorHealth1",
					"eqpRebelContrabandGeneratorHealth1",
					"eqpRebelHQHealth2"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "81c3773d-0ffe-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "09d86f9f-bacd-11e6-8cf8-06a77e004fbb",
					"name": "kda",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 3804,
					"attackRatingDelta": 14,
					"defenseRating": -525,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -159,
					"defenseRatingDelta": -14,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490297269,
				"looted": {
					"contraband": 159,
					"materials": 631,
					"credits": 13828
				},
				"earned": {
					"contraband": 159,
					"materials": 1631,
					"credits": 14828
				},
				"maxLootable": {
					"contraband": 651,
					"credits": 43532,
					"materials": 45168
				},
				"troopsExpended": {
					"troopSoldier6": 44,
					"troopMedic6": 6,
					"troopMercenaryRebelGamorreanWarrior1": 3,
					"specialAttackZ955": 1,
					"troopHeroLeia6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopDark6": 4,
					"troopStorm7": 6,
					"troopEmpireSpeeder7": 1
				},
				"baseDamagePercent": 52,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 23,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth5",
					"eqpRebelBurstTurretHealth2",
					"eqpRebelHQHealth5",
					"eqpRebelMaterialsGeneratorHealth5",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "dbed286e-1075-11e7-a8ec-069da4004f8b",
				"attacker": {
					"playerId": "c63c0e9a-92b1-11e6-be50-060a32004f8c",
					"name": "Mars 5",
					"faction": "rebel",
					"guildId": "519ed4f6-a98b-11e5-9ddb-060a32004f8c",
					"guildName": "DerAufstand",
					"attackRating": 11300,
					"attackRatingDelta": 8,
					"defenseRating": -4787,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -167,
					"defenseRatingDelta": -8,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490348539,
				"looted": {
					"credits": 1177,
					"materials": 21568
				},
				"earned": {
					"contraband": 0,
					"credits": 2177,
					"materials": 22568
				},
				"maxLootable": {
					"contraband": 717,
					"credits": 53331,
					"materials": 73304
				},
				"troopsExpended": {
					"troopT2BTank8": 1,
					"troopATTE7": 1,
					"troopRebelJetpackTrooper7": 5,
					"troopMedic7": 3,
					"troopHeavyRebel8": 3,
					"specialAttackXWing5": 5,
					"troopHeroLeia8": 1,
					"troopSoldier8": 4
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopStorm7": 3,
					"troopEmpireSpeeder7": 1,
					"troopDewback6": 3,
					"troopATST7": 1
				},
				"baseDamagePercent": 51,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 22,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelHeavySandSoldier1",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "f309954d-10c6-11e7-ba69-06c66a004f76",
				"attacker": {
					"playerId": "6925ee7f-e4ac-11e6-96c8-069da4004f8b",
					"name": "Eyetguy",
					"faction": "rebel",
					"guildId": "a357a078-79d2-11e5-8846-06e6ee004fbc",
					"guildName": "obwbootcamp",
					"attackRating": 13516,
					"attackRatingDelta": -28,
					"defenseRating": -249,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -133,
					"defenseRatingDelta": 34,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490383381,
				"looted": {
					"contraband": 11,
					"materials": 9925,
					"credits": 18073
				},
				"earned": {
					"contraband": 11,
					"materials": 9925,
					"credits": 18073
				},
				"maxLootable": {
					"contraband": 634,
					"credits": 27080,
					"materials": 14635
				},
				"troopsExpended": {
					"troopSoldier7": 56,
					"troopMedic7": 8,
					"troopHeroLeia7": 1,
					"troopChampionRebelDroideka4": 1,
					"specialAttackBWing7": 1,
					"specialAttackBWing6": 1,
					"specialAttackYWing7": 2,
					"specialAttackXWing5": 1
				},
				"attackerGuildTroopsExpended": {
					"troopATAP6": 1,
					"troopHeavyRebel8": 2,
					"troopMedic8": 1,
					"troopSoldier7": 3
				},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 3
				},
				"baseDamagePercent": 48,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth6",
					"eqpRebelHQHealth6",
					"eqpRebelSandSoldier3"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			},
			{
				"battleId": "db73b919-10c7-11e7-ba69-06c66a004f76",
				"attacker": {
					"playerId": "4796e497-517a-11e6-8e4c-06cb44004f79",
					"name": "brunhilde",
					"faction": "rebel",
					"guildId": "858b8241-b1a9-11e5-beef-06033c004f77",
					"guildName": "German-Rebells-E",
					"attackRating": 38507,
					"attackRatingDelta": 8,
					"defenseRating": -2064,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "779a335e-7216-11e6-8b58-06033c004f77",
					"name": "2tee2",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 5883,
					"attackRatingDelta": 0,
					"defenseRating": -141,
					"defenseRatingDelta": -8,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490383764,
				"looted": {
					"contraband": 635,
					"materials": 11207,
					"credits": 22102
				},
				"earned": {
					"contraband": 635,
					"materials": 12207,
					"credits": 23102
				},
				"maxLootable": {
					"contraband": 635,
					"credits": 23102,
					"materials": 12207
				},
				"troopsExpended": {
					"troopSoldier8": 8,
					"troopHeavyRebel8": 4,
					"troopMedic8": 2,
					"troopVanguard4": 1,
					"troopMercenaryRebelGamorreanWarrior4": 1,
					"troopHeroChewbacca8": 1,
					"troopJuggernaut8": 2,
					"troopHailfire8": 2
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopATST7": 1
				},
				"baseDamagePercent": 99,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 13,
				"defenderPotentialMedalGain": 40,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelWallHealth7",
					"eqpRebelHeavySandSoldier2",
					"eqpRebelSandSoldier4",
					"eqpRebelMortarTurretDamage7"
				],
				"defenderEquipment": [
					"eqpEmpireRapidFireTurretDamage6",
					"eqpEmpireRapidFireTurretHealth6",
					"eqpEmpireMortarTurretDamage6",
					"eqpEmpireWallHealth7",
					"eqpEmpireHQHealth7",
					"eqpEmpireCreditGeneratorHealth7"
				],
				"planetId": "planet6"
			}
		],
		"campaigns": {
			"cmp_fue": {
				"uid": "cmp_fue",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"sw_hth_outposts": {
				"uid": "sw_hth_outposts",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_0_hb_e": {
				"uid": "cmp_0_hb_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_1_utts_e": {
				"uid": "cmp_1_utts_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_2_tsw_e": {
				"uid": "cmp_2_tsw_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_3_tjg_e": {
				"uid": "cmp_3_tjg_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_4_sotm_e": {
				"uid": "cmp_4_sotm_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_5_tih_e": {
				"uid": "cmp_5_tih_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_7_bs_e": {
				"uid": "cmp_7_bs_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_8_tat_e": {
				"uid": "cmp_8_tat_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_9_sas_e": {
				"uid": "cmp_9_sas_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_10_bgh_e": {
				"uid": "cmp_10_bgh_e",
				"timeZone": 0,
				"completed": true,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_11_tbft_e": {
				"uid": "cmp_11_tbft_e",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			}
		},
		"missions": {
			"fue_defendBaseMission_00": {
				"uid": "fue_defendBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9f71c8a5-7216-11e6-8b58-06033c004f77",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHalfBuildings",
					"RetainHQ",
					"AvoidCompleteLoss"
				],
				"grindMissionRetries": 0
			},
			"fue_impIntroBaseMission_00": {
				"uid": "fue_impIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "ee6285f1-7216-11e6-8b58-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"fue_rebIntroBaseMission_00": {
				"uid": "fue_rebIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "17d1d35d-7217-11e6-8b58-06033c004f77",
				"lootRemaining": {
					"credits": 1058,
					"materials": 1000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"sw_hth_outpost_s_1": {
				"uid": "sw_hth_outpost_s_1",
				"campaignUid": "sw_hth_outposts",
				"status": "Default",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_1": {
				"uid": "camp_1_utts_e_1",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "25638767-7218-11e6-b931-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2": {
				"uid": "camp_1_utts_e_2",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "717a060b-7219-11e6-b931-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2a": {
				"uid": "camp_1_utts_e_2a",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c196a477-721a-11e6-8919-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_3": {
				"uid": "camp_1_utts_e_3",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_Wall_T1_25"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_4": {
				"uid": "camp_1_utts_e_4",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "84ee5059-721c-11e6-8919-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_5": {
				"uid": "camp_1_utts_e_5",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT2EmpStarport"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_6": {
				"uid": "camp_1_utts_e_6",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "3b78217a-721f-11e6-9673-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_7": {
				"uid": "camp_1_utts_e_7",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2EmpCreGen"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_9": {
				"uid": "camp_1_utts_e_9",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "819b41bc-7229-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_10": {
				"uid": "camp_1_utts_e_10",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own4Turrets"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_1": {
				"uid": "camp_2_tsw_e_1",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "23f0ea48-722b-11e6-a33a-060a32004f8c",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_2": {
				"uid": "camp_2_tsw_e_2",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T1EmpFactory"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_3": {
				"uid": "camp_2_tsw_e_3",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "ee94d3fd-722b-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_4": {
				"uid": "camp_2_tsw_e_4",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpCredGen"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_5": {
				"uid": "camp_2_tsw_e_5",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "a5af08d9-723a-11e6-91c9-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_1": {
				"uid": "camp_3_tjg_e_1",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "f4831648-723a-11e6-91c9-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_2": {
				"uid": "camp_3_tjg_e_2",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpBarracks"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_3": {
				"uid": "camp_3_tjg_e_3",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "41569505-7242-11e6-8919-069da4004f8b",
				"lootRemaining": {
					"credits": 500,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_4": {
				"uid": "camp_3_tjg_e_4",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "b9431d4a-7242-11e6-8919-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_5": {
				"uid": "camp_3_tjg_e_5",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T2EmpMatStor"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_6": {
				"uid": "camp_3_tjg_e_6",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "9a4ad6b4-7243-11e6-8919-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_7": {
				"uid": "camp_3_tjg_e_7",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpRFTurrets"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_8": {
				"uid": "camp_3_tjg_e_8",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2c6e2e03-72c9-11e6-859a-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_9": {
				"uid": "camp_3_tjg_e_9",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT3EmpHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_10": {
				"uid": "camp_3_tjg_e_10",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "327c3e05-7336-11e6-95d9-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"Kill_TuskenHero_t1_1",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_1": {
				"uid": "camp_4_sotm_e_1",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMortar_T1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_2": {
				"uid": "camp_4_sotm_e_2",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireBarracks_T3_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_3": {
				"uid": "camp_4_sotm_e_3",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "70eddaf8-7346-11e6-91c9-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_4": {
				"uid": "camp_4_sotm_e_4",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "96d2594d-7359-11e6-bfb6-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_5": {
				"uid": "camp_4_sotm_e_5",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "53aa7a1e-735e-11e6-8bcd-06c66a004f76",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_6": {
				"uid": "camp_4_sotm_e_6",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "c0d763ab-735e-11e6-8bcd-06c66a004f76",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_7": {
				"uid": "camp_4_sotm_e_7",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_turret_t1_6"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_8": {
				"uid": "camp_4_sotm_e_8",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_wall_t1_40"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_9": {
				"uid": "camp_4_sotm_e_9",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_10": {
				"uid": "camp_4_sotm_e_10",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_starport_t2_2"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_11": {
				"uid": "camp_4_sotm_e_11",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2ea5b184-7374-11e6-b6f3-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_12": {
				"uid": "camp_4_sotm_e_12",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "6d33e004-7376-11e6-b6f3-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_13": {
				"uid": "camp_4_sotm_e_13",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "1ba6d6db-7377-11e6-b6f3-061c98004f78",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_14": {
				"uid": "camp_4_sotm_e_14",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1524828c-7379-11e6-b931-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_1": {
				"uid": "camp_5_tih_e_1",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMaterialsGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_2": {
				"uid": "camp_5_tih_e_2",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireOffenseLab_t1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_3": {
				"uid": "camp_5_tih_e_3",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "e13be059-741d-11e6-b6f3-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_4": {
				"uid": "camp_5_tih_e_4",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_12_t3_walls"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_5": {
				"uid": "camp_5_tih_e_5",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "b7652a6a-741e-11e6-b6f3-061c98004f78",
				"lootRemaining": {
					"credits": 1000,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_6": {
				"uid": "camp_5_tih_e_6",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "151d5209-741f-11e6-b6f3-061c98004f78",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_7": {
				"uid": "camp_5_tih_e_7",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireCreditGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_8": {
				"uid": "camp_5_tih_e_8",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "a7abb674-7421-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 6000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_1": {
				"uid": "chapter_7_bs_e_1",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d9649156-7424-11e6-a5c3-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_2": {
				"uid": "chapter_7_bs_e_2",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "7cbc5cec-7425-11e6-a5c3-06033c004f77",
				"lootRemaining": {
					"credits": 2100,
					"materials": 2100,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_3": {
				"uid": "chapter_7_bs_e_3",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1f510a6c-7427-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_4": {
				"uid": "chapter_7_bs_e_4",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireHQ_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_5": {
				"uid": "chapter_7_bs_e_5",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "cb679f29-7509-11e6-b6f3-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_6": {
				"uid": "chapter_7_bs_e_6",
				"campaignUid": "cmp_7_bs_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_7": {
				"uid": "chapter_7_bs_e_7",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "d1dc6335-76ad-11e6-a33a-060a32004f8c",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_8": {
				"uid": "chapter_7_bs_e_8",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f8d367c4-76ae-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 2400,
					"materials": 2400,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"Kill_infantry_t1_5",
					"Destroy_rebelTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_9": {
				"uid": "chapter_7_bs_e_9",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c2c3fc98-7d92-11e6-940f-06a77e004fbb",
				"lootRemaining": {
					"credits": 2600,
					"materials": 2600,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"Kill_infantry_t1_5",
					"Destroy_rebelTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_10": {
				"uid": "chapter_7_bs_e_10",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "221838d1-76cb-11e6-a33a-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_11": {
				"uid": "chapter_7_bs_e_11",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "76ece4c0-7734-11e6-b6f3-061c98004f78",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_12": {
				"uid": "chapter_7_bs_e_12",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireOffenseLab_t2_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_13": {
				"uid": "chapter_7_bs_e_13",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireTacticalCommand_t2_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_14": {
				"uid": "chapter_7_bs_e_14",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f34ca877-7e66-11e6-91a3-063864004f75",
				"lootRemaining": {
					"credits": 2500,
					"materials": 2500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"DestroyHQ",
					"Kill_infantry_t1_8"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_1": {
				"uid": "chapter_8_tat_e_1",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "ecf85bb7-7735-11e6-9f0c-06a77e004fbb",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_2": {
				"uid": "chapter_8_tat_e_2",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "320332c1-85af-11e6-a80d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_3": {
				"uid": "chapter_8_tat_e_3",
				"campaignUid": "cmp_8_tat_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_starport_t4_2"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_4": {
				"uid": "chapter_8_tat_e_4",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d361c8f3-862d-11e6-aad3-06c66a004f76",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_5": {
				"uid": "chapter_8_tat_e_5",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "195f75f9-862f-11e6-a80d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 8000,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_6": {
				"uid": "chapter_8_tat_e_6",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "3a8c7148-865a-11e6-a80d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_7": {
				"uid": "chapter_8_tat_e_7",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_barracks_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_8": {
				"uid": "chapter_8_tat_e_8",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "ee439858-867d-11e6-932d-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_9": {
				"uid": "chapter_8_tat_e_9",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "a70f1c41-88a7-11e6-a80d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_10": {
				"uid": "chapter_8_tat_e_10",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "79bf5a0c-88aa-11e6-bcda-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_11": {
				"uid": "chapter_8_tat_e_11",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f2d92449-88af-11e6-aad3-06c66a004f76",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_12": {
				"uid": "chapter_8_tat_e_12",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "6751f831-88b2-11e6-932d-063864004f75",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_13": {
				"uid": "chapter_8_tat_e_13",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "ce4e1ad3-88b2-11e6-932d-063864004f75",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_1": {
				"uid": "chapter_9_sas_e_1",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireFactory_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_2": {
				"uid": "chapter_9_sas_e_2",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "4e6208fc-88b3-11e6-9f3a-06dc8c004fbd",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_3": {
				"uid": "chapter_9_sas_e_3",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_4": {
				"uid": "chapter_9_sas_e_4",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "547f31c7-898b-11e6-aad3-06c66a004f76",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_5": {
				"uid": "chapter_9_sas_e_5",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireBarracks_t4_3"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_6": {
				"uid": "chapter_9_sas_e_6",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c612f005-898e-11e6-8a7e-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_7": {
				"uid": "chapter_9_sas_e_7",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2377a76a-938b-11e6-9b37-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_8": {
				"uid": "chapter_9_sas_e_8",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "fef4bf8a-898f-11e6-8a7e-06033c004f77",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_9": {
				"uid": "chapter_9_sas_e_9",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "137e07ab-92f8-11e6-a92f-06dc8c004fbd",
				"lootRemaining": {
					"credits": 3000,
					"materials": 3000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_10": {
				"uid": "chapter_9_sas_e_10",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_11": {
				"uid": "chapter_9_sas_e_11",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "8a73310a-9905-11e6-81bb-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_12": {
				"uid": "chapter_9_sas_e_12",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d3263402-937d-11e6-b072-06c66a004f76",
				"lootRemaining": {
					"credits": 7000,
					"materials": 7000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Destroy_storyRebShieldGen1",
					"Kill_hero_OtoVans4",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_1": {
				"uid": "chapter_10_bgh_e_1",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnEmpireRocketTurret1_2"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_2": {
				"uid": "chapter_10_bgh_e_2",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "76adc618-9377-11e6-a92f-06dc8c004fbd",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"kill_hero_t1_1",
					"DestroyAllBuildings",
					"kill_vehicle_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_3": {
				"uid": "chapter_10_bgh_e_3",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1bb566e2-92c3-11e6-8627-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 2763,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_4": {
				"uid": "chapter_10_bgh_e_4",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "a0406fae-9911-11e6-b2ba-061c98004f78",
				"lootRemaining": {
					"credits": 7000,
					"materials": 8000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_5": {
				"uid": "chapter_10_bgh_e_5",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnHQ5"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_6": {
				"uid": "chapter_10_bgh_e_6",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "bbe8d718-92c5-11e6-9b37-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyAllBuildings",
					"DestroyShieldGenerator1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_7": {
				"uid": "chapter_10_bgh_e_7",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f45e9d6a-92c6-11e6-a2a0-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"DestroyAllBuildings",
					"Kill_infantry_t1_20"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_8": {
				"uid": "chapter_10_bgh_e_8",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "46ce326a-a36d-11e6-bf6d-06e6ee004fbc",
				"lootRemaining": {
					"credits": 1920,
					"materials": 7998,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_9": {
				"uid": "chapter_10_bgh_e_9",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "2208baf3-92d7-11e6-84d7-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_Rancor5_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_10": {
				"uid": "chapter_10_bgh_e_10",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9a19dc9d-92e9-11e6-a92f-06dc8c004fbd",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHalfBuildings",
					"RetainHQ",
					"AvoidCompleteLoss"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_11": {
				"uid": "chapter_10_bgh_e_11",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "23dd0db0-9451-11e6-8dee-063864004f75",
				"lootRemaining": {
					"credits": 9000,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_22",
					"Kill_vehicle_t1_6",
					"Kill_KraytDragon8_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_12": {
				"uid": "chapter_10_bgh_e_12",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnEmpireFleetCommand2_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_13": {
				"uid": "chapter_10_bgh_e_13",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "0bcbf8c3-92ed-11e6-a2a0-06033c004f77",
				"lootRemaining": {
					"credits": 7980,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"kill_WompRatHero_t1_1",
					"kill_WompRatGeneralist_t1_40",
					"kill_WompRatBruiser_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_1": {
				"uid": "chapter_11_tbft_e_1",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnBarracks6_3"
				],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_2": {
				"uid": "chapter_11_tbft_e_2",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9fc2754d-0059-11e7-8bc5-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_3": {
				"uid": "chapter_11_tbft_e_3",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnEmpireContrabandStorage1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_4": {
				"uid": "chapter_11_tbft_e_4",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "fab27d96-004e-11e7-8bc5-060a32004f8c",
				"lootRemaining": {
					"credits": 552,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_5": {
				"uid": "chapter_11_tbft_e_5",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "d88f6e52-c2e0-11e6-9ed2-06cb44004f79",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_6": {
				"uid": "chapter_11_tbft_e_6",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnHeroCommand7_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_7": {
				"uid": "chapter_11_tbft_e_7",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 1,
				"counters": {},
				"goals": 3,
				"lastBattleId": "24b12256-fedb-11e6-9191-06dc8c004fbd",
				"lootRemaining": {
					"credits": 2849,
					"materials": 7994,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_8": {
				"uid": "chapter_11_tbft_e_8",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "23e50f05-004f-11e7-8bc5-060a32004f8c",
				"lootRemaining": {
					"credits": 5140,
					"materials": 5849,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"chapter_11_tbft_e_9": {
				"uid": "chapter_11_tbft_e_9",
				"campaignUid": "cmp_11_tbft_e",
				"status": "Active",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": "03070ae3-038b-11e7-b963-06a77e004fbb",
				"lootRemaining": {
					"credits": 10671,
					"materials": 10830,
					"contraband": 0
				},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			}
		},
		"tournaments": {
			"conflict_forestOps_tat_01": {
				"uid": "conflict_forestOps_tat_01",
				"rating": 3751,
				"collected": true,
				"percentile": 72,
				"tier": "tournament_tier_4",
				"redeemedRewards": [
					"lc_conf_crystal_tier4",
					"lc_conf_crystal_tier4"
				],
				"attacksWon": 19,
				"attacksLost": 6,
				"defensesWon": 12,
				"defensesLost": 13,
				"donatedTroops": 260
			}
		},
		"isFueInProgress": false,
		"DamagedBuildings": {
			"bld_26": 100,
			"bld_218": 100,
			"bld_141": 100,
			"bld_323": 100,
			"bld_82": 100,
			"bld_74": 100,
			"bld_73": 100,
			"bld_480": 100,
			"bld_445": 100,
			"bld_328": 100,
			"bld_142": 100,
			"bld_120": 100,
			"bld_212": 100,
			"bld_315": 100,
			"bld_322": 100,
			"bld_77": 100,
			"bld_203": 100,
			"bld_83": 100,
			"bld_309": 100,
			"bld_64": 100,
			"bld_313": 100,
			"bld_314": 100,
			"bld_319": 100,
			"bld_122": 100,
			"bld_310": 100,
			"bld_321": 100,
			"bld_24": 100,
			"bld_215": 100,
			"bld_53": 100,
			"bld_446": 100,
			"bld_17": 100,
			"bld_65": 100,
			"bld_10": 100,
			"bld_121": 100,
			"bld_23": 100,
			"bld_90": 100,
			"bld_116": 100,
			"bld_217": 100,
			"bld_16": 100,
			"bld_54": 100,
			"bld_156": 100,
			"bld_333": 100,
			"bld_123": 100,
			"bld_117": 100,
			"bld_88": 100,
			"bld_214": 100,
			"bld_311": 100,
			"bld_111": 100,
			"bld_159": 100,
			"bld_143": 100,
			"bld_76": 100,
			"bld_56": 100,
			"bld_63": 100,
			"bld_155": 100,
			"bld_106": 100,
			"bld_89": 100,
			"bld_72": 100,
			"bld_216": 100,
			"bld_22": 100,
			"bld_25": 100,
			"bld_211": 100,
			"bld_84": 100,
			"bld_75": 100,
			"bld_158": 100,
			"bld_113": 100,
			"bld_229": 100,
			"bld_101": 100,
			"bld_147": 100,
			"bld_9": 100,
			"bld_213": 100,
			"bld_157": 100,
			"bld_2": 100,
			"bld_68": 100,
			"bld_1": 100,
			"bld_105": 100,
			"bld_55": 100,
			"bld_52": 100,
			"bld_148": 14,
			"bld_91": 0,
			"bld_202": 0,
			"bld_201": 0,
			"bld_19": 67,
			"bld_18": 44,
			"bld_13": 19,
			"bld_71": 0,
			"bld_107": 0,
			"bld_104": 14,
			"bld_108": 14,
			"bld_69": 14,
			"bld_102": 0,
			"bld_61": 14,
			"bld_67": 53,
			"bld_66": 92,
			"bld_80": 0,
			"bld_114": 0,
			"bld_79": 0,
			"bld_78": 0,
			"bld_60": 0,
			"bld_210": 54,
			"bld_144": 0,
			"bld_115": 0,
			"bld_312": 100,
			"bld_94": 0,
			"bld_208": 0,
			"bld_207": 0,
			"bld_152": 0,
			"bld_103": 0,
			"bld_5": 0,
			"bld_3": 0,
			"bld_7": 0,
			"bld_12": 0,
			"bld_11": 0,
			"bld_14": 60,
			"bld_58": 53,
			"bld_151": 23,
			"bld_6": 62,
			"bld_57": 34,
			"bld_15": 49,
			"bld_320": 64,
			"bld_316": 27,
			"bld_146": 44,
			"bld_145": 0,
			"bld_20": 0,
			"bld_206": 0,
			"bld_204": 0,
			"bld_205": 0,
			"bld_150": 0,
			"bld_154": 58,
			"bld_81": 88,
			"bld_153": 0,
			"bld_318": 58,
			"bld_200": 0,
			"bld_317": 88,
			"bld_92": 0,
			"bld_109": 0,
			"bld_70": 0,
			"bld_8": 0,
			"bld_93": 0,
			"bld_209": 29,
			"bld_149": 0,
			"bld_21": 0,
			"bld_453": 0,
			"bld_455": 7,
			"bld_456": 8,
			"bld_449": 0,
			"bld_447": 0,
			"bld_4": 14,
			"bld_62": 0,
			"bld_110": 0,
			"bld_450": 10,
			"bld_59": 0,
			"bld_451": 0,
			"bld_452": 0,
			"bld_448": 0,
			"bld_454": 0
		},
		"deviceInfo": {},
		"timeZoneOffset": 2,
		"contracts": [
			{
				"uid": "troopEmpireSpeeder7",
				"endTime": 1490380100,
				"contractType": "Troop",
				"buildingId": "bld_155",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder7",
				"endTime": 1490380168,
				"contractType": "Troop",
				"buildingId": "bld_63",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder7",
				"endTime": 1490380181,
				"contractType": "Troop",
				"buildingId": "bld_155",
				"perkIds": []
			},
			{
				"uid": "troopEmpireSpeeder7",
				"endTime": 1490380249,
				"contractType": "Troop",
				"buildingId": "bld_63",
				"perkIds": []
			},
			{
				"uid": "troopHeroCrimsonGuard7",
				"endTime": 1490380422,
				"contractType": "Hero",
				"buildingId": "bld_113",
				"perkIds": []
			},
			{
				"uid": "specialAttackAtmosMig2",
				"endTime": 1490380619,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "troopHeroATMP7",
				"endTime": 1490380692,
				"contractType": "Hero",
				"buildingId": "bld_113",
				"perkIds": []
			},
			{
				"uid": "specialAttackAtmosMig2",
				"endTime": 1490381339,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "specialAttackAtmosMig2",
				"endTime": 1490382059,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "specialAttackAtmosMig2",
				"endTime": 1490382779,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "specialAttackAtmosMig2",
				"endTime": 1490383499,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "specialAttackTieBomber6",
				"endTime": 1490384219,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "specialAttackTieBomber6",
				"endTime": 1490384939,
				"contractType": "SpecialAttack",
				"buildingId": "bld_158",
				"perkIds": []
			},
			{
				"uid": "empireMaterialsGenerator7",
				"endTime": 1490391360,
				"contractType": "Upgrade",
				"buildingId": "bld_121",
				"perkIds": []
			},
			{
				"uid": "troopDark7",
				"endTime": 1490522849,
				"contractType": "Research",
				"buildingId": "bld_82",
				"perkIds": []
			}
		],
		"frozenBuildings": [
			"bld_155",
			"bld_63"
		],
		"isConnectedAccount": true,
		"pvpTargetServedTime": 1490383621,
		"intros": [],
		"lastMission": "chapter_11_tbft_e_9",
		"isRateIncentivized": false,
		"lastPaymentTime": null,
		"lastWarParticipationTime": 1490152867,
		"identitySwitchTimes": {},
		"openOffer": null,
		"unlockedPlanets": [
			"planet1",
			"planet3",
			"planet23",
			"planet6",
			"planet21"
		],
		"relocationStarCount": 11,
		"holonetRewards": [
			"reward_kubaz4_e_ltr",
			"reward_undead_sample_e_ltr2",
			"reward_securityDroid_e_ltr",
			"reward_hovertank_e_ltr",
			"reward_atmosMig_e_ltr",
			"reward_desBiome_e_ltr",
			"reward_forBiome_e_ltr"
		],
		"playerObjectives": {
			"planet1": {
				"groupId": "obj_tatooine_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_type_hero_easy_e",
						"hq": 8,
						"count": 0,
						"target": 2,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 8,
						"count": 0,
						"target": 34,
						"state": "active"
					},
					{
						"uid": "obj_destroy_tacticalcommand_hard_e",
						"hq": 8,
						"count": 0,
						"target": 2,
						"state": "active"
					}
				]
			},
			"planet8": {
				"groupId": "obj_forestOps_yavin_23",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_train_heroatat_easy_e",
						"hq": 8,
						"count": 0,
						"target": 2,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 8,
						"count": 0,
						"target": 34,
						"state": "active"
					},
					{
						"uid": "obj_forestOps_destroy_starport_hard_e",
						"hq": 8,
						"count": 0,
						"target": 6,
						"state": "active"
					}
				]
			},
			"planet23": {
				"groupId": "obj_tfa_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_tiedefender_easy_e",
						"hq": 8,
						"count": 0,
						"target": 4,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 8,
						"count": 0,
						"target": 34,
						"state": "active"
					},
					{
						"uid": "obj_deploy_type_hero_hard_e",
						"hq": 8,
						"count": 0,
						"target": 4,
						"state": "active"
					}
				]
			},
			"planet21": {
				"groupId": "obj_hoth_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_loot_contraband_easy",
						"hq": 8,
						"count": 0,
						"target": 1000,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 8,
						"count": 0,
						"target": 34,
						"state": "active"
					},
					{
						"uid": "obj_train_empiretwilekincinerator_hard_e",
						"hq": 8,
						"count": 0,
						"target": 13,
						"state": "active"
					}
				]
			},
			"planet3": {
				"groupId": "obj_dandoran_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_atmp_easy_e",
						"hq": 8,
						"count": 0,
						"target": 3,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 8,
						"count": 0,
						"target": 34,
						"state": "active"
					},
					{
						"uid": "obj_deploy_herocrimsonguard_hard_e",
						"hq": 8,
						"count": 0,
						"target": 3,
						"state": "active"
					}
				]
			},
			"planet6": {
				"groupId": "obj_erkit_series10_9",
				"startTime": 1490342400,
				"graceTime": 1490425200,
				"endTime": 1490428800,
				"progress": [
					{
						"uid": "obj_deploy_sniper_easy_e",
						"hq": 8,
						"count": 0,
						"target": 6,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 8,
						"count": 34,
						"target": 34,
						"state": "complete"
					},
					{
						"uid": "obj_destroy_contrabandgenerator_hard_e",
						"hq": 8,
						"count": 0,
						"target": 4,
						"state": "active"
					}
				]
			}
		},
		"lastObjectiveCheckTime": 1490379594,
		"raids": {
			"planet1": {
				"planetId": "planet1",
				"raidId": "raid_Tatooine1",
				"raidPoolId": "raidpool_desBiome_hq8_e",
				"raidMissionId": "raid_desBiome_e_hq8_1",
				"retried": null,
				"startTime": 1489640400,
				"endTime": null,
				"lastRaidStars": 3,
				"lastRaidId": "raid_Tatooine2",
				"lastRaidPoolId": "raidpool_tat_hq7_e",
				"lastRaidMissionId": "raid_tat_e_hq7_1",
				"nextRaidStartTime": 1489683600
			},
			"planet3": {
				"planetId": "planet3",
				"raidId": "raid_Dandoran1",
				"raidPoolId": "raidpool_gen_hq7_e",
				"raidMissionId": "raid_gen_e_hq7_1",
				"retried": false,
				"startTime": 1488085200,
				"endTime": null,
				"lastRaidStars": 2,
				"lastRaidId": "raid_Dandoran2",
				"lastRaidPoolId": "raidpool_gen_hq7_e",
				"lastRaidMissionId": "raid_gen_e_hq7_3",
				"nextRaidStartTime": 1488128400
			},
			"planet23": {
				"planetId": "planet23",
				"raidId": "raid_Takodana1",
				"raidPoolId": "raidpool_gen_hq7_e",
				"raidMissionId": "raid_gen_e_hq7_3",
				"retried": null,
				"startTime": 1484715600,
				"endTime": null,
				"lastRaidStars": 1,
				"lastRaidId": "raid_Takodana1",
				"lastRaidPoolId": "raidpool_gen_hq7_e",
				"lastRaidMissionId": "raid_gen_e_hq7_1",
				"nextRaidStartTime": 1484758800
			},
			"planet6": {
				"planetId": "planet6",
				"raidId": "raid_Erkit1",
				"raidPoolId": "raidpool_desBiome_hq8_e",
				"raidMissionId": "raid_desBiome_e_hq8_1",
				"retried": false,
				"startTime": 1490418000,
				"endTime": null,
				"lastRaidStars": 2,
				"lastRaidId": "raid_Erkit2",
				"lastRaidPoolId": "raidpool_desBiome_hq8_e",
				"lastRaidMissionId": "raid_desBiome_e_hq8_3",
				"nextRaidStartTime": 1490461200
			}
		},
		"perksInfo": {
			"perks": {
				"activatedPerks": [
					{
						"perkId": "perk_DntAmt_DntT5",
						"startTime": 1490104426,
						"endTime": 1490147626
					},
					{
						"perkId": "perk_GCrd_GCon4",
						"startTime": 1490116211,
						"endTime": 1490159411
					},
					{
						"perkId": "perk_CBar_CFac6",
						"startTime": 1490167785,
						"endTime": 1490210985
					}
				],
				"cooldowns": {
					"DntAmt_DntT": 1490205226,
					"GCrd_GCon": 1490217011,
					"CBar_CFac": 1490268585
				},
				"hasActivatedFirstPerk": true
			}
		},
		"armoryInfo": {
			"firstCratePurchased": true
		},
		"activeArmory": {
			"equipment": [
				"eqpEmpireRapidFireTurretDamage6",
				"eqpEmpireRapidFireTurretHealth6",
				"eqpEmpireMortarTurretDamage6",
				"eqpEmpireWallHealth7",
				"eqpEmpireHQHealth7",
				"eqpEmpireCreditGeneratorHealth7"
			],
			"capacity": 44
		},
		"shards": {
			"eqpEmpireHQHealth": 490,
			"eqpEmpirePentagonTrooper": 27,
			"eqpEmpireWallHealth": 961,
			"eqpEmpireRapidFireTurretDamage": 34,
			"eqpEmpireMortarTurretDamage": 36,
			"eqpEmpireRapidFireTurretHealth": 74,
			"eqpEmpireArcticATMP": 3,
			"eqpEmpireMortarTurretHealth": 85,
			"eqpEmpirePentagonHeavyTrooper": 16,
			"eqpEmpireHeavySnowtrooper": 19,
			"eqpEmpireSnowtrooper": 5,
			"shrd_specialAttackTieAdvanced": 30,
			"eqpEmpireCargoGreatDane": 4,
			"shrd_troopShock": 23,
			"eqpEmpireMaterialsGeneratorHealth": 450,
			"eqpEmpireContrabandGeneratorHealth": 482,
			"eqpEmpireBurstTurretDamage": 36,
			"eqpEmpireCreditGeneratorHealth": 80,
			"shrd_troopSecurityDroid": 13,
			"shrd_specialAttackAtmosMig": 13,
			"eqpEmpireArcticMHC": 8,
			"eqpEmpireBurstTurretHealth": 24,
			"eqpEmpireArcticINT4": 8,
			"eqpEmpireHovertank": 7,
			"eqpEmpireSandtrooper": 14,
			"shrd_troopEmpireJohhar": 2,
			"eqpEmpireHeavySandtrooper": 10
		},
		"troopDonationProgress": {
			"donationCount": 7,
			"lastTrackedDonationTime": 1490379634,
			"repDonationCooldownEndTime": 1490425200
		},
		"purchasedCrates": []
	},
	"scalars": {
		"attacksLost": 335,
		"attacksWon": 1410,
		"defensesLost": 432,
		"defensesWon": 154,
		"attacksStarted": 1748,
		"attacksCompleted": 1745,
		"attackRating": 5883,
		"defenseRating": -141,
		"xp": 0,
		"NF1219": 1
	},
	"name": "2tee2"
};

/***/ }),
/* 185 */
/***/ (function(module, exports) {

module.exports = {
	"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
	"playerModel": {
		"guildInfo": {
			"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
			"guildName": "fcuk",
			"icon": "SquadSymbols_11",
			"joinDate": 1484179531,
			"playerHasOutstandingJoinRequest": false
		},
		"upgrades": {
			"troop": {
				"Storm": 5,
				"ATST": 4,
				"Dark": 5,
				"EmpireSpeeder": 4,
				"Scout": 4,
				"2MTank": 4,
				"HeroATST": 5,
				"HeroATMP": 5,
				"Dewback": 4,
				"ATMP": 4,
				"HeroCrimsonGuard": 4
			},
			"specialAttack": {
				"TieFighter": 3
			},
			"building": {},
			"equipment": {}
		},
		"prizes": {
			"troop": {
				"SecurityDroid": 28,
				"Shock": 23,
				"EmpireHovertankSample": 1,
				"Technician": 10,
				"ATMP": 4,
				"ATAT": 3,
				"EmpireSpeeder": 10,
				"Scout": 11,
				"HeroATAT": 3,
				"2MTank": 4,
				"HeroATST": 5,
				"ProbeDroid": 5,
				"KubazInvader": 3,
				"HeavyStorm": 5,
				"EmpireTognath": 3,
				"HeroATMP": 1
			},
			"specialAttack": {
				"AtmosMig": 1,
				"TieAdvanced": 1
			},
			"resources": {},
			"crates": {
				"available": {},
				"inProgress": {},
				"next": 119,
				"nextDailyCrateTime": 1490094000,
				"nextHolonetTime": 1488124460
			}
		},
		"donatedTroops": {},
		"buildingsUnderConstruction": [
			"bld_138",
			"bld_139",
			"bld_24",
			"bld_25"
		],
		"map": {
			"next": 170,
			"planet": "planet1",
			"buildings": [
				{
					"key": "bld_1",
					"x": -2,
					"z": -2,
					"uid": "empireHQ5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_25",
					"x": 16,
					"z": 16,
					"uid": "empireStarport4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_59",
					"x": 16,
					"z": 10,
					"uid": "empireStarport4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_26",
					"x": 20,
					"z": -21,
					"uid": "empireDroidHut1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_118",
					"x": -21,
					"z": 19,
					"uid": "empireScoutTower1",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_52",
					"x": 2,
					"z": -7,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_103",
					"x": 0,
					"z": -7,
					"uid": "empireRocketTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_76",
					"x": -2,
					"z": -7,
					"uid": "empireMortar4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_104",
					"x": 0,
					"z": 6,
					"uid": "empireRocketTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_75",
					"x": 2,
					"z": 6,
					"uid": "empireMortar4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_54",
					"x": 0,
					"z": -5,
					"uid": "empireMaterialsStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_89",
					"x": -3,
					"z": -5,
					"uid": "empireMaterialsStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_77",
					"x": 1,
					"z": 3,
					"uid": "empireCreditStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_23",
					"x": -2,
					"z": 3,
					"uid": "empireCreditStorage5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_117",
					"x": -5,
					"z": -2,
					"uid": "empireShieldGenerator4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_98",
					"x": 4,
					"z": -1,
					"uid": "empireShieldGenerator4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_142",
					"x": -5,
					"z": 2,
					"uid": "empireBurstTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_73",
					"x": -5,
					"z": -4,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_22",
					"x": 4,
					"z": 3,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_72",
					"x": -2,
					"z": 6,
					"uid": "empireRapidFireTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_143",
					"x": 4,
					"z": -3,
					"uid": "empireBurstTurret4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_115",
					"x": -7,
					"z": -6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_17",
					"x": -7,
					"z": -1,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_16",
					"x": -7,
					"z": 0,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_15",
					"x": -7,
					"z": 1,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_14",
					"x": -7,
					"z": 2,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_69",
					"x": -7,
					"z": 4,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_114",
					"x": -7,
					"z": -5,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_19",
					"x": -7,
					"z": -3,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_18",
					"x": -7,
					"z": -2,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_20",
					"x": -7,
					"z": -4,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_13",
					"x": -7,
					"z": 3,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_67",
					"x": -7,
					"z": 7,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_11",
					"x": -7,
					"z": 6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_66",
					"x": -7,
					"z": -7,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_21",
					"x": -7,
					"z": 5,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_82",
					"x": 3,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_140",
					"x": 6,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_157",
					"x": -7,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_156",
					"x": -6,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_155",
					"x": -5,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_64",
					"x": 1,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_86",
					"x": 2,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_2",
					"x": 5,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_62",
					"x": -1,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_84",
					"x": 0,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_61",
					"x": -3,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_83",
					"x": -4,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_79",
					"x": 4,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_65",
					"x": -2,
					"z": -9,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_160",
					"x": -7,
					"z": -8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_9",
					"x": 6,
					"z": -2,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_8",
					"x": 6,
					"z": -1,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_7",
					"x": 6,
					"z": 0,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_70",
					"x": 6,
					"z": -7,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_6",
					"x": 6,
					"z": 4,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_5",
					"x": 6,
					"z": 3,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_106",
					"x": 6,
					"z": -5,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_113",
					"x": 6,
					"z": 5,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_112",
					"x": 6,
					"z": 6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_4",
					"x": 6,
					"z": 2,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_3",
					"x": 6,
					"z": 1,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_85",
					"x": 6,
					"z": -4,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_63",
					"x": 6,
					"z": -8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_12",
					"x": 6,
					"z": -6,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_10",
					"x": 6,
					"z": -3,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_110",
					"x": 2,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_141",
					"x": 4,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_81",
					"x": -5,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_80",
					"x": -4,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_111",
					"x": 3,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_107",
					"x": -2,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_68",
					"x": 1,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_109",
					"x": 0,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_88",
					"x": -3,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_87",
					"x": -6,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_108",
					"x": -1,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_74",
					"x": -5,
					"z": 4,
					"uid": "empireOffenseLab5",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_154",
					"x": 6,
					"z": 7,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_153",
					"x": 5,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_159",
					"x": -7,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_158",
					"x": 6,
					"z": 8,
					"uid": "empireWall4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_138",
					"x": 4,
					"z": -7,
					"uid": "empireTrapStrikeAOE3",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_139",
					"x": 4,
					"z": 6,
					"uid": "empireTrapStrikeAOE3",
					"lastCollectTime": null,
					"currentStorage": 1
				},
				{
					"key": "bld_116",
					"x": -5,
					"z": -7,
					"uid": "empireTrapStrikeGeneric4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_91",
					"x": 4,
					"z": -6,
					"uid": "empireTrapStrikeGeneric4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_55",
					"x": 8,
					"z": -2,
					"uid": "empireSquadBuilding4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_137",
					"x": 8,
					"z": -6,
					"uid": "empireFleetCommand2",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_97",
					"x": -11,
					"z": 1,
					"uid": "empireTacticalCommand4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_136",
					"x": 8,
					"z": -10,
					"uid": "empireFactory4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_60",
					"x": -12,
					"z": -3,
					"uid": "empireFactory4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_105",
					"x": -10,
					"z": -6,
					"uid": "empireBarracks4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_56",
					"x": -10,
					"z": 5,
					"uid": "empireBarracks4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_71",
					"x": -10,
					"z": 8,
					"uid": "empireBarracks4",
					"lastCollectTime": null,
					"currentStorage": 0
				},
				{
					"key": "bld_53",
					"x": -10,
					"z": -9,
					"uid": "empireMaterialsGenerator5",
					"lastCollectTime": 1490330801,
					"currentStorage": 4200
				},
				{
					"key": "bld_102",
					"x": -10,
					"z": -12,
					"uid": "empireMaterialsGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 3000
				},
				{
					"key": "bld_58",
					"x": -7,
					"z": -12,
					"uid": "empireMaterialsGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 3000
				},
				{
					"key": "bld_90",
					"x": -4,
					"z": -12,
					"uid": "empireMaterialsGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 3000
				},
				{
					"key": "bld_144",
					"x": -1,
					"z": -12,
					"uid": "empireMaterialsGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 3000
				},
				{
					"key": "bld_78",
					"x": -7,
					"z": 10,
					"uid": "empireCreditGenerator5",
					"lastCollectTime": 1490330801,
					"currentStorage": 4200
				},
				{
					"key": "bld_57",
					"x": -4,
					"z": 10,
					"uid": "empireCreditGenerator5",
					"lastCollectTime": 1490330801,
					"currentStorage": 4200
				},
				{
					"key": "bld_148",
					"x": -1,
					"z": 10,
					"uid": "empireCreditGenerator5",
					"lastCollectTime": 1490330801,
					"currentStorage": 4200
				},
				{
					"key": "bld_101",
					"x": 2,
					"z": 10,
					"uid": "empireCreditGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 3000
				},
				{
					"key": "bld_24",
					"x": 5,
					"z": 10,
					"uid": "empireCreditGenerator4",
					"lastCollectTime": 1490330801,
					"currentStorage": 0
				}
			]
		},
		"inventory": {
			"storage": {
				"credits": {
					"amount": 8999,
					"capacity": 300000,
					"scale": 1
				},
				"materials": {
					"amount": 25600,
					"capacity": 300000,
					"scale": 1
				},
				"contraband": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				},
				"reputation": {
					"amount": 1,
					"capacity": 14,
					"scale": 1
				},
				"crystals": {
					"amount": 203,
					"capacity": -1,
					"scale": 1
				},
				"droids": {
					"amount": 4,
					"capacity": 5,
					"scale": 1
				},
				"xp": {
					"amount": 876,
					"capacity": -1,
					"scale": 1
				},
				"troop": {
					"amount": 0,
					"capacity": 20,
					"scale": 1
				},
				"hero": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				},
				"champion": {
					"amount": 0,
					"capacity": 0,
					"scale": 1
				}
			},
			"capacity": -1,
			"subStorage": {
				"troop": {
					"storage": {
						"troop2MTank4": {
							"amount": 1,
							"capacity": -1,
							"scale": 10
						},
						"troopATMP4": {
							"amount": 1,
							"capacity": -1,
							"scale": 15
						},
						"troopStorm5": {
							"amount": 2,
							"capacity": -1,
							"scale": 1
						},
						"troopDark5": {
							"amount": 2,
							"capacity": -1,
							"scale": 4
						}
					},
					"capacity": 52,
					"subStorage": {}
				},
				"specialAttack": {
					"storage": {},
					"capacity": 12,
					"subStorage": {}
				},
				"hero": {
					"storage": {
						"troopHeroATST5": {
							"amount": 1,
							"capacity": 1,
							"scale": 1
						}
					},
					"capacity": 2,
					"subStorage": {}
				},
				"champion": {
					"storage": {},
					"capacity": 0,
					"subStorage": {}
				}
			}
		},
		"faction": "empire",
		"currentQuest": "",
		"protectedUntil": 1490388087,
		"protectionFrom": 1490330487,
		"protectionCooldownUntil": {},
		"battleLogs": [
			{
				"battleId": "a9814708-09e2-11e7-b7db-06a77e004fbb",
				"attacker": {
					"playerId": "8c35f267-f8ea-11e6-97ea-06033c004f77",
					"name": "madhare",
					"faction": "rebel",
					"guildId": "30fb535b-8dab-11e6-980e-069da4004f8b",
					"guildName": "TheKoopTroop",
					"attackRating": 858,
					"attackRatingDelta": 3,
					"defenseRating": 87,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -789,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489625623,
				"looted": {
					"materials": 24458,
					"credits": 16200
				},
				"earned": {
					"materials": 24458,
					"credits": 16200
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 21122,
					"materials": 25714
				},
				"troopsExpended": {
					"troopHeroChewbacca4": 1,
					"troopWookie4": 2,
					"troopMedic5": 2,
					"troopSoldier5": 9,
					"troopT2BTank4": 3,
					"specialAttackXWing3": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 71,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 12,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "00dc01f9-0a27-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "5cc20c7f-c66b-11e6-b9bb-06c66a004f76",
					"name": "GooeyB",
					"faction": "rebel",
					"guildId": "2c670484-e322-11e5-9b2c-061c98004f78",
					"guildName": "chewbaca2.0",
					"attackRating": 4039,
					"attackRatingDelta": 11,
					"defenseRating": -283,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -800,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489654939,
				"looted": {
					"credits": 20122,
					"materials": 23062
				},
				"earned": {
					"contraband": 0,
					"credits": 21122,
					"materials": 24062
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 21122,
					"materials": 24062
				},
				"troopsExpended": {
					"troopSoldier6": 6,
					"troopWookie6": 9,
					"troopMedic6": 1,
					"troopHeroHanSolo6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelSandSoldier1",
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelWallHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "cdd457bd-0aab-11e7-9fcf-06033c004f77",
				"attacker": {
					"playerId": "aef9e907-3ebe-11e5-b2bd-06a77e004fbb",
					"name": "Luis Skywalker",
					"faction": "rebel",
					"guildId": "e12b6fe5-29f7-11e6-b3c1-06dc8c004fbd",
					"guildName": "Harlan",
					"attackRating": 3991,
					"attackRatingDelta": 11,
					"defenseRating": -212,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -811,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489711961,
				"looted": {
					"materials": 21690,
					"credits": 19338
				},
				"earned": {
					"contraband": 0,
					"materials": 22690,
					"credits": 20338
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 20338,
					"materials": 22690
				},
				"troopsExpended": {
					"troopHeavyRebel5": 3,
					"troopJuggernaut4": 1,
					"troopHailfire5": 1,
					"troopWookie5": 3,
					"troopMedic4": 2,
					"troopVanguard1": 4,
					"troopPathfinder5": 6,
					"troopSoldier5": 9,
					"troopHeroLeia4": 1
				},
				"attackerGuildTroopsExpended": {
					"troopAAT14": 2,
					"troopSoldier5": 6
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 30,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelWallHealth7",
					"eqpRebelMortarTurretHealth4",
					"eqpRebelSandSoldier1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "e730fd81-0b31-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "655437c4-be5e-11e6-b7df-060a32004f8c",
					"name": "Jeghit St. Alem",
					"faction": "rebel",
					"guildId": "119b48ab-bcb1-11e4-98ad-06a77e004fbb",
					"guildName": "RogueEwokCarnage",
					"attackRating": 7704,
					"attackRatingDelta": 7,
					"defenseRating": -67,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -818,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489769602,
				"looted": {
					"materials": 20592,
					"credits": 7950
				},
				"earned": {
					"contraband": 0,
					"materials": 21592,
					"credits": 8950
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19710,
					"materials": 21592
				},
				"troopsExpended": {
					"troopJuggernaut3": 1,
					"troopHeroChewbacca5": 1,
					"troopMedic5": 1,
					"troopWookie4": 2,
					"troopSoldier4": 17,
					"specialAttackXWing3": 3
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 76,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 28,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "99106dac-0b96-11e7-9fcf-06033c004f77",
				"attacker": {
					"playerId": "acae85ea-be3d-11e6-8d5b-069da4004f8b",
					"name": "torty",
					"faction": "rebel",
					"guildId": "f193396f-9d50-11e5-999b-06cb44004f79",
					"guildName": "Christian.Jedi",
					"attackRating": 1651,
					"attackRatingDelta": 11,
					"defenseRating": -558,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -829,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489812838,
				"looted": {
					"credits": 18710,
					"materials": 19714
				},
				"earned": {
					"contraband": 0,
					"credits": 19710,
					"materials": 20714
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19710,
					"materials": 20714
				},
				"troopsExpended": {
					"specialAttackXWing5": 2,
					"troopHeroChewbacca5": 1,
					"troopWookie5": 1,
					"troopAAT15": 1,
					"troopJuggernaut5": 1,
					"troopSoldier5": 10
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 14,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelWallHealth3",
					"eqpRebelSandSoldier2",
					"eqpRebelHQHealth4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "9808553d-0c1c-11e7-9789-06dc8c004fbd",
				"attacker": {
					"playerId": "1957efb4-519c-11e6-bd42-060a32004f8c",
					"name": "бармалей",
					"faction": "rebel",
					"guildId": "20cab83b-82fa-11e6-b187-063864004f75",
					"guildName": "RUSSIAN_REVIVAL",
					"attackRating": 9433,
					"attackRatingDelta": 11,
					"defenseRating": -1578,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -840,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489870386,
				"looted": {
					"materials": 19010,
					"credits": 18208
				},
				"earned": {
					"contraband": 0,
					"materials": 20010,
					"credits": 19208
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19208,
					"materials": 20010
				},
				"troopsExpended": {
					"troopHeroLeia8": 1,
					"troopMedic8": 1,
					"troopHeavyRebel8": 3,
					"troopVanguard2": 1,
					"troopSoldier8": 5
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretHealth5",
					"eqpRebelRapidFireTurretDamage5",
					"eqpRebelWallHealth8",
					"eqpRebelCreditGeneratorHealth3",
					"eqpRebelSandSoldier2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "b44fc05b-0ca2-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "d78282bd-c075-11e6-aa77-063864004f75",
					"name": "kan",
					"faction": "rebel",
					"guildId": "5abe1db0-9924-11e6-84d4-060a32004f8c",
					"guildName": "ForceTuSeras",
					"attackRating": 3988,
					"attackRatingDelta": 3,
					"defenseRating": -963,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1766,
					"attackRatingDelta": 0,
					"defenseRating": -843,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489927956,
				"looted": {
					"credits": 21519,
					"materials": 16200
				},
				"earned": {
					"credits": 21519,
					"materials": 16200
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 24388,
					"materials": 25568
				},
				"troopsExpended": {
					"troopJuggernaut6": 1,
					"troopHeroChewbacca6": 1,
					"troopWookie6": 4,
					"troopMedic5": 1,
					"troopT2BTank5": 3,
					"troopSoldier6": 10,
					"troopHeavyRebel5": 2,
					"troopMarksman6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopEmpireSpeeder7": 1,
					"troopTechnician7": 1
				},
				"baseDamagePercent": 67,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth5",
					"eqpRebelSandSoldier2",
					"eqpRebelBurstTurretDamage2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "599cc8db-0cc4-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1769,
					"attackRatingDelta": 3,
					"defenseRating": -843,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "a3531b4b-d9a6-11e6-8b53-06e6ee004fbc",
					"name": "MocnySiepator",
					"faction": "rebel",
					"guildId": "56fe3dfc-65a1-11e4-b32e-06dc8c004fbd",
					"guildName": "Green",
					"attackRating": 492,
					"attackRatingDelta": 0,
					"defenseRating": -191,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489942437,
				"looted": {
					"materials": 21916,
					"credits": 27746
				},
				"earned": {
					"materials": 21916,
					"credits": 27746
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 34730,
					"materials": 22916
				},
				"troopsExpended": {
					"troopStorm5": 10,
					"troopHeroATST4": 1,
					"troopDark5": 8,
					"troop2MTank4": 1,
					"specialAttackTieFighter3": 3
				},
				"attackerGuildTroopsExpended": {
					"troopEmpireSpeeder7": 1
				},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 61,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "0cee658e-0cc5-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1756,
					"attackRatingDelta": -13,
					"defenseRating": -843,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "d6457554-c0f7-11e6-a25b-060a32004f8c",
					"name": "1kubula3",
					"faction": "rebel",
					"guildId": "16568e86-f6db-11e5-a546-06c66a004f76",
					"guildName": "USAknights",
					"attackRating": 758,
					"attackRatingDelta": 0,
					"defenseRating": -24,
					"defenseRatingDelta": 16,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489942658,
				"looted": {
					"materials": 7530
				},
				"earned": {
					"materials": 7530
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19428,
					"materials": 29190
				},
				"troopsExpended": {
					"troopStorm5": 7,
					"troopATMP4": 1,
					"troop2MTank4": 1,
					"troopHeroCrimsonGuard4": 1,
					"troopDark5": 5,
					"specialAttackTieFighter3": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopSoldier10": 2,
					"troopSoldier7": 2
				},
				"baseDamagePercent": 17,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "b25c8d37-0cc5-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1759,
					"attackRatingDelta": 3,
					"defenseRating": -843,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "61f59c9b-a30c-11e6-a225-069da4004f8b",
					"name": "malibucoke",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 768,
					"attackRatingDelta": 0,
					"defenseRating": -758,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489943020,
				"looted": {
					"materials": 18684,
					"credits": 21044
				},
				"earned": {
					"contraband": 0,
					"materials": 18864,
					"credits": 21224
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 22044,
					"materials": 19684
				},
				"troopsExpended": {
					"troopStorm5": 9,
					"troopDark5": 6,
					"troopDewback4": 3,
					"troop2MTank4": 1,
					"troopHeroATMP4": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 90,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "da34f172-0cc6-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "fce9115c-dd9f-11e6-8934-06cb44004f79",
					"name": "kilozulu",
					"faction": "rebel",
					"guildId": "04562294-06c0-11e6-8170-06a77e004fbb",
					"guildName": "HungarySquad",
					"attackRating": 3289,
					"attackRatingDelta": 7,
					"defenseRating": -93,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1759,
					"attackRatingDelta": 0,
					"defenseRating": -850,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489943527,
				"looted": {
					"credits": 8064,
					"materials": 1974
				},
				"earned": {
					"contraband": 0,
					"credits": 9064,
					"materials": 2974
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 9064,
					"materials": 2974
				},
				"troopsExpended": {
					"troopATAP5": 1,
					"troopHeroChewbacca5": 1,
					"troopWookie6": 3,
					"troopMedic6": 1,
					"troopAAT16": 2,
					"troopPathfinder6": 4,
					"troopHeavyRebel6": 2,
					"troopSoldier5": 2
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 94,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 25,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth3",
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelHQHealth4",
					"eqpRebelRapidFireTurretDamage1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "0e668034-0d2c-11e7-9fcf-06033c004f77",
				"attacker": {
					"playerId": "b73613db-583e-11e6-ab5a-069da4004f8b",
					"name": "Master Obi-wan",
					"faction": "rebel",
					"guildId": "296ed84b-e310-11e5-9a6b-06a77e004fbb",
					"guildName": "Wookie-Clan",
					"attackRating": 4125,
					"attackRatingDelta": 7,
					"defenseRating": -1285,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1759,
					"attackRatingDelta": 0,
					"defenseRating": -857,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1489986987,
				"looted": {
					"materials": 17550,
					"credits": 13358
				},
				"earned": {
					"contraband": 0,
					"materials": 18550,
					"credits": 14358
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 17516,
					"materials": 18550
				},
				"troopsExpended": {
					"troopHeroChewbacca7": 1,
					"troopMedic7": 4,
					"troopHeavyRebel7": 5,
					"troopSoldier6": 11
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopDewback4": 3,
					"troopDark5": 1,
					"troopStorm5": 3
				},
				"baseDamagePercent": 89,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth7",
					"eqpRebelWallHealth7",
					"eqpRebelRapidFireTurretDamage3",
					"eqpRebelRapidFireTurretHealth3",
					"eqpRebelCreditGeneratorHealth6",
					"eqpRebelMaterialsGeneratorHealth7"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "98ecc401-0d8e-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1746,
					"attackRatingDelta": -13,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "2ee0c5a1-e6aa-11e6-a0d9-061c98004f78",
					"name": "кемеровский",
					"faction": "rebel",
					"guildId": "cbed720e-d4d4-11e6-994c-06dc8c004fbd",
					"guildName": "ITA-%5bFF0000%5dWAR",
					"attackRating": 691,
					"attackRatingDelta": 0,
					"defenseRating": -50,
					"defenseRatingDelta": 16,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490029309,
				"looted": {
					"materials": 29050,
					"credits": 11318
				},
				"earned": {
					"materials": 29050,
					"credits": 11318
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 33318,
					"materials": 32570
				},
				"troopsExpended": {
					"troopStorm5": 5,
					"troopATST4": 1,
					"troopDark5": 3,
					"troopDewback4": 5,
					"troopHeroCrimsonGuard4": 1,
					"troop2MTank4": 1,
					"specialAttackTieFighter3": 3
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 47,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "7350d15d-0d8f-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1753,
					"attackRatingDelta": 7,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "501d57df-889a-11e6-932d-063864004f75",
					"name": "Khan",
					"faction": "rebel",
					"guildId": "41fe89f3-45cd-11e4-93fb-06e6ee004fbc",
					"guildName": "ouest",
					"attackRating": 708,
					"attackRatingDelta": 0,
					"defenseRating": -705,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490029680,
				"looted": {
					"contraband": 0,
					"materials": 28222,
					"credits": 39850
				},
				"earned": {
					"contraband": 0,
					"materials": 29222,
					"credits": 40850
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 49850,
					"materials": 42044
				},
				"troopsExpended": {
					"troopATST4": 1,
					"troopStorm5": 8,
					"troopDark5": 3,
					"troopDewback4": 4,
					"troop2MTank4": 1,
					"troopHeroATST5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 78,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [
					"eqpRebelHQHealth4",
					"eqpRebelSandSoldier1",
					"eqpRebelRapidFireTurretHealth2"
				],
				"planetId": "planet1"
			},
			{
				"battleId": "f9da7eee-0d8f-11e7-ba0b-060a32004f8c",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1742,
					"attackRatingDelta": -11,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "31c5588f-da7e-11e6-994c-06dc8c004fbd",
					"name": "graywolf",
					"faction": "rebel",
					"guildId": "1bd73aa7-6379-11e4-be18-06e6ee004fbc",
					"guildName": "BavarianCommando",
					"attackRating": 1072,
					"attackRatingDelta": 0,
					"defenseRating": -125,
					"defenseRatingDelta": 13,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490029832,
				"looted": {
					"materials": 86
				},
				"earned": {
					"materials": 86
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 13616,
					"materials": 54425
				},
				"troopsExpended": {
					"troopStorm5": 3,
					"troop2MTank4": 1,
					"troopDark5": 6,
					"troopHeroATMP5": 1,
					"troopATMP4": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 23,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 13,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [
					"eqpRebelHQHealth1"
				],
				"planetId": "planet1"
			},
			{
				"battleId": "d7d03e98-0d90-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1749,
					"attackRatingDelta": 7,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "f53f1721-d740-11e6-95c1-063864004f75",
					"name": "Barry",
					"faction": "rebel",
					"guildId": "46ded9fe-c50b-11e5-8c56-06dc8c004fbd",
					"guildName": "froggy_power",
					"attackRating": 778,
					"attackRatingDelta": 0,
					"defenseRating": -366,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490030269,
				"looted": {
					"credits": 26100,
					"materials": 48128
				},
				"earned": {
					"contraband": 0,
					"credits": 27100,
					"materials": 49128
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 27100,
					"materials": 49128
				},
				"troopsExpended": {
					"troopDark5": 5,
					"troopHeroCrimsonGuard4": 1,
					"troopATMP4": 1,
					"troopStorm5": 7,
					"troop2MTank4": 1,
					"specialAttackTieFighter3": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {
					"troopSoldier5": 4
				},
				"baseDamagePercent": 73,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "8698d01a-0d91-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1756,
					"attackRatingDelta": 7,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "92d42567-bdf6-11e6-aa77-063864004f75",
					"name": "vampire",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 147,
					"attackRatingDelta": 0,
					"defenseRating": -146,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490030561,
				"looted": {
					"materials": 9935,
					"credits": 17979
				},
				"earned": {
					"contraband": 0,
					"materials": 10935,
					"credits": 18979
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 24358,
					"materials": 25070
				},
				"troopsExpended": {
					"troopStorm5": 7,
					"troopDark5": 5,
					"troop2MTank4": 1,
					"troopATMP4": 1,
					"troopHeroATST5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 74,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "514370f2-0d92-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1763,
					"attackRatingDelta": 7,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "6303f553-6641-11e6-befe-06a77e004fbb",
					"name": "thor64",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 726,
					"attackRatingDelta": 0,
					"defenseRating": -725,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490030902,
				"looted": {
					"contraband": 0,
					"materials": 6459,
					"credits": 10950
				},
				"earned": {
					"contraband": 0,
					"materials": 7459,
					"credits": 11950
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 11950,
					"materials": 7459
				},
				"troopsExpended": {
					"troopDark5": 5,
					"troop2MTank4": 1,
					"troopHeroATMP5": 1,
					"troopATMP4": 1,
					"troopStorm5": 7
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 99,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [
					"eqpRebelHQHealth1"
				],
				"planetId": "planet1"
			},
			{
				"battleId": "0af548f8-0d93-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1770,
					"attackRatingDelta": 7,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "aaa3afe0-a415-11e4-bbf3-06e6ee004fbc",
					"name": "captain gunner4",
					"faction": "rebel",
					"guildId": "ab7076dd-21cb-11e5-a742-06e6ee004fbc",
					"guildName": "EnglishRebels",
					"attackRating": 197,
					"attackRatingDelta": 0,
					"defenseRating": 224,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490031217,
				"looted": {
					"materials": 28988,
					"credits": 29478
				},
				"earned": {
					"contraband": 0,
					"materials": 29988,
					"credits": 30478
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 36478,
					"materials": 50988
				},
				"troopsExpended": {
					"troopHeroCrimsonGuard4": 1,
					"troopDark5": 5,
					"troopATMP4": 1,
					"troop2MTank4": 1,
					"troopStorm5": 7,
					"specialAttackTieFighter3": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 55,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "c3a4f290-0d93-11e7-9902-06cb44004f79",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1773,
					"attackRatingDelta": 3,
					"defenseRating": -857,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "cd4cd6ea-c96a-11e6-81ff-069da4004f8b",
					"name": "Pug",
					"faction": "rebel",
					"guildId": "c3286883-bd95-11e5-99f7-06cb44004f79",
					"guildName": "MetalMozilla",
					"attackRating": 1074,
					"attackRatingDelta": 0,
					"defenseRating": -516,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490031524,
				"looted": {
					"materials": 16763,
					"credits": 15658
				},
				"earned": {
					"materials": 16763,
					"credits": 15658
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 18774,
					"materials": 18326
				},
				"troopsExpended": {
					"troopStorm5": 7,
					"troopDark5": 5,
					"troopATMP4": 1,
					"troop2MTank4": 1,
					"troopHeroATST5": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 61,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 18,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "1ef32cba-0d99-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "3d258b7c-6f77-11e5-96d2-06e6ee004fbc",
					"name": "sawyer",
					"faction": "rebel",
					"guildId": "73314b36-695e-11e4-b32e-06dc8c004fbd",
					"guildName": "Craiggors",
					"attackRating": 7857,
					"attackRatingDelta": 7,
					"defenseRating": -3805,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1773,
					"attackRatingDelta": 0,
					"defenseRating": -864,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490033795,
				"looted": {
					"credits": 8673,
					"materials": 29128
				},
				"earned": {
					"contraband": 0,
					"credits": 9673,
					"materials": 30128
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 9673,
					"materials": 30128
				},
				"troopsExpended": {
					"troopSoldier8": 6,
					"troopMedic8": 3,
					"troopHeavyRebel7": 1,
					"troopVanguard7": 2,
					"troopAAT17": 1,
					"troopHailfire8": 1,
					"troopHeroChewbacca7": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 94,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 31,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelSandSoldier1",
					"eqpRebelWallHealth1",
					"eqpRebelHQHealth1",
					"eqpRebelCreditGeneratorHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "88a6f113-0dab-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1776,
					"attackRatingDelta": 3,
					"defenseRating": -864,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "948bb54a-f120-11e6-9524-06cb44004f79",
					"name": "safo",
					"faction": "rebel",
					"guildId": "51d27811-a581-11e5-99f7-06cb44004f79",
					"guildName": "ITACOMBATTENTI",
					"attackRating": 1238,
					"attackRatingDelta": 0,
					"defenseRating": -187,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490041703,
				"looted": {
					"materials": 9757,
					"credits": 2383
				},
				"earned": {
					"materials": 9757,
					"credits": 2383
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 25684,
					"materials": 37208
				},
				"troopsExpended": {
					"troopHeroCrimsonGuard4": 1,
					"troopDark5": 5,
					"troopATMP4": 1,
					"troop2MTank4": 1,
					"troopStorm5": 7,
					"specialAttackTieFighter3": 3
				},
				"attackerGuildTroopsExpended": {
					"troop2MTank4": 1,
					"troopDewback4": 1,
					"troopStorm5": 3
				},
				"defenderGuildTroopsExpended": {
					"troopSoldier7": 4,
					"troopSoldier5": 4,
					"troopSoldier6": 1
				},
				"baseDamagePercent": 59,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 13,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "3f4016df-0dac-11e7-8d08-061c98004f78",
				"attacker": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": -15,
					"defenseRating": -864,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "1fcf2acb-5206-11e5-afd8-06a77e004fbb",
					"name": "kakapeng",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 255,
					"attackRatingDelta": 0,
					"defenseRating": 345,
					"defenseRatingDelta": 12,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490042006,
				"looted": {
					"credits": 14453,
					"materials": 6048
				},
				"earned": {
					"credits": 14453,
					"materials": 6048
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 22010,
					"materials": 22168
				},
				"troopsExpended": {
					"troopDark5": 5,
					"troop2MTank4": 1,
					"troopHeroATMP5": 1,
					"troopATMP4": 1,
					"troopStorm5": 7,
					"specialAttackTieFighter3": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 46,
				"stars": 0,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 6,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "42d359ec-0dad-11e7-999d-069da4004f8b",
				"attacker": {
					"playerId": "54dc03c8-fde2-11e6-8bc5-060a32004f8c",
					"name": "Cricrirebelle",
					"faction": "rebel",
					"guildId": "3f16149e-4ea5-11e5-a39c-06a77e004fbb",
					"guildName": "totoro7228",
					"attackRating": 1421,
					"attackRatingDelta": 7,
					"defenseRating": -51,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -871,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490042487,
				"looted": {
					"materials": 21985,
					"credits": 7107
				},
				"earned": {
					"contraband": 0,
					"materials": 22985,
					"credits": 8107
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 8107,
					"materials": 22985
				},
				"troopsExpended": {
					"troopSoldier6": 26,
					"troopHeroLeia6": 1,
					"troopMedic4": 2
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 93,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 19,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelHQHealth2",
					"eqpRebelContrabandGeneratorHealth2",
					"eqpRebelCreditGeneratorHealth2",
					"eqpRebelWallHealth1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "5c1e01e9-0e12-11e7-b35e-06e6ee004fbc",
				"attacker": {
					"playerId": "c7829c5e-9914-11e6-b5d4-06033c004f77",
					"name": "carbin",
					"faction": "rebel",
					"guildId": "fa43e2cc-e586-11e6-9f6e-063864004f75",
					"guildName": "HappyTogether_kr",
					"attackRating": 7047,
					"attackRatingDelta": 11,
					"defenseRating": -331,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -882,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490085845,
				"looted": {
					"materials": 33564,
					"credits": 21094
				},
				"earned": {
					"contraband": 0,
					"materials": 34564,
					"credits": 22094
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 22094,
					"materials": 34564
				},
				"troopsExpended": {
					"troopHeavyRebel8": 4,
					"troopMedic7": 1,
					"troopSoldier8": 15,
					"troopMarksman6": 1,
					"troopHeroLeia6": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 33,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMortarTurretDamage3",
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelBurstTurretDamage3"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "5077ddf8-0e98-11e7-9236-063864004f75",
				"attacker": {
					"playerId": "c6f044b6-eae6-11e4-9fd2-06e6ee004fbc",
					"name": "yolo",
					"faction": "rebel",
					"guildId": null,
					"guildName": null,
					"attackRating": 11518,
					"attackRatingDelta": 11,
					"defenseRating": -2743,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -893,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490143420,
				"looted": {
					"credits": 19996,
					"materials": 30092
				},
				"earned": {
					"contraband": 0,
					"credits": 20996,
					"materials": 31092
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 20996,
					"materials": 31092
				},
				"troopsExpended": {
					"troopHeavyRebel8": 1,
					"troopMedic8": 1,
					"troopJuggernaut9": 1,
					"troopSoldier9": 15
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 36,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelMaterialsGeneratorHealth4",
					"eqpRebelWallHealth5",
					"eqpRebelSandSoldier2",
					"eqpRebelContrabandGeneratorHealth4",
					"eqpRebelCreditGeneratorHealth4",
					"eqpRebelHQHealth6"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "687590a1-0f1e-11e7-aaca-06c66a004f76",
				"attacker": {
					"playerId": "191e971e-e918-11e5-8ce3-06cb44004f79",
					"name": "KON",
					"faction": "rebel",
					"guildId": "a3b8eb5a-358b-11e6-8a59-06a77e004fbb",
					"guildName": "KON",
					"attackRating": 2734,
					"attackRatingDelta": 15,
					"defenseRating": -2217,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -908,
					"defenseRatingDelta": -15,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490201008,
				"looted": {
					"materials": 27312,
					"credits": 19116
				},
				"earned": {
					"contraband": 0,
					"materials": 28312,
					"credits": 20116
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 20116,
					"materials": 28312
				},
				"troopsExpended": {
					"troopMercenaryRebelGamorreanWarrior2": 3,
					"troopSoldier7": 24
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 15,
				"defenderPotentialMedalGain": 15,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelSandSoldier2",
					"eqpRebelRapidFireTurretHealth4",
					"eqpRebelWallHealth5"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "d9184905-0fa4-11e7-bb9b-06033c004f77",
				"attacker": {
					"playerId": "0c6fa072-dbe3-11e6-95c1-063864004f75",
					"name": "RAZORBACK13",
					"faction": "rebel",
					"guildId": "637aaef1-f278-11e5-a0f4-06a77e004fbb",
					"guildName": "Goose",
					"attackRating": 5259,
					"attackRatingDelta": 3,
					"defenseRating": -910,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -911,
					"defenseRatingDelta": -3,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490258746,
				"looted": {
					"credits": 15600,
					"materials": 20645
				},
				"earned": {
					"contraband": 0,
					"credits": 15780,
					"materials": 20825
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19414,
					"materials": 26090
				},
				"troopsExpended": {
					"troopSoldier5": 19,
					"troopJuggernaut5": 1,
					"troopAAT15": 2
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 67,
				"stars": 1,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 28,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelWallHealth4",
					"eqpRebelRapidFireTurretHealth1",
					"eqpRebelSandSoldier1"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "a8f57591-0fe7-11e7-85e1-06dc8c004fbd",
				"attacker": {
					"playerId": "38b11d47-9d4e-11e6-a53e-06cb44004f79",
					"name": "zsadam",
					"faction": "rebel",
					"guildId": "0097ea57-cd93-11e4-adac-06a77e004fbb",
					"guildName": "JoinSuperForce",
					"attackRating": 1624,
					"attackRatingDelta": 7,
					"defenseRating": -543,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -918,
					"defenseRatingDelta": -7,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490287466,
				"looted": {
					"credits": 18414,
					"materials": 24202
				},
				"earned": {
					"contraband": 0,
					"credits": 19414,
					"materials": 25202
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 19414,
					"materials": 25202
				},
				"troopsExpended": {
					"troopHeroChewbacca5": 1,
					"troopWookie5": 3,
					"troopMedic5": 1,
					"troopT2BTank5": 4,
					"troopSoldier6": 10,
					"troopRebelSpeeder4": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 89,
				"stars": 2,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 16,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelSandSoldier2",
					"eqpRebelHQHealth4",
					"eqpRebelWallHealth4"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			},
			{
				"battleId": "9461b731-104c-11e7-a8ec-069da4004f8b",
				"attacker": {
					"playerId": "c11967e6-b89e-11e6-8e5c-06cb44004f79",
					"name": "lex",
					"faction": "rebel",
					"guildId": "1bd73aa7-6379-11e4-be18-06e6ee004fbc",
					"guildName": "BavarianCommando",
					"attackRating": 3114,
					"attackRatingDelta": 11,
					"defenseRating": -204,
					"defenseRatingDelta": 0,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"defender": {
					"playerId": "9fade00d-d859-11e6-b64c-06a77e004fbb",
					"name": "BkeII",
					"faction": "empire",
					"guildId": "568c7e7c-9ddd-11e6-abea-06c66a004f76",
					"guildName": "fcuk",
					"attackRating": 1761,
					"attackRatingDelta": 0,
					"defenseRating": -929,
					"defenseRatingDelta": -11,
					"tournamentRating": 0,
					"tournamentRatingDelta": 0
				},
				"missionId": null,
				"attackDate": 1490330801,
				"looted": {
					"credits": 17850,
					"materials": 22602
				},
				"earned": {
					"contraband": 0,
					"credits": 18850,
					"materials": 23602
				},
				"maxLootable": {
					"contraband": 0,
					"credits": 18850,
					"materials": 23602
				},
				"troopsExpended": {
					"troopJuggernaut7": 1,
					"troopHeroChewbacca6": 1,
					"troopMedic6": 3,
					"troopMarksman5": 1,
					"troopHeavyRebel7": 7,
					"specialAttackXWing6": 5,
					"specialAttackZ951": 1
				},
				"attackerGuildTroopsExpended": {},
				"defenderGuildTroopsExpended": {},
				"baseDamagePercent": 100,
				"stars": 3,
				"manifestVersion": 117,
				"potentialMedalGain": 11,
				"defenderPotentialMedalGain": 27,
				"revenged": false,
				"battleVersion": "21.0",
				"cmsVersion": "1813122029",
				"server": false,
				"attackerEquipment": [
					"eqpRebelRapidFireTurretDamage2",
					"eqpRebelHQHealth5",
					"eqpRebelMaterialsGeneratorHealth4",
					"eqpRebelSandSoldier2"
				],
				"defenderEquipment": [],
				"planetId": "planet1"
			}
		],
		"campaigns": {
			"cmp_fue": {
				"uid": "cmp_fue",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"sw_hth_outposts": {
				"uid": "sw_hth_outposts",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_0_hb_e": {
				"uid": "cmp_0_hb_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_1_utts_e": {
				"uid": "cmp_1_utts_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_2_tsw_e": {
				"uid": "cmp_2_tsw_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_3_tjg_e": {
				"uid": "cmp_3_tjg_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_4_sotm_e": {
				"uid": "cmp_4_sotm_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_5_tih_e": {
				"uid": "cmp_5_tih_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_7_bs_e": {
				"uid": "cmp_7_bs_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_8_tat_e": {
				"uid": "cmp_8_tat_e",
				"timeZone": 0,
				"completed": true,
				"collected": true,
				"points": 0,
				"items": {}
			},
			"cmp_9_sas_e": {
				"uid": "cmp_9_sas_e",
				"timeZone": 0,
				"completed": true,
				"collected": false,
				"points": 0,
				"items": {}
			},
			"cmp_10_bgh_e": {
				"uid": "cmp_10_bgh_e",
				"timeZone": 0,
				"completed": false,
				"collected": false,
				"points": 0,
				"items": {}
			}
		},
		"missions": {
			"fue_defendBaseMission_00": {
				"uid": "fue_defendBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c2cc3312-d859-11e6-b64c-06a77e004fbb",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHalfBuildings",
					"RetainHQ",
					"AvoidCompleteLoss"
				],
				"grindMissionRetries": 0
			},
			"fue_impIntroBaseMission_00": {
				"uid": "fue_impIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "fc05dbe0-d859-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"fue_rebIntroBaseMission_00": {
				"uid": "fue_rebIntroBaseMission_00",
				"campaignUid": "cmp_fue",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "26eaff48-d85a-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 1058,
					"materials": 1000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"sw_hth_outpost_s_1": {
				"uid": "sw_hth_outpost_s_1",
				"campaignUid": "sw_hth_outposts",
				"status": "Default",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_1": {
				"uid": "camp_1_utts_e_1",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9a65fcad-d85a-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2": {
				"uid": "camp_1_utts_e_2",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "7e8ca9d7-d85b-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_2a": {
				"uid": "camp_1_utts_e_2a",
				"campaignUid": "cmp_0_hb_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "0d0dae67-d85c-11e6-8255-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_3": {
				"uid": "camp_1_utts_e_3",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_Wall_T1_25"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_4": {
				"uid": "camp_1_utts_e_4",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "c4c42b74-d85c-11e6-8255-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_5": {
				"uid": "camp_1_utts_e_5",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT2EmpStarport"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_6": {
				"uid": "camp_1_utts_e_6",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "b234f83f-d85e-11e6-a59f-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_7": {
				"uid": "camp_1_utts_e_7",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2EmpCreGen"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_9": {
				"uid": "camp_1_utts_e_9",
				"campaignUid": "cmp_1_utts_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "22f4093a-d85f-11e6-a59f-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 518,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_1_utts_e_10": {
				"uid": "camp_1_utts_e_10",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own4Turrets"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_1": {
				"uid": "camp_2_tsw_e_1",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "a6e49647-d85f-11e6-a59f-060a32004f8c",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_2": {
				"uid": "camp_2_tsw_e_2",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T1EmpFactory"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_3": {
				"uid": "camp_2_tsw_e_3",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "ec575d2a-d85f-11e6-a59f-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 500,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_4": {
				"uid": "camp_2_tsw_e_4",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpCredGen"
				],
				"grindMissionRetries": 0
			},
			"camp_2_tsw_e_5": {
				"uid": "camp_2_tsw_e_5",
				"campaignUid": "cmp_2_tsw_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "6100c8a9-d860-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_1": {
				"uid": "camp_3_tjg_e_1",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "e1d6f5d2-d860-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_2": {
				"uid": "camp_3_tjg_e_2",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpBarracks"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_3": {
				"uid": "camp_3_tjg_e_3",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "16a66658-d861-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 500,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_4": {
				"uid": "camp_3_tjg_e_4",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "79e7a436-d861-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_5": {
				"uid": "camp_3_tjg_e_5",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own1T2EmpMatStor"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_6": {
				"uid": "camp_3_tjg_e_6",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "c9ef01e1-d861-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_7": {
				"uid": "camp_3_tjg_e_7",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own2T2EmpRFTurrets"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_8": {
				"uid": "camp_3_tjg_e_8",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "242f68bc-d862-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_9": {
				"uid": "camp_3_tjg_e_9",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnT3EmpHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_3_tjg_e_10": {
				"uid": "camp_3_tjg_e_10",
				"campaignUid": "cmp_3_tjg_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "c8b50bde-d86a-11e6-8705-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"Kill_TuskenHero_t1_1",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_1": {
				"uid": "camp_4_sotm_e_1",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMortar_T1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_2": {
				"uid": "camp_4_sotm_e_2",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireBarracks_T3_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_3": {
				"uid": "camp_4_sotm_e_3",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "851abe40-d91d-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_4": {
				"uid": "camp_4_sotm_e_4",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5cf38cc2-d91e-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_5": {
				"uid": "camp_4_sotm_e_5",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "29928302-d91f-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_6": {
				"uid": "camp_4_sotm_e_6",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "94a5dbbd-d91f-11e6-8705-061c98004f78",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_7": {
				"uid": "camp_4_sotm_e_7",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_turret_t1_6"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_8": {
				"uid": "camp_4_sotm_e_8",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_wall_t1_40"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_9": {
				"uid": "camp_4_sotm_e_9",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_10": {
				"uid": "camp_4_sotm_e_10",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_starport_t2_2"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_11": {
				"uid": "camp_4_sotm_e_11",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1590116e-d921-11e6-8705-061c98004f78",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_12": {
				"uid": "camp_4_sotm_e_12",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "a917e65a-d922-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_13": {
				"uid": "camp_4_sotm_e_13",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "f7ee173c-d922-11e6-b64c-06a77e004fbb",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_4_sotm_e_14": {
				"uid": "camp_4_sotm_e_14",
				"campaignUid": "cmp_4_sotm_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "b73f4b9f-d923-11e6-b64c-06a77e004fbb",
				"lootRemaining": {
					"credits": 0,
					"materials": 1000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_1": {
				"uid": "camp_5_tih_e_1",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireMaterialsGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_2": {
				"uid": "camp_5_tih_e_2",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireOffenseLab_t1_1"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_3": {
				"uid": "camp_5_tih_e_3",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "6cd4f7c7-da94-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 0,
					"materials": 2000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_4": {
				"uid": "camp_5_tih_e_4",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_12_t3_walls"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_5": {
				"uid": "camp_5_tih_e_5",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5b01ce0d-db8f-11e6-ba7c-069da4004f8b",
				"lootRemaining": {
					"credits": 1000,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_6": {
				"uid": "camp_5_tih_e_6",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "bfa50d62-db8f-11e6-ba45-06033c004f77",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_7": {
				"uid": "camp_5_tih_e_7",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireCreditGenerator_t3_3"
				],
				"grindMissionRetries": 0
			},
			"camp_5_tih_e_8": {
				"uid": "camp_5_tih_e_8",
				"campaignUid": "cmp_5_tih_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "5d360201-db91-11e6-ba45-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_1": {
				"uid": "chapter_7_bs_e_1",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "66ef5e25-db92-11e6-ba45-06033c004f77",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_2": {
				"uid": "chapter_7_bs_e_2",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "4f4c8873-db93-11e6-95c1-063864004f75",
				"lootRemaining": {
					"credits": 2100,
					"materials": 2100,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Kill_infantry_t1_10",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_3": {
				"uid": "chapter_7_bs_e_3",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "7751a1dd-db94-11e6-95c1-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_4": {
				"uid": "chapter_7_bs_e_4",
				"campaignUid": "cmp_7_bs_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireHQ_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_5": {
				"uid": "chapter_7_bs_e_5",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "05b5d473-dd0b-11e6-994c-06dc8c004fbd",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyQuarterBuildings",
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_6": {
				"uid": "chapter_7_bs_e_6",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_7": {
				"uid": "chapter_7_bs_e_7",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "889e8a16-dd12-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_8": {
				"uid": "chapter_7_bs_e_8",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "e8fc5790-dd12-11e6-8b53-06e6ee004fbc",
				"lootRemaining": {
					"credits": 2400,
					"materials": 2400,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"Kill_infantry_t1_5",
					"Destroy_rebelTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_9": {
				"uid": "chapter_7_bs_e_9",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f067bc8f-e649-11e6-8432-06c66a004f76",
				"lootRemaining": {
					"credits": 2600,
					"materials": 2600,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"Kill_infantry_t1_5",
					"Destroy_rebelTacticalCommand_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_10": {
				"uid": "chapter_7_bs_e_10",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2e1e6704-dd2d-11e6-b769-060a32004f8c",
				"lootRemaining": {
					"credits": 0,
					"materials": 1946,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"Kill_infantry_t1_5"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_11": {
				"uid": "chapter_7_bs_e_11",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "6cb5404a-dd18-11e6-ba45-06033c004f77",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_12": {
				"uid": "chapter_7_bs_e_12",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireOffenseLab_t2_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_13": {
				"uid": "chapter_7_bs_e_13",
				"campaignUid": "cmp_7_bs_e",
				"status": "Completed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireTacticalCommand_t2_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_7_bs_e_14": {
				"uid": "chapter_7_bs_e_14",
				"campaignUid": "cmp_7_bs_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "9894682c-e64a-11e6-8432-06c66a004f76",
				"lootRemaining": {
					"credits": 2800,
					"materials": 3800,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyAllBuildings",
					"DestroyHQ",
					"Kill_infantry_t1_8"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_1": {
				"uid": "chapter_8_tat_e_1",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "27e4da42-ddd9-11e6-b64c-06a77e004fbb",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_2": {
				"uid": "chapter_8_tat_e_2",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2fd35259-e64c-11e6-9b37-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 1940,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_3": {
				"uid": "chapter_8_tat_e_3",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_starport_t4_2"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_4": {
				"uid": "chapter_8_tat_e_4",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f99fb9bc-e5d8-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_5": {
				"uid": "chapter_8_tat_e_5",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "d6692e67-e5d9-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 8000,
					"materials": 8000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_6": {
				"uid": "chapter_8_tat_e_6",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "aea5ee4b-e5da-11e6-9f6e-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_7": {
				"uid": "chapter_8_tat_e_7",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_barracks_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_8": {
				"uid": "chapter_8_tat_e_8",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "8d93a1c1-e5db-11e6-9f6e-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 7000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_9": {
				"uid": "chapter_8_tat_e_9",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "55a9b63b-e5dc-11e6-9f6e-063864004f75",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_10": {
				"uid": "chapter_8_tat_e_10",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "2361e516-e5dd-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_11": {
				"uid": "chapter_8_tat_e_11",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "06cc47a5-e5de-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_12": {
				"uid": "chapter_8_tat_e_12",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "75779405-e5de-11e6-96c8-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_8_tat_e_13": {
				"uid": "chapter_8_tat_e_13",
				"campaignUid": "cmp_8_tat_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "e085474f-e5de-11e6-96c8-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_1": {
				"uid": "chapter_9_sas_e_1",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireFactory_t4_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_2": {
				"uid": "chapter_9_sas_e_2",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "6a3c8f30-e5df-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_3": {
				"uid": "chapter_9_sas_e_3",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_4": {
				"uid": "chapter_9_sas_e_4",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "9626aa13-e5e0-11e6-96c8-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_5": {
				"uid": "chapter_9_sas_e_5",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Own_empireBarracks_t4_3"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_6": {
				"uid": "chapter_9_sas_e_6",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "3bc7d12f-e64d-11e6-9b37-06cb44004f79",
				"lootRemaining": {
					"credits": 0,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_7": {
				"uid": "chapter_9_sas_e_7",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "e471fdcf-e695-11e6-96c8-069da4004f8b",
				"lootRemaining": {
					"credits": 0,
					"materials": 531,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_8": {
				"uid": "chapter_9_sas_e_8",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": "8da01400-e696-11e6-96c8-069da4004f8b",
				"lootRemaining": {},
				"satisfiedGoals": [
					"RetainHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_9": {
				"uid": "chapter_9_sas_e_9",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "85073473-e69b-11e6-a0d9-061c98004f78",
				"lootRemaining": {
					"credits": 8000,
					"materials": 8000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_10": {
				"uid": "chapter_9_sas_e_10",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {
					"Pvp_win_1": 1
				},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"Pvp_win_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_11": {
				"uid": "chapter_9_sas_e_11",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 1,
				"counters": {},
				"goals": 3,
				"lastBattleId": "0d2ee99a-e6a1-11e6-843f-060a32004f8c",
				"lootRemaining": {
					"credits": 1000,
					"materials": 1000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_9_sas_e_12": {
				"uid": "chapter_9_sas_e_12",
				"campaignUid": "cmp_9_sas_e",
				"status": "Claimed",
				"earnedStars": 2,
				"counters": {},
				"goals": 3,
				"lastBattleId": "4b14e24b-0d94-11e7-9902-06cb44004f79",
				"lootRemaining": {
					"credits": 7000,
					"materials": 7000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"Destroy_storyRebShieldGen1",
					"Kill_hero_OtoVans4"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_1": {
				"uid": "chapter_10_bgh_e_1",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnEmpireRocketTurret1_2"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_2": {
				"uid": "chapter_10_bgh_e_2",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "40872dd5-e6a2-11e6-843f-060a32004f8c",
				"lootRemaining": {
					"credits": 3722,
					"materials": 9000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"kill_hero_t1_1",
					"DestroyAllBuildings",
					"kill_vehicle_t1_1"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_3": {
				"uid": "chapter_10_bgh_e_3",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "1415f68b-e6a3-11e6-843f-060a32004f8c",
				"lootRemaining": {
					"credits": 3544,
					"materials": 0,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings",
					"DestroyHQ"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_4": {
				"uid": "chapter_10_bgh_e_4",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 3,
				"lastBattleId": "f0ba952e-0d94-11e7-9902-06cb44004f79",
				"lootRemaining": {
					"credits": 8000,
					"materials": 8000,
					"contraband": 0
				},
				"satisfiedGoals": [
					"DestroyHalfBuildings",
					"DestroyAllBuildings"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_5": {
				"uid": "chapter_10_bgh_e_5",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Claimed",
				"earnedStars": 3,
				"counters": {},
				"goals": 1,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [
					"OwnHQ5"
				],
				"grindMissionRetries": 0
			},
			"chapter_10_bgh_e_6": {
				"uid": "chapter_10_bgh_e_6",
				"campaignUid": "cmp_10_bgh_e",
				"status": "Default",
				"earnedStars": 0,
				"counters": {},
				"goals": 3,
				"lastBattleId": null,
				"lootRemaining": {},
				"satisfiedGoals": [],
				"grindMissionRetries": 0
			}
		},
		"tournaments": {},
		"isFueInProgress": false,
		"DamagedBuildings": {
			"bld_97": 100,
			"bld_117": 100,
			"bld_71": 100,
			"bld_88": 100,
			"bld_56": 100,
			"bld_78": 100,
			"bld_72": 100,
			"bld_57": 100,
			"bld_87": 100,
			"bld_21": 100,
			"bld_69": 100,
			"bld_118": 100,
			"bld_104": 100,
			"bld_74": 100,
			"bld_98": 100,
			"bld_148": 100,
			"bld_142": 100,
			"bld_75": 100,
			"bld_23": 100,
			"bld_101": 100,
			"bld_77": 100,
			"bld_22": 100,
			"bld_24": 100,
			"bld_60": 100,
			"bld_1": 100,
			"bld_13": 100,
			"bld_143": 100,
			"bld_73": 100,
			"bld_14": 100,
			"bld_89": 100,
			"bld_52": 100,
			"bld_54": 100,
			"bld_105": 100,
			"bld_103": 100,
			"bld_15": 100,
			"bld_76": 100,
			"bld_16": 100,
			"bld_17": 100,
			"bld_114": 100,
			"bld_115": 100,
			"bld_9": 100,
			"bld_7": 100,
			"bld_53": 100,
			"bld_18": 100,
			"bld_19": 100,
			"bld_58": 100,
			"bld_61": 100,
			"bld_20": 100,
			"bld_55": 100,
			"bld_137": 100,
			"bld_102": 100,
			"bld_90": 100,
			"bld_65": 100,
			"bld_144": 100,
			"bld_136": 100,
			"bld_3": 100,
			"bld_59": 100,
			"bld_25": 100,
			"bld_26": 100,
			"bld_67": 81,
			"bld_11": 0,
			"bld_66": 15,
			"bld_82": 0,
			"bld_140": 0,
			"bld_157": 0,
			"bld_156": 32,
			"bld_155": 0,
			"bld_64": 0,
			"bld_86": 0,
			"bld_2": 0,
			"bld_62": 54,
			"bld_84": 28,
			"bld_83": 54,
			"bld_79": 0,
			"bld_160": 0,
			"bld_8": 0,
			"bld_70": 0,
			"bld_6": 0,
			"bld_5": 0,
			"bld_106": 9,
			"bld_113": 0,
			"bld_112": 0,
			"bld_4": 0,
			"bld_85": 0,
			"bld_63": 0,
			"bld_12": 0,
			"bld_10": 5,
			"bld_110": 0,
			"bld_141": 0,
			"bld_81": 75,
			"bld_80": 0,
			"bld_111": 0,
			"bld_107": 0,
			"bld_68": 0,
			"bld_109": 0,
			"bld_108": 0,
			"bld_154": 0,
			"bld_153": 0,
			"bld_159": 9,
			"bld_158": 0,
			"bld_138": 0,
			"bld_139": 0,
			"bld_116": 0,
			"bld_91": 0
		},
		"deviceInfo": {},
		"timeZoneOffset": -5,
		"contracts": [
			{
				"uid": "troopStorm5",
				"endTime": 1490042056,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042056,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042056,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042081,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042106,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042106,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042106,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042131,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042156,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042156,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042156,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042181,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troop2MTank4",
				"endTime": 1490042183,
				"contractType": "Troop",
				"buildingId": "bld_136",
				"perkIds": []
			},
			{
				"uid": "troopATMP4",
				"endTime": 1490042197,
				"contractType": "Troop",
				"buildingId": "bld_60",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042206,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042206,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042206,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042231,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042256,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042256,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042256,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopHeroCrimsonGuard4",
				"endTime": 1490042269,
				"contractType": "Hero",
				"buildingId": "bld_97",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042281,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042306,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042306,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042306,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042331,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042356,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042356,
				"contractType": "Troop",
				"buildingId": "bld_56",
				"perkIds": []
			},
			{
				"uid": "troopDark5",
				"endTime": 1490042356,
				"contractType": "Troop",
				"buildingId": "bld_71",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042381,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042406,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troop2MTank4",
				"endTime": 1490042423,
				"contractType": "Troop",
				"buildingId": "bld_136",
				"perkIds": []
			},
			{
				"uid": "specialAttackTieFighter3",
				"endTime": 1490042423,
				"contractType": "SpecialAttack",
				"buildingId": "bld_137",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042431,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042456,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042481,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042506,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042531,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042556,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042581,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042606,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042631,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042656,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042681,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042706,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042731,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042756,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042781,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "troopStorm5",
				"endTime": 1490042806,
				"contractType": "Troop",
				"buildingId": "bld_105",
				"perkIds": []
			},
			{
				"uid": "specialAttackTieFighter3",
				"endTime": 1490043143,
				"contractType": "SpecialAttack",
				"buildingId": "bld_137",
				"perkIds": []
			},
			{
				"uid": "specialAttackTieFighter3",
				"endTime": 1490043863,
				"contractType": "SpecialAttack",
				"buildingId": "bld_137",
				"perkIds": []
			},
			{
				"uid": "empireTrapStrikeAOE4",
				"endTime": 1490073530,
				"contractType": "Upgrade",
				"buildingId": "bld_138",
				"perkIds": []
			},
			{
				"uid": "empireTrapStrikeAOE4",
				"endTime": 1490085238,
				"contractType": "Upgrade",
				"buildingId": "bld_139",
				"perkIds": []
			},
			{
				"uid": "empireCreditGenerator5",
				"endTime": 1490101417,
				"contractType": "Upgrade",
				"buildingId": "bld_24",
				"perkIds": []
			},
			{
				"uid": "troopHeroCrimsonGuard5",
				"endTime": 1490102941,
				"contractType": "Research",
				"buildingId": "bld_74",
				"perkIds": []
			},
			{
				"uid": "empireStarport5",
				"endTime": 1490115854,
				"contractType": "Upgrade",
				"buildingId": "bld_25",
				"perkIds": []
			}
		],
		"frozenBuildings": [],
		"isConnectedAccount": true,
		"pvpTargetServedTime": 1490330673,
		"intros": [],
		"lastMission": "chapter_10_bgh_e_6",
		"isRateIncentivized": false,
		"lastPaymentTime": 1485609857,
		"lastWarParticipationTime": 1487475869,
		"identitySwitchTimes": {},
		"openOffer": null,
		"unlockedPlanets": [],
		"relocationStarCount": -1,
		"holonetRewards": [
			"reward_securityDroid_e_ltr",
			"reward_desBiome_e_ltr",
			"reward_forBiome_e_ltr"
		],
		"playerObjectives": {
			"planet1": {
				"groupId": "obj_tatooine_series10_5",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_deploy_dewback_easy_e",
						"hq": 5,
						"count": 4,
						"target": 4,
						"state": "rewarded"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 5,
						"count": 14,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_destroy_materialsstorage_hard_e",
						"hq": 5,
						"count": 2,
						"target": 2,
						"state": "rewarded"
					}
				]
			},
			"planet8": {
				"groupId": "obj_forestOps_yavin_19",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_deploy_scout_easy_e",
						"hq": 5,
						"count": 0,
						"target": 12,
						"state": "active"
					},
					{
						"uid": "obj_donate_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_forestOps_deploy_dark_hard_e",
						"hq": 5,
						"count": 0,
						"target": 7,
						"state": "active"
					}
				]
			},
			"planet23": {
				"groupId": "obj_tfa_series10_5",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_destroy_tacticalcommand_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_train_technician_hard_e",
						"hq": 5,
						"count": 0,
						"target": 4,
						"state": "active"
					}
				]
			},
			"planet21": {
				"groupId": "obj_hoth_series10_5",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_deploy_type_hero_easy_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_deploy_atat_hard_e",
						"hq": 5,
						"count": 0,
						"target": 1,
						"state": "active"
					}
				]
			},
			"planet3": {
				"groupId": "obj_dandoran_series10_5",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_deploy_empirespeeder_easy_e",
						"hq": 5,
						"count": 0,
						"target": 2,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_deploy_storm_hard_e",
						"hq": 5,
						"count": 0,
						"target": 28,
						"state": "active"
					}
				]
			},
			"planet6": {
				"groupId": "obj_erkit_series10_5",
				"startTime": 1489996800,
				"graceTime": 1490079600,
				"endTime": 1490083200,
				"progress": [
					{
						"uid": "obj_train_dewback_easy_e",
						"hq": 5,
						"count": 0,
						"target": 4,
						"state": "active"
					},
					{
						"uid": "obj_receive_social_e",
						"hq": 5,
						"count": 0,
						"target": 15,
						"state": "active"
					},
					{
						"uid": "obj_train_tiebomber_hard_e",
						"hq": 5,
						"count": 0,
						"target": 3,
						"state": "active"
					}
				]
			}
		},
		"lastObjectiveCheckTime": 1490041346,
		"raids": {
			"planet1": {
				"planetId": "planet1",
				"raidId": "raid_Tatooine2",
				"raidPoolId": "raidpool_tat_hq5_e",
				"raidMissionId": "raid_tat_e_hq5_1",
				"retried": null,
				"startTime": 1490054400,
				"endTime": null,
				"lastRaidStars": 1,
				"lastRaidId": "raid_Tatooine1",
				"lastRaidPoolId": "raidpool_desBiome_hq5_e",
				"lastRaidMissionId": "raid_desBiome_e_hq5_3",
				"nextRaidStartTime": 1490097600
			}
		},
		"perksInfo": {
			"perks": {
				"activatedPerks": [
					{
						"perkId": "perk_CCan_TDrd4",
						"startTime": 1485580647,
						"endTime": 1485623847
					},
					{
						"perkId": "perk_CBar_CCan4",
						"startTime": 1485580649,
						"endTime": 1485623849
					},
					{
						"perkId": "perk_CBar_CFac4",
						"startTime": 1485580653,
						"endTime": 1485623853
					},
					{
						"perkId": "perk_CFac_CCan3",
						"startTime": 1485580655,
						"endTime": 1485623855
					}
				],
				"cooldowns": {
					"CCan_TDrd": 1485681447,
					"CBar_CCan": 1485681449,
					"CBar_CFac": 1485681453,
					"CFac_CCan": 1485681455
				},
				"hasActivatedFirstPerk": true
			}
		},
		"armoryInfo": {
			"firstCratePurchased": false
		},
		"activeArmory": {
			"equipment": [],
			"capacity": null
		},
		"shards": {
			"shrd_troopEmpireJohhar": 6,
			"shrd_troopShock": 2,
			"shrd_specialAttackTieAdvanced": 2
		},
		"troopDonationProgress": {
			"donationCount": 10,
			"lastTrackedDonationTime": 1490041454,
			"repDonationCooldownEndTime": 1490079600
		}
	},
	"scalars": {
		"attacksLost": 20,
		"attacksWon": 259,
		"defensesLost": 151,
		"defensesWon": 21,
		"attacksStarted": 281,
		"attacksCompleted": 279,
		"attackRating": 1761,
		"defenseRating": -929,
		"xp": 0,
		"NF1219": 1
	},
	"name": "BkeII"
};

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,